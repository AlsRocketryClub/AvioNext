
AvioNext.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c2d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  0801c5a8  0801c5a8  0002c5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cf70  0801cf70  0002cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cf78  0801cf78  0002cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cf7c  0801cf7c  0002cf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801cf80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000281c  240002c8  0801d248  000302c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  24002ae4  0801d248  00032ae4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00036048  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000642c  00000000  00000000  00066381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ba0  00000000  00000000  0006c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021d1  00000000  00000000  0006f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e930  00000000  00000000  00071521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b51e  00000000  00000000  000afe51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017efc1  00000000  00000000  000eb36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d390  00000000  00000000  0026a330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002776c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c590 	.word	0x0801c590

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801c590 	.word	0x0801c590

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HG2_Write_Register+0x48>)
 8000abc:	f007 fd44 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac0:	1df9      	adds	r1, r7, #7
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ac8:	f00e fada 	bl	800f080 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000acc:	1db9      	adds	r1, r7, #6
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ad4:	f00e fad4 	bl	800f080 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <HG2_Write_Register+0x48>)
 8000ae0:	f007 fd32 	bl	8008548 <HAL_GPIO_WritePin>

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	240006ac 	.word	0x240006ac

08000af4 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b10:	f007 fd1a 	bl	8008548 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b14:	1df9      	adds	r1, r7, #7
 8000b16:	2364      	movs	r3, #100	; 0x64
 8000b18:	2201      	movs	r2, #1
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b1c:	f00e fab0 	bl	800f080 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b20:	f107 010f 	add.w	r1, r7, #15
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	2201      	movs	r2, #1
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b2a:	f00e fca5 	bl	800f478 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b36:	f007 fd07 	bl	8008548 <HAL_GPIO_WritePin>

	return reg_value;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	240006ac 	.word	0x240006ac

08000b4c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b64:	f007 fcf0 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b68:	1df9      	adds	r1, r7, #7
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b70:	f00e fa86 	bl	800f080 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b74:	1db9      	adds	r1, r7, #6
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b7c:	f00e fa80 	bl	800f080 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b88:	f007 fcde 	bl	8008548 <HAL_GPIO_WritePin>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58020c00 	.word	0x58020c00
 8000b98:	240006ac 	.word	0x240006ac
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000ba6:	2022      	movs	r0, #34	; 0x22
 8000ba8:	f7ff ffa4 	bl	8000af4 <LG2_Read_Register>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bb0:	2023      	movs	r0, #35	; 0x23
 8000bb2:	f7ff ff9f 	bl	8000af4 <LG2_Read_Register>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c00 <LG2_Get_Gyro_X+0x60>
 8000bdc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c08 <LG2_Get_Gyro_X+0x68>
 8000be4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	ee07 3a90 	vmov	s15, r3
}
 8000bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40218000 	.word	0x40218000
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	408f4000 	.word	0x408f4000

08000c10 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c16:	2024      	movs	r0, #36	; 0x24
 8000c18:	f7ff ff6c 	bl	8000af4 <LG2_Read_Register>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f7ff ff67 	bl	8000af4 <LG2_Read_Register>
 8000c26:	4603      	mov	r3, r0
 8000c28:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000c38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c48:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c70 <LG2_Get_Gyro_Y+0x60>
 8000c4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c50:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c78 <LG2_Get_Gyro_Y+0x68>
 8000c54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5c:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
}
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	00000000 	.word	0x00000000
 8000c74:	40218000 	.word	0x40218000
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	408f4000 	.word	0x408f4000

08000c80 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c86:	2026      	movs	r0, #38	; 0x26
 8000c88:	f7ff ff34 	bl	8000af4 <LG2_Read_Register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c90:	2027      	movs	r0, #39	; 0x27
 8000c92:	f7ff ff2f 	bl	8000af4 <LG2_Read_Register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce0 <LG2_Get_Gyro_Z+0x60>
 8000cbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cc0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x68>
 8000cc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ccc:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	ee07 3a90 	vmov	s15, r3
}
 8000cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	40218000 	.word	0x40218000
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	408f4000 	.word	0x408f4000

08000cf0 <LG2_Get_Acc_X>:

float LG2_Get_Acc_X(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x28);
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f7ff fefc 	bl	8000af4 <LG2_Read_Register>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x29);
 8000d00:	2029      	movs	r0, #41	; 0x29
 8000d02:	f7ff fef7 	bl	8000af4 <LG2_Read_Register>
 8000d06:	4603      	mov	r3, r0
 8000d08:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000)- 0.134732 - 0.104937;
 8000d18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d28:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d60 <LG2_Get_Acc_X+0x70>
 8000d2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d30:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000d68 <LG2_Get_Acc_X+0x78>
 8000d34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d38:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d70 <LG2_Get_Acc_X+0x80>
 8000d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d40:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d78 <LG2_Get_Acc_X+0x88>
 8000d44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d4c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	ee07 3a90 	vmov	s15, r3
}
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	ba732df5 	.word	0xba732df5
 8000d64:	3fe3262c 	.word	0x3fe3262c
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	408f4000 	.word	0x408f4000
 8000d70:	eedcc20d 	.word	0xeedcc20d
 8000d74:	3fc13ee5 	.word	0x3fc13ee5
 8000d78:	b723ee1c 	.word	0xb723ee1c
 8000d7c:	3fbadd26 	.word	0x3fbadd26

08000d80 <LG2_Get_Acc_Y>:

float LG2_Get_Acc_Y(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2A);
 8000d86:	202a      	movs	r0, #42	; 0x2a
 8000d88:	f7ff feb4 	bl	8000af4 <LG2_Read_Register>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2B);
 8000d90:	202b      	movs	r0, #43	; 0x2b
 8000d92:	f7ff feaf 	bl	8000af4 <LG2_Read_Register>
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.384580;
 8000da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000de8 <LG2_Get_Acc_Y+0x68>
 8000dbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dc0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000df0 <LG2_Get_Acc_Y+0x70>
 8000dc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dc8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000df8 <LG2_Get_Acc_Y+0x78>
 8000dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd4:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	ee07 3a90 	vmov	s15, r3
}
 8000dde:	eeb0 0a67 	vmov.f32	s0, s15
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	ba732df5 	.word	0xba732df5
 8000dec:	3fe3262c 	.word	0x3fe3262c
 8000df0:	00000000 	.word	0x00000000
 8000df4:	408f4000 	.word	0x408f4000
 8000df8:	6eac8605 	.word	0x6eac8605
 8000dfc:	3fd89cf5 	.word	0x3fd89cf5

08000e00 <LG2_Get_Acc_Z>:

float LG2_Get_Acc_Z(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2C);
 8000e06:	202c      	movs	r0, #44	; 0x2c
 8000e08:	f7ff fe74 	bl	8000af4 <LG2_Read_Register>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2D);
 8000e10:	202d      	movs	r0, #45	; 0x2d
 8000e12:	f7ff fe6f 	bl	8000af4 <LG2_Read_Register>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.005841;
 8000e28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e68 <LG2_Get_Acc_Z+0x68>
 8000e3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e40:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000e70 <LG2_Get_Acc_Z+0x70>
 8000e44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e48:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e78 <LG2_Get_Acc_Z+0x78>
 8000e4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e54:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	ee07 3a90 	vmov	s15, r3
}
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	ba732df5 	.word	0xba732df5
 8000e6c:	3fe3262c 	.word	0x3fe3262c
 8000e70:	00000000 	.word	0x00000000
 8000e74:	408f4000 	.word	0x408f4000
 8000e78:	7f9d6f11 	.word	0x7f9d6f11
 8000e7c:	3f77ecbb 	.word	0x3f77ecbb

08000e80 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000e8c:	ed97 7a00 	vldr	s14, [r7]
 8000e90:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000f00 <setServo+0x80>
 8000e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f04 <setServo+0x84>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f08 <setServo+0x88>
 8000ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d81a      	bhi.n	8000ef0 <setServo+0x70>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <setServo+0x40>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000ed9 	.word	0x08000ed9
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ee9 	.word	0x08000ee9
		case 1:
			TIM4->CCR4 = timerVal;
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <setServo+0x8c>)
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000ed6:	e00c      	b.n	8000ef2 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <setServo+0x8c>)
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000ede:	e008      	b.n	8000ef2 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <setServo+0x8c>)
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000ee6:	e004      	b.n	8000ef2 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <setServo+0x8c>)
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000eee:	e000      	b.n	8000ef2 <setServo+0x72>

		default:
			break;
 8000ef0:	bf00      	nop
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	43340000 	.word	0x43340000
 8000f04:	457a0000 	.word	0x457a0000
 8000f08:	453b8000 	.word	0x453b8000
 8000f0c:	40000800 	.word	0x40000800

08000f10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoRA_Read_Register+0x48>)
 8000f22:	f007 fb11 	bl	8008548 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f26:	1df9      	adds	r1, r7, #7
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <LoRA_Read_Register+0x4c>)
 8000f2e:	f00e f8a7 	bl	800f080 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000f32:	f107 010f 	add.w	r1, r7, #15
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <LoRA_Read_Register+0x4c>)
 8000f3c:	f00e fa9c 	bl	800f478 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <LoRA_Read_Register+0x48>)
 8000f48:	f007 fafe 	bl	8008548 <HAL_GPIO_WritePin>

	return reg_value;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	58020000 	.word	0x58020000
 8000f5c:	24000734 	.word	0x24000734

08000f60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoRA_Write_Register+0x54>)
 8000f82:	f007 fae1 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f86:	1df9      	adds	r1, r7, #7
 8000f88:	2364      	movs	r3, #100	; 0x64
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <LoRA_Write_Register+0x58>)
 8000f8e:	f00e f877 	bl	800f080 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f92:	1db9      	adds	r1, r7, #6
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	2201      	movs	r2, #1
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <LoRA_Write_Register+0x58>)
 8000f9a:	f00e f871 	bl	800f080 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <LoRA_Write_Register+0x54>)
 8000fa6:	f007 facf 	bl	8008548 <HAL_GPIO_WritePin>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58020000 	.word	0x58020000
 8000fb8:	24000734 	.word	0x24000734

08000fbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ffcc 	bl	8000f60 <LoRA_Write_Register>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	17c8      	asrs	r0, r1, #31
 8000fd8:	460a      	mov	r2, r1
 8000fda:	4603      	mov	r3, r0
 8000fdc:	1355      	asrs	r5, r2, #13
 8000fde:	04d4      	lsls	r4, r2, #19
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <LoRA_set_frequency+0x78>)
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fba5 	bl	8000738 <__aeabi_uldivmod>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	0c02      	lsrs	r2, r0, #16
 8001004:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001008:	0c0b      	lsrs	r3, r1, #16
 800100a:	b2d3      	uxtb	r3, r2
 800100c:	4619      	mov	r1, r3
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff ffa6 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	0a02      	lsrs	r2, r0, #8
 8001022:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001026:	0a0b      	lsrs	r3, r1, #8
 8001028:	b2d3      	uxtb	r3, r2
 800102a:	4619      	mov	r1, r3
 800102c:	2007      	movs	r0, #7
 800102e:	f7ff ff97 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	4619      	mov	r1, r3
 8001036:	2008      	movs	r0, #8
 8001038:	f7ff ff92 	bl	8000f60 <LoRA_Write_Register>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	01e84800 	.word	0x01e84800

08001048 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8001052:	231b      	movs	r3, #27
 8001054:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b78      	cmp	r3, #120	; 0x78
 800105a:	d809      	bhi.n	8001070 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3b2d      	subs	r3, #45	; 0x2d
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <LoRA_setOCP+0x60>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1052      	asrs	r2, r2, #1
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e00b      	b.n	8001088 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2bf0      	cmp	r3, #240	; 0xf0
 8001074:	d808      	bhi.n	8001088 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	331e      	adds	r3, #30
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoRA_setOCP+0x60>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	200b      	movs	r0, #11
 800109a:	f7ff ff61 	bl	8000f60 <LoRA_Write_Register>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	66666667 	.word	0x66666667

080010ac <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b11      	cmp	r3, #17
 80010b8:	dd0f      	ble.n	80010da <LoRA_setTxPower+0x2e>
      if (level > 20) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b14      	cmp	r3, #20
 80010be:	dd01      	ble.n	80010c4 <LoRA_setTxPower+0x18>
        level = 20;
 80010c0:	2314      	movs	r3, #20
 80010c2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b03      	subs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80010ca:	2187      	movs	r1, #135	; 0x87
 80010cc:	204d      	movs	r0, #77	; 0x4d
 80010ce:	f7ff ff47 	bl	8000f60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80010d2:	208c      	movs	r0, #140	; 0x8c
 80010d4:	f7ff ffb8 	bl	8001048 <LoRA_setOCP>
 80010d8:	e00b      	b.n	80010f2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	dc01      	bgt.n	80010e4 <LoRA_setTxPower+0x38>
        level = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010e4:	2184      	movs	r1, #132	; 0x84
 80010e6:	204d      	movs	r0, #77	; 0x4d
 80010e8:	f7ff ff3a 	bl	8000f60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f7ff ffab 	bl	8001048 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3b02      	subs	r3, #2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	2009      	movs	r0, #9
 8001108:	f7ff ff2a 	bl	8000f60 <LoRA_Write_Register>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <LoRA_begin>:

void LoRA_explicit_header_mode(){
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2101      	movs	r1, #1
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <LoRA_begin+0x70>)
 8001122:	f007 fa11 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <LoRA_begin+0x74>)
 800112e:	f007 fa0b 	bl	8008548 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001132:	2042      	movs	r0, #66	; 0x42
 8001134:	f7ff feec 	bl	8000f10 <LoRA_Read_Register>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]


	LoRA_sleep();
 800113c:	f7ff ff3e 	bl	8000fbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001140:	4812      	ldr	r0, [pc, #72]	; (800118c <LoRA_begin+0x78>)
 8001142:	f7ff ff43 	bl	8000fcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001146:	2100      	movs	r1, #0
 8001148:	200f      	movs	r0, #15
 800114a:	f7ff ff09 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff ff05 	bl	8000f60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001156:	200c      	movs	r0, #12
 8001158:	f7ff feda 	bl	8000f10 <LoRA_Read_Register>
 800115c:	4603      	mov	r3, r0
 800115e:	f043 0303 	orr.w	r3, r3, #3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	200c      	movs	r0, #12
 8001168:	f7ff fefa 	bl	8000f60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 800116c:	2104      	movs	r1, #4
 800116e:	2026      	movs	r0, #38	; 0x26
 8001170:	f7ff fef6 	bl	8000f60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001174:	2011      	movs	r0, #17
 8001176:	f7ff ff99 	bl	80010ac <LoRA_setTxPower>

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58020000 	.word	0x58020000
 800118c:	33bca100 	.word	0x33bca100

08001190 <multiplyQuat>:

double x[4];
double y[4];
double z[4];

void multiplyQuat(double r[4], double s[4], double*  result) {
 8001190:	b480      	push	{r7}
 8001192:	b08f      	sub	sp, #60	; 0x3c
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  double temp[4];
  temp[0] = r[0] * s[0] - r[1] * s[1] - r[2] * s[2] - r[3] * s[3];
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	ed93 6b00 	vldr	d6, [r3]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	ed93 7b00 	vldr	d7, [r3]
 80011a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3308      	adds	r3, #8
 80011b0:	ed93 5b00 	vldr	d5, [r3]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3308      	adds	r3, #8
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011c0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3310      	adds	r3, #16
 80011c8:	ed93 5b00 	vldr	d5, [r3]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3310      	adds	r3, #16
 80011d0:	ed93 7b00 	vldr	d7, [r3]
 80011d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3318      	adds	r3, #24
 80011e0:	ed93 5b00 	vldr	d5, [r3]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3318      	adds	r3, #24
 80011e8:	ed93 7b00 	vldr	d7, [r3]
 80011ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011f4:	ed87 7b04 	vstr	d7, [r7, #16]
  temp[1] = r[0] * s[1] + r[1] * s[0] - r[2] * s[3] + r[3] * s[2];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	ed93 6b00 	vldr	d6, [r3]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3308      	adds	r3, #8
 8001202:	ed93 7b00 	vldr	d7, [r3]
 8001206:	ee26 6b07 	vmul.f64	d6, d6, d7
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3308      	adds	r3, #8
 800120e:	ed93 5b00 	vldr	d5, [r3]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	ee25 7b07 	vmul.f64	d7, d5, d7
 800121c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3310      	adds	r3, #16
 8001224:	ed93 5b00 	vldr	d5, [r3]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3318      	adds	r3, #24
 800122c:	ed93 7b00 	vldr	d7, [r3]
 8001230:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001234:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3318      	adds	r3, #24
 800123c:	ed93 5b00 	vldr	d5, [r3]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3310      	adds	r3, #16
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800124c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001250:	ed87 7b06 	vstr	d7, [r7, #24]
  temp[2] = r[0] * s[2] + r[1] * s[3] + r[2] * s[0] - r[3] * s[1];
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	ed93 6b00 	vldr	d6, [r3]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3310      	adds	r3, #16
 800125e:	ed93 7b00 	vldr	d7, [r3]
 8001262:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3308      	adds	r3, #8
 800126a:	ed93 5b00 	vldr	d5, [r3]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3318      	adds	r3, #24
 8001272:	ed93 7b00 	vldr	d7, [r3]
 8001276:	ee25 7b07 	vmul.f64	d7, d5, d7
 800127a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3310      	adds	r3, #16
 8001282:	ed93 5b00 	vldr	d5, [r3]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	ed93 7b00 	vldr	d7, [r3]
 800128c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001290:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3318      	adds	r3, #24
 8001298:	ed93 5b00 	vldr	d5, [r3]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3308      	adds	r3, #8
 80012a0:	ed93 7b00 	vldr	d7, [r3]
 80012a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012ac:	ed87 7b08 	vstr	d7, [r7, #32]
  temp[3] = r[0] * s[3] - r[1] * s[2] + r[2] * s[1] + r[3] * s[0];
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	ed93 6b00 	vldr	d6, [r3]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3318      	adds	r3, #24
 80012ba:	ed93 7b00 	vldr	d7, [r3]
 80012be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3308      	adds	r3, #8
 80012c6:	ed93 5b00 	vldr	d5, [r3]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3310      	adds	r3, #16
 80012ce:	ed93 7b00 	vldr	d7, [r3]
 80012d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3310      	adds	r3, #16
 80012de:	ed93 5b00 	vldr	d5, [r3]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3308      	adds	r3, #8
 80012e6:	ed93 7b00 	vldr	d7, [r3]
 80012ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3318      	adds	r3, #24
 80012f6:	ed93 5b00 	vldr	d5, [r3]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	ed93 7b00 	vldr	d7, [r3]
 8001300:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001304:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001308:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

  for(int i = 0; i < 4; i++){
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
 8001310:	e00f      	b.n	8001332 <multiplyQuat+0x1a2>
	  result[i] = temp[i];
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	3338      	adds	r3, #56	; 0x38
 8001320:	443b      	add	r3, r7
 8001322:	3b28      	subs	r3, #40	; 0x28
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 4; i++){
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3301      	adds	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	2b03      	cmp	r3, #3
 8001336:	ddec      	ble.n	8001312 <multiplyQuat+0x182>
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	373c      	adds	r7, #60	; 0x3c
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <dotProduct>:

double dotProduct(double a[4], double b[4]){
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	return (a[1] * b[1] + a[2] * b[2] + a[3] * b[3]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3308      	adds	r3, #8
 8001354:	ed93 6b00 	vldr	d6, [r3]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3308      	adds	r3, #8
 800135c:	ed93 7b00 	vldr	d7, [r3]
 8001360:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3310      	adds	r3, #16
 8001368:	ed93 5b00 	vldr	d5, [r3]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3310      	adds	r3, #16
 8001370:	ed93 7b00 	vldr	d7, [r3]
 8001374:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3318      	adds	r3, #24
 8001380:	ed93 5b00 	vldr	d5, [r3]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3318      	adds	r3, #24
 8001388:	ed93 7b00 	vldr	d7, [r3]
 800138c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001390:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8001394:	eeb0 0b47 	vmov.f64	d0, d7
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <magnitude>:

double magnitude(double vector[4]){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return sqrt(vector[0]*vector[0]+vector[1]*vector[1]+vector[2]*vector[2]+vector[3]*vector[3]);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	ed93 6b00 	vldr	d6, [r3]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 7b00 	vldr	d7, [r3]
 80013b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3308      	adds	r3, #8
 80013be:	ed93 5b00 	vldr	d5, [r3]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3308      	adds	r3, #8
 80013c6:	ed93 7b00 	vldr	d7, [r3]
 80013ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3310      	adds	r3, #16
 80013d6:	ed93 5b00 	vldr	d5, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3310      	adds	r3, #16
 80013de:	ed93 7b00 	vldr	d7, [r3]
 80013e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3318      	adds	r3, #24
 80013ee:	ed93 5b00 	vldr	d5, [r3]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3318      	adds	r3, #24
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001402:	eeb0 0b47 	vmov.f64	d0, d7
 8001406:	f01a f937 	bl	801b678 <sqrt>
 800140a:	eeb0 7b40 	vmov.f64	d7, d0
}
 800140e:	eeb0 0b47 	vmov.f64	d0, d7
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800141c:	ed2d 8b02 	vpush	{d8}
 8001420:	f6ad 5db4 	subw	sp, sp, #3508	; 0xdb4
 8001424:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001426:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800142a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <main+0x160>)
 8001430:	461c      	mov	r4, r3
 8001432:	4615      	mov	r5, r2
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800143c:	c403      	stmia	r4!, {r0, r1}
 800143e:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f003 f954 	bl	80046ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f001 f900 	bl	8002648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001448:	f001 f97a 	bl	8002740 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f001 ff26 	bl	800329c <MX_GPIO_Init>
  MX_DMA_Init();
 8001450:	f001 fec4 	bl	80031dc <MX_DMA_Init>
  MX_SPI3_Init();
 8001454:	f001 fbfa 	bl	8002c4c <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001458:	f001 fa8a 	bl	8002970 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 800145c:	f001 fe72 	bl	8003144 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001460:	f001 f9a0 	bl	80027a4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001464:	f001 fd04 	bl	8002e70 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001468:	f001 fa14 	bl	8002894 <MX_ADC3_Init>
  MX_SPI2_Init();
 800146c:	f001 fb98 	bl	8002ba0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001470:	f001 fae2 	bl	8002a38 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001474:	f001 fc40 	bl	8002cf8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001478:	f001 fd76 	bl	8002f68 <MX_TIM5_Init>
  MX_TIM3_Init();
 800147c:	f001 fc94 	bl	8002da8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001480:	f015 f8e4 	bl	801664c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001484:	f001 fb36 	bl	8002af4 <MX_SPI1_Init>
  MX_UART4_Init();
 8001488:	f001 fe10 	bl	80030ac <MX_UART4_Init>
  MX_FATFS_Init();
 800148c:	f012 fe72 	bl	8014174 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001490:	f001 fb12 	bl	8002ab8 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001494:	f001 fdc2 	bl	800301c <MX_TIM13_Init>
  MX_TIM14_Init();
 8001498:	f001 fde4 	bl	8003064 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800149c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a0:	f003 f9b6 	bl	8004810 <HAL_Delay>
	const int MAX = 50;
 80014a4:	2332      	movs	r3, #50	; 0x32
 80014a6:	f8c7 3d5c 	str.w	r3, [r7, #3420]	; 0xd5c
	const double SPEED = 2.0/2000;
 80014aa:	a331      	add	r3, pc, #196	; (adr r3, 8001570 <main+0x158>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f507 6155 	add.w	r1, r7, #3408	; 0xd50
 80014b4:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f607 5148 	addw	r1, r7, #3400	; 0xd48
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <main+0x164>)
 80014ce:	f507 6154 	add.w	r1, r7, #3392	; 0xd40
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014de:	f607 5138 	addw	r1, r7, #3384	; 0xd38
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]




	HAL_Delay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ea:	f003 f991 	bl	8004810 <HAL_Delay>
	HG2_Write_Register(0x1B, 0b11011000);
 80014ee:	21d8      	movs	r1, #216	; 0xd8
 80014f0:	201b      	movs	r0, #27
 80014f2:	f7ff fad7 	bl	8000aa4 <HG2_Write_Register>
	HG2_Write_Register(0x1C, 0b10111111);
 80014f6:	21bf      	movs	r1, #191	; 0xbf
 80014f8:	201c      	movs	r0, #28
 80014fa:	f7ff fad3 	bl	8000aa4 <HG2_Write_Register>
	HAL_Delay(200);
 80014fe:	20c8      	movs	r0, #200	; 0xc8
 8001500:	f003 f986 	bl	8004810 <HAL_Delay>


	LG2_Write_Register(0x13, 0b00001110); //disables I2C - CTRL4_C
 8001504:	210e      	movs	r1, #14
 8001506:	2013      	movs	r0, #19
 8001508:	f7ff fb20 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01100000); //Gyroscope setup - CTRL2_G
 800150c:	2160      	movs	r1, #96	; 0x60
 800150e:	2011      	movs	r0, #17
 8001510:	f7ff fb1c 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x10, 0b01100000); //Accelerometer setup - CTRL1_XL
 8001514:	2160      	movs	r1, #96	; 0x60
 8001516:	2010      	movs	r0, #16
 8001518:	f7ff fb18 	bl	8000b4c <LG2_Write_Register>


	float rotZ = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f607 5234 	addw	r2, r7, #3380	; 0xd34
 8001524:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3d30 	str.w	r3, [r7, #3376]	; 0xd30

	double calOmegaX = 0;
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	f507 6158 	add.w	r1, r7, #3456	; 0xd80
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaY = 0;
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f607 5178 	addw	r1, r7, #3448	; 0xd78
 8001548:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaZ = 0;
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f507 6157 	add.w	r1, r7, #3440	; 0xd70
 8001558:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(2000);
 800155c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001560:	f003 f956 	bl	8004810 <HAL_Delay>
	int GyroCalibLoop = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3d8c 	str.w	r3, [r7, #3468]	; 0xd8c
	while(GyroCalibLoop < 500){
 800156a:	e041      	b.n	80015f0 <main+0x1d8>
 800156c:	f3af 8000 	nop.w
 8001570:	d2f1a9fc 	.word	0xd2f1a9fc
 8001574:	3f50624d 	.word	0x3f50624d
 8001578:	0801c628 	.word	0x0801c628
 800157c:	3ff00000 	.word	0x3ff00000
		if(LG2_Read_Register(0x1E) | (1 << 1)){
 8001580:	201e      	movs	r0, #30
 8001582:	f7ff fab7 	bl	8000af4 <LG2_Read_Register>
		calOmegaX += LG2_Get_Gyro_X();
 8001586:	f7ff fb0b 	bl	8000ba0 <LG2_Get_Gyro_X>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001592:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8001596:	ed93 6b00 	vldr	d6, [r3]
 800159a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800159e:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80015a2:	ed83 7b00 	vstr	d7, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80015a6:	f7ff fb33 	bl	8000c10 <LG2_Get_Gyro_Y>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 80015b6:	ed93 6b00 	vldr	d6, [r3]
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 80015c2:	ed83 7b00 	vstr	d7, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015c6:	f7ff fb5b 	bl	8000c80 <LG2_Get_Gyro_Z>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80015d6:	ed93 6b00 	vldr	d6, [r3]
 80015da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015de:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80015e2:	ed83 7b00 	vstr	d7, [r3]
		GyroCalibLoop++;
 80015e6:	f8d7 3d8c 	ldr.w	r3, [r7, #3468]	; 0xd8c
 80015ea:	3301      	adds	r3, #1
 80015ec:	f8c7 3d8c 	str.w	r3, [r7, #3468]	; 0xd8c
	while(GyroCalibLoop < 500){
 80015f0:	f8d7 3d8c 	ldr.w	r3, [r7, #3468]	; 0xd8c
 80015f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f8:	dbc2      	blt.n	8001580 <main+0x168>

		}

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80015fa:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80015fe:	ed93 6b00 	vldr	d6, [r3]
 8001602:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8001928 <main+0x510>
 8001606:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800160a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800160e:	ed83 7b00 	vstr	d7, [r3]
	calOmegaY /= 500;
 8001612:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 8001616:	ed93 6b00 	vldr	d6, [r3]
 800161a:	ed9f 5bc3 	vldr	d5, [pc, #780]	; 8001928 <main+0x510>
 800161e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001622:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 8001626:	ed83 7b00 	vstr	d7, [r3]
	calOmegaZ /= 500;
 800162a:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800162e:	ed93 6b00 	vldr	d6, [r3]
 8001632:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 8001928 <main+0x510>
 8001636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800163a:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800163e:	ed83 7b00 	vstr	d7, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2101      	movs	r1, #1
 8001646:	48ba      	ldr	r0, [pc, #744]	; (8001930 <main+0x518>)
 8001648:	f006 ff7e 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800164c:	20c8      	movs	r0, #200	; 0xc8
 800164e:	f003 f8df 	bl	8004810 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2101      	movs	r1, #1
 8001656:	48b6      	ldr	r0, [pc, #728]	; (8001930 <main+0x518>)
 8001658:	f006 ff76 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800165c:	20c8      	movs	r0, #200	; 0xc8
 800165e:	f003 f8d7 	bl	8004810 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	48b2      	ldr	r0, [pc, #712]	; (8001930 <main+0x518>)
 8001668:	f006 ff6e 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800166c:	20c8      	movs	r0, #200	; 0xc8
 800166e:	f003 f8cf 	bl	8004810 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	2104      	movs	r1, #4
 8001676:	48af      	ldr	r0, [pc, #700]	; (8001934 <main+0x51c>)
 8001678:	f006 ff66 	bl	8008548 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	48ac      	ldr	r0, [pc, #688]	; (8001934 <main+0x51c>)
 8001682:	f006 ff61 	bl	8008548 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001686:	2100      	movs	r1, #0
 8001688:	48ab      	ldr	r0, [pc, #684]	; (8001938 <main+0x520>)
 800168a:	f00e fa9b 	bl	800fbc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800168e:	2104      	movs	r1, #4
 8001690:	48a9      	ldr	r0, [pc, #676]	; (8001938 <main+0x520>)
 8001692:	f00e fa97 	bl	800fbc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001696:	2108      	movs	r1, #8
 8001698:	48a7      	ldr	r0, [pc, #668]	; (8001938 <main+0x520>)
 800169a:	f00e fa93 	bl	800fbc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800169e:	210c      	movs	r1, #12
 80016a0:	48a5      	ldr	r0, [pc, #660]	; (8001938 <main+0x520>)
 80016a2:	f00e fa8f 	bl	800fbc4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80016a6:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800193c <main+0x524>
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fbe8 	bl	8000e80 <setServo>
    setServo(2, 180);
 80016b0:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8001940 <main+0x528>
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fbe3 	bl	8000e80 <setServo>
    setServo(3, 0);
 80016ba:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8001944 <main+0x52c>
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff fbde 	bl	8000e80 <setServo>
    setServo(4, 45);
 80016c4:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8001948 <main+0x530>
 80016c8:	2004      	movs	r0, #4
 80016ca:	f7ff fbd9 	bl	8000e80 <setServo>

    LoRA_begin(868000000);
 80016ce:	489f      	ldr	r0, [pc, #636]	; (800194c <main+0x534>)
 80016d0:	f7ff fd20 	bl	8001114 <LoRA_begin>


	int connected = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
	long last_packet = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
	int ARMED = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3d24 	str.w	r3, [r7, #3364]	; 0xd24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80016e6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80016ea:	f5a3 745c 	sub.w	r4, r3, #880	; 0x370
 80016ee:	4a98      	ldr	r2, [pc, #608]	; (8001950 <main+0x538>)
 80016f0:	4623      	mov	r3, r4
 80016f2:	6810      	ldr	r0, [r2, #0]
 80016f4:	6851      	ldr	r1, [r2, #4]
 80016f6:	c303      	stmia	r3!, {r0, r1}
 80016f8:	7a12      	ldrb	r2, [r2, #8]
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	f104 0309 	add.w	r3, r4, #9
 8001700:	2229      	movs	r2, #41	; 0x29
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f016 fc1a 	bl	8017f3e <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 3d20 	str.w	r3, [r7, #3360]	; 0xd20
  int packetId;
  char communication_state[50] = "RECIEVING";
 8001710:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001714:	f5a3 6495 	sub.w	r4, r3, #1192	; 0x4a8
 8001718:	4a8e      	ldr	r2, [pc, #568]	; (8001954 <main+0x53c>)
 800171a:	4623      	mov	r3, r4
 800171c:	6810      	ldr	r0, [r2, #0]
 800171e:	6851      	ldr	r1, [r2, #4]
 8001720:	c303      	stmia	r3!, {r0, r1}
 8001722:	8912      	ldrh	r2, [r2, #8]
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	f104 030a 	add.w	r3, r4, #10
 800172a:	2228      	movs	r2, #40	; 0x28
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f016 fc05 	bl	8017f3e <memset>
  int isReceived = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3d1c 	str.w	r3, [r7, #3356]	; 0xd1c

  double cube[12][2][3] = {
 800173a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800173e:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <main+0x540>)
 8001744:	4618      	mov	r0, r3
 8001746:	4611      	mov	r1, r2
 8001748:	f44f 7310 	mov.w	r3, #576	; 0x240
 800174c:	461a      	mov	r2, r3
 800174e:	f016 fc76 	bl	801803e <memcpy>
  {{2,-1,-4},{-2,-1,-4}},
  {{-2,-1,4},{2,-1,4}},
  {{-2,-1,4},{-2,-1,-4}}
};

 x[0] = 0;
 8001752:	4982      	ldr	r1, [pc, #520]	; (800195c <main+0x544>)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9c1 2300 	strd	r2, r3, [r1]
 x[1] = 1;
 8001760:	497e      	ldr	r1, [pc, #504]	; (800195c <main+0x544>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <main+0x548>)
 8001768:	e9c1 2302 	strd	r2, r3, [r1, #8]
 x[2] = 0;
 800176c:	497b      	ldr	r1, [pc, #492]	; (800195c <main+0x544>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9c1 2304 	strd	r2, r3, [r1, #16]
 x[3] = 0;
 800177a:	4978      	ldr	r1, [pc, #480]	; (800195c <main+0x544>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9c1 2306 	strd	r2, r3, [r1, #24]

 y[0] = 0;
 8001788:	4976      	ldr	r1, [pc, #472]	; (8001964 <main+0x54c>)
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9c1 2300 	strd	r2, r3, [r1]
 y[1] = 0;
 8001796:	4973      	ldr	r1, [pc, #460]	; (8001964 <main+0x54c>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 y[2] = 1;
 80017a4:	496f      	ldr	r1, [pc, #444]	; (8001964 <main+0x54c>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <main+0x548>)
 80017ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 y[3] = 0;
 80017b0:	496c      	ldr	r1, [pc, #432]	; (8001964 <main+0x54c>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

 z[0] = 0;
 80017be:	496a      	ldr	r1, [pc, #424]	; (8001968 <main+0x550>)
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9c1 2300 	strd	r2, r3, [r1]
 z[1] = 0;
 80017cc:	4966      	ldr	r1, [pc, #408]	; (8001968 <main+0x550>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 z[2] = 0;
 80017da:	4963      	ldr	r1, [pc, #396]	; (8001968 <main+0x550>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 z[3] = 1;
 80017e8:	495f      	ldr	r1, [pc, #380]	; (8001968 <main+0x550>)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <main+0x548>)
 80017f0:	e9c1 2306 	strd	r2, r3, [r1, #24]

  double rotQuaternion[4];

  HAL_TIM_Base_Start(&htim13);
 80017f4:	485d      	ldr	r0, [pc, #372]	; (800196c <main+0x554>)
 80017f6:	f00e f90f 	bl	800fa18 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80017fa:	485d      	ldr	r0, [pc, #372]	; (8001970 <main+0x558>)
 80017fc:	f00e f90c 	bl	800fa18 <HAL_TIM_Base_Start>

  TIM13->CNT = 0;
 8001800:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <main+0x55c>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  double elapsedTime = 0;
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f507 6151 	add.w	r1, r7, #3344	; 0xd10
 8001812:	e9c1 2300 	strd	r2, r3, [r1]
  int counter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3d90 	str.w	r3, [r7, #3472]	; 0xd90

  double VelocityExt[3];
  double PosExt[3];
  double zeroAcc[4];
  int AccCalibLoop = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
	char data_gyro[500];
  double gyroZ = LG2_Get_Acc_Z();
 8001822:	f7ff faed 	bl	8000e00 <LG2_Get_Acc_Z>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
 800182a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800182e:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001832:	ed83 7b00 	vstr	d7, [r3]
  sprintf( data_gyro, "Hello %f\n", gyroZ);
 8001836:	f207 404c 	addw	r0, r7, #1100	; 0x44c
 800183a:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	494d      	ldr	r1, [pc, #308]	; (8001978 <main+0x560>)
 8001844:	f016 fb18 	bl	8017e78 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001848:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdaf 	bl	80003b0 <strlen>
 8001852:	4602      	mov	r2, r0
 8001854:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f014 ffb6 	bl	80167cc <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001864:	f002 ffd4 	bl	8004810 <HAL_Delay>
  double maxZ = LG2_Get_Acc_Z();
 8001868:	f7ff faca 	bl	8000e00 <LG2_Get_Acc_Z>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001874:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8001878:	ed83 7b00 	vstr	d7, [r3]
  double minZ = maxZ;
 800187c:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f607 41f8 	addw	r1, r7, #3320	; 0xcf8
 8001888:	e9c1 2300 	strd	r2, r3, [r1]

  double maxY = LG2_Get_Acc_Y();
 800188c:	f7ff fa78 	bl	8000d80 <LG2_Get_Acc_Y>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001898:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800189c:	ed83 7b00 	vstr	d7, [r3]
  double minY = maxY;
 80018a0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f607 41e8 	addw	r1, r7, #3304	; 0xce8
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]

  double maxX = LG2_Get_Acc_X();
 80018b0:	f7ff fa1e 	bl	8000cf0 <LG2_Get_Acc_X>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018bc:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80018c0:	ed83 7b00 	vstr	d7, [r3]
  double minX = maxX;
 80018c4:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f607 41d8 	addw	r1, r7, #3288	; 0xcd8
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]


  zeroAcc[0] = 0;
 80018d4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80018d8:	f5a3 61eb 	sub.w	r1, r3, #1880	; 0x758
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
  zeroAcc[1] = 0;
 80018e8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80018ec:	f5a3 61eb 	sub.w	r1, r3, #1880	; 0x758
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  zeroAcc[2] = 0;
 80018fc:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001900:	f5a3 61eb 	sub.w	r1, r3, #1880	; 0x758
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  zeroAcc[3] = 0;
 8001910:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001914:	f5a3 61eb 	sub.w	r1, r3, #1880	; 0x758
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9c1 2306 	strd	r2, r3, [r1, #24]
  while(AccCalibLoop < 50){
 8001924:	e073      	b.n	8001a0e <main+0x5f6>
 8001926:	bf00      	nop
 8001928:	00000000 	.word	0x00000000
 800192c:	407f4000 	.word	0x407f4000
 8001930:	58020c00 	.word	0x58020c00
 8001934:	58021800 	.word	0x58021800
 8001938:	24000854 	.word	0x24000854
 800193c:	42b40000 	.word	0x42b40000
 8001940:	43340000 	.word	0x43340000
 8001944:	00000000 	.word	0x00000000
 8001948:	42340000 	.word	0x42340000
 800194c:	33bca100 	.word	0x33bca100
 8001950:	0801c5a8 	.word	0x0801c5a8
 8001954:	0801c644 	.word	0x0801c644
 8001958:	0801c650 	.word	0x0801c650
 800195c:	24000d08 	.word	0x24000d08
 8001960:	3ff00000 	.word	0x3ff00000
 8001964:	24000d28 	.word	0x24000d28
 8001968:	24000d48 	.word	0x24000d48
 800196c:	240008ec 	.word	0x240008ec
 8001970:	24000938 	.word	0x24000938
 8001974:	40001c00 	.word	0x40001c00
 8001978:	0801c5bc 	.word	0x0801c5bc
	  if(LG2_Read_Register(0x1E) & 1){
 800197c:	201e      	movs	r0, #30
 800197e:	f7ff f8b9 	bl	8000af4 <LG2_Read_Register>
 8001982:	4603      	mov	r3, r0
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d040      	beq.n	8001a0e <main+0x5f6>
		  zeroAcc[1] += LG2_Get_Acc_X();
 800198c:	f7ff f9b0 	bl	8000cf0 <LG2_Get_Acc_X>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001998:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800199c:	ed93 6b02 	vldr	d6, [r3, #8]
 80019a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019a8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80019ac:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80019b0:	ed83 7b02 	vstr	d7, [r3, #8]
		  zeroAcc[2] += LG2_Get_Acc_Y();
 80019b4:	f7ff f9e4 	bl	8000d80 <LG2_Get_Acc_Y>
 80019b8:	eef0 7a40 	vmov.f32	s15, s0
 80019bc:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80019c0:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80019c4:	ed93 6b04 	vldr	d6, [r3, #16]
 80019c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019d0:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80019d4:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80019d8:	ed83 7b04 	vstr	d7, [r3, #16]
		  zeroAcc[3] += LG2_Get_Acc_Z();
 80019dc:	f7ff fa10 	bl	8000e00 <LG2_Get_Acc_Z>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80019e8:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80019ec:	ed93 6b06 	vldr	d6, [r3, #24]
 80019f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019f8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80019fc:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a00:	ed83 7b06 	vstr	d7, [r3, #24]
		  AccCalibLoop++;
 8001a04:	f8d7 3d94 	ldr.w	r3, [r7, #3476]	; 0xd94
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
  while(AccCalibLoop < 50){
 8001a0e:	f8d7 3d94 	ldr.w	r3, [r7, #3476]	; 0xd94
 8001a12:	2b31      	cmp	r3, #49	; 0x31
 8001a14:	ddb2      	ble.n	800197c <main+0x564>
	  }
  }
  zeroAcc[1] = zeroAcc[1] / 50;
 8001a16:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a1a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a1e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a22:	ed9f 5be7 	vldr	d5, [pc, #924]	; 8001dc0 <main+0x9a8>
 8001a26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a2e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a32:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / 50;
 8001a36:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a3a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a3e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001a42:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001dc0 <main+0x9a8>
 8001a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a4a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a4e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a52:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / 50;
 8001a56:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a5a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a5e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001a62:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8001dc0 <main+0x9a8>
 8001a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a6e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001a72:	ed83 7b06 	vstr	d7, [r3, #24]


  double rotVector[4];
  rotVector[0] = 0;
 8001a76:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a7a:	f5a3 6117 	sub.w	r1, r3, #2416	; 0x970
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9c1 2300 	strd	r2, r3, [r1]
  rotVector[3] = 0;
 8001a8a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001a8e:	f5a3 6117 	sub.w	r1, r3, #2416	; 0x970
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9c1 2306 	strd	r2, r3, [r1, #24]

  rotVector[1] = zeroAcc[2];
 8001a9e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001aa2:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aaa:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8001aae:	f5a1 6117 	sub.w	r1, r1, #2416	; 0x970
 8001ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rotVector[2] = -zeroAcc[1];
 8001ab6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001aba:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001abe:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ac2:	eeb1 7b47 	vneg.f64	d7, d7
 8001ac6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001aca:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001ace:	ed83 7b04 	vstr	d7, [r3, #16]
  double rotVectMag =  magnitude(rotVector);
 8001ad2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc63 	bl	80013a2 <magnitude>
 8001adc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8001ae0:	ed83 0b00 	vstr	d0, [r3]
  rotVector[1] = rotVector[1] / rotVectMag;
 8001ae4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001ae8:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001aec:	ed93 5b02 	vldr	d5, [r3, #8]
 8001af0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8001af4:	ed93 6b00 	vldr	d6, [r3]
 8001af8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001afc:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b00:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001b04:	ed83 7b02 	vstr	d7, [r3, #8]
  rotVector[2] = rotVector[2] / rotVectMag;
 8001b08:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b0c:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001b10:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b14:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8001b18:	ed93 6b00 	vldr	d6, [r3]
 8001b1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b20:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b24:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001b28:	ed83 7b04 	vstr	d7, [r3, #16]

  double zeroAccMag = magnitude(zeroAcc);
 8001b2c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fc36 	bl	80013a2 <magnitude>
 8001b36:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8001b3a:	ed83 0b00 	vstr	d0, [r3]
  zeroAcc[1] = zeroAcc[1] / zeroAccMag;
 8001b3e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b42:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001b46:	ed93 5b02 	vldr	d5, [r3, #8]
 8001b4a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8001b4e:	ed93 6b00 	vldr	d6, [r3]
 8001b52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b56:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b5a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001b5e:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / zeroAccMag;
 8001b62:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b66:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001b6a:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b6e:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8001b72:	ed93 6b00 	vldr	d6, [r3]
 8001b76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b7a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b7e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001b82:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / zeroAccMag;
 8001b86:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001b8a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001b8e:	ed93 5b06 	vldr	d5, [r3, #24]
 8001b92:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8001b96:	ed93 6b00 	vldr	d6, [r3]
 8001b9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b9e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001ba2:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001ba6:	ed83 7b06 	vstr	d7, [r3, #24]

  double rotAngle =acos(dotProduct(zeroAcc, z));
 8001baa:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8001bae:	4986      	ldr	r1, [pc, #536]	; (8001dc8 <main+0x9b0>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fbc8 	bl	8001346 <dotProduct>
 8001bb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001bba:	eeb0 0b47 	vmov.f64	d0, d7
 8001bbe:	f019 fd2f 	bl	801b620 <acos>
 8001bc2:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001bc6:	ed83 0b00 	vstr	d0, [r3]

  rotQuaternion[0] = cos(rotAngle/2);
 8001bca:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001bce:	ed93 7b00 	vldr	d7, [r3]
 8001bd2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bd6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001bda:	eeb0 0b46 	vmov.f64	d0, d6
 8001bde:	f019 fd6b 	bl	801b6b8 <cos>
 8001be2:	eeb0 7b40 	vmov.f64	d7, d0
 8001be6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001bea:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001bee:	ed83 7b00 	vstr	d7, [r3]
  rotQuaternion[1] = rotVector[1] * sin(rotAngle/2);
 8001bf2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001bf6:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001bfa:	ed93 8b02 	vldr	d8, [r3, #8]
 8001bfe:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c0a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c0e:	eeb0 0b46 	vmov.f64	d0, d6
 8001c12:	f019 fda9 	bl	801b768 <sin>
 8001c16:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c1e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c22:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001c26:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = rotVector[2] * sin(rotAngle/2);
 8001c2a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c2e:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001c32:	ed93 8b04 	vldr	d8, [r3, #16]
 8001c36:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c46:	eeb0 0b46 	vmov.f64	d0, d6
 8001c4a:	f019 fd8d 	bl	801b768 <sin>
 8001c4e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c52:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c56:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c5a:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001c5e:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = rotVector[3] * sin(rotAngle/2);
 8001c62:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c66:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8001c6a:	ed93 8b06 	vldr	d8, [r3, #24]
 8001c6e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001c72:	ed93 7b00 	vldr	d7, [r3]
 8001c76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c7e:	eeb0 0b46 	vmov.f64	d0, d6
 8001c82:	f019 fd71 	bl	801b768 <sin>
 8001c86:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c8e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c92:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001c96:	ed83 7b06 	vstr	d7, [r3, #24]
  sprintf( data_gyro, "rot quat: %f, %f, %f, %f\n",rotQuaternion[0], rotQuaternion[1], rotQuaternion[2], rotQuaternion[3]);
 8001c9a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001c9e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ca6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001caa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001cae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cb2:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8001cb6:	f5a1 61e1 	sub.w	r1, r1, #1800	; 0x708
 8001cba:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001cbe:	f607 5498 	addw	r4, r7, #3480	; 0xd98
 8001cc2:	f5a4 64e1 	sub.w	r4, r4, #1800	; 0x708
 8001cc6:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001cca:	f207 464c 	addw	r6, r7, #1100	; 0x44c
 8001cce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4642      	mov	r2, r8
 8001cdc:	464b      	mov	r3, r9
 8001cde:	493b      	ldr	r1, [pc, #236]	; (8001dcc <main+0x9b4>)
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f016 f8c9 	bl	8017e78 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001ce6:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fb60 	bl	80003b0 <strlen>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f014 fd67 	bl	80167cc <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001cfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d02:	f002 fd85 	bl	8004810 <HAL_Delay>
  sprintf( data_gyro, "Zero Acc: %f, %f, %f, %f\n",rotAngle, zeroAcc[1], zeroAcc[2], zeroAcc[3]);
 8001d06:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001d0a:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8001d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d12:	f607 5198 	addw	r1, r7, #3480	; 0xd98
 8001d16:	f5a1 61eb 	sub.w	r1, r1, #1880	; 0x758
 8001d1a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001d1e:	f607 5498 	addw	r4, r7, #3480	; 0xd98
 8001d22:	f5a4 64eb 	sub.w	r4, r4, #1880	; 0x758
 8001d26:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001d2a:	f207 464c 	addw	r6, r7, #1100	; 0x44c
 8001d2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d36:	e9cd 2300 	strd	r2, r3, [sp]
 8001d3a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	4923      	ldr	r1, [pc, #140]	; (8001dd0 <main+0x9b8>)
 8001d44:	4630      	mov	r0, r6
 8001d46:	f016 f897 	bl	8017e78 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001d4a:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb2e 	bl	80003b0 <strlen>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f014 fd35 	bl	80167cc <CDC_Transmit_HS>

  multiplyQuat(rotQuaternion, x, &x);
 8001d62:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <main+0x9bc>)
 8001d68:	491a      	ldr	r1, [pc, #104]	; (8001dd4 <main+0x9bc>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa10 	bl	8001190 <multiplyQuat>
  multiplyQuat(rotQuaternion, y, &y);
 8001d70:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <main+0x9c0>)
 8001d76:	4918      	ldr	r1, [pc, #96]	; (8001dd8 <main+0x9c0>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa09 	bl	8001190 <multiplyQuat>
  multiplyQuat(rotQuaternion, z, &z);
 8001d7e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <main+0x9b0>)
 8001d84:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <main+0x9b0>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa02 	bl	8001190 <multiplyQuat>
  rotQuaternion[1] = - rotQuaternion[1];
 8001d8c:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001d90:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001d94:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d98:	eeb1 7b47 	vneg.f64	d7, d7
 8001d9c:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001da0:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001da4:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = - rotQuaternion[2];
 8001da8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001dac:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001db0:	ed93 7b04 	vldr	d7, [r3, #16]
 8001db4:	eeb1 7b47 	vneg.f64	d7, d7
 8001db8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001dbc:	e00e      	b.n	8001ddc <main+0x9c4>
 8001dbe:	bf00      	nop
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40490000 	.word	0x40490000
 8001dc8:	24000d48 	.word	0x24000d48
 8001dcc:	0801c5c8 	.word	0x0801c5c8
 8001dd0:	0801c5e4 	.word	0x0801c5e4
 8001dd4:	24000d08 	.word	0x24000d08
 8001dd8:	24000d28 	.word	0x24000d28
 8001ddc:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001de0:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = - rotQuaternion[3];
 8001de4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001de8:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001dec:	ed93 7b06 	vldr	d7, [r3, #24]
 8001df0:	eeb1 7b47 	vneg.f64	d7, d7
 8001df4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001df8:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001dfc:	ed83 7b06 	vstr	d7, [r3, #24]
  multiplyQuat(x, rotQuaternion, &x);
 8001e00:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <main+0xa1c>)
 8001e06:	4619      	mov	r1, r3
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <main+0xa1c>)
 8001e0a:	f7ff f9c1 	bl	8001190 <multiplyQuat>
  multiplyQuat(y, rotQuaternion, &y);
 8001e0e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <main+0xa20>)
 8001e14:	4619      	mov	r1, r3
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <main+0xa20>)
 8001e18:	f7ff f9ba 	bl	8001190 <multiplyQuat>
  multiplyQuat(z, rotQuaternion, &z);
 8001e1c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <main+0xa24>)
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	; (8001e3c <main+0xa24>)
 8001e26:	f7ff f9b3 	bl	8001190 <multiplyQuat>
  sprintf( data_gyro, "zero z: %f, %f, %f\n",z[1], z[2], z[3]);
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
  */


  for(int i = 0; i < 3; i++){
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 3d6c 	str.w	r3, [r7, #3436]	; 0xd6c
 8001e30:	e027      	b.n	8001e82 <main+0xa6a>
 8001e32:	bf00      	nop
 8001e34:	24000d08 	.word	0x24000d08
 8001e38:	24000d28 	.word	0x24000d28
 8001e3c:	24000d48 	.word	0x24000d48
	  VelocityExt[i] = 0;
 8001e40:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001e44:	f5a3 62e4 	sub.w	r2, r3, #1824	; 0x720
 8001e48:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	18d1      	adds	r1, r2, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
	  PosExt[i] = 0;
 8001e5c:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8001e60:	f5a3 62e7 	sub.w	r2, r3, #1848	; 0x738
 8001e64:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	18d1      	adds	r1, r2, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 3; i++){
 8001e78:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f8c7 3d6c 	str.w	r3, [r7, #3436]	; 0xd6c
 8001e82:	f8d7 3d6c 	ldr.w	r3, [r7, #3436]	; 0xd6c
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	ddda      	ble.n	8001e40 <main+0xa28>
  }

  uint32_t timeStop = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
  int accelerating = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 3cb8 	str.w	r3, [r7, #3256]	; 0xcb8
  char dataTest[500];
  HAL_Delay(2000);
 8001e96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e9a:	f002 fcb9 	bl	8004810 <HAL_Delay>
  sprintf(dataTest, "%s", "hi");
 8001e9e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ea2:	4aef      	ldr	r2, [pc, #956]	; (8002260 <main+0xe48>)
 8001ea4:	49ef      	ldr	r1, [pc, #956]	; (8002264 <main+0xe4c>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f015 ffe6 	bl	8017e78 <siprintf>
  sprintf(dataTest, "%s, Helllo\n", dataTest);
 8001eac:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001eb0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001eb4:	49ec      	ldr	r1, [pc, #944]	; (8002268 <main+0xe50>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f015 ffde 	bl	8017e78 <siprintf>
  CDC_Transmit_HS(dataTest, strlen(dataTest));
 8001ebc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fa75 	bl	80003b0 <strlen>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f014 fc7c 	bl	80167cc <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001ed4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ed8:	f002 fc9a 	bl	8004810 <HAL_Delay>
  sprintf(dataTest, "%s, Helllo\n", dataTest);
 8001edc:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001ee0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ee4:	49e0      	ldr	r1, [pc, #896]	; (8002268 <main+0xe50>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f015 ffc6 	bl	8017e78 <siprintf>
  HAL_Delay(2000);
 8001eec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ef0:	f002 fc8e 	bl	8004810 <HAL_Delay>
  CDC_Transmit_HS(dataTest, strlen(dataTest));
 8001ef4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fa59 	bl	80003b0 <strlen>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f014 fc60 	bl	80167cc <CDC_Transmit_HS>
  while(1){
	  HAL_Delay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f002 fc7f 	bl	8004810 <HAL_Delay>
	  float Gx;
	  float Gy;
	  float Gz;

	  if(LG2_Read_Register(0x1E) & (1 << 1)){ //checks if new data from gyroscope
 8001f12:	201e      	movs	r0, #30
 8001f14:	f7fe fdee 	bl	8000af4 <LG2_Read_Register>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8177 	beq.w	8002212 <main+0xdfa>
		  elapsedTime = (TIM13->CNT /1000);
 8001f24:	4bd1      	ldr	r3, [pc, #836]	; (800226c <main+0xe54>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4ad1      	ldr	r2, [pc, #836]	; (8002270 <main+0xe58>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f38:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001f3c:	ed83 7b00 	vstr	d7, [r3]
		  TIM13->CNT = 0;
 8001f40:	4bca      	ldr	r3, [pc, #808]	; (800226c <main+0xe54>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
		  Gx = LG2_Get_Gyro_X();
 8001f46:	f7fe fe2b 	bl	8000ba0 <LG2_Get_Gyro_X>
 8001f4a:	f607 43b4 	addw	r3, r7, #3252	; 0xcb4
 8001f4e:	ed83 0a00 	vstr	s0, [r3]
		  Gy= LG2_Get_Gyro_Y();
 8001f52:	f7fe fe5d 	bl	8000c10 <LG2_Get_Gyro_Y>
 8001f56:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8001f5a:	ed83 0a00 	vstr	s0, [r3]
		  Gz = LG2_Get_Gyro_Z();
 8001f5e:	f7fe fe8f 	bl	8000c80 <LG2_Get_Gyro_Z>
 8001f62:	f607 43ac 	addw	r3, r7, #3244	; 0xcac
 8001f66:	ed83 0a00 	vstr	s0, [r3]

		  double Wx = (Gx - calOmegaX) * (2 * PI / 360000) * elapsedTime;
 8001f6a:	f607 43b4 	addw	r3, r7, #3252	; 0xcb4
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f76:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8001f7a:	ed93 7b00 	vldr	d7, [r3]
 8001f7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f82:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8002258 <main+0xe40>
 8001f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f8a:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001f8e:	ed93 6b00 	vldr	d6, [r3]
 8001f92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f96:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8001f9a:	ed83 7b00 	vstr	d7, [r3]
		  double Wy = (Gy- calOmegaY) * (2 * PI / 360000) * elapsedTime;
 8001f9e:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001faa:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 8001fae:	ed93 7b00 	vldr	d7, [r3]
 8001fb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fb6:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002258 <main+0xe40>
 8001fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fbe:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8001fc2:	f507 6251 	add.w	r2, r7, #3344	; 0xd10
 8001fc6:	ed92 6b00 	vldr	d6, [r2]
 8001fca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fce:	ed83 7b00 	vstr	d7, [r3]
		  double Wz = (Gz - calOmegaZ) * (2 * PI / 360000) * elapsedTime;
 8001fd2:	f607 43ac 	addw	r3, r7, #3244	; 0xcac
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fde:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8001fe2:	ed93 7b00 	vldr	d7, [r3]
 8001fe6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fea:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8002258 <main+0xe40>
 8001fee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ff2:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8001ff6:	f507 6251 	add.w	r2, r7, #3344	; 0xd10
 8001ffa:	ed92 6b00 	vldr	d6, [r2]
 8001ffe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002002:	ed03 7b02 	vstr	d7, [r3, #-8]

		  double W = sqrt(Wx*Wx + Wy*Wy + Wz*Wz);
 8002006:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800200a:	ed93 7b00 	vldr	d7, [r3]
 800200e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002012:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8002016:	ed93 7b00 	vldr	d7, [r3]
 800201a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800201e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002022:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8002026:	ed13 7b02 	vldr	d7, [r3, #-8]
 800202a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800202e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002032:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002036:	461c      	mov	r4, r3
 8002038:	eeb0 0b47 	vmov.f64	d0, d7
 800203c:	f019 fb1c 	bl	801b678 <sqrt>
 8002040:	ed84 0b00 	vstr	d0, [r4]

		  Wx /= W;
 8002044:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002048:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 800204c:	ed92 5b00 	vldr	d5, [r2]
 8002050:	ed93 6b00 	vldr	d6, [r3]
 8002054:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002058:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800205c:	ed83 7b00 	vstr	d7, [r3]
		  Wy /= W;
 8002060:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8002064:	f607 4298 	addw	r2, r7, #3224	; 0xc98
 8002068:	4611      	mov	r1, r2
 800206a:	f607 4288 	addw	r2, r7, #3208	; 0xc88
 800206e:	ed91 5b00 	vldr	d5, [r1]
 8002072:	ed92 6b00 	vldr	d6, [r2]
 8002076:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800207a:	ed83 7b00 	vstr	d7, [r3]
		  Wz /= W;
 800207e:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8002082:	f607 4298 	addw	r2, r7, #3224	; 0xc98
 8002086:	4611      	mov	r1, r2
 8002088:	f607 4288 	addw	r2, r7, #3208	; 0xc88
 800208c:	ed11 5b02 	vldr	d5, [r1, #-8]
 8002090:	ed92 6b00 	vldr	d6, [r2]
 8002094:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002098:	ed03 7b02 	vstr	d7, [r3, #-8]

		  rotQuaternion[0] = cos(W/2);
 800209c:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 80020a0:	ed93 7b00 	vldr	d7, [r3]
 80020a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80020a8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80020ac:	eeb0 0b46 	vmov.f64	d0, d6
 80020b0:	f019 fb02 	bl	801b6b8 <cos>
 80020b4:	eeb0 7b40 	vmov.f64	d7, d0
 80020b8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80020bc:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80020c0:	ed83 7b00 	vstr	d7, [r3]
		  rotQuaternion[1] = Wx * sin(W/2);
 80020c4:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 80020c8:	ed93 7b00 	vldr	d7, [r3]
 80020cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80020d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80020d4:	eeb0 0b46 	vmov.f64	d0, d6
 80020d8:	f019 fb46 	bl	801b768 <sin>
 80020dc:	eeb0 6b40 	vmov.f64	d6, d0
 80020e0:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80020e4:	ed93 7b00 	vldr	d7, [r3]
 80020e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020ec:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80020f0:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80020f4:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = Wy * sin(W/2);
 80020f8:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 80020fc:	ed93 7b00 	vldr	d7, [r3]
 8002100:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002104:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002108:	eeb0 0b46 	vmov.f64	d0, d6
 800210c:	f019 fb2c 	bl	801b768 <sin>
 8002110:	eeb0 6b40 	vmov.f64	d6, d0
 8002114:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8002118:	ed93 7b00 	vldr	d7, [r3]
 800211c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002120:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002124:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002128:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = Wz * sin(W/2);
 800212c:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002130:	ed93 7b00 	vldr	d7, [r3]
 8002134:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002138:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800213c:	eeb0 0b46 	vmov.f64	d0, d6
 8002140:	f019 fb12 	bl	801b768 <sin>
 8002144:	eeb0 6b40 	vmov.f64	d6, d0
 8002148:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 800214c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002150:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002154:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002158:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800215c:	ed83 7b06 	vstr	d7, [r3, #24]

		  multiplyQuat(rotQuaternion, x, &x);
 8002160:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8002164:	4a43      	ldr	r2, [pc, #268]	; (8002274 <main+0xe5c>)
 8002166:	4943      	ldr	r1, [pc, #268]	; (8002274 <main+0xe5c>)
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f811 	bl	8001190 <multiplyQuat>
		  multiplyQuat(rotQuaternion, y, &y);
 800216e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8002172:	4a41      	ldr	r2, [pc, #260]	; (8002278 <main+0xe60>)
 8002174:	4940      	ldr	r1, [pc, #256]	; (8002278 <main+0xe60>)
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f80a 	bl	8001190 <multiplyQuat>
		  multiplyQuat(rotQuaternion, z, &z);
 800217c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8002180:	4a3e      	ldr	r2, [pc, #248]	; (800227c <main+0xe64>)
 8002182:	493e      	ldr	r1, [pc, #248]	; (800227c <main+0xe64>)
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f803 	bl	8001190 <multiplyQuat>
		  rotQuaternion[1] = - rotQuaternion[1];
 800218a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800218e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002192:	ed93 7b02 	vldr	d7, [r3, #8]
 8002196:	eeb1 7b47 	vneg.f64	d7, d7
 800219a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800219e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80021a2:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = - rotQuaternion[2];
 80021a6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80021aa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80021ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80021b2:	eeb1 7b47 	vneg.f64	d7, d7
 80021b6:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80021ba:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80021be:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = - rotQuaternion[3];
 80021c2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80021c6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80021ca:	ed93 7b06 	vldr	d7, [r3, #24]
 80021ce:	eeb1 7b47 	vneg.f64	d7, d7
 80021d2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80021d6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80021da:	ed83 7b06 	vstr	d7, [r3, #24]
		  multiplyQuat(x, rotQuaternion, &x);
 80021de:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80021e2:	4a24      	ldr	r2, [pc, #144]	; (8002274 <main+0xe5c>)
 80021e4:	4619      	mov	r1, r3
 80021e6:	4823      	ldr	r0, [pc, #140]	; (8002274 <main+0xe5c>)
 80021e8:	f7fe ffd2 	bl	8001190 <multiplyQuat>
		  multiplyQuat(y, rotQuaternion, &y);
 80021ec:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80021f0:	4a21      	ldr	r2, [pc, #132]	; (8002278 <main+0xe60>)
 80021f2:	4619      	mov	r1, r3
 80021f4:	4820      	ldr	r0, [pc, #128]	; (8002278 <main+0xe60>)
 80021f6:	f7fe ffcb 	bl	8001190 <multiplyQuat>
		  multiplyQuat(z, rotQuaternion, &z);
 80021fa:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <main+0xe64>)
 8002200:	4619      	mov	r1, r3
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <main+0xe64>)
 8002204:	f7fe ffc4 	bl	8001190 <multiplyQuat>
		  	  counter++;
 8002208:	f8d7 3d90 	ldr.w	r3, [r7, #3472]	; 0xd90
 800220c:	3301      	adds	r3, #1
 800220e:	f8c7 3d90 	str.w	r3, [r7, #3472]	; 0xd90


	  }

  double SensorAcc[4];
  SensorAcc[0] = 0;
 8002212:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002216:	f6a3 5198 	subw	r1, r3, #3480	; 0xd98
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9c1 2300 	strd	r2, r3, [r1]

  double AccExt[4];
  AccExt[0] = 0;
 8002226:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800222a:	f6a3 5178 	subw	r1, r3, #3448	; 0xd78
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9c1 2300 	strd	r2, r3, [r1]


  if(LG2_Read_Register(0x1E) & 1){ //checks if new data from accelerometer
 800223a:	201e      	movs	r0, #30
 800223c:	f7fe fc5a 	bl	8000af4 <LG2_Read_Register>
 8002240:	4603      	mov	r3, r0
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8131 	beq.w	80024ae <main+0x1096>
	  double elapsedTime = (TIM14->CNT / 1000.0);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <main+0xe68>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	e016      	b.n	8002284 <main+0xe6c>
 8002256:	bf00      	nop
 8002258:	211935c7 	.word	0x211935c7
 800225c:	3ef24d15 	.word	0x3ef24d15
 8002260:	0801c600 	.word	0x0801c600
 8002264:	0801c604 	.word	0x0801c604
 8002268:	0801c608 	.word	0x0801c608
 800226c:	40001c00 	.word	0x40001c00
 8002270:	10624dd3 	.word	0x10624dd3
 8002274:	24000d08 	.word	0x24000d08
 8002278:	24000d28 	.word	0x24000d28
 800227c:	24000d48 	.word	0x24000d48
 8002280:	40002000 	.word	0x40002000
 8002284:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002288:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 800228c:	ed9f 5be2 	vldr	d5, [pc, #904]	; 8002618 <main+0x1200>
 8002290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002294:	ed03 7b02 	vstr	d7, [r3, #-8]
	  TIM14->CNT = 0;
 8002298:	4be3      	ldr	r3, [pc, #908]	; (8002628 <main+0x1210>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
	  counter++;
 800229e:	f8d7 3d90 	ldr.w	r3, [r7, #3472]	; 0xd90
 80022a2:	3301      	adds	r3, #1
 80022a4:	f8c7 3d90 	str.w	r3, [r7, #3472]	; 0xd90

	  SensorAcc[1] = LG2_Get_Acc_X();
 80022a8:	f7fe fd22 	bl	8000cf0 <LG2_Get_Acc_X>
 80022ac:	eef0 7a40 	vmov.f32	s15, s0
 80022b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80022b8:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80022bc:	ed83 7b02 	vstr	d7, [r3, #8]
	  SensorAcc[2] = LG2_Get_Acc_Y();
 80022c0:	f7fe fd5e 	bl	8000d80 <LG2_Get_Acc_Y>
 80022c4:	eef0 7a40 	vmov.f32	s15, s0
 80022c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022cc:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80022d0:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80022d4:	ed83 7b04 	vstr	d7, [r3, #16]
	  SensorAcc[3] = LG2_Get_Acc_Z();
 80022d8:	f7fe fd92 	bl	8000e00 <LG2_Get_Acc_Z>
 80022dc:	eef0 7a40 	vmov.f32	s15, s0
 80022e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022e4:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80022e8:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80022ec:	ed83 7b06 	vstr	d7, [r3, #24]

	  AccExt[1] = dotProduct(SensorAcc, x);
 80022f0:	463b      	mov	r3, r7
 80022f2:	49ce      	ldr	r1, [pc, #824]	; (800262c <main+0x1214>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f826 	bl	8001346 <dotProduct>
 80022fa:	eeb0 7b40 	vmov.f64	d7, d0
 80022fe:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002302:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 8002306:	ed83 7b02 	vstr	d7, [r3, #8]
	  AccExt[2] = dotProduct(SensorAcc, y);
 800230a:	463b      	mov	r3, r7
 800230c:	49c8      	ldr	r1, [pc, #800]	; (8002630 <main+0x1218>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f819 	bl	8001346 <dotProduct>
 8002314:	eeb0 7b40 	vmov.f64	d7, d0
 8002318:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800231c:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 8002320:	ed83 7b04 	vstr	d7, [r3, #16]
	  AccExt[3] = dotProduct(SensorAcc, z) - 9.8;
 8002324:	463b      	mov	r3, r7
 8002326:	49c3      	ldr	r1, [pc, #780]	; (8002634 <main+0x121c>)
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f80c 	bl	8001346 <dotProduct>
 800232e:	eeb0 7b40 	vmov.f64	d7, d0
 8002332:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002620 <main+0x1208>
 8002336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800233a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800233e:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 8002342:	ed83 7b06 	vstr	d7, [r3, #24]


	  VelocityExt[0] += AccExt[1] * elapsedTime/1000;
 8002346:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800234a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800234e:	ed93 6b00 	vldr	d6, [r3]
 8002352:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002356:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 800235a:	ed93 5b02 	vldr	d5, [r3, #8]
 800235e:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002362:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002366:	ee25 5b07 	vmul.f64	d5, d5, d7
 800236a:	ed9f 4bab 	vldr	d4, [pc, #684]	; 8002618 <main+0x1200>
 800236e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002372:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002376:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800237a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800237e:	ed83 7b00 	vstr	d7, [r3]
	  VelocityExt[1] += AccExt[2] * elapsedTime/1000;
 8002382:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002386:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800238a:	ed93 6b02 	vldr	d6, [r3, #8]
 800238e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002392:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 8002396:	ed93 5b04 	vldr	d5, [r3, #16]
 800239a:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 800239e:	ed13 7b02 	vldr	d7, [r3, #-8]
 80023a2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80023a6:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8002618 <main+0x1200>
 80023aa:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80023ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023b2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80023b6:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80023ba:	ed83 7b02 	vstr	d7, [r3, #8]
	  VelocityExt[2] += AccExt[3] * elapsedTime/1000;
 80023be:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80023c2:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80023c6:	ed93 6b04 	vldr	d6, [r3, #16]
 80023ca:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80023ce:	f6a3 5378 	subw	r3, r3, #3448	; 0xd78
 80023d2:	ed93 5b06 	vldr	d5, [r3, #24]
 80023d6:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 80023da:	ed13 7b02 	vldr	d7, [r3, #-8]
 80023de:	ee25 5b07 	vmul.f64	d5, d5, d7
 80023e2:	ed9f 4b8d 	vldr	d4, [pc, #564]	; 8002618 <main+0x1200>
 80023e6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80023ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023ee:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80023f2:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80023f6:	ed83 7b04 	vstr	d7, [r3, #16]



	  PosExt[0] += VelocityExt[0] * elapsedTime/1000;
 80023fa:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80023fe:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8002402:	ed93 6b00 	vldr	d6, [r3]
 8002406:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800240a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800240e:	ed93 5b00 	vldr	d5, [r3]
 8002412:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002416:	ed13 7b02 	vldr	d7, [r3, #-8]
 800241a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800241e:	ed9f 4b7e 	vldr	d4, [pc, #504]	; 8002618 <main+0x1200>
 8002422:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800242a:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800242e:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8002432:	ed83 7b00 	vstr	d7, [r3]
	  PosExt[1] += VelocityExt[1] * elapsedTime/1000;
 8002436:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800243a:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 800243e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002442:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002446:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800244a:	ed93 5b02 	vldr	d5, [r3, #8]
 800244e:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 8002452:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002456:	ee25 5b07 	vmul.f64	d5, d5, d7
 800245a:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 8002618 <main+0x1200>
 800245e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002462:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002466:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800246a:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 800246e:	ed83 7b02 	vstr	d7, [r3, #8]
	  PosExt[2] += VelocityExt[2] * elapsedTime/1000;
 8002472:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002476:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 800247a:	ed93 6b04 	vldr	d6, [r3, #16]
 800247e:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 8002482:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8002486:	ed93 5b04 	vldr	d5, [r3, #16]
 800248a:	f607 4388 	addw	r3, r7, #3208	; 0xc88
 800248e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002492:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002496:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8002618 <main+0x1200>
 800249a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800249e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024a2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80024a6:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 80024aa:	ed83 7b04 	vstr	d7, [r3, #16]
  }
	  if(counter > 100){
 80024ae:	f8d7 3d90 	ldr.w	r3, [r7, #3472]	; 0xd90
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	f77f ad2a 	ble.w	8001f0c <main+0xaf4>
		counter = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3d90 	str.w	r3, [r7, #3472]	; 0xd90
		//float magnitude = sqrt((x[1]*x[1]) + (x[2]*x[2]) + x[3] * x[3]);
		char data_gyro[500];
		  //cube
		  strcpy(data_gyro, "");
 80024be:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80024c2:	f6a3 5358 	subw	r3, r3, #3416	; 0xd58
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i < 12; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 3d68 	str.w	r3, [r7, #3432]	; 0xd68
 80024d0:	e082      	b.n	80025d8 <main+0x11c0>
		  {
		    for(int j=0; j<2; j++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3d64 	str.w	r3, [r7, #3428]	; 0xd64
 80024d8:	e075      	b.n	80025c6 <main+0x11ae>
		    {
		      for(int k=0; k<3; k++)
 80024da:	2300      	movs	r3, #0
 80024dc:	f8c7 3d60 	str.w	r3, [r7, #3424]	; 0xd60
 80024e0:	e068      	b.n	80025b4 <main+0x119c>
		      {
		    	double coordinate = cube[i][j][k]*(x[k+1]+y[k+1]+z[k+1]);
 80024e2:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 80024e6:	f5a3 60dd 	sub.w	r0, r3, #1768	; 0x6e8
 80024ea:	f8d7 3d64 	ldr.w	r3, [r7, #3428]	; 0xd64
 80024ee:	f8d7 1d68 	ldr.w	r1, [r7, #3432]	; 0xd68
 80024f2:	461a      	mov	r2, r3
 80024f4:	0052      	lsls	r2, r2, #1
 80024f6:	441a      	add	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	441a      	add	r2, r3
 8002502:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4403      	add	r3, r0
 800250c:	ed93 6b00 	vldr	d6, [r3]
 8002510:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 8002514:	3301      	adds	r3, #1
 8002516:	4a45      	ldr	r2, [pc, #276]	; (800262c <main+0x1214>)
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	ed93 5b00 	vldr	d5, [r3]
 8002520:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 8002524:	3301      	adds	r3, #1
 8002526:	4a42      	ldr	r2, [pc, #264]	; (8002630 <main+0x1218>)
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	ed93 7b00 	vldr	d7, [r3]
 8002530:	ee35 5b07 	vadd.f64	d5, d5, d7
 8002534:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 8002538:	3301      	adds	r3, #1
 800253a:	4a3e      	ldr	r2, [pc, #248]	; (8002634 <main+0x121c>)
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	ed93 7b00 	vldr	d7, [r3]
 8002544:	ee35 7b07 	vadd.f64	d7, d5, d7
 8002548:	f607 4378 	addw	r3, r7, #3192	; 0xc78
 800254c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002550:	ed83 7b00 	vstr	d7, [r3]
		        sprintf(data_gyro, "%s%f", data_gyro, coordinate);
 8002554:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002558:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800255c:	f607 4378 	addw	r3, r7, #3192	; 0xc78
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	e9cd 2300 	strd	r2, r3, [sp]
 8002568:	460a      	mov	r2, r1
 800256a:	4933      	ldr	r1, [pc, #204]	; (8002638 <main+0x1220>)
 800256c:	f015 fc84 	bl	8017e78 <siprintf>
		        //ugly :(
		        if(k<2)
 8002570:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 8002574:	2b01      	cmp	r3, #1
 8002576:	dc08      	bgt.n	800258a <main+0x1172>
		        {
		          sprintf(data_gyro, "%s,", data_gyro);
 8002578:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800257c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002580:	492e      	ldr	r1, [pc, #184]	; (800263c <main+0x1224>)
 8002582:	4618      	mov	r0, r3
 8002584:	f015 fc78 	bl	8017e78 <siprintf>
 8002588:	e00f      	b.n	80025aa <main+0x1192>
		        }
		        else if(i*j<22)
 800258a:	f8d7 3d68 	ldr.w	r3, [r7, #3432]	; 0xd68
 800258e:	f8d7 2d64 	ldr.w	r2, [r7, #3428]	; 0xd64
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	2b15      	cmp	r3, #21
 8002598:	dc07      	bgt.n	80025aa <main+0x1192>
		        {
		          sprintf(data_gyro, "%s;", data_gyro);
 800259a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800259e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <main+0x1228>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f015 fc67 	bl	8017e78 <siprintf>
		      for(int k=0; k<3; k++)
 80025aa:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8c7 3d60 	str.w	r3, [r7, #3424]	; 0xd60
 80025b4:	f8d7 3d60 	ldr.w	r3, [r7, #3424]	; 0xd60
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	dd92      	ble.n	80024e2 <main+0x10ca>
		    for(int j=0; j<2; j++)
 80025bc:	f8d7 3d64 	ldr.w	r3, [r7, #3428]	; 0xd64
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 3d64 	str.w	r3, [r7, #3428]	; 0xd64
 80025c6:	f8d7 3d64 	ldr.w	r3, [r7, #3428]	; 0xd64
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	dd85      	ble.n	80024da <main+0x10c2>
		  for(int i=0; i < 12; i++)
 80025ce:	f8d7 3d68 	ldr.w	r3, [r7, #3432]	; 0xd68
 80025d2:	3301      	adds	r3, #1
 80025d4:	f8c7 3d68 	str.w	r3, [r7, #3432]	; 0xd68
 80025d8:	f8d7 3d68 	ldr.w	r3, [r7, #3432]	; 0xd68
 80025dc:	2b0b      	cmp	r3, #11
 80025de:	f77f af78 	ble.w	80024d2 <main+0x10ba>
		        }

		      }
		    }
		  }
		  sprintf(data_gyro, "%s\n", data_gyro);
 80025e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80025e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025ea:	4916      	ldr	r1, [pc, #88]	; (8002644 <main+0x122c>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f015 fc43 	bl	8017e78 <siprintf>
		  HAL_Delay(100);
 80025f2:	2064      	movs	r0, #100	; 0x64
 80025f4:	f002 f90c 	bl	8004810 <HAL_Delay>
		  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 80025f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd fed7 	bl	80003b0 <strlen>
 8002602:	4602      	mov	r2, r0
 8002604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f014 f8de 	bl	80167cc <CDC_Transmit_HS>
  while(1){
 8002610:	e47c      	b.n	8001f0c <main+0xaf4>
 8002612:	bf00      	nop
 8002614:	f3af 8000 	nop.w
 8002618:	00000000 	.word	0x00000000
 800261c:	408f4000 	.word	0x408f4000
 8002620:	9999999a 	.word	0x9999999a
 8002624:	40239999 	.word	0x40239999
 8002628:	40002000 	.word	0x40002000
 800262c:	24000d08 	.word	0x24000d08
 8002630:	24000d28 	.word	0x24000d28
 8002634:	24000d48 	.word	0x24000d48
 8002638:	0801c614 	.word	0x0801c614
 800263c:	0801c61c 	.word	0x0801c61c
 8002640:	0801c620 	.word	0x0801c620
 8002644:	0801c624 	.word	0x0801c624

08002648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b09c      	sub	sp, #112	; 0x70
 800264c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002652:	224c      	movs	r2, #76	; 0x4c
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f015 fc71 	bl	8017f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2220      	movs	r2, #32
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f015 fc6b 	bl	8017f3e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002668:	2002      	movs	r0, #2
 800266a:	f007 fb81 	bl	8009d70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4b32      	ldr	r3, [pc, #200]	; (800273c <SystemClock_Config+0xf4>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800267a:	4a30      	ldr	r2, [pc, #192]	; (800273c <SystemClock_Config+0xf4>)
 800267c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002680:	6193      	str	r3, [r2, #24]
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <SystemClock_Config+0xf4>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800268e:	bf00      	nop
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <SystemClock_Config+0xf4>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d1f8      	bne.n	8002690 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800269e:	2323      	movs	r3, #35	; 0x23
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80026ac:	2340      	movs	r3, #64	; 0x40
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026b0:	2301      	movs	r3, #1
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b4:	2302      	movs	r3, #2
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026bc:	2304      	movs	r3, #4
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80026c0:	2310      	movs	r3, #16
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80026c8:	230c      	movs	r3, #12
 80026ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80026d0:	230c      	movs	r3, #12
 80026d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f007 fb8f 	bl	8009e04 <HAL_RCC_OscConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80026ec:	f000 ff4a 	bl	8003584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f0:	233f      	movs	r3, #63	; 0x3f
 80026f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f4:	2303      	movs	r3, #3
 80026f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80026fc:	2308      	movs	r3, #8
 80026fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002700:	2340      	movs	r3, #64	; 0x40
 8002702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002704:	2340      	movs	r3, #64	; 0x40
 8002706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f007 ff4e 	bl	800a5b8 <HAL_RCC_ClockConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002722:	f000 ff2f 	bl	8003584 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002726:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800272a:	2100      	movs	r1, #0
 800272c:	2000      	movs	r0, #0
 800272e:	f008 f8f9 	bl	800a924 <HAL_RCC_MCOConfig>
}
 8002732:	bf00      	nop
 8002734:	3770      	adds	r7, #112	; 0x70
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	58024800 	.word	0x58024800

08002740 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0ae      	sub	sp, #184	; 0xb8
 8002744:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002746:	463b      	mov	r3, r7
 8002748:	22b8      	movs	r2, #184	; 0xb8
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f015 fbf6 	bl	8017f3e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8002752:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800275e:	2304      	movs	r3, #4
 8002760:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002762:	2310      	movs	r3, #16
 8002764:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8002766:	2304      	movs	r3, #4
 8002768:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800276a:	2302      	movs	r3, #2
 800276c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800276e:	2302      	movs	r3, #2
 8002770:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002772:	23c0      	movs	r3, #192	; 0xc0
 8002774:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800277e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002782:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	4618      	mov	r0, r3
 800278e:	f008 fb09 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002798:	f000 fef4 	bl	8003584 <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	37b8      	adds	r7, #184	; 0xb8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2224      	movs	r2, #36	; 0x24
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f015 fbbe 	bl	8017f3e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <MX_ADC1_Init+0xe8>)
 80027c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027ca:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80027ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027de:	2204      	movs	r2, #4
 80027e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <MX_ADC1_Init+0xe4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <MX_ADC1_Init+0xe4>)
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <MX_ADC1_Init+0xe4>)
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <MX_ADC1_Init+0xe4>)
 8002810:	2200      	movs	r2, #0
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <MX_ADC1_Init+0xe4>)
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <MX_ADC1_Init+0xe4>)
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002822:	4819      	ldr	r0, [pc, #100]	; (8002888 <MX_ADC1_Init+0xe4>)
 8002824:	f002 fa74 	bl	8004d10 <HAL_ADC_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800282e:	f000 fea9 	bl	8003584 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	4619      	mov	r1, r3
 800283c:	4812      	ldr	r0, [pc, #72]	; (8002888 <MX_ADC1_Init+0xe4>)
 800283e:	f003 faaf 	bl	8005da0 <HAL_ADCEx_MultiModeConfigChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002848:	f000 fe9c 	bl	8003584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <MX_ADC1_Init+0xec>)
 800284e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002850:	2306      	movs	r3, #6
 8002852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002854:	2303      	movs	r3, #3
 8002856:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002858:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800285c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800285e:	2304      	movs	r3, #4
 8002860:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286c:	463b      	mov	r3, r7
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_ADC1_Init+0xe4>)
 8002872:	f002 fc55 	bl	8005120 <HAL_ADC_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800287c:	f000 fe82 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	3730      	adds	r7, #48	; 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	240002e4 	.word	0x240002e4
 800288c:	40022000 	.word	0x40022000
 8002890:	2a000400 	.word	0x2a000400

08002894 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2224      	movs	r2, #36	; 0x24
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f015 fb4c 	bl	8017f3e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028a8:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <MX_ADC3_Init+0xd4>)
 80028aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028ae:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80028b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028b6:	2208      	movs	r2, #8
 80028b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028c8:	2204      	movs	r2, #4
 80028ca:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028da:	2201      	movs	r2, #1
 80028dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_ADC3_Init+0xd0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_ADC3_Init+0xd0>)
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_ADC3_Init+0xd0>)
 8002908:	2200      	movs	r2, #0
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_ADC3_Init+0xd0>)
 800290e:	2200      	movs	r2, #0
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_ADC3_Init+0xd0>)
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800291a:	4812      	ldr	r0, [pc, #72]	; (8002964 <MX_ADC3_Init+0xd0>)
 800291c:	f002 f9f8 	bl	8004d10 <HAL_ADC_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8002926:	f000 fe2d 	bl	8003584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_ADC3_Init+0xd8>)
 800292c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800292e:	2306      	movs	r3, #6
 8002930:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800293a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800293c:	2304      	movs	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <MX_ADC3_Init+0xd0>)
 800294e:	f002 fbe7 	bl	8005120 <HAL_ADC_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002958:	f000 fe14 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	24000354 	.word	0x24000354
 8002968:	58026000 	.word	0x58026000
 800296c:	04300002 	.word	0x04300002

08002970 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002976:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <MX_FDCAN3_Init+0xc4>)
 8002978:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 800298e:	2200      	movs	r2, #0
 8002990:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002994:	2200      	movs	r2, #0
 8002996:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 800299a:	2210      	movs	r2, #16
 800299c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029a6:	2202      	movs	r2, #2
 80029a8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029ac:	2202      	movs	r2, #2
 80029ae:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029be:	2201      	movs	r2, #1
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029e2:	2204      	movs	r2, #4
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029ee:	2204      	movs	r2, #4
 80029f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 80029fa:	2204      	movs	r2, #4
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a18:	2204      	movs	r2, #4
 8002a1a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <MX_FDCAN3_Init+0xc0>)
 8002a1e:	f005 f86f 	bl	8007b00 <HAL_FDCAN_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8002a28:	f000 fdac 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	240004b4 	.word	0x240004b4
 8002a34:	4000d400 	.word	0x4000d400

08002a38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <MX_I2C2_Init+0x78>)
 8002a40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <MX_I2C2_Init+0x7c>)
 8002a46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a72:	480e      	ldr	r0, [pc, #56]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a74:	f005 fd82 	bl	800857c <HAL_I2C_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a7e:	f000 fd81 	bl	8003584 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4809      	ldr	r0, [pc, #36]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a86:	f005 fe23 	bl	80086d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a90:	f000 fd78 	bl	8003584 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a94:	2100      	movs	r1, #0
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_I2C2_Init+0x74>)
 8002a98:	f005 fe65 	bl	8008766 <HAL_I2CEx_ConfigDigitalFilter>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002aa2:	f000 fd6f 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	24000554 	.word	0x24000554
 8002ab0:	40005800 	.word	0x40005800
 8002ab4:	00c0eaff 	.word	0x00c0eaff

08002ab8 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <MX_SDMMC2_SD_Init+0x38>)
 8002ac0:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ad4:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <MX_SDMMC2_SD_Init+0x34>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	240005a8 	.word	0x240005a8
 8002af0:	48022400 	.word	0x48022400

08002af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002afa:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <MX_SPI1_Init+0xa8>)
 8002afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b0e:	2207      	movs	r2, #7
 8002b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b28:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002b2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <MX_SPI1_Init+0xa4>)
 8002b86:	f00c f957 	bl	800ee38 <HAL_SPI_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002b90:	f000 fcf8 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	24000624 	.word	0x24000624
 8002b9c:	40013000 	.word	0x40013000

08002ba0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <MX_SPI2_Init+0xa8>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb8:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bba:	2207      	movs	r2, #7
 8002bbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <MX_SPI2_Init+0xa4>)
 8002c32:	f00c f901 	bl	800ee38 <HAL_SPI_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002c3c:	f000 fca2 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	240006ac 	.word	0x240006ac
 8002c48:	40003800 	.word	0x40003800

08002c4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c52:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <MX_SPI3_Init+0xa8>)
 8002c54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c66:	2207      	movs	r2, #7
 8002c68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c70:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c7c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c80:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002c84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002cdc:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <MX_SPI3_Init+0xa4>)
 8002cde:	f00c f8ab 	bl	800ee38 <HAL_SPI_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002ce8:	f000 fc4c 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	24000734 	.word	0x24000734
 8002cf4:	40003c00 	.word	0x40003c00

08002cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
 8002d18:	615a      	str	r2, [r3, #20]
 8002d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d32:	225a      	movs	r2, #90	; 0x5a
 8002d34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d42:	4818      	ldr	r0, [pc, #96]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d44:	f00c fee6 	bl	800fb14 <HAL_TIM_PWM_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002d4e:	f000 fc19 	bl	8003584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4810      	ldr	r0, [pc, #64]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d62:	f00d fe53 	bl	8010a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002d6c:	f000 fc0a 	bl	8003584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d70:	2360      	movs	r3, #96	; 0x60
 8002d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d80:	463b      	mov	r3, r7
 8002d82:	2208      	movs	r2, #8
 8002d84:	4619      	mov	r1, r3
 8002d86:	4807      	ldr	r0, [pc, #28]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d88:	f00d f958 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002d92:	f000 fbf7 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d96:	4803      	ldr	r0, [pc, #12]	; (8002da4 <MX_TIM2_Init+0xac>)
 8002d98:	f001 f92a 	bl	8003ff0 <HAL_TIM_MspPostInit>

}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	240007bc 	.word	0x240007bc

08002da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dae:	f107 031c 	add.w	r3, r7, #28
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dba:	463b      	mov	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <MX_TIM3_Init+0xc4>)
 8002dd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002de0:	225a      	movs	r2, #90	; 0x5a
 8002de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002df0:	481d      	ldr	r0, [pc, #116]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002df2:	f00c fe8f 	bl	800fb14 <HAL_TIM_PWM_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002dfc:	f000 fbc2 	bl	8003584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4816      	ldr	r0, [pc, #88]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002e10:	f00d fdfc 	bl	8010a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e1a:	f000 fbb3 	bl	8003584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1e:	2360      	movs	r3, #96	; 0x60
 8002e20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	4619      	mov	r1, r3
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002e36:	f00d f901 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002e40:	f000 fba0 	bl	8003584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e44:	463b      	mov	r3, r7
 8002e46:	2204      	movs	r2, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4807      	ldr	r0, [pc, #28]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002e4c:	f00d f8f6 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e56:	f000 fb95 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e5a:	4803      	ldr	r0, [pc, #12]	; (8002e68 <MX_TIM3_Init+0xc0>)
 8002e5c:	f001 f8c8 	bl	8003ff0 <HAL_TIM_MspPostInit>

}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	24000808 	.word	0x24000808
 8002e6c:	40000400 	.word	0x40000400

08002e70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e82:	463b      	mov	r3, r7
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
 8002e90:	615a      	str	r2, [r3, #20]
 8002e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002e96:	4a33      	ldr	r2, [pc, #204]	; (8002f64 <MX_TIM4_Init+0xf4>)
 8002e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002e9c:	221c      	movs	r2, #28
 8002e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002ea8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002eac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002eba:	4829      	ldr	r0, [pc, #164]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002ebc:	f00c fe2a 	bl	800fb14 <HAL_TIM_PWM_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002ec6:	f000 fb5d 	bl	8003584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4821      	ldr	r0, [pc, #132]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002eda:	f00d fd97 	bl	8010a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002ee4:	f000 fb4e 	bl	8003584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee8:	2360      	movs	r3, #96	; 0x60
 8002eea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef8:	463b      	mov	r3, r7
 8002efa:	2200      	movs	r2, #0
 8002efc:	4619      	mov	r1, r3
 8002efe:	4818      	ldr	r0, [pc, #96]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002f00:	f00d f89c 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002f0a:	f000 fb3b 	bl	8003584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f0e:	463b      	mov	r3, r7
 8002f10:	2204      	movs	r2, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4812      	ldr	r0, [pc, #72]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002f16:	f00d f891 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002f20:	f000 fb30 	bl	8003584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f24:	463b      	mov	r3, r7
 8002f26:	2208      	movs	r2, #8
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480d      	ldr	r0, [pc, #52]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002f2c:	f00d f886 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002f36:	f000 fb25 	bl	8003584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	220c      	movs	r2, #12
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4807      	ldr	r0, [pc, #28]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002f42:	f00d f87b 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002f4c:	f000 fb1a 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <MX_TIM4_Init+0xf0>)
 8002f52:	f001 f84d 	bl	8003ff0 <HAL_TIM_MspPostInit>

}
 8002f56:	bf00      	nop
 8002f58:	3728      	adds	r7, #40	; 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	24000854 	.word	0x24000854
 8002f64:	40000800 	.word	0x40000800

08002f68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	615a      	str	r2, [r3, #20]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <MX_TIM5_Init+0xac>)
 8002f8e:	4a22      	ldr	r2, [pc, #136]	; (8003018 <MX_TIM5_Init+0xb0>)
 8002f90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <MX_TIM5_Init+0xac>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <MX_TIM5_Init+0xac>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <MX_TIM5_Init+0xac>)
 8002fa0:	225a      	movs	r2, #90	; 0x5a
 8002fa2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <MX_TIM5_Init+0xac>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_TIM5_Init+0xac>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002fb0:	4818      	ldr	r0, [pc, #96]	; (8003014 <MX_TIM5_Init+0xac>)
 8002fb2:	f00c fdaf 	bl	800fb14 <HAL_TIM_PWM_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002fbc:	f000 fae2 	bl	8003584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4811      	ldr	r0, [pc, #68]	; (8003014 <MX_TIM5_Init+0xac>)
 8002fd0:	f00d fd1c 	bl	8010a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002fda:	f000 fad3 	bl	8003584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fde:	2360      	movs	r3, #96	; 0x60
 8002fe0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fee:	463b      	mov	r3, r7
 8002ff0:	220c      	movs	r2, #12
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4807      	ldr	r0, [pc, #28]	; (8003014 <MX_TIM5_Init+0xac>)
 8002ff6:	f00d f821 	bl	801003c <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003000:	f000 fac0 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <MX_TIM5_Init+0xac>)
 8003006:	f000 fff3 	bl	8003ff0 <HAL_TIM_MspPostInit>

}
 800300a:	bf00      	nop
 800300c:	3728      	adds	r7, #40	; 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	240008a0 	.word	0x240008a0
 8003018:	40000c00 	.word	0x40000c00

0800301c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_TIM13_Init+0x40>)
 8003022:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <MX_TIM13_Init+0x44>)
 8003024:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <MX_TIM13_Init+0x40>)
 8003028:	2263      	movs	r2, #99	; 0x63
 800302a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_TIM13_Init+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <MX_TIM13_Init+0x40>)
 8003034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003038:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <MX_TIM13_Init+0x40>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_TIM13_Init+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <MX_TIM13_Init+0x40>)
 8003048:	f00c fc8f 	bl	800f96a <HAL_TIM_Base_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003052:	f000 fa97 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	240008ec 	.word	0x240008ec
 8003060:	40001c00 	.word	0x40001c00

08003064 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <MX_TIM14_Init+0x40>)
 800306a:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <MX_TIM14_Init+0x44>)
 800306c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <MX_TIM14_Init+0x40>)
 8003070:	2263      	movs	r2, #99	; 0x63
 8003072:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <MX_TIM14_Init+0x40>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <MX_TIM14_Init+0x40>)
 800307c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003080:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <MX_TIM14_Init+0x40>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_TIM14_Init+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800308e:	4805      	ldr	r0, [pc, #20]	; (80030a4 <MX_TIM14_Init+0x40>)
 8003090:	f00c fc6b 	bl	800f96a <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800309a:	f000 fa73 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	24000938 	.word	0x24000938
 80030a8:	40002000 	.word	0x40002000

080030ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030b0:	4b22      	ldr	r3, [pc, #136]	; (800313c <MX_UART4_Init+0x90>)
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <MX_UART4_Init+0x94>)
 80030b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <MX_UART4_Init+0x90>)
 80030b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <MX_UART4_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <MX_UART4_Init+0x90>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030ca:	4b1c      	ldr	r3, [pc, #112]	; (800313c <MX_UART4_Init+0x90>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <MX_UART4_Init+0x90>)
 80030d2:	220c      	movs	r2, #12
 80030d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <MX_UART4_Init+0x90>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <MX_UART4_Init+0x90>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <MX_UART4_Init+0x90>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <MX_UART4_Init+0x90>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <MX_UART4_Init+0x90>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030f4:	4811      	ldr	r0, [pc, #68]	; (800313c <MX_UART4_Init+0x90>)
 80030f6:	f00d fd43 	bl	8010b80 <HAL_UART_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003100:	f000 fa40 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003104:	2100      	movs	r1, #0
 8003106:	480d      	ldr	r0, [pc, #52]	; (800313c <MX_UART4_Init+0x90>)
 8003108:	f00e fe49 	bl	8011d9e <HAL_UARTEx_SetTxFifoThreshold>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003112:	f000 fa37 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003116:	2100      	movs	r1, #0
 8003118:	4808      	ldr	r0, [pc, #32]	; (800313c <MX_UART4_Init+0x90>)
 800311a:	f00e fe7e 	bl	8011e1a <HAL_UARTEx_SetRxFifoThreshold>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003124:	f000 fa2e 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003128:	4804      	ldr	r0, [pc, #16]	; (800313c <MX_UART4_Init+0x90>)
 800312a:	f00e fdff 	bl	8011d2c <HAL_UARTEx_DisableFifoMode>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003134:	f000 fa26 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	24000bdc 	.word	0x24000bdc
 8003140:	40004c00 	.word	0x40004c00

08003144 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 800314a:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <MX_USART6_UART_Init+0x94>)
 800314c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003154:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 800316a:	220c      	movs	r2, #12
 800316c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 800317c:	2200      	movs	r2, #0
 800317e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003182:	2200      	movs	r2, #0
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800318c:	4811      	ldr	r0, [pc, #68]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 800318e:	f00d fcf7 	bl	8010b80 <HAL_UART_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003198:	f000 f9f4 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800319c:	2100      	movs	r1, #0
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 80031a0:	f00e fdfd 	bl	8011d9e <HAL_UARTEx_SetTxFifoThreshold>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80031aa:	f000 f9eb 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ae:	2100      	movs	r1, #0
 80031b0:	4808      	ldr	r0, [pc, #32]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 80031b2:	f00e fe32 	bl	8011e1a <HAL_UARTEx_SetRxFifoThreshold>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80031bc:	f000 f9e2 	bl	8003584 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <MX_USART6_UART_Init+0x90>)
 80031c2:	f00e fdb3 	bl	8011d2c <HAL_UARTEx_DisableFifoMode>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80031cc:	f000 f9da 	bl	8003584 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	24000c70 	.word	0x24000c70
 80031d8:	40011400 	.word	0x40011400

080031dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <MX_DMA_Init+0xbc>)
 80031e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <MX_DMA_Init+0xbc>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <MX_DMA_Init+0xbc>)
 80031f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <MX_DMA_Init+0xbc>)
 8003202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003206:	4a24      	ldr	r2, [pc, #144]	; (8003298 <MX_DMA_Init+0xbc>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <MX_DMA_Init+0xbc>)
 8003212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	200b      	movs	r0, #11
 8003224:	f002 ff79 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003228:	200b      	movs	r0, #11
 800322a:	f002 ff90 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	200c      	movs	r0, #12
 8003234:	f002 ff71 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003238:	200c      	movs	r0, #12
 800323a:	f002 ff88 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	200d      	movs	r0, #13
 8003244:	f002 ff69 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003248:	200d      	movs	r0, #13
 800324a:	f002 ff80 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	200e      	movs	r0, #14
 8003254:	f002 ff61 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003258:	200e      	movs	r0, #14
 800325a:	f002 ff78 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	200f      	movs	r0, #15
 8003264:	f002 ff59 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003268:	200f      	movs	r0, #15
 800326a:	f002 ff70 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	2010      	movs	r0, #16
 8003274:	f002 ff51 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003278:	2010      	movs	r0, #16
 800327a:	f002 ff68 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2100      	movs	r1, #0
 8003282:	2046      	movs	r0, #70	; 0x46
 8003284:	f002 ff49 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003288:	2046      	movs	r0, #70	; 0x46
 800328a:	f002 ff60 	bl	800614e <HAL_NVIC_EnableIRQ>

}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	58024400 	.word	0x58024400

0800329c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032b2:	4bac      	ldr	r3, [pc, #688]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b8:	4aaa      	ldr	r2, [pc, #680]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032ba:	f043 0310 	orr.w	r3, r3, #16
 80032be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c2:	4ba8      	ldr	r3, [pc, #672]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032d0:	4ba4      	ldr	r3, [pc, #656]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d6:	4aa3      	ldr	r2, [pc, #652]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e0:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ee:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f4:	4a9b      	ldr	r2, [pc, #620]	; (8003564 <MX_GPIO_Init+0x2c8>)
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fe:	4b99      	ldr	r3, [pc, #612]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800330c:	4b95      	ldr	r3, [pc, #596]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800330e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003312:	4a94      	ldr	r2, [pc, #592]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331c:	4b91      	ldr	r3, [pc, #580]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800331e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	4a8c      	ldr	r2, [pc, #560]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333a:	4b8a      	ldr	r3, [pc, #552]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b86      	ldr	r3, [pc, #536]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800334a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334e:	4a85      	ldr	r2, [pc, #532]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003358:	4b82      	ldr	r3, [pc, #520]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800336e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003376:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003384:	4b77      	ldr	r3, [pc, #476]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338a:	4a76      	ldr	r2, [pc, #472]	; (8003564 <MX_GPIO_Init+0x2c8>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <MX_GPIO_Init+0x2c8>)
 8003396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80033a2:	2200      	movs	r2, #0
 80033a4:	f241 5104 	movw	r1, #5380	; 0x1504
 80033a8:	486f      	ldr	r0, [pc, #444]	; (8003568 <MX_GPIO_Init+0x2cc>)
 80033aa:	f005 f8cd 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	f248 0106 	movw	r1, #32774	; 0x8006
 80033b4:	486d      	ldr	r0, [pc, #436]	; (800356c <MX_GPIO_Init+0x2d0>)
 80033b6:	f005 f8c7 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2130      	movs	r1, #48	; 0x30
 80033be:	486c      	ldr	r0, [pc, #432]	; (8003570 <MX_GPIO_Init+0x2d4>)
 80033c0:	f005 f8c2 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2102      	movs	r1, #2
 80033c8:	486a      	ldr	r0, [pc, #424]	; (8003574 <MX_GPIO_Init+0x2d8>)
 80033ca:	f005 f8bd 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80033ce:	2200      	movs	r2, #0
 80033d0:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80033d4:	4868      	ldr	r0, [pc, #416]	; (8003578 <MX_GPIO_Init+0x2dc>)
 80033d6:	f005 f8b7 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	210e      	movs	r1, #14
 80033de:	4867      	ldr	r0, [pc, #412]	; (800357c <MX_GPIO_Init+0x2e0>)
 80033e0:	f005 f8b2 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f240 3101 	movw	r1, #769	; 0x301
 80033ea:	4865      	ldr	r0, [pc, #404]	; (8003580 <MX_GPIO_Init+0x2e4>)
 80033ec:	f005 f8ac 	bl	8008548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80033f0:	f241 5304 	movw	r3, #5380	; 0x1504
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003406:	4619      	mov	r1, r3
 8003408:	4857      	ldr	r0, [pc, #348]	; (8003568 <MX_GPIO_Init+0x2cc>)
 800340a:	f004 fedd 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800340e:	f248 0306 	movw	r3, #32774	; 0x8006
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003424:	4619      	mov	r1, r3
 8003426:	4851      	ldr	r0, [pc, #324]	; (800356c <MX_GPIO_Init+0x2d0>)
 8003428:	f004 fece 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800342c:	2330      	movs	r3, #48	; 0x30
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003430:	2301      	movs	r3, #1
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2300      	movs	r3, #0
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003440:	4619      	mov	r1, r3
 8003442:	484b      	ldr	r0, [pc, #300]	; (8003570 <MX_GPIO_Init+0x2d4>)
 8003444:	f004 fec0 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8003448:	2302      	movs	r3, #2
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344c:	2301      	movs	r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8003458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345c:	4619      	mov	r1, r3
 800345e:	4845      	ldr	r0, [pc, #276]	; (8003574 <MX_GPIO_Init+0x2d8>)
 8003460:	f004 feb2 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8003464:	2304      	movs	r3, #4
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003468:	2300      	movs	r3, #0
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346c:	2301      	movs	r3, #1
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8003470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003474:	4619      	mov	r1, r3
 8003476:	483f      	ldr	r0, [pc, #252]	; (8003574 <MX_GPIO_Init+0x2d8>)
 8003478:	f004 fea6 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800347c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003482:	2301      	movs	r3, #1
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800348e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	4838      	ldr	r0, [pc, #224]	; (8003578 <MX_GPIO_Init+0x2dc>)
 8003496:	f004 fe97 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800349a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4832      	ldr	r0, [pc, #200]	; (8003578 <MX_GPIO_Init+0x2dc>)
 80034b0:	f004 fe8a 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80034b4:	2301      	movs	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034bc:	2301      	movs	r3, #1
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80034c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c4:	4619      	mov	r1, r3
 80034c6:	482d      	ldr	r0, [pc, #180]	; (800357c <MX_GPIO_Init+0x2e0>)
 80034c8:	f004 fe7e 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80034cc:	230e      	movs	r3, #14
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e0:	4619      	mov	r1, r3
 80034e2:	4826      	ldr	r0, [pc, #152]	; (800357c <MX_GPIO_Init+0x2e0>)
 80034e4:	f004 fe70 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80034e8:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	4619      	mov	r1, r3
 80034fc:	481a      	ldr	r0, [pc, #104]	; (8003568 <MX_GPIO_Init+0x2cc>)
 80034fe:	f004 fe63 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8003502:	f240 3301 	movw	r3, #769	; 0x301
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	4619      	mov	r1, r3
 800351a:	4819      	ldr	r0, [pc, #100]	; (8003580 <MX_GPIO_Init+0x2e4>)
 800351c:	f004 fe54 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8003520:	2310      	movs	r3, #16
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003524:	2300      	movs	r3, #0
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003530:	4619      	mov	r1, r3
 8003532:	4812      	ldr	r0, [pc, #72]	; (800357c <MX_GPIO_Init+0x2e0>)
 8003534:	f004 fe48 	bl	80081c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_GPIO_Init+0x2d0>)
 8003556:	f004 fe37 	bl	80081c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800355a:	bf00      	nop
 800355c:	3738      	adds	r7, #56	; 0x38
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	58024400 	.word	0x58024400
 8003568:	58021000 	.word	0x58021000
 800356c:	58020000 	.word	0x58020000
 8003570:	58020800 	.word	0x58020800
 8003574:	58020400 	.word	0x58020400
 8003578:	58021400 	.word	0x58021400
 800357c:	58021800 	.word	0x58021800
 8003580:	58020c00 	.word	0x58020c00

08003584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003588:	b672      	cpsid	i
}
 800358a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800358c:	e7fe      	b.n	800358c <Error_Handler+0x8>
	...

08003590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_MspInit+0x30>)
 8003598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <HAL_MspInit+0x30>)
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_MspInit+0x30>)
 80035a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	58024400 	.word	0x58024400

080035c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	; 0x30
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	f107 031c 	add.w	r3, r7, #28
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_ADC_MspInit+0x194>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d159      	bne.n	800369a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_ADC_MspInit+0x198>)
 80035e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035ec:	4a5b      	ldr	r2, [pc, #364]	; (800375c <HAL_ADC_MspInit+0x198>)
 80035ee:	f043 0320 	orr.w	r3, r3, #32
 80035f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035f6:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_ADC_MspInit+0x198>)
 80035f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003604:	4b55      	ldr	r3, [pc, #340]	; (800375c <HAL_ADC_MspInit+0x198>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800360a:	4a54      	ldr	r2, [pc, #336]	; (800375c <HAL_ADC_MspInit+0x198>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_ADC_MspInit+0x198>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8003622:	2301      	movs	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003626:	2303      	movs	r3, #3
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	484a      	ldr	r0, [pc, #296]	; (8003760 <HAL_ADC_MspInit+0x19c>)
 8003636:	f004 fdc7 	bl	80081c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800363a:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 800363c:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_ADC_MspInit+0x1a4>)
 800363e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003640:	4b48      	ldr	r3, [pc, #288]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003642:	2209      	movs	r2, #9
 8003644:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800364c:	4b45      	ldr	r3, [pc, #276]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003658:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800365a:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 800365c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003660:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003668:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 800366c:	2200      	movs	r2, #0
 800366e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003670:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800367c:	4839      	ldr	r0, [pc, #228]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 800367e:	f002 fd81 	bl	8006184 <HAL_DMA_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003688:	f7ff ff7c 	bl	8003584 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003690:	659a      	str	r2, [r3, #88]	; 0x58
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <HAL_ADC_MspInit+0x1a0>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003698:	e059      	b.n	800374e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_ADC_MspInit+0x1a8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d154      	bne.n	800374e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036aa:	4a2c      	ldr	r2, [pc, #176]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c8:	4a24      	ldr	r2, [pc, #144]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_ADC_MspInit+0x198>)
 80036d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80036e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80036e4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80036e8:	f001 f8b6 	bl	8004858 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_ADC_MspInit+0x1b0>)
 80036f0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 80036f4:	2273      	movs	r2, #115	; 0x73
 80036f6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003700:	2200      	movs	r2, #0
 8003702:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 800370e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003712:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 800371e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003722:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800372a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 800372e:	2200      	movs	r2, #0
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003732:	480f      	ldr	r0, [pc, #60]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003734:	f002 fd26 	bl	8006184 <HAL_DMA_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800373e:	f7ff ff21 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 8003746:	659a      	str	r2, [r3, #88]	; 0x58
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_ADC_MspInit+0x1ac>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800374e:	bf00      	nop
 8003750:	3730      	adds	r7, #48	; 0x30
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40022000 	.word	0x40022000
 800375c:	58024400 	.word	0x58024400
 8003760:	58020800 	.word	0x58020800
 8003764:	240003c4 	.word	0x240003c4
 8003768:	40020088 	.word	0x40020088
 800376c:	58026000 	.word	0x58026000
 8003770:	2400043c 	.word	0x2400043c
 8003774:	400204b8 	.word	0x400204b8

08003778 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b0b8      	sub	sp, #224	; 0xe0
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	22b8      	movs	r2, #184	; 0xb8
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f014 fbd0 	bl	8017f3e <memset>
  if(hfdcan->Instance==FDCAN3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_FDCAN_MspInit+0xc4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d144      	bne.n	8003832 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80037a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f007 faf1 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80037c8:	f7ff fedc 	bl	8003584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f0:	4a13      	ldr	r2, [pc, #76]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_FDCAN_MspInit+0xc8>)
 80037fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003808:	23c0      	movs	r3, #192	; 0xc0
 800380a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	2300      	movs	r3, #0
 800381c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003820:	2302      	movs	r3, #2
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003826:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800382a:	4619      	mov	r1, r3
 800382c:	4805      	ldr	r0, [pc, #20]	; (8003844 <HAL_FDCAN_MspInit+0xcc>)
 800382e:	f004 fccb 	bl	80081c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	37e0      	adds	r7, #224	; 0xe0
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	4000d400 	.word	0x4000d400
 8003840:	58024400 	.word	0x58024400
 8003844:	58021400 	.word	0x58021400

08003848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b0b8      	sub	sp, #224	; 0xe0
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	22b8      	movs	r2, #184	; 0xb8
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f014 fb68 	bl	8017f3e <memset>
  if(hi2c->Instance==I2C2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <HAL_I2C_MspInit+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d14d      	bne.n	8003914 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003878:	f04f 0208 	mov.w	r2, #8
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	4618      	mov	r0, r3
 8003890:	f007 fa88 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800389a:	f7ff fe73 	bl	8003584 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a4:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038a6:	f043 0320 	orr.w	r3, r3, #32
 80038aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ae:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038bc:	2303      	movs	r3, #3
 80038be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038c2:	2312      	movs	r3, #18
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038d4:	2304      	movs	r3, #4
 80038d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038de:	4619      	mov	r1, r3
 80038e0:	4810      	ldr	r0, [pc, #64]	; (8003924 <HAL_I2C_MspInit+0xdc>)
 80038e2:	f004 fc71 	bl	80081c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_I2C_MspInit+0xd8>)
 80038f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2101      	movs	r1, #1
 8003908:	2021      	movs	r0, #33	; 0x21
 800390a:	f002 fc06 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800390e:	2021      	movs	r0, #33	; 0x21
 8003910:	f002 fc1d 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	37e0      	adds	r7, #224	; 0xe0
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40005800 	.word	0x40005800
 8003920:	58024400 	.word	0x58024400
 8003924:	58021400 	.word	0x58021400

08003928 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0ba      	sub	sp, #232	; 0xe8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003940:	f107 0318 	add.w	r3, r7, #24
 8003944:	22b8      	movs	r2, #184	; 0xb8
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f014 faf8 	bl	8017f3e <memset>
  if(hsd->Instance==SDMMC2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5d      	ldr	r2, [pc, #372]	; (8003ac8 <HAL_SD_MspInit+0x1a0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	f040 80b3 	bne.w	8003ac0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800395a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003966:	2300      	movs	r3, #0
 8003968:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396a:	f107 0318 	add.w	r3, r7, #24
 800396e:	4618      	mov	r0, r3
 8003970:	f007 fa18 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800397a:	f7ff fe03 	bl	8003584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800397e:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 8003980:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003984:	4a51      	ldr	r2, [pc, #324]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 8003986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800398a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800398e:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 8003990:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 800399e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a2:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ba:	4b44      	ldr	r3, [pc, #272]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 80039bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c0:	4a42      	ldr	r2, [pc, #264]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 80039c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ca:	4b40      	ldr	r3, [pc, #256]	; (8003acc <HAL_SD_MspInit+0x1a4>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039d8:	2340      	movs	r3, #64	; 0x40
 80039da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80039f0:	230b      	movs	r3, #11
 80039f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <HAL_SD_MspInit+0x1a8>)
 80039fe:	f004 fbe3 	bl	80081c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a24:	4619      	mov	r1, r3
 8003a26:	482a      	ldr	r0, [pc, #168]	; (8003ad0 <HAL_SD_MspInit+0x1a8>)
 8003a28:	f004 fbce 	bl	80081c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003a46:	230b      	movs	r3, #11
 8003a48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4820      	ldr	r0, [pc, #128]	; (8003ad4 <HAL_SD_MspInit+0x1ac>)
 8003a54:	f004 fbb8 	bl	80081c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003a72:	230b      	movs	r3, #11
 8003a74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <HAL_SD_MspInit+0x1ac>)
 8003a80:	f004 fba2 	bl	80081c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003a9e:	230a      	movs	r3, #10
 8003aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480a      	ldr	r0, [pc, #40]	; (8003ad4 <HAL_SD_MspInit+0x1ac>)
 8003aac:	f004 fb8c 	bl	80081c8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	207c      	movs	r0, #124	; 0x7c
 8003ab6:	f002 fb30 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003aba:	207c      	movs	r0, #124	; 0x7c
 8003abc:	f002 fb47 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003ac0:	bf00      	nop
 8003ac2:	37e8      	adds	r7, #232	; 0xe8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	48022400 	.word	0x48022400
 8003acc:	58024400 	.word	0x58024400
 8003ad0:	58020c00 	.word	0x58020c00
 8003ad4:	58021800 	.word	0x58021800

08003ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a4f      	ldr	r2, [pc, #316]	; (8003c34 <HAL_SPI_MspInit+0x15c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12e      	bne.n	8003b58 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b00:	4a4d      	ldr	r2, [pc, #308]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b0a:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b14:	623b      	str	r3, [r7, #32]
 8003b16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b18:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1e:	4a46      	ldr	r2, [pc, #280]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b36:	23e0      	movs	r3, #224	; 0xe0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b46:	2305      	movs	r3, #5
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	483a      	ldr	r0, [pc, #232]	; (8003c3c <HAL_SPI_MspInit+0x164>)
 8003b52:	f004 fb39 	bl	80081c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b56:	e068      	b.n	8003c2a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a38      	ldr	r2, [pc, #224]	; (8003c40 <HAL_SPI_MspInit+0x168>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d12f      	bne.n	8003bc2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b62:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b68:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b90:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4822      	ldr	r0, [pc, #136]	; (8003c44 <HAL_SPI_MspInit+0x16c>)
 8003bbc:	f004 fb04 	bl	80081c8 <HAL_GPIO_Init>
}
 8003bc0:	e033      	b.n	8003c2a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <HAL_SPI_MspInit+0x170>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d12e      	bne.n	8003c2a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bdc:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_SPI_MspInit+0x160>)
 8003bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003c08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	4619      	mov	r1, r3
 8003c24:	4809      	ldr	r0, [pc, #36]	; (8003c4c <HAL_SPI_MspInit+0x174>)
 8003c26:	f004 facf 	bl	80081c8 <HAL_GPIO_Init>
}
 8003c2a:	bf00      	nop
 8003c2c:	3738      	adds	r7, #56	; 0x38
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40013000 	.word	0x40013000
 8003c38:	58024400 	.word	0x58024400
 8003c3c:	58020000 	.word	0x58020000
 8003c40:	40003800 	.word	0x40003800
 8003c44:	58020400 	.word	0x58020400
 8003c48:	40003c00 	.word	0x40003c00
 8003c4c:	58020800 	.word	0x58020800

08003c50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 031c 	add.w	r3, r7, #28
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d15d      	bne.n	8003d2e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c72:	4b8e      	ldr	r3, [pc, #568]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c78:	4a8c      	ldr	r2, [pc, #560]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c82:	4b8a      	ldr	r3, [pc, #552]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c90:	4b86      	ldr	r3, [pc, #536]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c96:	4a85      	ldr	r2, [pc, #532]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ca0:	4b82      	ldr	r3, [pc, #520]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	f107 031c 	add.w	r3, r7, #28
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4879      	ldr	r0, [pc, #484]	; (8003eb0 <HAL_TIM_PWM_MspInit+0x260>)
 8003cca:	f004 fa7d 	bl	80081c8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003cce:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003cd0:	4a79      	ldr	r2, [pc, #484]	; (8003eb8 <HAL_TIM_PWM_MspInit+0x268>)
 8003cd2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003cd4:	4b77      	ldr	r3, [pc, #476]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003cd6:	2214      	movs	r2, #20
 8003cd8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cda:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003cdc:	2240      	movs	r2, #64	; 0x40
 8003cde:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce0:	4b74      	ldr	r3, [pc, #464]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003ce6:	4b73      	ldr	r3, [pc, #460]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cee:	4b71      	ldr	r3, [pc, #452]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cf6:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cfc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003d04:	4b6b      	ldr	r3, [pc, #428]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003d10:	4868      	ldr	r0, [pc, #416]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d12:	f002 fa37 	bl	8006184 <HAL_DMA_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003d1c:	f7ff fc32 	bl	8003584 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a64      	ldr	r2, [pc, #400]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d26:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_TIM_PWM_MspInit+0x264>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003d2c:	e119      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a62      	ldr	r2, [pc, #392]	; (8003ebc <HAL_TIM_PWM_MspInit+0x26c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d16d      	bne.n	8003e14 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d38:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d3e:	4a5b      	ldr	r2, [pc, #364]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d48:	4b58      	ldr	r3, [pc, #352]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d58:	4a5a      	ldr	r2, [pc, #360]	; (8003ec4 <HAL_TIM_PWM_MspInit+0x274>)
 8003d5a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d5e:	2218      	movs	r2, #24
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d62:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d74:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d76:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d7c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d7e:	4b50      	ldr	r3, [pc, #320]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d84:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003d86:	4b4e      	ldr	r3, [pc, #312]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d92:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003d98:	4849      	ldr	r0, [pc, #292]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003d9a:	f002 f9f3 	bl	8006184 <HAL_DMA_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003da4:	f7ff fbee 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
 8003dae:	4a44      	ldr	r2, [pc, #272]	; (8003ec0 <HAL_TIM_PWM_MspInit+0x270>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003db4:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003db6:	4a45      	ldr	r2, [pc, #276]	; (8003ecc <HAL_TIM_PWM_MspInit+0x27c>)
 8003db8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003dba:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dbc:	2217      	movs	r2, #23
 8003dbe:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dc0:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc6:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dda:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ddc:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003de2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003de4:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003dea:	4b37      	ldr	r3, [pc, #220]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003df6:	4834      	ldr	r0, [pc, #208]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003df8:	f002 f9c4 	bl	8006184 <HAL_DMA_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003e02:	f7ff fbbf 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e0c:	4a2e      	ldr	r2, [pc, #184]	; (8003ec8 <HAL_TIM_PWM_MspInit+0x278>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e12:	e0a6      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2d      	ldr	r2, [pc, #180]	; (8003ed0 <HAL_TIM_PWM_MspInit+0x280>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d15e      	bne.n	8003edc <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <HAL_TIM_PWM_MspInit+0x25c>)
 8003e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e3e:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x288>)
 8003e40:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e44:	221f      	movs	r2, #31
 8003e46:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4e:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003e54:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e5a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e62:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e6a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003e7e:	4815      	ldr	r0, [pc, #84]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e80:	f002 f980 	bl	8006184 <HAL_DMA_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003e8a:	f7ff fb7b 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x284>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	201e      	movs	r0, #30
 8003ea0:	f002 f93b 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ea4:	201e      	movs	r0, #30
 8003ea6:	f002 f952 	bl	800614e <HAL_NVIC_EnableIRQ>
}
 8003eaa:	e05a      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x312>
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	58020000 	.word	0x58020000
 8003eb4:	24000984 	.word	0x24000984
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	240009fc 	.word	0x240009fc
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	24000a74 	.word	0x24000a74
 8003ecc:	40020070 	.word	0x40020070
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	24000aec 	.word	0x24000aec
 8003ed8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <HAL_TIM_PWM_MspInit+0x31c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d13d      	bne.n	8003f62 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_TIM_PWM_MspInit+0x320>)
 8003ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_TIM_PWM_MspInit+0x320>)
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <HAL_TIM_PWM_MspInit+0x320>)
 8003ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_TIM_PWM_MspInit+0x328>)
 8003f08:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f0c:	223a      	movs	r2, #58	; 0x3a
 8003f0e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f22:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f2a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f32:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003f46:	480b      	ldr	r0, [pc, #44]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f48:	f002 f91c 	bl	8006184 <HAL_DMA_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003f52:	f7ff fb17 	bl	8003584 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5c:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <HAL_TIM_PWM_MspInit+0x324>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f62:	bf00      	nop
 8003f64:	3730      	adds	r7, #48	; 0x30
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	58024400 	.word	0x58024400
 8003f74:	24000b64 	.word	0x24000b64
 8003f78:	40020040 	.word	0x40020040

08003f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIM_Base_MspInit+0x68>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10f      	bne.n	8003fae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003fac:	e013      	b.n	8003fd6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_TIM_Base_MspInit+0x70>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_TIM_Base_MspInit+0x6c>)
 8003fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40001c00 	.word	0x40001c00
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	40002000 	.word	0x40002000

08003ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d120      	bne.n	8004054 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004012:	4b52      	ldr	r3, [pc, #328]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004018:	4a50      	ldr	r2, [pc, #320]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004022:	4b4e      	ldr	r3, [pc, #312]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800403a:	2302      	movs	r3, #2
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004042:	2301      	movs	r3, #1
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	f107 031c 	add.w	r3, r7, #28
 800404a:	4619      	mov	r1, r3
 800404c:	4844      	ldr	r0, [pc, #272]	; (8004160 <HAL_TIM_MspPostInit+0x170>)
 800404e:	f004 f8bb 	bl	80081c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004052:	e07f      	b.n	8004154 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_TIM_MspPostInit+0x174>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d11f      	bne.n	800409e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004064:	4a3d      	ldr	r2, [pc, #244]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800407c:	2330      	movs	r3, #48	; 0x30
 800407e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004084:	2302      	movs	r3, #2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800408c:	2302      	movs	r3, #2
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	4619      	mov	r1, r3
 8004096:	4832      	ldr	r0, [pc, #200]	; (8004160 <HAL_TIM_MspPostInit+0x170>)
 8004098:	f004 f896 	bl	80081c8 <HAL_GPIO_Init>
}
 800409c:	e05a      	b.n	8004154 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a31      	ldr	r2, [pc, #196]	; (8004168 <HAL_TIM_MspPostInit+0x178>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d131      	bne.n	800410c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 80040aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040b8:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 80040ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80040c6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80040ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040d8:	2302      	movs	r3, #2
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040dc:	f107 031c 	add.w	r3, r7, #28
 80040e0:	4619      	mov	r1, r3
 80040e2:	4822      	ldr	r0, [pc, #136]	; (800416c <HAL_TIM_MspPostInit+0x17c>)
 80040e4:	f004 f870 	bl	80081c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80040e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040f2:	2302      	movs	r3, #2
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040fa:	2302      	movs	r3, #2
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040fe:	f107 031c 	add.w	r3, r7, #28
 8004102:	4619      	mov	r1, r3
 8004104:	4819      	ldr	r0, [pc, #100]	; (800416c <HAL_TIM_MspPostInit+0x17c>)
 8004106:	f004 f85f 	bl	80081c8 <HAL_GPIO_Init>
}
 800410a:	e023      	b.n	8004154 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_TIM_MspPostInit+0x180>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d11e      	bne.n	8004154 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800411c:	4a0f      	ldr	r2, [pc, #60]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_TIM_MspPostInit+0x16c>)
 8004128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004134:	2308      	movs	r3, #8
 8004136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800413c:	2302      	movs	r3, #2
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004144:	2302      	movs	r3, #2
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	4619      	mov	r1, r3
 800414e:	4809      	ldr	r0, [pc, #36]	; (8004174 <HAL_TIM_MspPostInit+0x184>)
 8004150:	f004 f83a 	bl	80081c8 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3730      	adds	r7, #48	; 0x30
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	58024400 	.word	0x58024400
 8004160:	58020400 	.word	0x58020400
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	58020c00 	.word	0x58020c00
 8004170:	40000c00 	.word	0x40000c00
 8004174:	58020000 	.word	0x58020000

08004178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b0ba      	sub	sp, #232	; 0xe8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004190:	f107 0318 	add.w	r3, r7, #24
 8004194:	22b8      	movs	r2, #184	; 0xb8
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f013 fed0 	bl	8017f3e <memset>
  if(huart->Instance==UART4)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4d      	ldr	r2, [pc, #308]	; (80042d8 <HAL_UART_MspInit+0x160>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d147      	bne.n	8004238 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80041a8:	f04f 0202 	mov.w	r2, #2
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041ba:	f107 0318 	add.w	r3, r7, #24
 80041be:	4618      	mov	r0, r3
 80041c0:	f006 fdf0 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041ca:	f7ff f9db 	bl	8003584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f2:	4a3a      	ldr	r2, [pc, #232]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041fc:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_UART_MspInit+0x164>)
 80041fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800420a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800420e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004212:	2302      	movs	r3, #2
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004224:	2308      	movs	r3, #8
 8004226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800422e:	4619      	mov	r1, r3
 8004230:	482b      	ldr	r0, [pc, #172]	; (80042e0 <HAL_UART_MspInit+0x168>)
 8004232:	f003 ffc9 	bl	80081c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004236:	e04a      	b.n	80042ce <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <HAL_UART_MspInit+0x16c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d145      	bne.n	80042ce <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004242:	f04f 0201 	mov.w	r2, #1
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004254:	f107 0318 	add.w	r3, r7, #24
 8004258:	4618      	mov	r0, r3
 800425a:	f006 fda3 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8004264:	f7ff f98e 	bl	8003584 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_UART_MspInit+0x164>)
 800426a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_UART_MspInit+0x164>)
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_UART_MspInit+0x164>)
 800427a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_UART_MspInit+0x164>)
 8004288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800428c:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_UART_MspInit+0x164>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_UART_MspInit+0x164>)
 8004298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042a4:	23c0      	movs	r3, #192	; 0xc0
 80042a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80042bc:	2307      	movs	r3, #7
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4807      	ldr	r0, [pc, #28]	; (80042e8 <HAL_UART_MspInit+0x170>)
 80042ca:	f003 ff7d 	bl	80081c8 <HAL_GPIO_Init>
}
 80042ce:	bf00      	nop
 80042d0:	37e8      	adds	r7, #232	; 0xe8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40004c00 	.word	0x40004c00
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58020400 	.word	0x58020400
 80042e4:	40011400 	.word	0x40011400
 80042e8:	58020800 	.word	0x58020800

080042ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042f0:	e7fe      	b.n	80042f0 <NMI_Handler+0x4>

080042f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042f6:	e7fe      	b.n	80042f6 <HardFault_Handler+0x4>

080042f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042fc:	e7fe      	b.n	80042fc <MemManage_Handler+0x4>

080042fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004302:	e7fe      	b.n	8004302 <BusFault_Handler+0x4>

08004304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <UsageFault_Handler+0x4>

0800430a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004338:	f000 fa4a 	bl	80047d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <DMA1_Stream0_IRQHandler+0x10>)
 8004346:	f002 fa75 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	24000aec 	.word	0x24000aec

08004354 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <DMA1_Stream1_IRQHandler+0x10>)
 800435a:	f002 fa6b 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	24000984 	.word	0x24000984

08004368 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <DMA1_Stream2_IRQHandler+0x10>)
 800436e:	f002 fa61 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	24000b64 	.word	0x24000b64

0800437c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <DMA1_Stream3_IRQHandler+0x10>)
 8004382:	f002 fa57 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	240009fc 	.word	0x240009fc

08004390 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <DMA1_Stream4_IRQHandler+0x10>)
 8004396:	f002 fa4d 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	24000a74 	.word	0x24000a74

080043a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA1_Stream5_IRQHandler+0x10>)
 80043aa:	f002 fa43 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	240003c4 	.word	0x240003c4

080043b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <TIM4_IRQHandler+0x10>)
 80043be:	f00b fd1d 	bl	800fdfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	24000854 	.word	0x24000854

080043cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <I2C2_EV_IRQHandler+0x10>)
 80043d2:	f004 f963 	bl	800869c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	24000554 	.word	0x24000554

080043e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <DMA2_Stream7_IRQHandler+0x10>)
 80043e6:	f002 fa25 	bl	8006834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2400043c 	.word	0x2400043c

080043f4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80043f8:	4802      	ldr	r0, [pc, #8]	; (8004404 <OTG_HS_IRQHandler+0x10>)
 80043fa:	f004 fb59 	bl	8008ab0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	2400226c 	.word	0x2400226c

08004408 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <SDMMC2_IRQHandler+0x10>)
 800440e:	f009 fb1f 	bl	800da50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	240005a8 	.word	0x240005a8

0800441c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return 1;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_kill>:

int _kill(int pid, int sig)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004436:	f013 fdd5 	bl	8017fe4 <__errno>
 800443a:	4603      	mov	r3, r0
 800443c:	2216      	movs	r2, #22
 800443e:	601a      	str	r2, [r3, #0]
  return -1;
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <_exit>:

void _exit (int status)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004454:	f04f 31ff 	mov.w	r1, #4294967295
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ffe7 	bl	800442c <_kill>
  while (1) {}    /* Make sure we hang here */
 800445e:	e7fe      	b.n	800445e <_exit+0x12>

08004460 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e00a      	b.n	8004488 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004472:	f3af 8000 	nop.w
 8004476:	4601      	mov	r1, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	60ba      	str	r2, [r7, #8]
 800447e:	b2ca      	uxtb	r2, r1
 8004480:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3301      	adds	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	dbf0      	blt.n	8004472 <_read+0x12>
  }

  return len;
 8004490:	687b      	ldr	r3, [r7, #4]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e009      	b.n	80044c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	60ba      	str	r2, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	3301      	adds	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	dbf1      	blt.n	80044ac <_write+0x12>
  }
  return len;
 80044c8:	687b      	ldr	r3, [r7, #4]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_close>:

int _close(int file)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044fa:	605a      	str	r2, [r3, #4]
  return 0;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <_isatty>:

int _isatty(int file)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004512:	2301      	movs	r3, #1
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <_sbrk+0x5c>)
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <_sbrk+0x60>)
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <_sbrk+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004558:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <_sbrk+0x64>)
 800455a:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <_sbrk+0x68>)
 800455c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <_sbrk+0x64>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d207      	bcs.n	800457c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800456c:	f013 fd3a 	bl	8017fe4 <__errno>
 8004570:	4603      	mov	r3, r0
 8004572:	220c      	movs	r2, #12
 8004574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	e009      	b.n	8004590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <_sbrk+0x64>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <_sbrk+0x64>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <_sbrk+0x64>)
 800458c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800458e:	68fb      	ldr	r3, [r7, #12]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	24050000 	.word	0x24050000
 800459c:	00000800 	.word	0x00000800
 80045a0:	24000d68 	.word	0x24000d68
 80045a4:	24002ae8 	.word	0x24002ae8

080045a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045ac:	4b32      	ldr	r3, [pc, #200]	; (8004678 <SystemInit+0xd0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	4a31      	ldr	r2, [pc, #196]	; (8004678 <SystemInit+0xd0>)
 80045b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045bc:	4b2f      	ldr	r3, [pc, #188]	; (800467c <SystemInit+0xd4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d807      	bhi.n	80045d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <SystemInit+0xd4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 030f 	bic.w	r3, r3, #15
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <SystemInit+0xd4>)
 80045d2:	f043 0307 	orr.w	r3, r3, #7
 80045d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80045d8:	4b29      	ldr	r3, [pc, #164]	; (8004680 <SystemInit+0xd8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <SystemInit+0xd8>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <SystemInit+0xd8>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <SystemInit+0xd8>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4924      	ldr	r1, [pc, #144]	; (8004680 <SystemInit+0xd8>)
 80045f0:	4b24      	ldr	r3, [pc, #144]	; (8004684 <SystemInit+0xdc>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045f6:	4b21      	ldr	r3, [pc, #132]	; (800467c <SystemInit+0xd4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <SystemInit+0xd4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 030f 	bic.w	r3, r3, #15
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <SystemInit+0xd4>)
 800460c:	f043 0307 	orr.w	r3, r3, #7
 8004610:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <SystemInit+0xd8>)
 8004614:	2200      	movs	r2, #0
 8004616:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <SystemInit+0xd8>)
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800461e:	4b18      	ldr	r3, [pc, #96]	; (8004680 <SystemInit+0xd8>)
 8004620:	2200      	movs	r2, #0
 8004622:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <SystemInit+0xd8>)
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <SystemInit+0xe0>)
 8004628:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <SystemInit+0xd8>)
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <SystemInit+0xe4>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <SystemInit+0xd8>)
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <SystemInit+0xe8>)
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <SystemInit+0xd8>)
 8004638:	2200      	movs	r2, #0
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <SystemInit+0xd8>)
 800463e:	4a14      	ldr	r2, [pc, #80]	; (8004690 <SystemInit+0xe8>)
 8004640:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <SystemInit+0xd8>)
 8004644:	2200      	movs	r2, #0
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <SystemInit+0xd8>)
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <SystemInit+0xe8>)
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <SystemInit+0xd8>)
 8004650:	2200      	movs	r2, #0
 8004652:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <SystemInit+0xd8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a09      	ldr	r2, [pc, #36]	; (8004680 <SystemInit+0xd8>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <SystemInit+0xd8>)
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <SystemInit+0xec>)
 8004668:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800466c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	52002000 	.word	0x52002000
 8004680:	58024400 	.word	0x58024400
 8004684:	eaf6ed7f 	.word	0xeaf6ed7f
 8004688:	02020200 	.word	0x02020200
 800468c:	01ff0000 	.word	0x01ff0000
 8004690:	01010280 	.word	0x01010280
 8004694:	52004000 	.word	0x52004000

08004698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800469c:	f7ff ff84 	bl	80045a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046a2:	490d      	ldr	r1, [pc, #52]	; (80046d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046a8:	e002      	b.n	80046b0 <LoopCopyDataInit>

080046aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ae:	3304      	adds	r3, #4

080046b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b4:	d3f9      	bcc.n	80046aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046b8:	4c0a      	ldr	r4, [pc, #40]	; (80046e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046bc:	e001      	b.n	80046c2 <LoopFillZerobss>

080046be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c0:	3204      	adds	r2, #4

080046c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c4:	d3fb      	bcc.n	80046be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046c6:	f013 fc93 	bl	8017ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ca:	f7fc fea5 	bl	8001418 <main>
  bx  lr
 80046ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80046d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80046d8:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 80046dc:	0801cf80 	.word	0x0801cf80
  ldr r2, =_sbss
 80046e0:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 80046e4:	24002ae4 	.word	0x24002ae4

080046e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046e8:	e7fe      	b.n	80046e8 <ADC3_IRQHandler>
	...

080046ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f2:	2003      	movs	r0, #3
 80046f4:	f001 fd06 	bl	8006104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046f8:	f006 f97e 	bl	800a9f8 <HAL_RCC_GetSysClockFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_Init+0x68>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	4913      	ldr	r1, [pc, #76]	; (8004758 <HAL_Init+0x6c>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_Init+0x68>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <HAL_Init+0x6c>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_Init+0x70>)
 800472e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <HAL_Init+0x74>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004736:	200f      	movs	r0, #15
 8004738:	f000 f814 	bl	8004764 <HAL_InitTick>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e002      	b.n	800474c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004746:	f7fe ff23 	bl	8003590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	58024400 	.word	0x58024400
 8004758:	0801c91c 	.word	0x0801c91c
 800475c:	24000004 	.word	0x24000004
 8004760:	24000000 	.word	0x24000000

08004764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <HAL_InitTick+0x60>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e021      	b.n	80047bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_InitTick+0x64>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_InitTick+0x60>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004786:	fbb3 f3f1 	udiv	r3, r3, r1
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fceb 	bl	800616a <HAL_SYSTICK_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00e      	b.n	80047bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	d80a      	bhi.n	80047ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a4:	2200      	movs	r2, #0
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	f001 fcb5 	bl	800611a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047b0:	4a06      	ldr	r2, [pc, #24]	; (80047cc <HAL_InitTick+0x68>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2400000c 	.word	0x2400000c
 80047c8:	24000000 	.word	0x24000000
 80047cc:	24000008 	.word	0x24000008

080047d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_IncTick+0x20>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_IncTick+0x24>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_IncTick+0x24>)
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	2400000c 	.word	0x2400000c
 80047f4:	24000d6c 	.word	0x24000d6c

080047f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return uwTick;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_GetTick+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	24000d6c 	.word	0x24000d6c

08004810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7ff ffee 	bl	80047f8 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d005      	beq.n	8004836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <HAL_Delay+0x44>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004836:	bf00      	nop
 8004838:	f7ff ffde 	bl	80047f8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d8f7      	bhi.n	8004838 <HAL_Delay+0x28>
  {
  }
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	2400000c 	.word	0x2400000c

08004858 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	4904      	ldr	r1, [pc, #16]	; (8004880 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	58000400 	.word	0x58000400

08004884 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3360      	adds	r3, #96	; 0x60
 80048fe:	461a      	mov	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <LL_ADC_SetOffset+0x60>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10b      	bne.n	8004928 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004926:	e00b      	b.n	8004940 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	430b      	orrs	r3, r1
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	601a      	str	r2, [r3, #0]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	58026000 	.word	0x58026000

08004950 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3360      	adds	r3, #96	; 0x60
 800495e:	461a      	mov	r2, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	611a      	str	r2, [r3, #16]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3360      	adds	r3, #96	; 0x60
 80049c8:	461a      	mov	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	431a      	orrs	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	601a      	str	r2, [r3, #0]
  }
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	58026000 	.word	0x58026000

080049f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <LL_ADC_SetOffsetSaturation+0x40>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10e      	bne.n	8004a26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3360      	adds	r3, #96	; 0x60
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	58026000 	.word	0x58026000

08004a38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <LL_ADC_SetOffsetSign+0x40>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d10e      	bne.n	8004a6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3360      	adds	r3, #96	; 0x60
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58026000 	.word	0x58026000

08004a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3360      	adds	r3, #96	; 0x60
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <LL_ADC_SetOffsetState+0x50>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004aae:	e007      	b.n	8004ac0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	58026000 	.word	0x58026000

08004ad0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3330      	adds	r3, #48	; 0x30
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	0a1b      	lsrs	r3, r3, #8
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	4413      	add	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	211f      	movs	r1, #31
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0e9b      	lsrs	r3, r3, #26
 8004b08:	f003 011f 	and.w	r1, r3, #31
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	fa01 f303 	lsl.w	r3, r1, r3
 8004b16:	431a      	orrs	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3314      	adds	r3, #20
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0e5b      	lsrs	r3, r3, #25
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	4413      	add	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0d1b      	lsrs	r3, r3, #20
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2107      	movs	r1, #7
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	0d1b      	lsrs	r3, r3, #20
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d115      	bne.n	8004bc0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0318 	and.w	r3, r3, #24
 8004baa:	4914      	ldr	r1, [pc, #80]	; (8004bfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bac:	40d9      	lsrs	r1, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004bbe:	e014      	b.n	8004bea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	401a      	ands	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f003 0318 	and.w	r3, r3, #24
 8004bd6:	4909      	ldr	r1, [pc, #36]	; (8004bfc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bd8:	40d9      	lsrs	r1, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	400b      	ands	r3, r1
 8004bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	58026000 	.word	0x58026000
 8004bfc:	000fffff 	.word	0x000fffff

08004c00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6093      	str	r3, [r2, #8]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	5fffffc0 	.word	0x5fffffc0

08004c24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c38:	d101      	bne.n	8004c3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <LL_ADC_EnableInternalRegulator+0x24>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	6fffffc0 	.word	0x6fffffc0

08004c74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c88:	d101      	bne.n	8004c8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <LL_ADC_IsEnabled+0x18>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <LL_ADC_IsEnabled+0x1a>
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d101      	bne.n	8004cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d101      	bne.n	8004d00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e1ee      	b.n	8005108 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fe fc43 	bl	80035c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff67 	bl	8004c24 <LL_ADC_IsDeepPowerDownEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff4d 	bl	8004c00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff82 	bl	8004c74 <LL_ADC_IsInternalRegulatorEnabled>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d114      	bne.n	8004da0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff66 	bl	8004c4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d80:	4b8e      	ldr	r3, [pc, #568]	; (8004fbc <HAL_ADC_Init+0x2ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	099b      	lsrs	r3, r3, #6
 8004d86:	4a8e      	ldr	r2, [pc, #568]	; (8004fc0 <HAL_ADC_Init+0x2b0>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d92:	e002      	b.n	8004d9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f9      	bne.n	8004d94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ff65 	bl	8004c74 <LL_ADC_IsInternalRegulatorEnabled>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db4:	f043 0210 	orr.w	r2, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc0:	f043 0201 	orr.w	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff ff76 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 8004dd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8188 	bne.w	80050f6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 8184 	bne.w	80050f6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004df6:	f043 0202 	orr.w	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff4a 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d136      	bne.n	8004e7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6c      	ldr	r2, [pc, #432]	; (8004fc4 <HAL_ADC_Init+0x2b4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_ADC_Init+0x112>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6a      	ldr	r2, [pc, #424]	; (8004fc8 <HAL_ADC_Init+0x2b8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10e      	bne.n	8004e40 <HAL_ADC_Init+0x130>
 8004e22:	4868      	ldr	r0, [pc, #416]	; (8004fc4 <HAL_ADC_Init+0x2b4>)
 8004e24:	f7ff ff3a 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4867      	ldr	r0, [pc, #412]	; (8004fc8 <HAL_ADC_Init+0x2b8>)
 8004e2c:	f7ff ff36 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4323      	orrs	r3, r4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e008      	b.n	8004e52 <HAL_ADC_Init+0x142>
 8004e40:	4862      	ldr	r0, [pc, #392]	; (8004fcc <HAL_ADC_Init+0x2bc>)
 8004e42:	f7ff ff2b 	bl	8004c9c <LL_ADC_IsEnabled>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5a      	ldr	r2, [pc, #360]	; (8004fc4 <HAL_ADC_Init+0x2b4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_ADC_Init+0x15a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a58      	ldr	r2, [pc, #352]	; (8004fc8 <HAL_ADC_Init+0x2b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_ADC_Init+0x15e>
 8004e6a:	4a59      	ldr	r2, [pc, #356]	; (8004fd0 <HAL_ADC_Init+0x2c0>)
 8004e6c:	e000      	b.n	8004e70 <HAL_ADC_Init+0x160>
 8004e6e:	4a59      	ldr	r2, [pc, #356]	; (8004fd4 <HAL_ADC_Init+0x2c4>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7ff fd04 	bl	8004884 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_ADC_Init+0x2bc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d129      	bne.n	8004eda <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	7e5b      	ldrb	r3, [r3, #25]
 8004e8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e90:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004e96:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d013      	beq.n	8004ec8 <HAL_ADC_Init+0x1b8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_ADC_Init+0x1b4>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b1c      	cmp	r3, #28
 8004eae:	d007      	beq.n	8004ec0 <HAL_ADC_Init+0x1b0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b18      	cmp	r3, #24
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_Init+0x1ac>
 8004eb8:	2318      	movs	r3, #24
 8004eba:	e006      	b.n	8004eca <HAL_ADC_Init+0x1ba>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e004      	b.n	8004eca <HAL_ADC_Init+0x1ba>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	e002      	b.n	8004eca <HAL_ADC_Init+0x1ba>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	e000      	b.n	8004eca <HAL_ADC_Init+0x1ba>
 8004ec8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004eca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e00e      	b.n	8004ef8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7e5b      	ldrb	r3, [r3, #25]
 8004ede:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ee4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004eea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d106      	bne.n	8004f10 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	3b01      	subs	r3, #1
 8004f08:	045b      	lsls	r3, r3, #17
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <HAL_ADC_Init+0x2bc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d115      	bne.n	8004f62 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_ADC_Init+0x2c8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	69b9      	ldr	r1, [r7, #24]
 8004f46:	430b      	orrs	r3, r1
 8004f48:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	611a      	str	r2, [r3, #16]
 8004f60:	e009      	b.n	8004f76 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <HAL_ADC_Init+0x2cc>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	430b      	orrs	r3, r1
 8004f74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fea1 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 8004f80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff feae 	bl	8004ce8 <LL_ADC_INJ_IsConversionOngoing>
 8004f8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 808e 	bne.w	80050b2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 808a 	bne.w	80050b2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <HAL_ADC_Init+0x2bc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7e1b      	ldrb	r3, [r3, #24]
 8004fac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e018      	b.n	8004fee <HAL_ADC_Init+0x2de>
 8004fbc:	24000000 	.word	0x24000000
 8004fc0:	053e2d63 	.word	0x053e2d63
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40022100 	.word	0x40022100
 8004fcc:	58026000 	.word	0x58026000
 8004fd0:	40022300 	.word	0x40022300
 8004fd4:	58026300 	.word	0x58026300
 8004fd8:	fff04007 	.word	0xfff04007
 8004fdc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7e1b      	ldrb	r3, [r3, #24]
 8004fe4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b46      	ldr	r3, [pc, #280]	; (8005110 <HAL_ADC_Init+0x400>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	430b      	orrs	r3, r1
 8005000:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005008:	2b01      	cmp	r3, #1
 800500a:	d137      	bne.n	800507c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a3f      	ldr	r2, [pc, #252]	; (8005114 <HAL_ADC_Init+0x404>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d116      	bne.n	800504a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <HAL_ADC_Init+0x408>)
 8005024:	4013      	ands	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800503a:	430a      	orrs	r2, r1
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	611a      	str	r2, [r3, #16]
 8005048:	e020      	b.n	800508c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	4b32      	ldr	r3, [pc, #200]	; (800511c <HAL_ADC_Init+0x40c>)
 8005052:	4013      	ands	r3, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005058:	3a01      	subs	r2, #1
 800505a:	0411      	lsls	r1, r2, #16
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005060:	4311      	orrs	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005066:	4311      	orrs	r1, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800506c:	430a      	orrs	r2, r1
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	e007      	b.n	800508c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_ADC_Init+0x404>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d002      	beq.n	80050b2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fd63 	bl	8005b78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10c      	bne.n	80050d4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	f023 010f 	bic.w	r1, r3, #15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
 80050d2:	e007      	b.n	80050e4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 020f 	bic.w	r2, r2, #15
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	f023 0303 	bic.w	r3, r3, #3
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
 80050f4:	e007      	b.n	8005106 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	f043 0210 	orr.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005106:	7ffb      	ldrb	r3, [r7, #31]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3724      	adds	r7, #36	; 0x24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	ffffbffc 	.word	0xffffbffc
 8005114:	58026000 	.word	0x58026000
 8005118:	fc00f81f 	.word	0xfc00f81f
 800511c:	fc00f81e 	.word	0xfc00f81e

08005120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b0b9      	sub	sp, #228	; 0xe4
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4aa9      	ldr	r2, [pc, #676]	; (80053e8 <HAL_ADC_ConfigChannel+0x2c8>)
 8005142:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x34>
 800514e:	2302      	movs	r3, #2
 8005150:	f000 bcfa 	b.w	8005b48 <HAL_ADC_ConfigChannel+0xa28>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fdae 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f040 84de 	bne.w	8005b2a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a9e      	ldr	r2, [pc, #632]	; (80053ec <HAL_ADC_ConfigChannel+0x2cc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d033      	beq.n	80051e0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005180:	2b00      	cmp	r3, #0
 8005182:	d108      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x76>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	0e9b      	lsrs	r3, r3, #26
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2201      	movs	r2, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	e01d      	b.n	80051d2 <HAL_ADC_ConfigChannel+0xb2>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80051aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80051b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80051ba:	2320      	movs	r3, #32
 80051bc:	e004      	b.n	80051c8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80051be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	69d1      	ldr	r1, [r2, #28]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	430b      	orrs	r3, r1
 80051de:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	f7ff fc6f 	bl	8004ad0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fd63 	bl	8004cc2 <LL_ADC_REG_IsConversionOngoing>
 80051fc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fd6f 	bl	8004ce8 <LL_ADC_INJ_IsConversionOngoing>
 800520a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 8270 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005218:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 826b 	bne.w	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	461a      	mov	r2, r3
 8005230:	f7ff fc7a 	bl	8004b28 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6c      	ldr	r2, [pc, #432]	; (80053ec <HAL_ADC_ConfigChannel+0x2cc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10d      	bne.n	800525a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	08db      	lsrs	r3, r3, #3
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005258:	e032      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800525a:	4b65      	ldr	r3, [pc, #404]	; (80053f0 <HAL_ADC_ConfigChannel+0x2d0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005266:	d10b      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x160>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	e01d      	b.n	80052bc <HAL_ADC_ConfigChannel+0x19c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x186>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	e00a      	b.n	80052bc <HAL_ADC_ConfigChannel+0x19c>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d048      	beq.n	800535a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6919      	ldr	r1, [r3, #16]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d8:	f7ff fb08 	bl	80048ec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a42      	ldr	r2, [pc, #264]	; (80053ec <HAL_ADC_ConfigChannel+0x2cc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d119      	bne.n	800531a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7ff fba0 	bl	8004a38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6919      	ldr	r1, [r3, #16]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d102      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x1f0>
 800530a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800530e:	e000      	b.n	8005312 <HAL_ADC_ConfigChannel+0x1f2>
 8005310:	2300      	movs	r3, #0
 8005312:	461a      	mov	r2, r3
 8005314:	f7ff fb6e 	bl	80049f4 <LL_ADC_SetOffsetSaturation>
 8005318:	e1ee      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6919      	ldr	r1, [r3, #16]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005328:	2b01      	cmp	r3, #1
 800532a:	d102      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x212>
 800532c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005330:	e000      	b.n	8005334 <HAL_ADC_ConfigChannel+0x214>
 8005332:	2300      	movs	r3, #0
 8005334:	461a      	mov	r2, r3
 8005336:	f7ff fb3b 	bl	80049b0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	7e1b      	ldrb	r3, [r3, #24]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d102      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x230>
 800534a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800534e:	e000      	b.n	8005352 <HAL_ADC_ConfigChannel+0x232>
 8005350:	2300      	movs	r3, #0
 8005352:	461a      	mov	r2, r3
 8005354:	f7ff fb12 	bl	800497c <LL_ADC_SetDataRightShift>
 8005358:	e1ce      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_ADC_ConfigChannel+0x2cc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	f040 8181 	bne.w	8005668 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff faef 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x272>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fae4 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	0e9b      	lsrs	r3, r3, #26
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	e01e      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x2b0>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fad9 	bl	8004950 <LL_ADC_GetOffsetChannel>
 800539e:	4603      	mov	r3, r0
 80053a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80053b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80053b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e004      	b.n	80053ce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80053c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x2d4>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0e9b      	lsrs	r3, r3, #26
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	e01e      	b.n	8005426 <HAL_ADC_ConfigChannel+0x306>
 80053e8:	47ff0000 	.word	0x47ff0000
 80053ec:	58026000 	.word	0x58026000
 80053f0:	5c001000 	.word	0x5c001000
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800540c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005418:	2320      	movs	r3, #32
 800541a:	e004      	b.n	8005426 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800541c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005420:	fab3 f383 	clz	r3, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	429a      	cmp	r2, r3
 8005428:	d106      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fb22 	bl	8004a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fa86 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005444:	4603      	mov	r3, r0
 8005446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x344>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fa7b 	bl	8004950 <LL_ADC_GetOffsetChannel>
 800545a:	4603      	mov	r3, r0
 800545c:	0e9b      	lsrs	r3, r3, #26
 800545e:	f003 021f 	and.w	r2, r3, #31
 8005462:	e01e      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x382>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fa70 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005470:	4603      	mov	r3, r0
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800548a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005492:	2320      	movs	r3, #32
 8005494:	e004      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x39a>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	e018      	b.n	80054ec <HAL_ADC_ConfigChannel+0x3cc>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80054ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80054d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80054de:	2320      	movs	r3, #32
 80054e0:	e004      	b.n	80054ec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80054e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d106      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fabf 	bl	8004a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fa23 	bl	8004950 <LL_ADC_GetOffsetChannel>
 800550a:	4603      	mov	r3, r0
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <HAL_ADC_ConfigChannel+0x40a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fa18 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005520:	4603      	mov	r3, r0
 8005522:	0e9b      	lsrs	r3, r3, #26
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	e01e      	b.n	8005568 <HAL_ADC_ConfigChannel+0x448>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2102      	movs	r1, #2
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff fa0d 	bl	8004950 <LL_ADC_GetOffsetChannel>
 8005536:	4603      	mov	r3, r0
 8005538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005540:	fa93 f3a3 	rbit	r3, r3
 8005544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800554c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005558:	2320      	movs	r3, #32
 800555a:	e004      	b.n	8005566 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800555c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x460>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	e014      	b.n	80055aa <HAL_ADC_ConfigChannel+0x48a>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800558e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800559c:	2320      	movs	r3, #32
 800559e:	e004      	b.n	80055aa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80055a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d106      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fa60 	bl	8004a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2103      	movs	r1, #3
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f9c4 	bl	8004950 <LL_ADC_GetOffsetChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x4c8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2103      	movs	r1, #3
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f9b9 	bl	8004950 <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	e017      	b.n	8005618 <HAL_ADC_ConfigChannel+0x4f8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2103      	movs	r1, #3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff f9ae 	bl	8004950 <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800560a:	2320      	movs	r3, #32
 800560c:	e003      	b.n	8005616 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800560e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005610:	fab3 f383 	clz	r3, r3
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x510>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	0e9b      	lsrs	r3, r3, #26
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	e011      	b.n	8005654 <HAL_ADC_ConfigChannel+0x534>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005638:	fa93 f3a3 	rbit	r3, r3
 800563c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800563e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005640:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005648:	2320      	movs	r3, #32
 800564a:	e003      	b.n	8005654 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800564c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	429a      	cmp	r2, r3
 8005656:	d14f      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2200      	movs	r2, #0
 800565e:	2103      	movs	r1, #3
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fa0b 	bl	8004a7c <LL_ADC_SetOffsetState>
 8005666:	e047      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	069b      	lsls	r3, r3, #26
 8005678:	429a      	cmp	r2, r3
 800567a:	d107      	bne.n	800568c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	069b      	lsls	r3, r3, #26
 800569c:	429a      	cmp	r2, r3
 800569e:	d107      	bne.n	80056b0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d107      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	069b      	lsls	r3, r3, #26
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff facd 	bl	8004c9c <LL_ADC_IsEnabled>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 8219 	bne.w	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	461a      	mov	r2, r3
 8005718:	f7ff fa32 	bl	8004b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4aa1      	ldr	r2, [pc, #644]	; (80059a8 <HAL_ADC_ConfigChannel+0x888>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f040 812e 	bne.w	8005984 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x630>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0e9b      	lsrs	r3, r3, #26
 800573e:	3301      	adds	r3, #1
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2b09      	cmp	r3, #9
 8005746:	bf94      	ite	ls
 8005748:	2301      	movls	r3, #1
 800574a:	2300      	movhi	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e019      	b.n	8005784 <HAL_ADC_ConfigChannel+0x664>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800575e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005768:	2320      	movs	r3, #32
 800576a:	e003      	b.n	8005774 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800576c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576e:	fab3 f383 	clz	r3, r3
 8005772:	b2db      	uxtb	r3, r3
 8005774:	3301      	adds	r3, #1
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2b09      	cmp	r3, #9
 800577c:	bf94      	ite	ls
 800577e:	2301      	movls	r3, #1
 8005780:	2300      	movhi	r3, #0
 8005782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005784:	2b00      	cmp	r3, #0
 8005786:	d079      	beq.n	800587c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x684>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0e9b      	lsrs	r3, r3, #26
 800579a:	3301      	adds	r3, #1
 800579c:	069b      	lsls	r3, r3, #26
 800579e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057a2:	e015      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x6b0>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	fa93 f3a3 	rbit	r3, r3
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80057b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80057b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80057bc:	2320      	movs	r3, #32
 80057be:	e003      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80057c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3301      	adds	r3, #1
 80057ca:	069b      	lsls	r3, r3, #26
 80057cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x6d0>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0e9b      	lsrs	r3, r3, #26
 80057e2:	3301      	adds	r3, #1
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	e017      	b.n	8005820 <HAL_ADC_ConfigChannel+0x700>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f8:	fa93 f3a3 	rbit	r3, r3
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005808:	2320      	movs	r3, #32
 800580a:	e003      	b.n	8005814 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	3301      	adds	r3, #1
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	ea42 0103 	orr.w	r1, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x726>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0e9b      	lsrs	r3, r3, #26
 8005836:	3301      	adds	r3, #1
 8005838:	f003 021f 	and.w	r2, r3, #31
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	051b      	lsls	r3, r3, #20
 8005844:	e018      	b.n	8005878 <HAL_ADC_ConfigChannel+0x758>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	fa93 f3a3 	rbit	r3, r3
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800585e:	2320      	movs	r3, #32
 8005860:	e003      	b.n	800586a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	fab3 f383 	clz	r3, r3
 8005868:	b2db      	uxtb	r3, r3
 800586a:	3301      	adds	r3, #1
 800586c:	f003 021f 	and.w	r2, r3, #31
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005878:	430b      	orrs	r3, r1
 800587a:	e07e      	b.n	800597a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_ADC_ConfigChannel+0x778>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	3301      	adds	r3, #1
 8005890:	069b      	lsls	r3, r3, #26
 8005892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005896:	e015      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x7a4>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80058b0:	2320      	movs	r3, #32
 80058b2:	e003      	b.n	80058bc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	3301      	adds	r3, #1
 80058be:	069b      	lsls	r3, r3, #26
 80058c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x7c4>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	0e9b      	lsrs	r3, r3, #26
 80058d6:	3301      	adds	r3, #1
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	e017      	b.n	8005914 <HAL_ADC_ConfigChannel+0x7f4>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa93 f3a3 	rbit	r3, r3
 80058f0:	61bb      	str	r3, [r7, #24]
  return result;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80058fc:	2320      	movs	r3, #32
 80058fe:	e003      	b.n	8005908 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	3301      	adds	r3, #1
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	ea42 0103 	orr.w	r1, r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10d      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x820>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	0e9b      	lsrs	r3, r3, #26
 800592a:	3301      	adds	r3, #1
 800592c:	f003 021f 	and.w	r2, r3, #31
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	3b1e      	subs	r3, #30
 8005938:	051b      	lsls	r3, r3, #20
 800593a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800593e:	e01b      	b.n	8005978 <HAL_ADC_ConfigChannel+0x858>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	fa93 f3a3 	rbit	r3, r3
 800594c:	60fb      	str	r3, [r7, #12]
  return result;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005958:	2320      	movs	r3, #32
 800595a:	e003      	b.n	8005964 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fab3 f383 	clz	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	3301      	adds	r3, #1
 8005966:	f003 021f 	and.w	r2, r3, #31
 800596a:	4613      	mov	r3, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4413      	add	r3, r2
 8005970:	3b1e      	subs	r3, #30
 8005972:	051b      	lsls	r3, r3, #20
 8005974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005978:	430b      	orrs	r3, r1
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	6892      	ldr	r2, [r2, #8]
 800597e:	4619      	mov	r1, r3
 8005980:	f7ff f8d2 	bl	8004b28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f280 80d7 	bge.w	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a06      	ldr	r2, [pc, #24]	; (80059ac <HAL_ADC_ConfigChannel+0x88c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_ADC_ConfigChannel+0x882>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <HAL_ADC_ConfigChannel+0x890>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10a      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x898>
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_ADC_ConfigChannel+0x894>)
 80059a4:	e009      	b.n	80059ba <HAL_ADC_ConfigChannel+0x89a>
 80059a6:	bf00      	nop
 80059a8:	47ff0000 	.word	0x47ff0000
 80059ac:	40022000 	.word	0x40022000
 80059b0:	40022100 	.word	0x40022100
 80059b4:	40022300 	.word	0x40022300
 80059b8:	4b65      	ldr	r3, [pc, #404]	; (8005b50 <HAL_ADC_ConfigChannel+0xa30>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe ff88 	bl	80048d0 <LL_ADC_GetCommonPathInternalCh>
 80059c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a62      	ldr	r2, [pc, #392]	; (8005b54 <HAL_ADC_ConfigChannel+0xa34>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_ADC_ConfigChannel+0x8b8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <HAL_ADC_ConfigChannel+0xa38>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10e      	bne.n	80059f6 <HAL_ADC_ConfigChannel+0x8d6>
 80059d8:	485e      	ldr	r0, [pc, #376]	; (8005b54 <HAL_ADC_ConfigChannel+0xa34>)
 80059da:	f7ff f95f 	bl	8004c9c <LL_ADC_IsEnabled>
 80059de:	4604      	mov	r4, r0
 80059e0:	485d      	ldr	r0, [pc, #372]	; (8005b58 <HAL_ADC_ConfigChannel+0xa38>)
 80059e2:	f7ff f95b 	bl	8004c9c <LL_ADC_IsEnabled>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4323      	orrs	r3, r4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	e008      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x8e8>
 80059f6:	4859      	ldr	r0, [pc, #356]	; (8005b5c <HAL_ADC_ConfigChannel+0xa3c>)
 80059f8:	f7ff f950 	bl	8004c9c <LL_ADC_IsEnabled>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8084 	beq.w	8005b16 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a53      	ldr	r2, [pc, #332]	; (8005b60 <HAL_ADC_ConfigChannel+0xa40>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d132      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x95e>
 8005a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d12c      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4c      	ldr	r2, [pc, #304]	; (8005b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	f040 8086 	bne.w	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a47      	ldr	r2, [pc, #284]	; (8005b54 <HAL_ADC_ConfigChannel+0xa34>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x924>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a46      	ldr	r2, [pc, #280]	; (8005b58 <HAL_ADC_ConfigChannel+0xa38>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_ADC_ConfigChannel+0x928>
 8005a44:	4a47      	ldr	r2, [pc, #284]	; (8005b64 <HAL_ADC_ConfigChannel+0xa44>)
 8005a46:	e000      	b.n	8005a4a <HAL_ADC_ConfigChannel+0x92a>
 8005a48:	4a41      	ldr	r2, [pc, #260]	; (8005b50 <HAL_ADC_ConfigChannel+0xa30>)
 8005a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fe ff28 	bl	80048aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <HAL_ADC_ConfigChannel+0xa48>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	4a42      	ldr	r2, [pc, #264]	; (8005b6c <HAL_ADC_ConfigChannel+0xa4c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	3301      	adds	r3, #1
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a6e:	e002      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f9      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a7c:	e05e      	b.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <HAL_ADC_ConfigChannel+0xa50>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d120      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x9aa>
 8005a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11a      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a30      	ldr	r2, [pc, #192]	; (8005b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d14e      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <HAL_ADC_ConfigChannel+0xa34>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_ADC_ConfigChannel+0x992>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <HAL_ADC_ConfigChannel+0xa38>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x996>
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <HAL_ADC_ConfigChannel+0xa44>)
 8005ab4:	e000      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x998>
 8005ab6:	4a26      	ldr	r2, [pc, #152]	; (8005b50 <HAL_ADC_ConfigChannel+0xa30>)
 8005ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f7fe fef1 	bl	80048aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ac8:	e038      	b.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <HAL_ADC_ConfigChannel+0xa54>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d133      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
 8005ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d12d      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	; (8005b5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d128      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_ADC_ConfigChannel+0xa34>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_ADC_ConfigChannel+0x9de>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <HAL_ADC_ConfigChannel+0xa38>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x9e2>
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_ADC_ConfigChannel+0xa44>)
 8005b00:	e000      	b.n	8005b04 <HAL_ADC_ConfigChannel+0x9e4>
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <HAL_ADC_ConfigChannel+0xa30>)
 8005b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fecb 	bl	80048aa <LL_ADC_SetCommonPathInternalCh>
 8005b14:	e012      	b.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005b28:	e008      	b.n	8005b3c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005b44:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	37e4      	adds	r7, #228	; 0xe4
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd90      	pop	{r4, r7, pc}
 8005b50:	58026300 	.word	0x58026300
 8005b54:	40022000 	.word	0x40022000
 8005b58:	40022100 	.word	0x40022100
 8005b5c:	58026000 	.word	0x58026000
 8005b60:	c7520000 	.word	0xc7520000
 8005b64:	40022300 	.word	0x40022300
 8005b68:	24000000 	.word	0x24000000
 8005b6c:	053e2d63 	.word	0x053e2d63
 8005b70:	c3210000 	.word	0xc3210000
 8005b74:	cb840000 	.word	0xcb840000

08005b78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a6c      	ldr	r2, [pc, #432]	; (8005d38 <ADC_ConfigureBoostMode+0x1c0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <ADC_ConfigureBoostMode+0x1c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6b      	ldr	r2, [pc, #428]	; (8005d3c <ADC_ConfigureBoostMode+0x1c4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <ADC_ConfigureBoostMode+0x30>
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <ADC_ConfigureBoostMode+0x1c8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e008      	b.n	8005bba <ADC_ConfigureBoostMode+0x42>
 8005ba8:	4b66      	ldr	r3, [pc, #408]	; (8005d44 <ADC_ConfigureBoostMode+0x1cc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01c      	beq.n	8005bf8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005bbe:	f005 f895 	bl	800acec <HAL_RCC_GetHCLKFreq>
 8005bc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bcc:	d010      	beq.n	8005bf0 <ADC_ConfigureBoostMode+0x78>
 8005bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bd2:	d873      	bhi.n	8005cbc <ADC_ConfigureBoostMode+0x144>
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d002      	beq.n	8005be0 <ADC_ConfigureBoostMode+0x68>
 8005bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bde:	d16d      	bne.n	8005cbc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	60fb      	str	r3, [r7, #12]
        break;
 8005bee:	e068      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	60fb      	str	r3, [r7, #12]
        break;
 8005bf6:	e064      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005bf8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bfc:	f04f 0100 	mov.w	r1, #0
 8005c00:	f006 fa70 	bl	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c0e:	d051      	beq.n	8005cb4 <ADC_ConfigureBoostMode+0x13c>
 8005c10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c14:	d854      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c1a:	d047      	beq.n	8005cac <ADC_ConfigureBoostMode+0x134>
 8005c1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c20:	d84e      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c26:	d03d      	beq.n	8005ca4 <ADC_ConfigureBoostMode+0x12c>
 8005c28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c2c:	d848      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c32:	d033      	beq.n	8005c9c <ADC_ConfigureBoostMode+0x124>
 8005c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c38:	d842      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c3e:	d029      	beq.n	8005c94 <ADC_ConfigureBoostMode+0x11c>
 8005c40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c44:	d83c      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c4a:	d01a      	beq.n	8005c82 <ADC_ConfigureBoostMode+0x10a>
 8005c4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c50:	d836      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c56:	d014      	beq.n	8005c82 <ADC_ConfigureBoostMode+0x10a>
 8005c58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c5c:	d830      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d00e      	beq.n	8005c82 <ADC_ConfigureBoostMode+0x10a>
 8005c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c68:	d82a      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c6e:	d008      	beq.n	8005c82 <ADC_ConfigureBoostMode+0x10a>
 8005c70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c74:	d824      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
 8005c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c7a:	d002      	beq.n	8005c82 <ADC_ConfigureBoostMode+0x10a>
 8005c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c80:	d11e      	bne.n	8005cc0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	0c9b      	lsrs	r3, r3, #18
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	60fb      	str	r3, [r7, #12]
        break;
 8005c92:	e016      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
        break;
 8005c9a:	e012      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	60fb      	str	r3, [r7, #12]
        break;
 8005ca2:	e00e      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	60fb      	str	r3, [r7, #12]
        break;
 8005caa:	e00a      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	60fb      	str	r3, [r7, #12]
        break;
 8005cb2:	e006      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	60fb      	str	r3, [r7, #12]
        break;
 8005cba:	e002      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005cc0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <ADC_ConfigureBoostMode+0x1d0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d808      	bhi.n	8005ce2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cde:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005ce0:	e025      	b.n	8005d2e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <ADC_ConfigureBoostMode+0x1d4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d80a      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cfc:	609a      	str	r2, [r3, #8]
}
 8005cfe:	e016      	b.n	8005d2e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <ADC_ConfigureBoostMode+0x1d8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d80a      	bhi.n	8005d1e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	e007      	b.n	8005d2e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d2c:	609a      	str	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40022000 	.word	0x40022000
 8005d3c:	40022100 	.word	0x40022100
 8005d40:	40022300 	.word	0x40022300
 8005d44:	58026300 	.word	0x58026300
 8005d48:	005f5e10 	.word	0x005f5e10
 8005d4c:	00bebc20 	.word	0x00bebc20
 8005d50:	017d7840 	.word	0x017d7840

08005d54 <LL_ADC_IsEnabled>:
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <LL_ADC_IsEnabled+0x18>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <LL_ADC_IsEnabled+0x1a>
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d101      	bne.n	8005d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b0a3      	sub	sp, #140	; 0x8c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e0c1      	b.n	8005f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5e      	ldr	r2, [pc, #376]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d102      	bne.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005dd8:	4b5d      	ldr	r3, [pc, #372]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0a0      	b.n	8005f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff ffb9 	bl	8005d7a <LL_ADC_REG_IsConversionOngoing>
 8005e08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff ffb2 	bl	8005d7a <LL_ADC_REG_IsConversionOngoing>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f040 8081 	bne.w	8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d17c      	bne.n	8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a48      	ldr	r2, [pc, #288]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a46      	ldr	r2, [pc, #280]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005e3a:	4b46      	ldr	r3, [pc, #280]	; (8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005e3c:	e000      	b.n	8005e40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005e3e:	4b46      	ldr	r3, [pc, #280]	; (8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005e40:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d039      	beq.n	8005ebe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a3a      	ldr	r2, [pc, #232]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a39      	ldr	r2, [pc, #228]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10e      	bne.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005e70:	4836      	ldr	r0, [pc, #216]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e72:	f7ff ff6f 	bl	8005d54 <LL_ADC_IsEnabled>
 8005e76:	4604      	mov	r4, r0
 8005e78:	4835      	ldr	r0, [pc, #212]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e7a:	f7ff ff6b 	bl	8005d54 <LL_ADC_IsEnabled>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4323      	orrs	r3, r4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	e008      	b.n	8005ea0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005e8e:	4833      	ldr	r0, [pc, #204]	; (8005f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005e90:	f7ff ff60 	bl	8005d54 <LL_ADC_IsEnabled>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d047      	beq.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	6811      	ldr	r1, [r2, #0]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	6892      	ldr	r2, [r2, #8]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ebc:	e03a      	b.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10e      	bne.n	8005efc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005ede:	481b      	ldr	r0, [pc, #108]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ee0:	f7ff ff38 	bl	8005d54 <LL_ADC_IsEnabled>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	481a      	ldr	r0, [pc, #104]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ee8:	f7ff ff34 	bl	8005d54 <LL_ADC_IsEnabled>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4323      	orrs	r3, r4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	e008      	b.n	8005f0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005efc:	4817      	ldr	r0, [pc, #92]	; (8005f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005efe:	f7ff ff29 	bl	8005d54 <LL_ADC_IsEnabled>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f1e:	e009      	b.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005f32:	e000      	b.n	8005f36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005f3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	378c      	adds	r7, #140	; 0x8c
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40022000 	.word	0x40022000
 8005f50:	40022100 	.word	0x40022100
 8005f54:	40022300 	.word	0x40022300
 8005f58:	58026300 	.word	0x58026300
 8005f5c:	58026000 	.word	0x58026000
 8005f60:	fffff0e0 	.word	0xfffff0e0

08005f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f80:	4013      	ands	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f92:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	60d3      	str	r3, [r2, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	e000ed00 	.word	0xe000ed00
 8005fa8:	05fa0000 	.word	0x05fa0000

08005fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	f003 0307 	and.w	r3, r3, #7
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	db0b      	blt.n	8005ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	f003 021f 	and.w	r2, r3, #31
 8005fe0:	4907      	ldr	r1, [pc, #28]	; (8006000 <__NVIC_EnableIRQ+0x38>)
 8005fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2001      	movs	r0, #1
 8005fea:	fa00 f202 	lsl.w	r2, r0, r2
 8005fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000e100 	.word	0xe000e100

08006004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	6039      	str	r1, [r7, #0]
 800600e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db0a      	blt.n	800602e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	490c      	ldr	r1, [pc, #48]	; (8006050 <__NVIC_SetPriority+0x4c>)
 800601e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	440b      	add	r3, r1
 8006028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800602c:	e00a      	b.n	8006044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	4908      	ldr	r1, [pc, #32]	; (8006054 <__NVIC_SetPriority+0x50>)
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	3b04      	subs	r3, #4
 800603c:	0112      	lsls	r2, r2, #4
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	440b      	add	r3, r1
 8006042:	761a      	strb	r2, [r3, #24]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	e000e100 	.word	0xe000e100
 8006054:	e000ed00 	.word	0xe000ed00

08006058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	; 0x24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f1c3 0307 	rsb	r3, r3, #7
 8006072:	2b04      	cmp	r3, #4
 8006074:	bf28      	it	cs
 8006076:	2304      	movcs	r3, #4
 8006078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3304      	adds	r3, #4
 800607e:	2b06      	cmp	r3, #6
 8006080:	d902      	bls.n	8006088 <NVIC_EncodePriority+0x30>
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3b03      	subs	r3, #3
 8006086:	e000      	b.n	800608a <NVIC_EncodePriority+0x32>
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800608c:	f04f 32ff 	mov.w	r2, #4294967295
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	43da      	mvns	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	401a      	ands	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a0:	f04f 31ff 	mov.w	r1, #4294967295
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fa01 f303 	lsl.w	r3, r1, r3
 80060aa:	43d9      	mvns	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b0:	4313      	orrs	r3, r2
         );
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d0:	d301      	bcc.n	80060d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060d2:	2301      	movs	r3, #1
 80060d4:	e00f      	b.n	80060f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <SysTick_Config+0x40>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3b01      	subs	r3, #1
 80060dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060de:	210f      	movs	r1, #15
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	f7ff ff8e 	bl	8006004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <SysTick_Config+0x40>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <SysTick_Config+0x40>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000e010 	.word	0xe000e010

08006104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff29 	bl	8005f64 <__NVIC_SetPriorityGrouping>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	4603      	mov	r3, r0
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006128:	f7ff ff40 	bl	8005fac <__NVIC_GetPriorityGrouping>
 800612c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	6978      	ldr	r0, [r7, #20]
 8006134:	f7ff ff90 	bl	8006058 <NVIC_EncodePriority>
 8006138:	4602      	mov	r2, r0
 800613a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff ff5f 	bl	8006004 <__NVIC_SetPriority>
}
 8006146:	bf00      	nop
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	4603      	mov	r3, r0
 8006156:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff ff33 	bl	8005fc8 <__NVIC_EnableIRQ>
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ffa4 	bl	80060c0 <SysTick_Config>
 8006178:	4603      	mov	r3, r0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800618c:	f7fe fb34 	bl	80047f8 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e312      	b.n	80067c2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a66      	ldr	r2, [pc, #408]	; (800633c <HAL_DMA_Init+0x1b8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a65      	ldr	r2, [pc, #404]	; (8006340 <HAL_DMA_Init+0x1bc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a63      	ldr	r2, [pc, #396]	; (8006344 <HAL_DMA_Init+0x1c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a62      	ldr	r2, [pc, #392]	; (8006348 <HAL_DMA_Init+0x1c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a60      	ldr	r2, [pc, #384]	; (800634c <HAL_DMA_Init+0x1c8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a5f      	ldr	r2, [pc, #380]	; (8006350 <HAL_DMA_Init+0x1cc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5d      	ldr	r2, [pc, #372]	; (8006354 <HAL_DMA_Init+0x1d0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5c      	ldr	r2, [pc, #368]	; (8006358 <HAL_DMA_Init+0x1d4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5a      	ldr	r2, [pc, #360]	; (800635c <HAL_DMA_Init+0x1d8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_Init+0xb8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a59      	ldr	r2, [pc, #356]	; (8006360 <HAL_DMA_Init+0x1dc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_Init+0xb8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a57      	ldr	r2, [pc, #348]	; (8006364 <HAL_DMA_Init+0x1e0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_Init+0xb8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a56      	ldr	r2, [pc, #344]	; (8006368 <HAL_DMA_Init+0x1e4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_Init+0xb8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a54      	ldr	r2, [pc, #336]	; (800636c <HAL_DMA_Init+0x1e8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_Init+0xb8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a53      	ldr	r2, [pc, #332]	; (8006370 <HAL_DMA_Init+0x1ec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_Init+0xb8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a51      	ldr	r2, [pc, #324]	; (8006374 <HAL_DMA_Init+0x1f0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_Init+0xb8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a50      	ldr	r2, [pc, #320]	; (8006378 <HAL_DMA_Init+0x1f4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_DMA_Init+0xbc>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_DMA_Init+0xbe>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 813c 	beq.w	80064c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a37      	ldr	r2, [pc, #220]	; (800633c <HAL_DMA_Init+0x1b8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04a      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a36      	ldr	r2, [pc, #216]	; (8006340 <HAL_DMA_Init+0x1bc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d045      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a34      	ldr	r2, [pc, #208]	; (8006344 <HAL_DMA_Init+0x1c0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d040      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a33      	ldr	r2, [pc, #204]	; (8006348 <HAL_DMA_Init+0x1c4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d03b      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a31      	ldr	r2, [pc, #196]	; (800634c <HAL_DMA_Init+0x1c8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d036      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_DMA_Init+0x1cc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d031      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <HAL_DMA_Init+0x1d0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02c      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <HAL_DMA_Init+0x1d4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d027      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2b      	ldr	r2, [pc, #172]	; (800635c <HAL_DMA_Init+0x1d8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_DMA_Init+0x1dc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01d      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a28      	ldr	r2, [pc, #160]	; (8006364 <HAL_DMA_Init+0x1e0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a27      	ldr	r2, [pc, #156]	; (8006368 <HAL_DMA_Init+0x1e4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a25      	ldr	r2, [pc, #148]	; (800636c <HAL_DMA_Init+0x1e8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_DMA_Init+0x1ec>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <HAL_DMA_Init+0x1f0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_DMA_Init+0x174>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_DMA_Init+0x1f4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <HAL_DMA_Init+0x186>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e007      	b.n	800631a <HAL_DMA_Init+0x196>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800631a:	e02f      	b.n	800637c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800631c:	f7fe fa6c 	bl	80047f8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b05      	cmp	r3, #5
 8006328:	d928      	bls.n	800637c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2203      	movs	r2, #3
 8006334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e242      	b.n	80067c2 <HAL_DMA_Init+0x63e>
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1c8      	bne.n	800631c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4b83      	ldr	r3, [pc, #524]	; (80065a4 <HAL_DMA_Init+0x420>)
 8006396:	4013      	ands	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d107      	bne.n	80063e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4313      	orrs	r3, r2
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b28      	cmp	r3, #40	; 0x28
 80063e6:	d903      	bls.n	80063f0 <HAL_DMA_Init+0x26c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b2e      	cmp	r3, #46	; 0x2e
 80063ee:	d91f      	bls.n	8006430 <HAL_DMA_Init+0x2ac>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b3e      	cmp	r3, #62	; 0x3e
 80063f6:	d903      	bls.n	8006400 <HAL_DMA_Init+0x27c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b42      	cmp	r3, #66	; 0x42
 80063fe:	d917      	bls.n	8006430 <HAL_DMA_Init+0x2ac>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b46      	cmp	r3, #70	; 0x46
 8006406:	d903      	bls.n	8006410 <HAL_DMA_Init+0x28c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b48      	cmp	r3, #72	; 0x48
 800640e:	d90f      	bls.n	8006430 <HAL_DMA_Init+0x2ac>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b4e      	cmp	r3, #78	; 0x4e
 8006416:	d903      	bls.n	8006420 <HAL_DMA_Init+0x29c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b52      	cmp	r3, #82	; 0x52
 800641e:	d907      	bls.n	8006430 <HAL_DMA_Init+0x2ac>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b73      	cmp	r3, #115	; 0x73
 8006426:	d905      	bls.n	8006434 <HAL_DMA_Init+0x2b0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b77      	cmp	r3, #119	; 0x77
 800642e:	d801      	bhi.n	8006434 <HAL_DMA_Init+0x2b0>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_DMA_Init+0x2b2>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006440:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b04      	cmp	r3, #4
 800646a:	d117      	bne.n	800649c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00e      	beq.n	800649c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 f9b4 	bl	80077ec <DMA_CheckFifoParam>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2240      	movs	r2, #64	; 0x40
 800648e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e192      	b.n	80067c2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f8ef 	bl	8007688 <DMA_CalcBaseAndBitshift>
 80064aa:	4603      	mov	r3, r0
 80064ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	223f      	movs	r2, #63	; 0x3f
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	e0c8      	b.n	8006652 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a38      	ldr	r2, [pc, #224]	; (80065a8 <HAL_DMA_Init+0x424>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d022      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a37      	ldr	r2, [pc, #220]	; (80065ac <HAL_DMA_Init+0x428>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01d      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a35      	ldr	r2, [pc, #212]	; (80065b0 <HAL_DMA_Init+0x42c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a34      	ldr	r2, [pc, #208]	; (80065b4 <HAL_DMA_Init+0x430>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d013      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <HAL_DMA_Init+0x434>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a31      	ldr	r2, [pc, #196]	; (80065bc <HAL_DMA_Init+0x438>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <HAL_DMA_Init+0x43c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_DMA_Init+0x38c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2e      	ldr	r2, [pc, #184]	; (80065c4 <HAL_DMA_Init+0x440>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d101      	bne.n	8006514 <HAL_DMA_Init+0x390>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <HAL_DMA_Init+0x392>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8092 	beq.w	8006640 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <HAL_DMA_Init+0x424>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d021      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a20      	ldr	r2, [pc, #128]	; (80065ac <HAL_DMA_Init+0x428>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d01c      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_DMA_Init+0x42c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d017      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <HAL_DMA_Init+0x430>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d012      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <HAL_DMA_Init+0x434>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00d      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <HAL_DMA_Init+0x438>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d008      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_DMA_Init+0x43c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <HAL_DMA_Init+0x3e6>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <HAL_DMA_Init+0x440>)
 8006568:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <HAL_DMA_Init+0x444>)
 8006586:	4013      	ands	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d01c      	beq.n	80065cc <HAL_DMA_Init+0x448>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d102      	bne.n	80065a0 <HAL_DMA_Init+0x41c>
 800659a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800659e:	e016      	b.n	80065ce <HAL_DMA_Init+0x44a>
 80065a0:	2300      	movs	r3, #0
 80065a2:	e014      	b.n	80065ce <HAL_DMA_Init+0x44a>
 80065a4:	fe10803f 	.word	0xfe10803f
 80065a8:	58025408 	.word	0x58025408
 80065ac:	5802541c 	.word	0x5802541c
 80065b0:	58025430 	.word	0x58025430
 80065b4:	58025444 	.word	0x58025444
 80065b8:	58025458 	.word	0x58025458
 80065bc:	5802546c 	.word	0x5802546c
 80065c0:	58025480 	.word	0x58025480
 80065c4:	58025494 	.word	0x58025494
 80065c8:	fffe000f 	.word	0xfffe000f
 80065cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68d2      	ldr	r2, [r2, #12]
 80065d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	4b6e      	ldr	r3, [pc, #440]	; (80067cc <HAL_DMA_Init+0x648>)
 8006614:	4413      	add	r3, r2
 8006616:	4a6e      	ldr	r2, [pc, #440]	; (80067d0 <HAL_DMA_Init+0x64c>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	009a      	lsls	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f82f 	bl	8007688 <DMA_CalcBaseAndBitshift>
 800662a:	4603      	mov	r3, r0
 800662c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2201      	movs	r2, #1
 8006638:	409a      	lsls	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e008      	b.n	8006652 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2240      	movs	r2, #64	; 0x40
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e0b7      	b.n	80067c2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5f      	ldr	r2, [pc, #380]	; (80067d4 <HAL_DMA_Init+0x650>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d072      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <HAL_DMA_Init+0x654>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d06d      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5c      	ldr	r2, [pc, #368]	; (80067dc <HAL_DMA_Init+0x658>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d068      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_DMA_Init+0x65c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d063      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a59      	ldr	r2, [pc, #356]	; (80067e4 <HAL_DMA_Init+0x660>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d05e      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_DMA_Init+0x664>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d059      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a56      	ldr	r2, [pc, #344]	; (80067ec <HAL_DMA_Init+0x668>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d054      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <HAL_DMA_Init+0x66c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d04f      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a53      	ldr	r2, [pc, #332]	; (80067f4 <HAL_DMA_Init+0x670>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d04a      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a51      	ldr	r2, [pc, #324]	; (80067f8 <HAL_DMA_Init+0x674>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d045      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a50      	ldr	r2, [pc, #320]	; (80067fc <HAL_DMA_Init+0x678>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d040      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a4e      	ldr	r2, [pc, #312]	; (8006800 <HAL_DMA_Init+0x67c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d03b      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <HAL_DMA_Init+0x680>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d036      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a4b      	ldr	r2, [pc, #300]	; (8006808 <HAL_DMA_Init+0x684>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d031      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_DMA_Init+0x688>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d02c      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a48      	ldr	r2, [pc, #288]	; (8006810 <HAL_DMA_Init+0x68c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d027      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a47      	ldr	r2, [pc, #284]	; (8006814 <HAL_DMA_Init+0x690>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a45      	ldr	r2, [pc, #276]	; (8006818 <HAL_DMA_Init+0x694>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <HAL_DMA_Init+0x698>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a42      	ldr	r2, [pc, #264]	; (8006820 <HAL_DMA_Init+0x69c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a41      	ldr	r2, [pc, #260]	; (8006824 <HAL_DMA_Init+0x6a0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_DMA_Init+0x6a4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3e      	ldr	r2, [pc, #248]	; (800682c <HAL_DMA_Init+0x6a8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_DMA_Init+0x5be>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <HAL_DMA_Init+0x6ac>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <HAL_DMA_Init+0x5c2>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_DMA_Init+0x5c4>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d032      	beq.n	80067b2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f8c9 	bl	80078e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d102      	bne.n	8006760 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006774:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_DMA_Init+0x61c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d80c      	bhi.n	80067a0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f946 	bl	8007a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	e008      	b.n	80067b2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	a7fdabf8 	.word	0xa7fdabf8
 80067d0:	cccccccd 	.word	0xcccccccd
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494

08006834 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006840:	4b67      	ldr	r3, [pc, #412]	; (80069e0 <HAL_DMA_IRQHandler+0x1ac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_DMA_IRQHandler+0x1b0>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0a9b      	lsrs	r3, r3, #10
 800684c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006852:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a5f      	ldr	r2, [pc, #380]	; (80069e8 <HAL_DMA_IRQHandler+0x1b4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d04a      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5d      	ldr	r2, [pc, #372]	; (80069ec <HAL_DMA_IRQHandler+0x1b8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d045      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5c      	ldr	r2, [pc, #368]	; (80069f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d040      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a5a      	ldr	r2, [pc, #360]	; (80069f4 <HAL_DMA_IRQHandler+0x1c0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d03b      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a59      	ldr	r2, [pc, #356]	; (80069f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d036      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_DMA_IRQHandler+0x1c8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d031      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a56      	ldr	r2, [pc, #344]	; (8006a00 <HAL_DMA_IRQHandler+0x1cc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d02c      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a54      	ldr	r2, [pc, #336]	; (8006a04 <HAL_DMA_IRQHandler+0x1d0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d027      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a53      	ldr	r2, [pc, #332]	; (8006a08 <HAL_DMA_IRQHandler+0x1d4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a51      	ldr	r2, [pc, #324]	; (8006a0c <HAL_DMA_IRQHandler+0x1d8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01d      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a50      	ldr	r2, [pc, #320]	; (8006a10 <HAL_DMA_IRQHandler+0x1dc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a4e      	ldr	r2, [pc, #312]	; (8006a14 <HAL_DMA_IRQHandler+0x1e0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a4d      	ldr	r2, [pc, #308]	; (8006a18 <HAL_DMA_IRQHandler+0x1e4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a4b      	ldr	r2, [pc, #300]	; (8006a1c <HAL_DMA_IRQHandler+0x1e8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4a      	ldr	r2, [pc, #296]	; (8006a20 <HAL_DMA_IRQHandler+0x1ec>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_DMA_IRQHandler+0xd2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a48      	ldr	r2, [pc, #288]	; (8006a24 <HAL_DMA_IRQHandler+0x1f0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d101      	bne.n	800690a <HAL_DMA_IRQHandler+0xd6>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_DMA_IRQHandler+0xd8>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 842b 	beq.w	8007168 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2208      	movs	r2, #8
 800691c:	409a      	lsls	r2, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4013      	ands	r3, r2
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a2 	beq.w	8006a6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2e      	ldr	r2, [pc, #184]	; (80069e8 <HAL_DMA_IRQHandler+0x1b4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d04a      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <HAL_DMA_IRQHandler+0x1b8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d045      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d040      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <HAL_DMA_IRQHandler+0x1c0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d03b      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d036      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <HAL_DMA_IRQHandler+0x1c8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d031      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_DMA_IRQHandler+0x1cc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d02c      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_DMA_IRQHandler+0x1d0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d027      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_DMA_IRQHandler+0x1d4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_DMA_IRQHandler+0x1d8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d01d      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <HAL_DMA_IRQHandler+0x1dc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d018      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <HAL_DMA_IRQHandler+0x1e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d013      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_DMA_IRQHandler+0x1e4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00e      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_DMA_IRQHandler+0x1e8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_DMA_IRQHandler+0x1ec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d004      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x194>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_DMA_IRQHandler+0x1f0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d12f      	bne.n	8006a28 <HAL_DMA_IRQHandler+0x1f4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf14      	ite	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	2300      	moveq	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	e02e      	b.n	8006a3c <HAL_DMA_IRQHandler+0x208>
 80069de:	bf00      	nop
 80069e0:	24000000 	.word	0x24000000
 80069e4:	1b4e81b5 	.word	0x1b4e81b5
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	40020040 	.word	0x40020040
 80069f4:	40020058 	.word	0x40020058
 80069f8:	40020070 	.word	0x40020070
 80069fc:	40020088 	.word	0x40020088
 8006a00:	400200a0 	.word	0x400200a0
 8006a04:	400200b8 	.word	0x400200b8
 8006a08:	40020410 	.word	0x40020410
 8006a0c:	40020428 	.word	0x40020428
 8006a10:	40020440 	.word	0x40020440
 8006a14:	40020458 	.word	0x40020458
 8006a18:	40020470 	.word	0x40020470
 8006a1c:	40020488 	.word	0x40020488
 8006a20:	400204a0 	.word	0x400204a0
 8006a24:	400204b8 	.word	0x400204b8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0204 	bic.w	r2, r2, #4
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2208      	movs	r2, #8
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06e      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a69      	ldr	r2, [pc, #420]	; (8006c2c <HAL_DMA_IRQHandler+0x3f8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d04a      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a67      	ldr	r2, [pc, #412]	; (8006c30 <HAL_DMA_IRQHandler+0x3fc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d045      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a66      	ldr	r2, [pc, #408]	; (8006c34 <HAL_DMA_IRQHandler+0x400>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d040      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a64      	ldr	r2, [pc, #400]	; (8006c38 <HAL_DMA_IRQHandler+0x404>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d03b      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a63      	ldr	r2, [pc, #396]	; (8006c3c <HAL_DMA_IRQHandler+0x408>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d036      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a61      	ldr	r2, [pc, #388]	; (8006c40 <HAL_DMA_IRQHandler+0x40c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d031      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a60      	ldr	r2, [pc, #384]	; (8006c44 <HAL_DMA_IRQHandler+0x410>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d02c      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5e      	ldr	r2, [pc, #376]	; (8006c48 <HAL_DMA_IRQHandler+0x414>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d027      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a5d      	ldr	r2, [pc, #372]	; (8006c4c <HAL_DMA_IRQHandler+0x418>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a5b      	ldr	r2, [pc, #364]	; (8006c50 <HAL_DMA_IRQHandler+0x41c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d01d      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a5a      	ldr	r2, [pc, #360]	; (8006c54 <HAL_DMA_IRQHandler+0x420>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a58      	ldr	r2, [pc, #352]	; (8006c58 <HAL_DMA_IRQHandler+0x424>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a57      	ldr	r2, [pc, #348]	; (8006c5c <HAL_DMA_IRQHandler+0x428>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a55      	ldr	r2, [pc, #340]	; (8006c60 <HAL_DMA_IRQHandler+0x42c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a54      	ldr	r2, [pc, #336]	; (8006c64 <HAL_DMA_IRQHandler+0x430>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x2ee>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <HAL_DMA_IRQHandler+0x434>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10a      	bne.n	8006b38 <HAL_DMA_IRQHandler+0x304>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf14      	ite	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	2300      	moveq	r3, #0
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	e003      	b.n	8006b40 <HAL_DMA_IRQHandler+0x30c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	f043 0202 	orr.w	r2, r3, #2
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2204      	movs	r2, #4
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 808f 	beq.w	8006c94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <HAL_DMA_IRQHandler+0x3f8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d04a      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <HAL_DMA_IRQHandler+0x3fc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d045      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <HAL_DMA_IRQHandler+0x400>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d040      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <HAL_DMA_IRQHandler+0x404>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d03b      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <HAL_DMA_IRQHandler+0x408>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d036      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <HAL_DMA_IRQHandler+0x40c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <HAL_DMA_IRQHandler+0x410>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_DMA_IRQHandler+0x414>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d027      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_DMA_IRQHandler+0x418>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <HAL_DMA_IRQHandler+0x41c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <HAL_DMA_IRQHandler+0x420>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1b      	ldr	r2, [pc, #108]	; (8006c58 <HAL_DMA_IRQHandler+0x424>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	; (8006c5c <HAL_DMA_IRQHandler+0x428>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <HAL_DMA_IRQHandler+0x42c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <HAL_DMA_IRQHandler+0x430>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x3e2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <HAL_DMA_IRQHandler+0x434>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d12a      	bne.n	8006c6c <HAL_DMA_IRQHandler+0x438>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e023      	b.n	8006c74 <HAL_DMA_IRQHandler+0x440>
 8006c2c:	40020010 	.word	0x40020010
 8006c30:	40020028 	.word	0x40020028
 8006c34:	40020040 	.word	0x40020040
 8006c38:	40020058 	.word	0x40020058
 8006c3c:	40020070 	.word	0x40020070
 8006c40:	40020088 	.word	0x40020088
 8006c44:	400200a0 	.word	0x400200a0
 8006c48:	400200b8 	.word	0x400200b8
 8006c4c:	40020410 	.word	0x40020410
 8006c50:	40020428 	.word	0x40020428
 8006c54:	40020440 	.word	0x40020440
 8006c58:	40020458 	.word	0x40020458
 8006c5c:	40020470 	.word	0x40020470
 8006c60:	40020488 	.word	0x40020488
 8006c64:	400204a0 	.word	0x400204a0
 8006c68:	400204b8 	.word	0x400204b8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2204      	movs	r2, #4
 8006c82:	409a      	lsls	r2, r3
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	2210      	movs	r2, #16
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a6 	beq.w	8006df6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a85      	ldr	r2, [pc, #532]	; (8006ec4 <HAL_DMA_IRQHandler+0x690>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04a      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a83      	ldr	r2, [pc, #524]	; (8006ec8 <HAL_DMA_IRQHandler+0x694>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a82      	ldr	r2, [pc, #520]	; (8006ecc <HAL_DMA_IRQHandler+0x698>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d040      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a80      	ldr	r2, [pc, #512]	; (8006ed0 <HAL_DMA_IRQHandler+0x69c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d03b      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a7f      	ldr	r2, [pc, #508]	; (8006ed4 <HAL_DMA_IRQHandler+0x6a0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d036      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a7d      	ldr	r2, [pc, #500]	; (8006ed8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a7c      	ldr	r2, [pc, #496]	; (8006edc <HAL_DMA_IRQHandler+0x6a8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d02c      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a7a      	ldr	r2, [pc, #488]	; (8006ee0 <HAL_DMA_IRQHandler+0x6ac>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d027      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a79      	ldr	r2, [pc, #484]	; (8006ee4 <HAL_DMA_IRQHandler+0x6b0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a77      	ldr	r2, [pc, #476]	; (8006ee8 <HAL_DMA_IRQHandler+0x6b4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a76      	ldr	r2, [pc, #472]	; (8006eec <HAL_DMA_IRQHandler+0x6b8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a74      	ldr	r2, [pc, #464]	; (8006ef0 <HAL_DMA_IRQHandler+0x6bc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a73      	ldr	r2, [pc, #460]	; (8006ef4 <HAL_DMA_IRQHandler+0x6c0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a71      	ldr	r2, [pc, #452]	; (8006ef8 <HAL_DMA_IRQHandler+0x6c4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a70      	ldr	r2, [pc, #448]	; (8006efc <HAL_DMA_IRQHandler+0x6c8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x516>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a6e      	ldr	r2, [pc, #440]	; (8006f00 <HAL_DMA_IRQHandler+0x6cc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d10a      	bne.n	8006d60 <HAL_DMA_IRQHandler+0x52c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e009      	b.n	8006d74 <HAL_DMA_IRQHandler+0x540>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d03e      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2210      	movs	r2, #16
 8006d82:	409a      	lsls	r2, r3
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d024      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
 8006db4:	e01f      	b.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01b      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
 8006dc6:	e016      	b.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0208 	bic.w	r2, r2, #8
 8006de4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2220      	movs	r2, #32
 8006e00:	409a      	lsls	r2, r3
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8110 	beq.w	800702c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <HAL_DMA_IRQHandler+0x690>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d04a      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <HAL_DMA_IRQHandler+0x694>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d045      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a29      	ldr	r2, [pc, #164]	; (8006ecc <HAL_DMA_IRQHandler+0x698>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d040      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <HAL_DMA_IRQHandler+0x69c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d03b      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <HAL_DMA_IRQHandler+0x6a0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d036      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a25      	ldr	r2, [pc, #148]	; (8006ed8 <HAL_DMA_IRQHandler+0x6a4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d031      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <HAL_DMA_IRQHandler+0x6a8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d02c      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <HAL_DMA_IRQHandler+0x6ac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d027      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a20      	ldr	r2, [pc, #128]	; (8006ee4 <HAL_DMA_IRQHandler+0x6b0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d022      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_DMA_IRQHandler+0x6b4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01d      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <HAL_DMA_IRQHandler+0x6b8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d018      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <HAL_DMA_IRQHandler+0x6bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d013      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <HAL_DMA_IRQHandler+0x6c0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00e      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <HAL_DMA_IRQHandler+0x6c4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d009      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <HAL_DMA_IRQHandler+0x6c8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_DMA_IRQHandler+0x678>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <HAL_DMA_IRQHandler+0x6cc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d12b      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x6d0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e02a      	b.n	8006f18 <HAL_DMA_IRQHandler+0x6e4>
 8006ec2:	bf00      	nop
 8006ec4:	40020010 	.word	0x40020010
 8006ec8:	40020028 	.word	0x40020028
 8006ecc:	40020040 	.word	0x40020040
 8006ed0:	40020058 	.word	0x40020058
 8006ed4:	40020070 	.word	0x40020070
 8006ed8:	40020088 	.word	0x40020088
 8006edc:	400200a0 	.word	0x400200a0
 8006ee0:	400200b8 	.word	0x400200b8
 8006ee4:	40020410 	.word	0x40020410
 8006ee8:	40020428 	.word	0x40020428
 8006eec:	40020440 	.word	0x40020440
 8006ef0:	40020458 	.word	0x40020458
 8006ef4:	40020470 	.word	0x40020470
 8006ef8:	40020488 	.word	0x40020488
 8006efc:	400204a0 	.word	0x400204a0
 8006f00:	400204b8 	.word	0x400204b8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	2300      	moveq	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8087 	beq.w	800702c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2220      	movs	r2, #32
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d139      	bne.n	8006fae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0216 	bic.w	r2, r2, #22
 8006f48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695a      	ldr	r2, [r3, #20]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x736>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0208 	bic.w	r2, r2, #8
 8006f78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	223f      	movs	r2, #63	; 0x3f
 8006f84:	409a      	lsls	r2, r3
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 834a 	beq.w	8007638 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
          }
          return;
 8006fac:	e344      	b.n	8007638 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d018      	beq.n	8006fee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d108      	bne.n	8006fdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02c      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
 8006fda:	e027      	b.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d023      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
 8006fec:	e01e      	b.n	800702c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10f      	bne.n	800701c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0210 	bic.w	r2, r2, #16
 800700a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8306 	beq.w	8007642 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8088 	beq.w	8007154 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2204      	movs	r2, #4
 8007048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a7a      	ldr	r2, [pc, #488]	; (800723c <HAL_DMA_IRQHandler+0xa08>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d04a      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a79      	ldr	r2, [pc, #484]	; (8007240 <HAL_DMA_IRQHandler+0xa0c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d045      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a77      	ldr	r2, [pc, #476]	; (8007244 <HAL_DMA_IRQHandler+0xa10>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d040      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a76      	ldr	r2, [pc, #472]	; (8007248 <HAL_DMA_IRQHandler+0xa14>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d03b      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a74      	ldr	r2, [pc, #464]	; (800724c <HAL_DMA_IRQHandler+0xa18>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d036      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a73      	ldr	r2, [pc, #460]	; (8007250 <HAL_DMA_IRQHandler+0xa1c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d031      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a71      	ldr	r2, [pc, #452]	; (8007254 <HAL_DMA_IRQHandler+0xa20>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d02c      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a70      	ldr	r2, [pc, #448]	; (8007258 <HAL_DMA_IRQHandler+0xa24>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d027      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a6e      	ldr	r2, [pc, #440]	; (800725c <HAL_DMA_IRQHandler+0xa28>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d022      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a6d      	ldr	r2, [pc, #436]	; (8007260 <HAL_DMA_IRQHandler+0xa2c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d01d      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a6b      	ldr	r2, [pc, #428]	; (8007264 <HAL_DMA_IRQHandler+0xa30>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d018      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a6a      	ldr	r2, [pc, #424]	; (8007268 <HAL_DMA_IRQHandler+0xa34>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a68      	ldr	r2, [pc, #416]	; (800726c <HAL_DMA_IRQHandler+0xa38>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a67      	ldr	r2, [pc, #412]	; (8007270 <HAL_DMA_IRQHandler+0xa3c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d009      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a65      	ldr	r2, [pc, #404]	; (8007274 <HAL_DMA_IRQHandler+0xa40>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_DMA_IRQHandler+0x8b8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a64      	ldr	r2, [pc, #400]	; (8007278 <HAL_DMA_IRQHandler+0xa44>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d108      	bne.n	80070fe <HAL_DMA_IRQHandler+0x8ca>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e007      	b.n	800710e <HAL_DMA_IRQHandler+0x8da>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007116:	429a      	cmp	r2, r3
 8007118:	d307      	bcc.n	800712a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1f2      	bne.n	800710e <HAL_DMA_IRQHandler+0x8da>
 8007128:	e000      	b.n	800712c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800712a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007142:	e003      	b.n	800714c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8272 	beq.w	8007642 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	e26c      	b.n	8007642 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a43      	ldr	r2, [pc, #268]	; (800727c <HAL_DMA_IRQHandler+0xa48>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d022      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a42      	ldr	r2, [pc, #264]	; (8007280 <HAL_DMA_IRQHandler+0xa4c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d01d      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a40      	ldr	r2, [pc, #256]	; (8007284 <HAL_DMA_IRQHandler+0xa50>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d018      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3f      	ldr	r2, [pc, #252]	; (8007288 <HAL_DMA_IRQHandler+0xa54>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a3d      	ldr	r2, [pc, #244]	; (800728c <HAL_DMA_IRQHandler+0xa58>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a3c      	ldr	r2, [pc, #240]	; (8007290 <HAL_DMA_IRQHandler+0xa5c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d009      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3a      	ldr	r2, [pc, #232]	; (8007294 <HAL_DMA_IRQHandler+0xa60>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x984>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a39      	ldr	r2, [pc, #228]	; (8007298 <HAL_DMA_IRQHandler+0xa64>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d101      	bne.n	80071bc <HAL_DMA_IRQHandler+0x988>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <HAL_DMA_IRQHandler+0x98a>
 80071bc:	2300      	movs	r3, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 823f 	beq.w	8007642 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	2204      	movs	r2, #4
 80071d6:	409a      	lsls	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4013      	ands	r3, r2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80cd 	beq.w	800737c <HAL_DMA_IRQHandler+0xb48>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80c7 	beq.w	800737c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2204      	movs	r2, #4
 80071f8:	409a      	lsls	r2, r3
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d049      	beq.n	800729c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8210 	beq.w	800763c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007224:	e20a      	b.n	800763c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8206 	beq.w	800763c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007238:	e200      	b.n	800763c <HAL_DMA_IRQHandler+0xe08>
 800723a:	bf00      	nop
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8
 800727c:	58025408 	.word	0x58025408
 8007280:	5802541c 	.word	0x5802541c
 8007284:	58025430 	.word	0x58025430
 8007288:	58025444 	.word	0x58025444
 800728c:	58025458 	.word	0x58025458
 8007290:	5802546c 	.word	0x5802546c
 8007294:	58025480 	.word	0x58025480
 8007298:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d160      	bne.n	8007368 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a7f      	ldr	r2, [pc, #508]	; (80074a8 <HAL_DMA_IRQHandler+0xc74>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d04a      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a7d      	ldr	r2, [pc, #500]	; (80074ac <HAL_DMA_IRQHandler+0xc78>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d045      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7c      	ldr	r2, [pc, #496]	; (80074b0 <HAL_DMA_IRQHandler+0xc7c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d040      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a7a      	ldr	r2, [pc, #488]	; (80074b4 <HAL_DMA_IRQHandler+0xc80>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d03b      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a79      	ldr	r2, [pc, #484]	; (80074b8 <HAL_DMA_IRQHandler+0xc84>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d036      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a77      	ldr	r2, [pc, #476]	; (80074bc <HAL_DMA_IRQHandler+0xc88>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d031      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a76      	ldr	r2, [pc, #472]	; (80074c0 <HAL_DMA_IRQHandler+0xc8c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d02c      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a74      	ldr	r2, [pc, #464]	; (80074c4 <HAL_DMA_IRQHandler+0xc90>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d027      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a73      	ldr	r2, [pc, #460]	; (80074c8 <HAL_DMA_IRQHandler+0xc94>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d022      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a71      	ldr	r2, [pc, #452]	; (80074cc <HAL_DMA_IRQHandler+0xc98>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01d      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a70      	ldr	r2, [pc, #448]	; (80074d0 <HAL_DMA_IRQHandler+0xc9c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d018      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a6e      	ldr	r2, [pc, #440]	; (80074d4 <HAL_DMA_IRQHandler+0xca0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d013      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6d      	ldr	r2, [pc, #436]	; (80074d8 <HAL_DMA_IRQHandler+0xca4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00e      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_DMA_IRQHandler+0xca8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d009      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6a      	ldr	r2, [pc, #424]	; (80074e0 <HAL_DMA_IRQHandler+0xcac>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d004      	beq.n	8007346 <HAL_DMA_IRQHandler+0xb12>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a68      	ldr	r2, [pc, #416]	; (80074e4 <HAL_DMA_IRQHandler+0xcb0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d108      	bne.n	8007358 <HAL_DMA_IRQHandler+0xb24>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0208 	bic.w	r2, r2, #8
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e007      	b.n	8007368 <HAL_DMA_IRQHandler+0xb34>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0204 	bic.w	r2, r2, #4
 8007366:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8165 	beq.w	800763c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737a:	e15f      	b.n	800763c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	2202      	movs	r2, #2
 8007386:	409a      	lsls	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80c5 	beq.w	800751c <HAL_DMA_IRQHandler+0xce8>
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80bf 	beq.w	800751c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2202      	movs	r2, #2
 80073a8:	409a      	lsls	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 813a 	beq.w	8007640 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073d4:	e134      	b.n	8007640 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8130 	beq.w	8007640 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073e8:	e12a      	b.n	8007640 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 8089 	bne.w	8007508 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <HAL_DMA_IRQHandler+0xc74>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d04a      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a29      	ldr	r2, [pc, #164]	; (80074ac <HAL_DMA_IRQHandler+0xc78>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d045      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <HAL_DMA_IRQHandler+0xc7c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d040      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <HAL_DMA_IRQHandler+0xc80>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d03b      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <HAL_DMA_IRQHandler+0xc84>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d036      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <HAL_DMA_IRQHandler+0xc88>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d031      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_DMA_IRQHandler+0xc8c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d02c      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <HAL_DMA_IRQHandler+0xc90>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d027      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <HAL_DMA_IRQHandler+0xc94>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d022      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <HAL_DMA_IRQHandler+0xc98>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01d      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <HAL_DMA_IRQHandler+0xc9c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d018      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <HAL_DMA_IRQHandler+0xca0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d013      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <HAL_DMA_IRQHandler+0xca4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00e      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a17      	ldr	r2, [pc, #92]	; (80074dc <HAL_DMA_IRQHandler+0xca8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d009      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <HAL_DMA_IRQHandler+0xcac>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d004      	beq.n	8007496 <HAL_DMA_IRQHandler+0xc62>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <HAL_DMA_IRQHandler+0xcb0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d128      	bne.n	80074e8 <HAL_DMA_IRQHandler+0xcb4>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0214 	bic.w	r2, r2, #20
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e027      	b.n	80074f8 <HAL_DMA_IRQHandler+0xcc4>
 80074a8:	40020010 	.word	0x40020010
 80074ac:	40020028 	.word	0x40020028
 80074b0:	40020040 	.word	0x40020040
 80074b4:	40020058 	.word	0x40020058
 80074b8:	40020070 	.word	0x40020070
 80074bc:	40020088 	.word	0x40020088
 80074c0:	400200a0 	.word	0x400200a0
 80074c4:	400200b8 	.word	0x400200b8
 80074c8:	40020410 	.word	0x40020410
 80074cc:	40020428 	.word	0x40020428
 80074d0:	40020440 	.word	0x40020440
 80074d4:	40020458 	.word	0x40020458
 80074d8:	40020470 	.word	0x40020470
 80074dc:	40020488 	.word	0x40020488
 80074e0:	400204a0 	.word	0x400204a0
 80074e4:	400204b8 	.word	0x400204b8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 020a 	bic.w	r2, r2, #10
 80074f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8097 	beq.w	8007640 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800751a:	e091      	b.n	8007640 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2208      	movs	r2, #8
 8007526:	409a      	lsls	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8088 	beq.w	8007642 <HAL_DMA_IRQHandler+0xe0e>
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8082 	beq.w	8007642 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a41      	ldr	r2, [pc, #260]	; (8007648 <HAL_DMA_IRQHandler+0xe14>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a3f      	ldr	r2, [pc, #252]	; (800764c <HAL_DMA_IRQHandler+0xe18>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3e      	ldr	r2, [pc, #248]	; (8007650 <HAL_DMA_IRQHandler+0xe1c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <HAL_DMA_IRQHandler+0xe20>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <HAL_DMA_IRQHandler+0xe24>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a39      	ldr	r2, [pc, #228]	; (800765c <HAL_DMA_IRQHandler+0xe28>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a38      	ldr	r2, [pc, #224]	; (8007660 <HAL_DMA_IRQHandler+0xe2c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a36      	ldr	r2, [pc, #216]	; (8007664 <HAL_DMA_IRQHandler+0xe30>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a35      	ldr	r2, [pc, #212]	; (8007668 <HAL_DMA_IRQHandler+0xe34>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a33      	ldr	r2, [pc, #204]	; (800766c <HAL_DMA_IRQHandler+0xe38>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a32      	ldr	r2, [pc, #200]	; (8007670 <HAL_DMA_IRQHandler+0xe3c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a30      	ldr	r2, [pc, #192]	; (8007674 <HAL_DMA_IRQHandler+0xe40>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <HAL_DMA_IRQHandler+0xe44>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2d      	ldr	r2, [pc, #180]	; (800767c <HAL_DMA_IRQHandler+0xe48>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2c      	ldr	r2, [pc, #176]	; (8007680 <HAL_DMA_IRQHandler+0xe4c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_DMA_IRQHandler+0xdaa>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2a      	ldr	r2, [pc, #168]	; (8007684 <HAL_DMA_IRQHandler+0xe50>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d108      	bne.n	80075f0 <HAL_DMA_IRQHandler+0xdbc>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 021c 	bic.w	r2, r2, #28
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e007      	b.n	8007600 <HAL_DMA_IRQHandler+0xdcc>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 020e 	bic.w	r2, r2, #14
 80075fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2201      	movs	r2, #1
 800760a:	409a      	lsls	r2, r3
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
 8007636:	e004      	b.n	8007642 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007640:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007642:	3728      	adds	r7, #40	; 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40020010 	.word	0x40020010
 800764c:	40020028 	.word	0x40020028
 8007650:	40020040 	.word	0x40020040
 8007654:	40020058 	.word	0x40020058
 8007658:	40020070 	.word	0x40020070
 800765c:	40020088 	.word	0x40020088
 8007660:	400200a0 	.word	0x400200a0
 8007664:	400200b8 	.word	0x400200b8
 8007668:	40020410 	.word	0x40020410
 800766c:	40020428 	.word	0x40020428
 8007670:	40020440 	.word	0x40020440
 8007674:	40020458 	.word	0x40020458
 8007678:	40020470 	.word	0x40020470
 800767c:	40020488 	.word	0x40020488
 8007680:	400204a0 	.word	0x400204a0
 8007684:	400204b8 	.word	0x400204b8

08007688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a42      	ldr	r2, [pc, #264]	; (80077a0 <DMA_CalcBaseAndBitshift+0x118>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d04a      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a41      	ldr	r2, [pc, #260]	; (80077a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d045      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a3f      	ldr	r2, [pc, #252]	; (80077a8 <DMA_CalcBaseAndBitshift+0x120>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d040      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a3e      	ldr	r2, [pc, #248]	; (80077ac <DMA_CalcBaseAndBitshift+0x124>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d03b      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3c      	ldr	r2, [pc, #240]	; (80077b0 <DMA_CalcBaseAndBitshift+0x128>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d036      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a3b      	ldr	r2, [pc, #236]	; (80077b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d031      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a39      	ldr	r2, [pc, #228]	; (80077b8 <DMA_CalcBaseAndBitshift+0x130>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d02c      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <DMA_CalcBaseAndBitshift+0x134>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d027      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a36      	ldr	r2, [pc, #216]	; (80077c0 <DMA_CalcBaseAndBitshift+0x138>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d022      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a35      	ldr	r2, [pc, #212]	; (80077c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d01d      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a33      	ldr	r2, [pc, #204]	; (80077c8 <DMA_CalcBaseAndBitshift+0x140>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d018      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a32      	ldr	r2, [pc, #200]	; (80077cc <DMA_CalcBaseAndBitshift+0x144>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a30      	ldr	r2, [pc, #192]	; (80077d0 <DMA_CalcBaseAndBitshift+0x148>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <DMA_CalcBaseAndBitshift+0x150>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <DMA_CalcBaseAndBitshift+0xa8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <DMA_CalcBaseAndBitshift+0x154>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d101      	bne.n	8007734 <DMA_CalcBaseAndBitshift+0xac>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <DMA_CalcBaseAndBitshift+0xae>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d024      	beq.n	8007784 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	3b10      	subs	r3, #16
 8007742:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <DMA_CalcBaseAndBitshift+0x158>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007754:	5cd3      	ldrb	r3, [r2, r3]
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d908      	bls.n	8007774 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <DMA_CalcBaseAndBitshift+0x160>)
 800776a:	4013      	ands	r3, r2
 800776c:	1d1a      	adds	r2, r3, #4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	659a      	str	r2, [r3, #88]	; 0x58
 8007772:	e00d      	b.n	8007790 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <DMA_CalcBaseAndBitshift+0x160>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6593      	str	r3, [r2, #88]	; 0x58
 8007782:	e005      	b.n	8007790 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	40020010 	.word	0x40020010
 80077a4:	40020028 	.word	0x40020028
 80077a8:	40020040 	.word	0x40020040
 80077ac:	40020058 	.word	0x40020058
 80077b0:	40020070 	.word	0x40020070
 80077b4:	40020088 	.word	0x40020088
 80077b8:	400200a0 	.word	0x400200a0
 80077bc:	400200b8 	.word	0x400200b8
 80077c0:	40020410 	.word	0x40020410
 80077c4:	40020428 	.word	0x40020428
 80077c8:	40020440 	.word	0x40020440
 80077cc:	40020458 	.word	0x40020458
 80077d0:	40020470 	.word	0x40020470
 80077d4:	40020488 	.word	0x40020488
 80077d8:	400204a0 	.word	0x400204a0
 80077dc:	400204b8 	.word	0x400204b8
 80077e0:	aaaaaaab 	.word	0xaaaaaaab
 80077e4:	0801c92c 	.word	0x0801c92c
 80077e8:	fffffc00 	.word	0xfffffc00

080077ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d120      	bne.n	8007842 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	2b03      	cmp	r3, #3
 8007806:	d858      	bhi.n	80078ba <DMA_CheckFifoParam+0xce>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <DMA_CheckFifoParam+0x24>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007821 	.word	0x08007821
 8007814:	08007833 	.word	0x08007833
 8007818:	08007821 	.word	0x08007821
 800781c:	080078bb 	.word	0x080078bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d048      	beq.n	80078be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007830:	e045      	b.n	80078be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800783a:	d142      	bne.n	80078c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007840:	e03f      	b.n	80078c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784a:	d123      	bne.n	8007894 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	2b03      	cmp	r3, #3
 8007852:	d838      	bhi.n	80078c6 <DMA_CheckFifoParam+0xda>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <DMA_CheckFifoParam+0x70>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	0800786d 	.word	0x0800786d
 8007860:	08007873 	.word	0x08007873
 8007864:	0800786d 	.word	0x0800786d
 8007868:	08007885 	.word	0x08007885
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
        break;
 8007870:	e030      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d025      	beq.n	80078ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007882:	e022      	b.n	80078ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800788c:	d11f      	bne.n	80078ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007892:	e01c      	b.n	80078ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	2b02      	cmp	r3, #2
 800789a:	d902      	bls.n	80078a2 <DMA_CheckFifoParam+0xb6>
 800789c:	2b03      	cmp	r3, #3
 800789e:	d003      	beq.n	80078a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80078a0:	e018      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
        break;
 80078a6:	e015      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
    break;
 80078b8:	e00b      	b.n	80078d2 <DMA_CheckFifoParam+0xe6>
        break;
 80078ba:	bf00      	nop
 80078bc:	e00a      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        break;
 80078be:	bf00      	nop
 80078c0:	e008      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        break;
 80078c2:	bf00      	nop
 80078c4:	e006      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        break;
 80078c6:	bf00      	nop
 80078c8:	e004      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        break;
 80078ca:	bf00      	nop
 80078cc:	e002      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
        break;
 80078ce:	bf00      	nop
 80078d0:	e000      	b.n	80078d4 <DMA_CheckFifoParam+0xe8>
    break;
 80078d2:	bf00      	nop
    }
  }

  return status;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a36      	ldr	r2, [pc, #216]	; (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d01d      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a33      	ldr	r2, [pc, #204]	; (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a32      	ldr	r2, [pc, #200]	; (80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a30      	ldr	r2, [pc, #192]	; (80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2f      	ldr	r2, [pc, #188]	; (80079f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2d      	ldr	r2, [pc, #180]	; (80079f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d101      	bne.n	8007946 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007946:	2300      	movs	r3, #0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01a      	beq.n	8007982 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	3b08      	subs	r3, #8
 8007954:	4a28      	ldr	r2, [pc, #160]	; (80079f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4b26      	ldr	r3, [pc, #152]	; (80079fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a24      	ldr	r2, [pc, #144]	; (8007a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007970:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2201      	movs	r2, #1
 800797a:	409a      	lsls	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007980:	e024      	b.n	80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	3b10      	subs	r3, #16
 800798a:	4a1e      	ldr	r2, [pc, #120]	; (8007a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	091b      	lsrs	r3, r3, #4
 8007992:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4a1c      	ldr	r2, [pc, #112]	; (8007a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d806      	bhi.n	80079aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d902      	bls.n	80079aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3308      	adds	r3, #8
 80079a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80079bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	2201      	movs	r2, #1
 80079c6:	409a      	lsls	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	58025408 	.word	0x58025408
 80079dc:	5802541c 	.word	0x5802541c
 80079e0:	58025430 	.word	0x58025430
 80079e4:	58025444 	.word	0x58025444
 80079e8:	58025458 	.word	0x58025458
 80079ec:	5802546c 	.word	0x5802546c
 80079f0:	58025480 	.word	0x58025480
 80079f4:	58025494 	.word	0x58025494
 80079f8:	cccccccd 	.word	0xcccccccd
 80079fc:	16009600 	.word	0x16009600
 8007a00:	58025880 	.word	0x58025880
 8007a04:	aaaaaaab 	.word	0xaaaaaaab
 8007a08:	400204b8 	.word	0x400204b8
 8007a0c:	4002040f 	.word	0x4002040f
 8007a10:	10008200 	.word	0x10008200
 8007a14:	40020880 	.word	0x40020880

08007a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d04a      	beq.n	8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d847      	bhi.n	8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a25      	ldr	r2, [pc, #148]	; (8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d022      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a24      	ldr	r2, [pc, #144]	; (8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d01d      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	; (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d018      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a21      	ldr	r2, [pc, #132]	; (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d013      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00e      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d101      	bne.n	8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007aa0:	671a      	str	r2, [r3, #112]	; 0x70
 8007aa2:	e009      	b.n	8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	461a      	mov	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a11      	ldr	r2, [pc, #68]	; (8007afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2201      	movs	r2, #1
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	58025408 	.word	0x58025408
 8007ad4:	5802541c 	.word	0x5802541c
 8007ad8:	58025430 	.word	0x58025430
 8007adc:	58025444 	.word	0x58025444
 8007ae0:	58025458 	.word	0x58025458
 8007ae4:	5802546c 	.word	0x5802546c
 8007ae8:	58025480 	.word	0x58025480
 8007aec:	58025494 	.word	0x58025494
 8007af0:	1600963f 	.word	0x1600963f
 8007af4:	58025940 	.word	0x58025940
 8007af8:	1000823f 	.word	0x1000823f
 8007afc:	40020940 	.word	0x40020940

08007b00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b098      	sub	sp, #96	; 0x60
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007b08:	4a84      	ldr	r2, [pc, #528]	; (8007d1c <HAL_FDCAN_Init+0x21c>)
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	4611      	mov	r1, r2
 8007b10:	224c      	movs	r2, #76	; 0x4c
 8007b12:	4618      	mov	r0, r3
 8007b14:	f010 fa93 	bl	801803e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e1c6      	b.n	8007eb0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a7e      	ldr	r2, [pc, #504]	; (8007d20 <HAL_FDCAN_Init+0x220>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d106      	bne.n	8007b3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b34:	461a      	mov	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb fe12 	bl	8003778 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0210 	bic.w	r2, r2, #16
 8007b62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b64:	f7fc fe48 	bl	80047f8 <HAL_GetTick>
 8007b68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b6a:	e014      	b.n	8007b96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b6c:	f7fc fe44 	bl	80047f8 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b0a      	cmp	r3, #10
 8007b78:	d90d      	bls.n	8007b96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e18c      	b.n	8007eb0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d0e3      	beq.n	8007b6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bb4:	f7fc fe20 	bl	80047f8 <HAL_GetTick>
 8007bb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007bba:	e014      	b.n	8007be6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007bbc:	f7fc fe1c 	bl	80047f8 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b0a      	cmp	r3, #10
 8007bc8:	d90d      	bls.n	8007be6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bd0:	f043 0201 	orr.w	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e164      	b.n	8007eb0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0e3      	beq.n	8007bbc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0202 	orr.w	r2, r2, #2
 8007c02:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7c1b      	ldrb	r3, [r3, #16]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d108      	bne.n	8007c1e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c1a:	619a      	str	r2, [r3, #24]
 8007c1c:	e007      	b.n	8007c2e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699a      	ldr	r2, [r3, #24]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7c5b      	ldrb	r3, [r3, #17]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d108      	bne.n	8007c48 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	e007      	b.n	8007c58 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c56:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7c9b      	ldrb	r3, [r3, #18]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d108      	bne.n	8007c72 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c6e:	619a      	str	r2, [r3, #24]
 8007c70:	e007      	b.n	8007c82 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c80:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007ca6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0210 	bic.w	r2, r2, #16
 8007cb6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d108      	bne.n	8007cd2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0204 	orr.w	r2, r2, #4
 8007cce:	619a      	str	r2, [r3, #24]
 8007cd0:	e030      	b.n	8007d34 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02c      	beq.n	8007d34 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d020      	beq.n	8007d24 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cf0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0210 	orr.w	r2, r2, #16
 8007d00:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d114      	bne.n	8007d34 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0220 	orr.w	r2, r2, #32
 8007d18:	619a      	str	r2, [r3, #24]
 8007d1a:	e00b      	b.n	8007d34 <HAL_FDCAN_Init+0x234>
 8007d1c:	0801c894 	.word	0x0801c894
 8007d20:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0220 	orr.w	r2, r2, #32
 8007d32:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d44:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007d4c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007d5c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d5e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d68:	d115      	bne.n	8007d96 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	3b01      	subs	r3, #1
 8007d76:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d78:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007d82:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007d92:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d94:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbc:	4413      	add	r3, r2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007dca:	f023 0107 	bic.w	r1, r3, #7
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	3360      	adds	r3, #96	; 0x60
 8007dd6:	443b      	add	r3, r7
 8007dd8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d011      	beq.n	8007e12 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007df6:	f023 0107 	bic.w	r1, r3, #7
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	3360      	adds	r3, #96	; 0x60
 8007e02:	443b      	add	r3, r7
 8007e04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e22:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3360      	adds	r3, #96	; 0x60
 8007e2e:	443b      	add	r3, r7
 8007e30:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007e34:	011a      	lsls	r2, r3, #4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d012      	beq.n	8007e6e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e50:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	3360      	adds	r3, #96	; 0x60
 8007e5c:	443b      	add	r3, r7
 8007e5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007e62:	021a      	lsls	r2, r3, #8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <HAL_FDCAN_Init+0x3b8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d107      	bne.n	8007e88 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f80b 	bl	8007ebc <FDCAN_CalcultateRamBlockAddresses>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007eac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3760      	adds	r7, #96	; 0x60
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	4000a000 	.word	0x4000a000

08007ebc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007ed2:	4ba7      	ldr	r3, [pc, #668]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0091      	lsls	r1, r2, #2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eec:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	041a      	lsls	r2, r3, #16
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	4413      	add	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f12:	4b97      	ldr	r3, [pc, #604]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	0091      	lsls	r1, r2, #2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f34:	041a      	lsls	r2, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007f54:	4b86      	ldr	r3, [pc, #536]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	0091      	lsls	r1, r2, #2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6812      	ldr	r2, [r2, #0]
 8007f60:	430b      	orrs	r3, r1
 8007f62:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	041a      	lsls	r2, r3, #16
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007f9c:	4b74      	ldr	r3, [pc, #464]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	0091      	lsls	r1, r2, #2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fb6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	041a      	lsls	r2, r3, #16
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007fe4:	4b62      	ldr	r3, [pc, #392]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	0091      	lsls	r1, r2, #2
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6812      	ldr	r2, [r2, #0]
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008010:	4b57      	ldr	r3, [pc, #348]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008012:	4013      	ands	r3, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	0091      	lsls	r1, r2, #2
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	430b      	orrs	r3, r1
 800801e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800802a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	041a      	lsls	r2, r3, #16
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	4413      	add	r3, r2
 8008048:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008052:	4b47      	ldr	r3, [pc, #284]	; (8008170 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008054:	4013      	ands	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	0091      	lsls	r1, r2, #2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	430b      	orrs	r3, r1
 8008060:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800806c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	041a      	lsls	r2, r3, #16
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008088:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	061a      	lsls	r2, r3, #24
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a0:	4b34      	ldr	r3, [pc, #208]	; (8008174 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80080a2:	4413      	add	r3, r2
 80080a4:	009a      	lsls	r2, r3, #2
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	441a      	add	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	441a      	add	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008136:	fb01 f303 	mul.w	r3, r1, r3
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	441a      	add	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008166:	4a04      	ldr	r2, [pc, #16]	; (8008178 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d915      	bls.n	8008198 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800816c:	e006      	b.n	800817c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800816e:	bf00      	nop
 8008170:	ffff0003 	.word	0xffff0003
 8008174:	10002b00 	.word	0x10002b00
 8008178:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2203      	movs	r2, #3
 8008190:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e010      	b.n	80081ba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e005      	b.n	80081ac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3304      	adds	r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d3f3      	bcc.n	80081a0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b089      	sub	sp, #36	; 0x24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081d6:	4b86      	ldr	r3, [pc, #536]	; (80083f0 <HAL_GPIO_Init+0x228>)
 80081d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081da:	e18c      	b.n	80084f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	2101      	movs	r1, #1
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	fa01 f303 	lsl.w	r3, r1, r3
 80081e8:	4013      	ands	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 817e 	beq.w	80084f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d005      	beq.n	800820c <HAL_GPIO_Init+0x44>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f003 0303 	and.w	r3, r3, #3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d130      	bne.n	800826e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	2203      	movs	r2, #3
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	43db      	mvns	r3, r3
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4313      	orrs	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008242:	2201      	movs	r2, #1
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	f003 0201 	and.w	r2, r3, #1
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4313      	orrs	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	2b03      	cmp	r3, #3
 8008278:	d017      	beq.n	80082aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	2203      	movs	r2, #3
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43db      	mvns	r3, r3
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	4013      	ands	r3, r2
 8008290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d123      	bne.n	80082fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	08da      	lsrs	r2, r3, #3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3208      	adds	r2, #8
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	220f      	movs	r2, #15
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4013      	ands	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	08da      	lsrs	r2, r3, #3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3208      	adds	r2, #8
 80082f8:	69b9      	ldr	r1, [r7, #24]
 80082fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	2203      	movs	r2, #3
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	43db      	mvns	r3, r3
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	4013      	ands	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f003 0203 	and.w	r2, r3, #3
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	fa02 f303 	lsl.w	r3, r2, r3
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	4313      	orrs	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 80d8 	beq.w	80084f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008340:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <HAL_GPIO_Init+0x22c>)
 8008342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008346:	4a2b      	ldr	r2, [pc, #172]	; (80083f4 <HAL_GPIO_Init+0x22c>)
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008350:	4b28      	ldr	r3, [pc, #160]	; (80083f4 <HAL_GPIO_Init+0x22c>)
 8008352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800835e:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <HAL_GPIO_Init+0x230>)
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	089b      	lsrs	r3, r3, #2
 8008364:	3302      	adds	r3, #2
 8008366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	220f      	movs	r2, #15
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a1d      	ldr	r2, [pc, #116]	; (80083fc <HAL_GPIO_Init+0x234>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d04a      	beq.n	8008420 <HAL_GPIO_Init+0x258>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <HAL_GPIO_Init+0x238>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02b      	beq.n	80083ea <HAL_GPIO_Init+0x222>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1b      	ldr	r2, [pc, #108]	; (8008404 <HAL_GPIO_Init+0x23c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d025      	beq.n	80083e6 <HAL_GPIO_Init+0x21e>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <HAL_GPIO_Init+0x240>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01f      	beq.n	80083e2 <HAL_GPIO_Init+0x21a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a19      	ldr	r2, [pc, #100]	; (800840c <HAL_GPIO_Init+0x244>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d019      	beq.n	80083de <HAL_GPIO_Init+0x216>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a18      	ldr	r2, [pc, #96]	; (8008410 <HAL_GPIO_Init+0x248>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_GPIO_Init+0x212>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a17      	ldr	r2, [pc, #92]	; (8008414 <HAL_GPIO_Init+0x24c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00d      	beq.n	80083d6 <HAL_GPIO_Init+0x20e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a16      	ldr	r2, [pc, #88]	; (8008418 <HAL_GPIO_Init+0x250>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <HAL_GPIO_Init+0x20a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <HAL_GPIO_Init+0x254>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d101      	bne.n	80083ce <HAL_GPIO_Init+0x206>
 80083ca:	2309      	movs	r3, #9
 80083cc:	e029      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083ce:	230a      	movs	r3, #10
 80083d0:	e027      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083d2:	2307      	movs	r3, #7
 80083d4:	e025      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083d6:	2306      	movs	r3, #6
 80083d8:	e023      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083da:	2305      	movs	r3, #5
 80083dc:	e021      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083de:	2304      	movs	r3, #4
 80083e0:	e01f      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083e2:	2303      	movs	r3, #3
 80083e4:	e01d      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e01b      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e019      	b.n	8008422 <HAL_GPIO_Init+0x25a>
 80083ee:	bf00      	nop
 80083f0:	58000080 	.word	0x58000080
 80083f4:	58024400 	.word	0x58024400
 80083f8:	58000400 	.word	0x58000400
 80083fc:	58020000 	.word	0x58020000
 8008400:	58020400 	.word	0x58020400
 8008404:	58020800 	.word	0x58020800
 8008408:	58020c00 	.word	0x58020c00
 800840c:	58021000 	.word	0x58021000
 8008410:	58021400 	.word	0x58021400
 8008414:	58021800 	.word	0x58021800
 8008418:	58021c00 	.word	0x58021c00
 800841c:	58022400 	.word	0x58022400
 8008420:	2300      	movs	r3, #0
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	f002 0203 	and.w	r2, r2, #3
 8008428:	0092      	lsls	r2, r2, #2
 800842a:	4093      	lsls	r3, r2
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008432:	4938      	ldr	r1, [pc, #224]	; (8008514 <HAL_GPIO_Init+0x34c>)
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	3302      	adds	r3, #2
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	43db      	mvns	r3, r3
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	4013      	ands	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	43db      	mvns	r3, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4013      	ands	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	43db      	mvns	r3, r3
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	4013      	ands	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	43db      	mvns	r3, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	4013      	ands	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	3301      	adds	r3, #1
 80084f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f ae6b 	bne.w	80081dc <HAL_GPIO_Init+0x14>
  }
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3724      	adds	r7, #36	; 0x24
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	58000400 	.word	0x58000400

08008518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	887b      	ldrh	r3, [r7, #2]
 800852a:	4013      	ands	r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
 8008534:	e001      	b.n	800853a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800853a:	7bfb      	ldrb	r3, [r7, #15]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	807b      	strh	r3, [r7, #2]
 8008554:	4613      	mov	r3, r2
 8008556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008558:	787b      	ldrb	r3, [r7, #1]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800855e:	887a      	ldrh	r2, [r7, #2]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008564:	e003      	b.n	800856e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	041a      	lsls	r2, r3, #16
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	619a      	str	r2, [r3, #24]
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e07f      	b.n	800868e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fb f950 	bl	8003848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0201 	bic.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d107      	bne.n	80085f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	e006      	b.n	8008604 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008602:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d104      	bne.n	8008616 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6859      	ldr	r1, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <HAL_I2C_Init+0x11c>)
 8008622:	430b      	orrs	r3, r1
 8008624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691a      	ldr	r2, [r3, #16]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69d9      	ldr	r1, [r3, #28]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1a      	ldr	r2, [r3, #32]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	02008000 	.word	0x02008000

0800869c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
  }
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d138      	bne.n	8008758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e032      	b.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2224      	movs	r2, #36	; 0x24
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e000      	b.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b20      	cmp	r3, #32
 800877a:	d139      	bne.n	80087f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008786:	2302      	movs	r3, #2
 8008788:	e033      	b.n	80087f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2224      	movs	r2, #36	; 0x24
 8008796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	e000      	b.n	80087f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80087f0:	2302      	movs	r3, #2
  }
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008800:	b08f      	sub	sp, #60	; 0x3c
 8008802:	af0a      	add	r7, sp, #40	; 0x28
 8008804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e116      	b.n	8008a3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f00e f916 	bl	8016a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d102      	bne.n	800884a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f00a fa5b 	bl	8012d0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	603b      	str	r3, [r7, #0]
 800885a:	687e      	ldr	r6, [r7, #4]
 800885c:	466d      	mov	r5, sp
 800885e:	f106 0410 	add.w	r4, r6, #16
 8008862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800886a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800886e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008872:	1d33      	adds	r3, r6, #4
 8008874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008876:	6838      	ldr	r0, [r7, #0]
 8008878:	f00a f926 	bl	8012ac8 <USB_CoreInit>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e0d7      	b.n	8008a3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f00a fa49 	bl	8012d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	e04a      	b.n	8008936 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80088a0:	7bfa      	ldrb	r2, [r7, #15]
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	333d      	adds	r3, #61	; 0x3d
 80088b0:	2201      	movs	r2, #1
 80088b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80088b4:	7bfa      	ldrb	r2, [r7, #15]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	333c      	adds	r3, #60	; 0x3c
 80088c4:	7bfa      	ldrb	r2, [r7, #15]
 80088c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088c8:	7bfa      	ldrb	r2, [r7, #15]
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	b298      	uxth	r0, r3
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	3356      	adds	r3, #86	; 0x56
 80088dc:	4602      	mov	r2, r0
 80088de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088e0:	7bfa      	ldrb	r2, [r7, #15]
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	3340      	adds	r3, #64	; 0x40
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	3344      	adds	r3, #68	; 0x44
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	3348      	adds	r3, #72	; 0x48
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	4613      	mov	r3, r2
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	334c      	adds	r3, #76	; 0x4c
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	3301      	adds	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	7bfa      	ldrb	r2, [r7, #15]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d3af      	bcc.n	80088a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e044      	b.n	80089d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008946:	7bfa      	ldrb	r2, [r7, #15]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800895c:	7bfa      	ldrb	r2, [r7, #15]
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800896e:	7bfa      	ldrb	r2, [r7, #15]
 8008970:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008972:	7bfa      	ldrb	r2, [r7, #15]
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008988:	7bfa      	ldrb	r2, [r7, #15]
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4613      	mov	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800899e:	7bfa      	ldrb	r2, [r7, #15]
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089b4:	7bfa      	ldrb	r2, [r7, #15]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	3301      	adds	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d3b5      	bcc.n	8008946 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	687e      	ldr	r6, [r7, #4]
 80089e2:	466d      	mov	r5, sp
 80089e4:	f106 0410 	add.w	r4, r6, #16
 80089e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80089f8:	1d33      	adds	r3, r6, #4
 80089fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089fc:	6838      	ldr	r0, [r7, #0]
 80089fe:	f00a f9e1 	bl	8012dc4 <USB_DevInit>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e014      	b.n	8008a3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d102      	bne.n	8008a32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f96f 	bl	8009d10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f00b fa23 	bl	8013e82 <USB_DevDisconnect>

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_PCD_Start+0x1c>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e022      	b.n	8008aa8 <HAL_PCD_Start+0x62>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d105      	bne.n	8008a8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f00a f92a 	bl	8012ce8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f00b f9d1 	bl	8013e40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b08d      	sub	sp, #52	; 0x34
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f00b fa8f 	bl	8013fea <USB_GetMode>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 84b7 	bne.w	8009442 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f00b f9f3 	bl	8013ec4 <USB_ReadInterrupts>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 84ad 	beq.w	8009440 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f00b f9e0 	bl	8013ec4 <USB_ReadInterrupts>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d107      	bne.n	8008b1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f002 0202 	and.w	r2, r2, #2
 8008b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f00b f9ce 	bl	8013ec4 <USB_ReadInterrupts>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d161      	bne.n	8008bf6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	699a      	ldr	r2, [r3, #24]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0210 	bic.w	r2, r2, #16
 8008b40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f003 020f 	and.w	r2, r3, #15
 8008b4e:	4613      	mov	r3, r2
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3304      	adds	r3, #4
 8008b60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	0c5b      	lsrs	r3, r3, #17
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d124      	bne.n	8008bb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d035      	beq.n	8008be6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6a38      	ldr	r0, [r7, #32]
 8008b8e:	f00b f805 	bl	8013b9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b9e:	441a      	add	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	695a      	ldr	r2, [r3, #20]
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bb0:	441a      	add	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	615a      	str	r2, [r3, #20]
 8008bb6:	e016      	b.n	8008be6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	0c5b      	lsrs	r3, r3, #17
 8008bbc:	f003 030f 	and.w	r3, r3, #15
 8008bc0:	2b06      	cmp	r3, #6
 8008bc2:	d110      	bne.n	8008be6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bca:	2208      	movs	r2, #8
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6a38      	ldr	r0, [r7, #32]
 8008bd0:	f00a ffe4 	bl	8013b9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008be0:	441a      	add	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0210 	orr.w	r2, r2, #16
 8008bf4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f00b f962 	bl	8013ec4 <USB_ReadInterrupts>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c0a:	f040 80a7 	bne.w	8008d5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f00b f967 	bl	8013eea <USB_ReadDevAllOutEpInterrupt>
 8008c1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008c1e:	e099      	b.n	8008d54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 808e 	beq.w	8008d48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f00b f98b 	bl	8013f52 <USB_ReadDevOutEPInterrupt>
 8008c3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00c      	beq.n	8008c62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	461a      	mov	r2, r3
 8008c56:	2301      	movs	r3, #1
 8008c58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fed1 	bl	8009a04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00c      	beq.n	8008c86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	461a      	mov	r2, r3
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 ffa7 	bl	8009bd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2310      	movs	r3, #16
 8008ca0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d030      	beq.n	8008d0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb4:	2b80      	cmp	r3, #128	; 0x80
 8008cb6:	d109      	bne.n	8008ccc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cce:	4613      	mov	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	3304      	adds	r3, #4
 8008ce0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	78db      	ldrb	r3, [r3, #3]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d108      	bne.n	8008cfc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f00d ffa8 	bl	8016c4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	461a      	mov	r2, r3
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	461a      	mov	r2, r3
 8008d26:	2320      	movs	r3, #32
 8008d28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	461a      	mov	r2, r3
 8008d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	085b      	lsrs	r3, r3, #1
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f47f af62 	bne.w	8008c20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f00b f8af 	bl	8013ec4 <USB_ReadInterrupts>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d70:	f040 80db 	bne.w	8008f2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00b f8d0 	bl	8013f1e <USB_ReadDevAllInEpInterrupt>
 8008d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008d84:	e0cd      	b.n	8008f22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80c2 	beq.w	8008f16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00b f8f6 	bl	8013f8e <USB_ReadDevInEPInterrupt>
 8008da2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d057      	beq.n	8008e5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	2201      	movs	r2, #1
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	69f9      	ldr	r1, [r7, #28]
 8008dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dce:	4013      	ands	r3, r2
 8008dd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dde:	461a      	mov	r2, r3
 8008de0:	2301      	movs	r3, #1
 8008de2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d132      	bne.n	8008e52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	3348      	adds	r3, #72	; 0x48
 8008dfc:	6819      	ldr	r1, [r3, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	4613      	mov	r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4403      	add	r3, r0
 8008e0c:	3344      	adds	r3, #68	; 0x44
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4419      	add	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	4613      	mov	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4403      	add	r3, r0
 8008e20:	3348      	adds	r3, #72	; 0x48
 8008e22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d113      	bne.n	8008e52 <HAL_PCD_IRQHandler+0x3a2>
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2e:	4613      	mov	r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	334c      	adds	r3, #76	; 0x4c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d108      	bne.n	8008e52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f00b f8ff 	bl	8014050 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f00d fe72 	bl	8016b42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d008      	beq.n	8008e7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e74:	461a      	mov	r2, r3
 8008e76:	2308      	movs	r3, #8
 8008e78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e90:	461a      	mov	r2, r3
 8008e92:	2310      	movs	r3, #16
 8008e94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d008      	beq.n	8008eb2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	461a      	mov	r2, r3
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d023      	beq.n	8008f04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ebe:	6a38      	ldr	r0, [r7, #32]
 8008ec0:	f00a f8de 	bl	8013080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	3338      	adds	r3, #56	; 0x38
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	78db      	ldrb	r3, [r3, #3]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d108      	bne.n	8008ef2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f00d febf 	bl	8016c70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efe:	461a      	mov	r2, r3
 8008f00:	2302      	movs	r3, #2
 8008f02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fcea 	bl	80098ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	3301      	adds	r3, #1
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	085b      	lsrs	r3, r3, #1
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f47f af2e 	bne.w	8008d86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00a ffc8 	bl	8013ec4 <USB_ReadInterrupts>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f3e:	d122      	bne.n	8008f86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d108      	bne.n	8008f70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f66:	2100      	movs	r1, #0
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fef5 	bl	8009d58 <HAL_PCDEx_LPM_Callback>
 8008f6e:	e002      	b.n	8008f76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f00d fe5d 	bl	8016c30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695a      	ldr	r2, [r3, #20]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f00a ff9a 	bl	8013ec4 <USB_ReadInterrupts>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f9a:	d112      	bne.n	8008fc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d102      	bne.n	8008fb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f00d fe19 	bl	8016be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	695a      	ldr	r2, [r3, #20]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f00a ff7c 	bl	8013ec4 <USB_ReadInterrupts>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd6:	d121      	bne.n	800901c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008fe6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d111      	bne.n	8009016 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009000:	089b      	lsrs	r3, r3, #2
 8009002:	f003 020f 	and.w	r2, r3, #15
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800900c:	2101      	movs	r1, #1
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fea2 	bl	8009d58 <HAL_PCDEx_LPM_Callback>
 8009014:	e002      	b.n	800901c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f00d fde4 	bl	8016be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f00a ff4f 	bl	8013ec4 <USB_ReadInterrupts>
 8009026:	4603      	mov	r3, r0
 8009028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800902c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009030:	f040 80b7 	bne.w	80091a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2110      	movs	r1, #16
 800904e:	4618      	mov	r0, r3
 8009050:	f00a f816 	bl	8013080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009054:	2300      	movs	r3, #0
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009058:	e046      	b.n	80090e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009066:	461a      	mov	r2, r3
 8009068:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800906c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800908c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	461a      	mov	r2, r3
 800909c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	3301      	adds	r3, #1
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d3b3      	bcc.n	800905a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009100:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009104:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	d016      	beq.n	800913c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800911e:	f043 030b 	orr.w	r3, r3, #11
 8009122:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009134:	f043 030b 	orr.w	r3, r3, #11
 8009138:	6453      	str	r3, [r2, #68]	; 0x44
 800913a:	e015      	b.n	8009168 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914a:	4619      	mov	r1, r3
 800914c:	f242 032b 	movw	r3, #8235	; 0x202b
 8009150:	4313      	orrs	r3, r2
 8009152:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009162:	f043 030b 	orr.w	r3, r3, #11
 8009166:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009176:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800917a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800918c:	461a      	mov	r2, r3
 800918e:	f00a ff5f 	bl	8014050 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	695a      	ldr	r2, [r3, #20]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80091a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f00a fe8c 	bl	8013ec4 <USB_ReadInterrupts>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b6:	d124      	bne.n	8009202 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f00a ff23 	bl	8014008 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f009 ffd7 	bl	801317a <USB_GetDevSpeed>
 80091cc:	4603      	mov	r3, r0
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	f001 fd88 	bl	800acec <HAL_RCC_GetHCLKFreq>
 80091dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	4620      	mov	r0, r4
 80091e8:	f009 fcdc 	bl	8012ba4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f00d fcd0 	bl	8016b92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009200:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f00a fe5c 	bl	8013ec4 <USB_ReadInterrupts>
 800920c:	4603      	mov	r3, r0
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b08      	cmp	r3, #8
 8009214:	d10a      	bne.n	800922c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f00d fcad 	bl	8016b76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f002 0208 	and.w	r2, r2, #8
 800922a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f00a fe47 	bl	8013ec4 <USB_ReadInterrupts>
 8009236:	4603      	mov	r3, r0
 8009238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923c:	2b80      	cmp	r3, #128	; 0x80
 800923e:	d122      	bne.n	8009286 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800924c:	2301      	movs	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
 8009250:	e014      	b.n	800927c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	4613      	mov	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d105      	bne.n	8009276 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	b2db      	uxtb	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fb09 	bl	8009888 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	3301      	adds	r3, #1
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009282:	429a      	cmp	r2, r3
 8009284:	d3e5      	bcc.n	8009252 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f00a fe1a 	bl	8013ec4 <USB_ReadInterrupts>
 8009290:	4603      	mov	r3, r0
 8009292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	d13b      	bne.n	8009314 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800929c:	2301      	movs	r3, #1
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
 80092a0:	e02b      	b.n	80092fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	3340      	adds	r3, #64	; 0x40
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d115      	bne.n	80092f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80092c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	da12      	bge.n	80092f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	333f      	adds	r3, #63	; 0x3f
 80092de:	2201      	movs	r2, #1
 80092e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 faca 	bl	8009888 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	3301      	adds	r3, #1
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009300:	429a      	cmp	r2, r3
 8009302:	d3ce      	bcc.n	80092a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f00a fdd3 	bl	8013ec4 <USB_ReadInterrupts>
 800931e:	4603      	mov	r3, r0
 8009320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009328:	d155      	bne.n	80093d6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800932a:	2301      	movs	r3, #1
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
 800932e:	e045      	b.n	80093bc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d12e      	bne.n	80093b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009358:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800935a:	2b00      	cmp	r3, #0
 800935c:	da2b      	bge.n	80093b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800936a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800936e:	429a      	cmp	r2, r3
 8009370:	d121      	bne.n	80093b6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009384:	2201      	movs	r2, #1
 8009386:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093b2:	6053      	str	r3, [r2, #4]
            break;
 80093b4:	e007      	b.n	80093c6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	3301      	adds	r3, #1
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d3b4      	bcc.n	8009330 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	695a      	ldr	r2, [r3, #20]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80093d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f00a fd72 	bl	8013ec4 <USB_ReadInterrupts>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ea:	d10a      	bne.n	8009402 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f00d fc51 	bl	8016c94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f00a fd5c 	bl	8013ec4 <USB_ReadInterrupts>
 800940c:	4603      	mov	r3, r0
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b04      	cmp	r3, #4
 8009414:	d115      	bne.n	8009442 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f00d fc41 	bl	8016cb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	e000      	b.n	8009442 <HAL_PCD_IRQHandler+0x992>
      return;
 8009440:	bf00      	nop
    }
  }
}
 8009442:	3734      	adds	r7, #52	; 0x34
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}

08009448 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <HAL_PCD_SetAddress+0x1a>
 800945e:	2302      	movs	r3, #2
 8009460:	e013      	b.n	800948a <HAL_PCD_SetAddress+0x42>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	78fa      	ldrb	r2, [r7, #3]
 800946e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f00a fcba 	bl	8013df4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	4608      	mov	r0, r1
 800949c:	4611      	mov	r1, r2
 800949e:	461a      	mov	r2, r3
 80094a0:	4603      	mov	r3, r0
 80094a2:	70fb      	strb	r3, [r7, #3]
 80094a4:	460b      	mov	r3, r1
 80094a6:	803b      	strh	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da0f      	bge.n	80094d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	f003 020f 	and.w	r2, r3, #15
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	3338      	adds	r3, #56	; 0x38
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	4413      	add	r3, r2
 80094cc:	3304      	adds	r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	705a      	strb	r2, [r3, #1]
 80094d6:	e00f      	b.n	80094f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	f003 020f 	and.w	r2, r3, #15
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	3304      	adds	r3, #4
 80094f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009504:	883a      	ldrh	r2, [r7, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	78ba      	ldrb	r2, [r7, #2]
 800950e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009522:	78bb      	ldrb	r3, [r7, #2]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d102      	bne.n	800952e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_PCD_EP_Open+0xaa>
 8009538:	2302      	movs	r3, #2
 800953a:	e00e      	b.n	800955a <HAL_PCD_EP_Open+0xc8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68f9      	ldr	r1, [r7, #12]
 800954a:	4618      	mov	r0, r3
 800954c:	f009 fe3a 	bl	80131c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009558:	7afb      	ldrb	r3, [r7, #11]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800956e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009572:	2b00      	cmp	r3, #0
 8009574:	da0f      	bge.n	8009596 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	f003 020f 	and.w	r2, r3, #15
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	3338      	adds	r3, #56	; 0x38
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	4413      	add	r3, r2
 800958a:	3304      	adds	r3, #4
 800958c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	705a      	strb	r2, [r3, #1]
 8009594:	e00f      	b.n	80095b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4413      	add	r3, r2
 80095ac:	3304      	adds	r3, #4
 80095ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_PCD_EP_Close+0x6e>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e00e      	b.n	80095ee <HAL_PCD_EP_Close+0x8c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68f9      	ldr	r1, [r7, #12]
 80095de:	4618      	mov	r0, r3
 80095e0:	f009 fe78 	bl	80132d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
 8009602:	460b      	mov	r3, r1
 8009604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009606:	7afb      	ldrb	r3, [r7, #11]
 8009608:	f003 020f 	and.w	r2, r3, #15
 800960c:	4613      	mov	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	3304      	adds	r3, #4
 800961e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2200      	movs	r2, #0
 8009630:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2200      	movs	r2, #0
 8009636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	b2da      	uxtb	r2, r3
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d102      	bne.n	8009652 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	6979      	ldr	r1, [r7, #20]
 8009660:	f009 ff14 	bl	801348c <USB_EPStartXfer>

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009690:	681b      	ldr	r3, [r3, #0]
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b086      	sub	sp, #24
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	460b      	mov	r3, r1
 80096ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	f003 020f 	and.w	r2, r3, #15
 80096b4:	4613      	mov	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	3338      	adds	r3, #56	; 0x38
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	3304      	adds	r3, #4
 80096c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2200      	movs	r2, #0
 80096d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2201      	movs	r2, #1
 80096dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d102      	bne.n	80096f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	6979      	ldr	r1, [r7, #20]
 8009706:	f009 fec1 	bl	801348c <USB_EPStartXfer>

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	f003 020f 	and.w	r2, r3, #15
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d901      	bls.n	8009732 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e050      	b.n	80097d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009736:	2b00      	cmp	r3, #0
 8009738:	da0f      	bge.n	800975a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	f003 020f 	and.w	r2, r3, #15
 8009740:	4613      	mov	r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	3338      	adds	r3, #56	; 0x38
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	3304      	adds	r3, #4
 8009750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	705a      	strb	r2, [r3, #1]
 8009758:	e00d      	b.n	8009776 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	4613      	mov	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	4413      	add	r3, r2
 800976c:	3304      	adds	r3, #4
 800976e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	f003 030f 	and.w	r3, r3, #15
 8009782:	b2da      	uxtb	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800978e:	2b01      	cmp	r3, #1
 8009790:	d101      	bne.n	8009796 <HAL_PCD_EP_SetStall+0x82>
 8009792:	2302      	movs	r3, #2
 8009794:	e01e      	b.n	80097d4 <HAL_PCD_EP_SetStall+0xc0>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f00a fa51 	bl	8013c4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	b2d9      	uxtb	r1, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097c4:	461a      	mov	r2, r3
 80097c6:	f00a fc43 	bl	8014050 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80097e8:	78fb      	ldrb	r3, [r7, #3]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d901      	bls.n	80097fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e042      	b.n	8009880 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da0f      	bge.n	8009822 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	f003 020f 	and.w	r2, r3, #15
 8009808:	4613      	mov	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	3338      	adds	r3, #56	; 0x38
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	3304      	adds	r3, #4
 8009818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	705a      	strb	r2, [r3, #1]
 8009820:	e00f      	b.n	8009842 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	f003 020f 	and.w	r2, r3, #15
 8009828:	4613      	mov	r3, r2
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4413      	add	r3, r2
 8009838:	3304      	adds	r3, #4
 800983a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	b2da      	uxtb	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <HAL_PCD_EP_ClrStall+0x86>
 800985e:	2302      	movs	r3, #2
 8009860:	e00e      	b.n	8009880 <HAL_PCD_EP_ClrStall+0xa4>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68f9      	ldr	r1, [r7, #12]
 8009870:	4618      	mov	r0, r3
 8009872:	f00a fa59 	bl	8013d28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009898:	2b00      	cmp	r3, #0
 800989a:	da0c      	bge.n	80098b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	f003 020f 	and.w	r2, r3, #15
 80098a2:	4613      	mov	r3, r2
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	3338      	adds	r3, #56	; 0x38
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	3304      	adds	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e00c      	b.n	80098d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	f003 020f 	and.w	r2, r3, #15
 80098bc:	4613      	mov	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	4413      	add	r3, r2
 80098cc:	3304      	adds	r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f00a f878 	bl	80139cc <USB_EPStopXfer>
 80098dc:	4603      	mov	r3, r0
 80098de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b08a      	sub	sp, #40	; 0x28
 80098ee:	af02      	add	r7, sp, #8
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	3338      	adds	r3, #56	; 0x38
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	4413      	add	r3, r2
 800990e:	3304      	adds	r3, #4
 8009910:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	695a      	ldr	r2, [r3, #20]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	d901      	bls.n	8009922 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e06c      	b.n	80099fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	429a      	cmp	r2, r3
 8009936:	d902      	bls.n	800993e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3303      	adds	r3, #3
 8009942:	089b      	lsrs	r3, r3, #2
 8009944:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009946:	e02b      	b.n	80099a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	429a      	cmp	r2, r3
 800995c:	d902      	bls.n	8009964 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3303      	adds	r3, #3
 8009968:	089b      	lsrs	r3, r3, #2
 800996a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68d9      	ldr	r1, [r3, #12]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	b2da      	uxtb	r2, r3
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800997c:	b2db      	uxtb	r3, r3
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4603      	mov	r3, r0
 8009982:	6978      	ldr	r0, [r7, #20]
 8009984:	f00a f8cc 	bl	8013b20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	441a      	add	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	441a      	add	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d809      	bhi.n	80099ca <PCD_WriteEmptyTxFifo+0xe0>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	695a      	ldr	r2, [r3, #20]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099be:	429a      	cmp	r2, r3
 80099c0:	d203      	bcs.n	80099ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1be      	bne.n	8009948 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	691a      	ldr	r2, [r3, #16]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d811      	bhi.n	80099fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	2201      	movs	r2, #1
 80099de:	fa02 f303 	lsl.w	r3, r2, r3
 80099e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	43db      	mvns	r3, r3
 80099f0:	6939      	ldr	r1, [r7, #16]
 80099f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099f6:	4013      	ands	r3, r2
 80099f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3720      	adds	r7, #32
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	333c      	adds	r3, #60	; 0x3c
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d17b      	bne.n	8009b32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f003 0308 	and.w	r3, r3, #8
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d015      	beq.n	8009a70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4a61      	ldr	r2, [pc, #388]	; (8009bcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	f240 80b9 	bls.w	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 80b3 	beq.w	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a66:	461a      	mov	r2, r3
 8009a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6c:	6093      	str	r3, [r2, #8]
 8009a6e:	e0a7      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d009      	beq.n	8009a8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	461a      	mov	r2, r3
 8009a88:	2320      	movs	r3, #32
 8009a8a:	6093      	str	r3, [r2, #8]
 8009a8c:	e098      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8093 	bne.w	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	4a4b      	ldr	r2, [pc, #300]	; (8009bcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d90f      	bls.n	8009ac2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009abe:	6093      	str	r3, [r2, #8]
 8009ac0:	e07e      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1a      	ldr	r2, [r3, #32]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	0159      	lsls	r1, r3, #5
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aee:	1ad2      	subs	r2, r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d114      	bne.n	8009b24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d109      	bne.n	8009b16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2101      	movs	r1, #1
 8009b10:	f00a fa9e 	bl	8014050 <USB_EP0_OutStart>
 8009b14:	e006      	b.n	8009b24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	441a      	add	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f00c ffee 	bl	8016b0c <HAL_PCD_DataOutStageCallback>
 8009b30:	e046      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	4a26      	ldr	r2, [pc, #152]	; (8009bd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d124      	bne.n	8009b84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00a      	beq.n	8009b5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	461a      	mov	r2, r3
 8009b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b56:	6093      	str	r3, [r2, #8]
 8009b58:	e032      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d008      	beq.n	8009b76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	461a      	mov	r2, r3
 8009b72:	2320      	movs	r3, #32
 8009b74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f00c ffc5 	bl	8016b0c <HAL_PCD_DataOutStageCallback>
 8009b82:	e01d      	b.n	8009bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d114      	bne.n	8009bb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d108      	bne.n	8009bb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bac:	461a      	mov	r2, r3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	f00a fa4e 	bl	8014050 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f00c ffa6 	bl	8016b0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	4f54300a 	.word	0x4f54300a
 8009bd0:	4f54310a 	.word	0x4f54310a

08009bd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	333c      	adds	r3, #60	; 0x3c
 8009bec:	3304      	adds	r3, #4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4a15      	ldr	r2, [pc, #84]	; (8009c5c <PCD_EP_OutSetupPacket_int+0x88>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d90e      	bls.n	8009c28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	461a      	mov	r2, r3
 8009c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f00c ff5d 	bl	8016ae8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <PCD_EP_OutSetupPacket_int+0x88>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d90c      	bls.n	8009c50 <PCD_EP_OutSetupPacket_int+0x7c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d108      	bne.n	8009c50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c48:	461a      	mov	r2, r3
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	f00a fa00 	bl	8014050 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	4f54300a 	.word	0x4f54300a

08009c60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d107      	bne.n	8009c8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c7e:	883b      	ldrh	r3, [r7, #0]
 8009c80:	0419      	lsls	r1, r3, #16
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c8c:	e028      	b.n	8009ce0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e00d      	b.n	8009cbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	3340      	adds	r3, #64	; 0x40
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	0c1b      	lsrs	r3, r3, #16
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	73fb      	strb	r3, [r7, #15]
 8009cbe:	7bfa      	ldrb	r2, [r7, #15]
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d3ec      	bcc.n	8009ca2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009cc8:	883b      	ldrh	r3, [r7, #0]
 8009cca:	0418      	lsls	r0, r3, #16
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6819      	ldr	r1, [r3, #0]
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4302      	orrs	r2, r0
 8009cd8:	3340      	adds	r3, #64	; 0x40
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	440b      	add	r3, r1
 8009cde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	887a      	ldrh	r2, [r7, #2]
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d3e:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <HAL_PCDEx_ActivateLPM+0x44>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	10000003 	.word	0x10000003

08009d58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d78:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d00a      	beq.n	8009d9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d84:	4b16      	ldr	r3, [pc, #88]	; (8009de0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d001      	beq.n	8009d96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e01f      	b.n	8009dd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e01d      	b.n	8009dd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d9a:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <HAL_PWREx_ConfigSupply+0x70>)
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f023 0207 	bic.w	r2, r3, #7
 8009da2:	490f      	ldr	r1, [pc, #60]	; (8009de0 <HAL_PWREx_ConfigSupply+0x70>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009daa:	f7fa fd25 	bl	80047f8 <HAL_GetTick>
 8009dae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db0:	e009      	b.n	8009dc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009db2:	f7fa fd21 	bl	80047f8 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dc0:	d901      	bls.n	8009dc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e007      	b.n	8009dd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dc6:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <HAL_PWREx_ConfigSupply+0x70>)
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd2:	d1ee      	bne.n	8009db2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	58024800 	.word	0x58024800

08009de4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	4a04      	ldr	r2, [pc, #16]	; (8009e00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009df2:	60d3      	str	r3, [r2, #12]
}
 8009df4:	bf00      	nop
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	58024800 	.word	0x58024800

08009e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08c      	sub	sp, #48	; 0x30
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e3c8      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 8087 	beq.w	8009f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e24:	4b88      	ldr	r3, [pc, #544]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e2e:	4b86      	ldr	r3, [pc, #536]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d007      	beq.n	8009e4a <HAL_RCC_OscConfig+0x46>
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	2b18      	cmp	r3, #24
 8009e3e:	d110      	bne.n	8009e62 <HAL_RCC_OscConfig+0x5e>
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d10b      	bne.n	8009e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e4a:	4b7f      	ldr	r3, [pc, #508]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d06c      	beq.n	8009f30 <HAL_RCC_OscConfig+0x12c>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d168      	bne.n	8009f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e3a2      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6a:	d106      	bne.n	8009e7a <HAL_RCC_OscConfig+0x76>
 8009e6c:	4b76      	ldr	r3, [pc, #472]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a75      	ldr	r2, [pc, #468]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e02e      	b.n	8009ed8 <HAL_RCC_OscConfig+0xd4>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <HAL_RCC_OscConfig+0x98>
 8009e82:	4b71      	ldr	r3, [pc, #452]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a70      	ldr	r2, [pc, #448]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	4b6e      	ldr	r3, [pc, #440]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a6d      	ldr	r2, [pc, #436]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	e01d      	b.n	8009ed8 <HAL_RCC_OscConfig+0xd4>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ea4:	d10c      	bne.n	8009ec0 <HAL_RCC_OscConfig+0xbc>
 8009ea6:	4b68      	ldr	r3, [pc, #416]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a67      	ldr	r2, [pc, #412]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	4b65      	ldr	r3, [pc, #404]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a64      	ldr	r2, [pc, #400]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	e00b      	b.n	8009ed8 <HAL_RCC_OscConfig+0xd4>
 8009ec0:	4b61      	ldr	r3, [pc, #388]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a60      	ldr	r2, [pc, #384]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	4b5e      	ldr	r3, [pc, #376]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a5d      	ldr	r2, [pc, #372]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d013      	beq.n	8009f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fa fc8a 	bl	80047f8 <HAL_GetTick>
 8009ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ee6:	e008      	b.n	8009efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ee8:	f7fa fc86 	bl	80047f8 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	2b64      	cmp	r3, #100	; 0x64
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e356      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009efa:	4b53      	ldr	r3, [pc, #332]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0f0      	beq.n	8009ee8 <HAL_RCC_OscConfig+0xe4>
 8009f06:	e014      	b.n	8009f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f08:	f7fa fc76 	bl	80047f8 <HAL_GetTick>
 8009f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f10:	f7fa fc72 	bl	80047f8 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b64      	cmp	r3, #100	; 0x64
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e342      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f22:	4b49      	ldr	r3, [pc, #292]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1f0      	bne.n	8009f10 <HAL_RCC_OscConfig+0x10c>
 8009f2e:	e000      	b.n	8009f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 808c 	beq.w	800a058 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f40:	4b41      	ldr	r3, [pc, #260]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f4a:	4b3f      	ldr	r3, [pc, #252]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <HAL_RCC_OscConfig+0x162>
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	2b18      	cmp	r3, #24
 8009f5a:	d137      	bne.n	8009fcc <HAL_RCC_OscConfig+0x1c8>
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d132      	bne.n	8009fcc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f66:	4b38      	ldr	r3, [pc, #224]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <HAL_RCC_OscConfig+0x17a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e314      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f7e:	4b32      	ldr	r3, [pc, #200]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f023 0219 	bic.w	r2, r3, #25
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	492f      	ldr	r1, [pc, #188]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f90:	f7fa fc32 	bl	80047f8 <HAL_GetTick>
 8009f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f98:	f7fa fc2e 	bl	80047f8 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e2fe      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009faa:	4b27      	ldr	r3, [pc, #156]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f0      	beq.n	8009f98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	061b      	lsls	r3, r3, #24
 8009fc4:	4920      	ldr	r1, [pc, #128]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fca:	e045      	b.n	800a058 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d026      	beq.n	800a022 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fd4:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f023 0219 	bic.w	r2, r3, #25
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	4919      	ldr	r1, [pc, #100]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe6:	f7fa fc07 	bl	80047f8 <HAL_GetTick>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fec:	e008      	b.n	800a000 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fee:	f7fa fc03 	bl	80047f8 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e2d3      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0f0      	beq.n	8009fee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a00c:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	061b      	lsls	r3, r3, #24
 800a01a:	490b      	ldr	r1, [pc, #44]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	e01a      	b.n	800a058 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a08      	ldr	r2, [pc, #32]	; (800a048 <HAL_RCC_OscConfig+0x244>)
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a02e:	f7fa fbe3 	bl	80047f8 <HAL_GetTick>
 800a032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a034:	e00a      	b.n	800a04c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a036:	f7fa fbdf 	bl	80047f8 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d903      	bls.n	800a04c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e2af      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
 800a048:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a04c:	4b96      	ldr	r3, [pc, #600]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1ee      	bne.n	800a036 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0310 	and.w	r3, r3, #16
 800a060:	2b00      	cmp	r3, #0
 800a062:	d06a      	beq.n	800a13a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a064:	4b90      	ldr	r3, [pc, #576]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a06c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a06e:	4b8e      	ldr	r3, [pc, #568]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a072:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b08      	cmp	r3, #8
 800a078:	d007      	beq.n	800a08a <HAL_RCC_OscConfig+0x286>
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b18      	cmp	r3, #24
 800a07e:	d11b      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x2b4>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b01      	cmp	r3, #1
 800a088:	d116      	bne.n	800a0b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a08a:	4b87      	ldr	r3, [pc, #540]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d005      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x29e>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b80      	cmp	r3, #128	; 0x80
 800a09c:	d001      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e282      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0a2:	4b81      	ldr	r3, [pc, #516]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	061b      	lsls	r3, r3, #24
 800a0b0:	497d      	ldr	r1, [pc, #500]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0b6:	e040      	b.n	800a13a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d023      	beq.n	800a108 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a0c0:	4b79      	ldr	r3, [pc, #484]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a78      	ldr	r2, [pc, #480]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0cc:	f7fa fb94 	bl	80047f8 <HAL_GetTick>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0d4:	f7fa fb90 	bl	80047f8 <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d901      	bls.n	800a0e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e260      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0e6:	4b70      	ldr	r3, [pc, #448]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0f0      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0f2:	4b6d      	ldr	r3, [pc, #436]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	061b      	lsls	r3, r3, #24
 800a100:	4969      	ldr	r1, [pc, #420]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a102:	4313      	orrs	r3, r2
 800a104:	60cb      	str	r3, [r1, #12]
 800a106:	e018      	b.n	800a13a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a108:	4b67      	ldr	r3, [pc, #412]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a66      	ldr	r2, [pc, #408]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a10e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a114:	f7fa fb70 	bl	80047f8 <HAL_GetTick>
 800a118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a11a:	e008      	b.n	800a12e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a11c:	f7fa fb6c 	bl	80047f8 <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2b02      	cmp	r3, #2
 800a128:	d901      	bls.n	800a12e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e23c      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a12e:	4b5e      	ldr	r3, [pc, #376]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1f0      	bne.n	800a11c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0308 	and.w	r3, r3, #8
 800a142:	2b00      	cmp	r3, #0
 800a144:	d036      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d019      	beq.n	800a182 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a14e:	4b56      	ldr	r3, [pc, #344]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a152:	4a55      	ldr	r2, [pc, #340]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a154:	f043 0301 	orr.w	r3, r3, #1
 800a158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a15a:	f7fa fb4d 	bl	80047f8 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a160:	e008      	b.n	800a174 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a162:	f7fa fb49 	bl	80047f8 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e219      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a174:	4b4c      	ldr	r3, [pc, #304]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0f0      	beq.n	800a162 <HAL_RCC_OscConfig+0x35e>
 800a180:	e018      	b.n	800a1b4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a182:	4b49      	ldr	r3, [pc, #292]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a186:	4a48      	ldr	r2, [pc, #288]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a18e:	f7fa fb33 	bl	80047f8 <HAL_GetTick>
 800a192:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a196:	f7fa fb2f 	bl	80047f8 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e1ff      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a1a8:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f0      	bne.n	800a196 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d036      	beq.n	800a22e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d019      	beq.n	800a1fc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1c8:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a36      	ldr	r2, [pc, #216]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1d4:	f7fa fb10 	bl	80047f8 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1dc:	f7fa fb0c 	bl	80047f8 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e1dc      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1ee:	4b2e      	ldr	r3, [pc, #184]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0f0      	beq.n	800a1dc <HAL_RCC_OscConfig+0x3d8>
 800a1fa:	e018      	b.n	800a22e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1fc:	4b2a      	ldr	r3, [pc, #168]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a29      	ldr	r2, [pc, #164]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a206:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a208:	f7fa faf6 	bl	80047f8 <HAL_GetTick>
 800a20c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a210:	f7fa faf2 	bl	80047f8 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e1c2      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a222:	4b21      	ldr	r3, [pc, #132]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f0      	bne.n	800a210 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 8086 	beq.w	800a348 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <HAL_RCC_OscConfig+0x4a8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1a      	ldr	r2, [pc, #104]	; (800a2ac <HAL_RCC_OscConfig+0x4a8>)
 800a242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a248:	f7fa fad6 	bl	80047f8 <HAL_GetTick>
 800a24c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a250:	f7fa fad2 	bl	80047f8 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b64      	cmp	r3, #100	; 0x64
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e1a2      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a262:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <HAL_RCC_OscConfig+0x4a8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d106      	bne.n	800a284 <HAL_RCC_OscConfig+0x480>
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	4a0b      	ldr	r2, [pc, #44]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a27c:	f043 0301 	orr.w	r3, r3, #1
 800a280:	6713      	str	r3, [r2, #112]	; 0x70
 800a282:	e032      	b.n	800a2ea <HAL_RCC_OscConfig+0x4e6>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d111      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x4ac>
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a290:	4a05      	ldr	r2, [pc, #20]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a292:	f023 0301 	bic.w	r3, r3, #1
 800a296:	6713      	str	r3, [r2, #112]	; 0x70
 800a298:	4b03      	ldr	r3, [pc, #12]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	4a02      	ldr	r2, [pc, #8]	; (800a2a8 <HAL_RCC_OscConfig+0x4a4>)
 800a29e:	f023 0304 	bic.w	r3, r3, #4
 800a2a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a4:	e021      	b.n	800a2ea <HAL_RCC_OscConfig+0x4e6>
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
 800a2ac:	58024800 	.word	0x58024800
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	2b05      	cmp	r3, #5
 800a2b6:	d10c      	bne.n	800a2d2 <HAL_RCC_OscConfig+0x4ce>
 800a2b8:	4b83      	ldr	r3, [pc, #524]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2bc:	4a82      	ldr	r2, [pc, #520]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2be:	f043 0304 	orr.w	r3, r3, #4
 800a2c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a2c4:	4b80      	ldr	r3, [pc, #512]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c8:	4a7f      	ldr	r2, [pc, #508]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a2d0:	e00b      	b.n	800a2ea <HAL_RCC_OscConfig+0x4e6>
 800a2d2:	4b7d      	ldr	r3, [pc, #500]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d6:	4a7c      	ldr	r2, [pc, #496]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2d8:	f023 0301 	bic.w	r3, r3, #1
 800a2dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a2de:	4b7a      	ldr	r3, [pc, #488]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e2:	4a79      	ldr	r2, [pc, #484]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a2e4:	f023 0304 	bic.w	r3, r3, #4
 800a2e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d015      	beq.n	800a31e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f2:	f7fa fa81 	bl	80047f8 <HAL_GetTick>
 800a2f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2f8:	e00a      	b.n	800a310 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2fa:	f7fa fa7d 	bl	80047f8 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	f241 3288 	movw	r2, #5000	; 0x1388
 800a308:	4293      	cmp	r3, r2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e14b      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a310:	4b6d      	ldr	r3, [pc, #436]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0ee      	beq.n	800a2fa <HAL_RCC_OscConfig+0x4f6>
 800a31c:	e014      	b.n	800a348 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a31e:	f7fa fa6b 	bl	80047f8 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a324:	e00a      	b.n	800a33c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a326:	f7fa fa67 	bl	80047f8 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	f241 3288 	movw	r2, #5000	; 0x1388
 800a334:	4293      	cmp	r3, r2
 800a336:	d901      	bls.n	800a33c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e135      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a33c:	4b62      	ldr	r3, [pc, #392]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1ee      	bne.n	800a326 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 812a 	beq.w	800a5a6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a352:	4b5d      	ldr	r3, [pc, #372]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a35a:	2b18      	cmp	r3, #24
 800a35c:	f000 80ba 	beq.w	800a4d4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b02      	cmp	r3, #2
 800a366:	f040 8095 	bne.w	800a494 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a36a:	4b57      	ldr	r3, [pc, #348]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a56      	ldr	r2, [pc, #344]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a376:	f7fa fa3f 	bl	80047f8 <HAL_GetTick>
 800a37a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a37c:	e008      	b.n	800a390 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a37e:	f7fa fa3b 	bl	80047f8 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d901      	bls.n	800a390 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e10b      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a390:	4b4d      	ldr	r3, [pc, #308]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f0      	bne.n	800a37e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a39c:	4b4a      	ldr	r3, [pc, #296]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a39e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3a0:	4b4a      	ldr	r3, [pc, #296]	; (800a4cc <HAL_RCC_OscConfig+0x6c8>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a3ac:	0112      	lsls	r2, r2, #4
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	4945      	ldr	r1, [pc, #276]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	628b      	str	r3, [r1, #40]	; 0x28
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	025b      	lsls	r3, r3, #9
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	041b      	lsls	r3, r3, #16
 800a3d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	061b      	lsls	r3, r3, #24
 800a3e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3e6:	4938      	ldr	r1, [pc, #224]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a3ec:	4b36      	ldr	r3, [pc, #216]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	4a35      	ldr	r2, [pc, #212]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a3f2:	f023 0301 	bic.w	r3, r3, #1
 800a3f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3f8:	4b33      	ldr	r3, [pc, #204]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a3fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3fc:	4b34      	ldr	r3, [pc, #208]	; (800a4d0 <HAL_RCC_OscConfig+0x6cc>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a404:	00d2      	lsls	r2, r2, #3
 800a406:	4930      	ldr	r1, [pc, #192]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a40c:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	f023 020c 	bic.w	r2, r3, #12
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	492b      	ldr	r1, [pc, #172]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a41e:	4b2a      	ldr	r3, [pc, #168]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	f023 0202 	bic.w	r2, r3, #2
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42a:	4927      	ldr	r1, [pc, #156]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a430:	4b25      	ldr	r3, [pc, #148]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	4a24      	ldr	r2, [pc, #144]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a43a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a43c:	4b22      	ldr	r3, [pc, #136]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	4a21      	ldr	r2, [pc, #132]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a448:	4b1f      	ldr	r3, [pc, #124]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	4a1e      	ldr	r2, [pc, #120]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a44e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a454:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a45a:	f043 0301 	orr.w	r3, r3, #1
 800a45e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a460:	4b19      	ldr	r3, [pc, #100]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a18      	ldr	r2, [pc, #96]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46c:	f7fa f9c4 	bl	80047f8 <HAL_GetTick>
 800a470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a472:	e008      	b.n	800a486 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a474:	f7fa f9c0 	bl	80047f8 <HAL_GetTick>
 800a478:	4602      	mov	r2, r0
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d901      	bls.n	800a486 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e090      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a486:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0f0      	beq.n	800a474 <HAL_RCC_OscConfig+0x670>
 800a492:	e088      	b.n	800a5a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a494:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a0b      	ldr	r2, [pc, #44]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a49e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a0:	f7fa f9aa 	bl	80047f8 <HAL_GetTick>
 800a4a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a8:	f7fa f9a6 	bl	80047f8 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e076      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4ba:	4b03      	ldr	r3, [pc, #12]	; (800a4c8 <HAL_RCC_OscConfig+0x6c4>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x6a4>
 800a4c6:	e06e      	b.n	800a5a6 <HAL_RCC_OscConfig+0x7a2>
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	fffffc0c 	.word	0xfffffc0c
 800a4d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4d4:	4b36      	ldr	r3, [pc, #216]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4da:	4b35      	ldr	r3, [pc, #212]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d031      	beq.n	800a54c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	f003 0203 	and.w	r2, r3, #3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d12a      	bne.n	800a54c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	091b      	lsrs	r3, r3, #4
 800a4fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a502:	429a      	cmp	r2, r3
 800a504:	d122      	bne.n	800a54c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a510:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a512:	429a      	cmp	r2, r3
 800a514:	d11a      	bne.n	800a54c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	0a5b      	lsrs	r3, r3, #9
 800a51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a524:	429a      	cmp	r2, r3
 800a526:	d111      	bne.n	800a54c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a534:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a536:	429a      	cmp	r2, r3
 800a538:	d108      	bne.n	800a54c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	0e1b      	lsrs	r3, r3, #24
 800a53e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a546:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a548:	429a      	cmp	r2, r3
 800a54a:	d001      	beq.n	800a550 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e02b      	b.n	800a5a8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a550:	4b17      	ldr	r3, [pc, #92]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a554:	08db      	lsrs	r3, r3, #3
 800a556:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a55a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d01f      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a566:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	4a11      	ldr	r2, [pc, #68]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a56c:	f023 0301 	bic.w	r3, r3, #1
 800a570:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a572:	f7fa f941 	bl	80047f8 <HAL_GetTick>
 800a576:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a578:	bf00      	nop
 800a57a:	f7fa f93d 	bl	80047f8 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	4293      	cmp	r3, r2
 800a584:	d0f9      	beq.n	800a57a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a586:	4b0a      	ldr	r3, [pc, #40]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58a:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <HAL_RCC_OscConfig+0x7b0>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a592:	00d2      	lsls	r2, r2, #3
 800a594:	4906      	ldr	r1, [pc, #24]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a596:	4313      	orrs	r3, r2
 800a598:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59e:	4a04      	ldr	r2, [pc, #16]	; (800a5b0 <HAL_RCC_OscConfig+0x7ac>)
 800a5a0:	f043 0301 	orr.w	r3, r3, #1
 800a5a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3730      	adds	r7, #48	; 0x30
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	ffff0007 	.word	0xffff0007

0800a5b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e19c      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5cc:	4b8a      	ldr	r3, [pc, #552]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 030f 	and.w	r3, r3, #15
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d910      	bls.n	800a5fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5da:	4b87      	ldr	r3, [pc, #540]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f023 020f 	bic.w	r2, r3, #15
 800a5e2:	4985      	ldr	r1, [pc, #532]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ea:	4b83      	ldr	r3, [pc, #524]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d001      	beq.n	800a5fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e184      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d010      	beq.n	800a62a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	4b7b      	ldr	r3, [pc, #492]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a614:	429a      	cmp	r2, r3
 800a616:	d908      	bls.n	800a62a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a618:	4b78      	ldr	r3, [pc, #480]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4975      	ldr	r1, [pc, #468]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a626:	4313      	orrs	r3, r2
 800a628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0308 	and.w	r3, r3, #8
 800a632:	2b00      	cmp	r3, #0
 800a634:	d010      	beq.n	800a658 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	4b70      	ldr	r3, [pc, #448]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a642:	429a      	cmp	r2, r3
 800a644:	d908      	bls.n	800a658 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a646:	4b6d      	ldr	r3, [pc, #436]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	496a      	ldr	r1, [pc, #424]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a654:	4313      	orrs	r3, r2
 800a656:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	d010      	beq.n	800a686 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	699a      	ldr	r2, [r3, #24]
 800a668:	4b64      	ldr	r3, [pc, #400]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a670:	429a      	cmp	r2, r3
 800a672:	d908      	bls.n	800a686 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a674:	4b61      	ldr	r3, [pc, #388]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	495e      	ldr	r1, [pc, #376]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a682:	4313      	orrs	r3, r2
 800a684:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d010      	beq.n	800a6b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69da      	ldr	r2, [r3, #28]
 800a696:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d908      	bls.n	800a6b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a6a2:	4b56      	ldr	r3, [pc, #344]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	4953      	ldr	r1, [pc, #332]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68da      	ldr	r2, [r3, #12]
 800a6c4:	4b4d      	ldr	r3, [pc, #308]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d908      	bls.n	800a6e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6d0:	4b4a      	ldr	r3, [pc, #296]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f023 020f 	bic.w	r2, r3, #15
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4947      	ldr	r1, [pc, #284]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d055      	beq.n	800a79a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6ee:	4b43      	ldr	r3, [pc, #268]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	4940      	ldr	r1, [pc, #256]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2b02      	cmp	r3, #2
 800a706:	d107      	bne.n	800a718 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a708:	4b3c      	ldr	r3, [pc, #240]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d121      	bne.n	800a758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e0f6      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d107      	bne.n	800a730 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a720:	4b36      	ldr	r3, [pc, #216]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d115      	bne.n	800a758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e0ea      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d107      	bne.n	800a748 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a738:	4b30      	ldr	r3, [pc, #192]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e0de      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a748:	4b2c      	ldr	r3, [pc, #176]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e0d6      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a758:	4b28      	ldr	r3, [pc, #160]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	f023 0207 	bic.w	r2, r3, #7
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	4925      	ldr	r1, [pc, #148]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a766:	4313      	orrs	r3, r2
 800a768:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a76a:	f7fa f845 	bl	80047f8 <HAL_GetTick>
 800a76e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a770:	e00a      	b.n	800a788 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a772:	f7fa f841 	bl	80047f8 <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a780:	4293      	cmp	r3, r2
 800a782:	d901      	bls.n	800a788 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e0be      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a788:	4b1c      	ldr	r3, [pc, #112]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	429a      	cmp	r2, r3
 800a798:	d1eb      	bne.n	800a772 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d010      	beq.n	800a7c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d208      	bcs.n	800a7c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7b6:	4b11      	ldr	r3, [pc, #68]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f023 020f 	bic.w	r2, r3, #15
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	490e      	ldr	r1, [pc, #56]	; (800a7fc <HAL_RCC_ClockConfig+0x244>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d214      	bcs.n	800a800 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7d6:	4b08      	ldr	r3, [pc, #32]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f023 020f 	bic.w	r2, r3, #15
 800a7de:	4906      	ldr	r1, [pc, #24]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <HAL_RCC_ClockConfig+0x240>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d005      	beq.n	800a800 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e086      	b.n	800a906 <HAL_RCC_ClockConfig+0x34e>
 800a7f8:	52002000 	.word	0x52002000
 800a7fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	4b3f      	ldr	r3, [pc, #252]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a818:	429a      	cmp	r2, r3
 800a81a:	d208      	bcs.n	800a82e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a81c:	4b3c      	ldr	r3, [pc, #240]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	4939      	ldr	r1, [pc, #228]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0308 	and.w	r3, r3, #8
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695a      	ldr	r2, [r3, #20]
 800a83e:	4b34      	ldr	r3, [pc, #208]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a846:	429a      	cmp	r2, r3
 800a848:	d208      	bcs.n	800a85c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a84a:	4b31      	ldr	r3, [pc, #196]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	492e      	ldr	r1, [pc, #184]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d010      	beq.n	800a88a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	4b28      	ldr	r3, [pc, #160]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a874:	429a      	cmp	r2, r3
 800a876:	d208      	bcs.n	800a88a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a878:	4b25      	ldr	r3, [pc, #148]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	4922      	ldr	r1, [pc, #136]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a886:	4313      	orrs	r3, r2
 800a888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d010      	beq.n	800a8b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69da      	ldr	r2, [r3, #28]
 800a89a:	4b1d      	ldr	r3, [pc, #116]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d208      	bcs.n	800a8b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8a6:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	4917      	ldr	r1, [pc, #92]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a8b8:	f000 f89e 	bl	800a9f8 <HAL_RCC_GetSysClockFreq>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	4b14      	ldr	r3, [pc, #80]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	0a1b      	lsrs	r3, r3, #8
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	4912      	ldr	r1, [pc, #72]	; (800a914 <HAL_RCC_ClockConfig+0x35c>)
 800a8ca:	5ccb      	ldrb	r3, [r1, r3]
 800a8cc:	f003 031f 	and.w	r3, r3, #31
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8d6:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <HAL_RCC_ClockConfig+0x358>)
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f003 030f 	and.w	r3, r3, #15
 800a8de:	4a0d      	ldr	r2, [pc, #52]	; (800a914 <HAL_RCC_ClockConfig+0x35c>)
 800a8e0:	5cd3      	ldrb	r3, [r2, r3]
 800a8e2:	f003 031f 	and.w	r3, r3, #31
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ec:	4a0a      	ldr	r2, [pc, #40]	; (800a918 <HAL_RCC_ClockConfig+0x360>)
 800a8ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8f0:	4a0a      	ldr	r2, [pc, #40]	; (800a91c <HAL_RCC_ClockConfig+0x364>)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <HAL_RCC_ClockConfig+0x368>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f9 ff32 	bl	8004764 <HAL_InitTick>
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	58024400 	.word	0x58024400
 800a914:	0801c91c 	.word	0x0801c91c
 800a918:	24000004 	.word	0x24000004
 800a91c:	24000000 	.word	0x24000000
 800a920:	24000008 	.word	0x24000008

0800a924 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08c      	sub	sp, #48	; 0x30
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d12a      	bne.n	800a98c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a936:	4b2d      	ldr	r3, [pc, #180]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a93c:	4a2b      	ldr	r2, [pc, #172]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a946:	4b29      	ldr	r3, [pc, #164]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a954:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a95a:	2302      	movs	r3, #2
 800a95c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95e:	2303      	movs	r3, #3
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a962:	2300      	movs	r3, #0
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a966:	2300      	movs	r3, #0
 800a968:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a96a:	f107 031c 	add.w	r3, r7, #28
 800a96e:	4619      	mov	r1, r3
 800a970:	481f      	ldr	r0, [pc, #124]	; (800a9f0 <HAL_RCC_MCOConfig+0xcc>)
 800a972:	f7fd fc29 	bl	80081c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a976:	4b1d      	ldr	r3, [pc, #116]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a97e:	68b9      	ldr	r1, [r7, #8]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	430b      	orrs	r3, r1
 800a984:	4919      	ldr	r1, [pc, #100]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a986:	4313      	orrs	r3, r2
 800a988:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a98a:	e02a      	b.n	800a9e2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a98c:	4b17      	ldr	r3, [pc, #92]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a98e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a992:	4a16      	ldr	r2, [pc, #88]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a994:	f043 0304 	orr.w	r3, r3, #4
 800a998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a99c:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a99e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a9aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a9c0:	f107 031c 	add.w	r3, r7, #28
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	480b      	ldr	r0, [pc, #44]	; (800a9f4 <HAL_RCC_MCOConfig+0xd0>)
 800a9c8:	f7fd fbfe 	bl	80081c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	01d9      	lsls	r1, r3, #7
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	430b      	orrs	r3, r1
 800a9dc:	4903      	ldr	r1, [pc, #12]	; (800a9ec <HAL_RCC_MCOConfig+0xc8>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	610b      	str	r3, [r1, #16]
}
 800a9e2:	bf00      	nop
 800a9e4:	3730      	adds	r7, #48	; 0x30
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	58020000 	.word	0x58020000
 800a9f4:	58020800 	.word	0x58020800

0800a9f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b089      	sub	sp, #36	; 0x24
 800a9fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9fe:	4bb3      	ldr	r3, [pc, #716]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa06:	2b18      	cmp	r3, #24
 800aa08:	f200 8155 	bhi.w	800acb6 <HAL_RCC_GetSysClockFreq+0x2be>
 800aa0c:	a201      	add	r2, pc, #4	; (adr r2, 800aa14 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa12:	bf00      	nop
 800aa14:	0800aa79 	.word	0x0800aa79
 800aa18:	0800acb7 	.word	0x0800acb7
 800aa1c:	0800acb7 	.word	0x0800acb7
 800aa20:	0800acb7 	.word	0x0800acb7
 800aa24:	0800acb7 	.word	0x0800acb7
 800aa28:	0800acb7 	.word	0x0800acb7
 800aa2c:	0800acb7 	.word	0x0800acb7
 800aa30:	0800acb7 	.word	0x0800acb7
 800aa34:	0800aa9f 	.word	0x0800aa9f
 800aa38:	0800acb7 	.word	0x0800acb7
 800aa3c:	0800acb7 	.word	0x0800acb7
 800aa40:	0800acb7 	.word	0x0800acb7
 800aa44:	0800acb7 	.word	0x0800acb7
 800aa48:	0800acb7 	.word	0x0800acb7
 800aa4c:	0800acb7 	.word	0x0800acb7
 800aa50:	0800acb7 	.word	0x0800acb7
 800aa54:	0800aaa5 	.word	0x0800aaa5
 800aa58:	0800acb7 	.word	0x0800acb7
 800aa5c:	0800acb7 	.word	0x0800acb7
 800aa60:	0800acb7 	.word	0x0800acb7
 800aa64:	0800acb7 	.word	0x0800acb7
 800aa68:	0800acb7 	.word	0x0800acb7
 800aa6c:	0800acb7 	.word	0x0800acb7
 800aa70:	0800acb7 	.word	0x0800acb7
 800aa74:	0800aaab 	.word	0x0800aaab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa78:	4b94      	ldr	r3, [pc, #592]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d009      	beq.n	800aa98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa84:	4b91      	ldr	r3, [pc, #580]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	08db      	lsrs	r3, r3, #3
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	4a90      	ldr	r2, [pc, #576]	; (800acd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa96:	e111      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa98:	4b8d      	ldr	r3, [pc, #564]	; (800acd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa9a:	61bb      	str	r3, [r7, #24]
      break;
 800aa9c:	e10e      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa9e:	4b8d      	ldr	r3, [pc, #564]	; (800acd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aaa0:	61bb      	str	r3, [r7, #24]
      break;
 800aaa2:	e10b      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aaa4:	4b8c      	ldr	r3, [pc, #560]	; (800acd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aaa6:	61bb      	str	r3, [r7, #24]
      break;
 800aaa8:	e108      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaaa:	4b88      	ldr	r3, [pc, #544]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aab4:	4b85      	ldr	r3, [pc, #532]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab8:	091b      	lsrs	r3, r3, #4
 800aaba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aabe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aac0:	4b82      	ldr	r3, [pc, #520]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aaca:	4b80      	ldr	r3, [pc, #512]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aace:	08db      	lsrs	r3, r3, #3
 800aad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	fb02 f303 	mul.w	r3, r2, r3
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80e1 	beq.w	800acb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	f000 8083 	beq.w	800abfc <HAL_RCC_GetSysClockFreq+0x204>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	f200 80a1 	bhi.w	800ac40 <HAL_RCC_GetSysClockFreq+0x248>
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d003      	beq.n	800ab0c <HAL_RCC_GetSysClockFreq+0x114>
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d056      	beq.n	800abb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab0a:	e099      	b.n	800ac40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab0c:	4b6f      	ldr	r3, [pc, #444]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d02d      	beq.n	800ab74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab18:	4b6c      	ldr	r3, [pc, #432]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	08db      	lsrs	r3, r3, #3
 800ab1e:	f003 0303 	and.w	r3, r3, #3
 800ab22:	4a6b      	ldr	r2, [pc, #428]	; (800acd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab24:	fa22 f303 	lsr.w	r3, r2, r3
 800ab28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	ee07 3a90 	vmov	s15, r3
 800ab30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b62      	ldr	r3, [pc, #392]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab56:	eddf 5a61 	vldr	s11, [pc, #388]	; 800acdc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab72:	e087      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ace0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b51      	ldr	r3, [pc, #324]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800acdc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abb6:	e065      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ace4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b40      	ldr	r3, [pc, #256]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abda:	ed97 6a02 	vldr	s12, [r7, #8]
 800abde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800acdc <HAL_RCC_GetSysClockFreq+0x2e4>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abfa:	e043      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ace8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0e:	4b2f      	ldr	r3, [pc, #188]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800acdc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac3e:	e021      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ace4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800acdc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac88:	0a5b      	lsrs	r3, r3, #9
 800ac8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8e:	3301      	adds	r3, #1
 800ac90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca8:	ee17 3a90 	vmov	r3, s15
 800acac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800acae:	e005      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	61bb      	str	r3, [r7, #24]
      break;
 800acb4:	e002      	b.n	800acbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acb8:	61bb      	str	r3, [r7, #24]
      break;
 800acba:	bf00      	nop
  }

  return sysclockfreq;
 800acbc:	69bb      	ldr	r3, [r7, #24]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3724      	adds	r7, #36	; 0x24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	58024400 	.word	0x58024400
 800acd0:	03d09000 	.word	0x03d09000
 800acd4:	003d0900 	.word	0x003d0900
 800acd8:	02faf080 	.word	0x02faf080
 800acdc:	46000000 	.word	0x46000000
 800ace0:	4c742400 	.word	0x4c742400
 800ace4:	4a742400 	.word	0x4a742400
 800ace8:	4c3ebc20 	.word	0x4c3ebc20

0800acec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800acf2:	f7ff fe81 	bl	800a9f8 <HAL_RCC_GetSysClockFreq>
 800acf6:	4602      	mov	r2, r0
 800acf8:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <HAL_RCC_GetHCLKFreq+0x50>)
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	0a1b      	lsrs	r3, r3, #8
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	490f      	ldr	r1, [pc, #60]	; (800ad40 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad04:	5ccb      	ldrb	r3, [r1, r3]
 800ad06:	f003 031f 	and.w	r3, r3, #31
 800ad0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad1a:	5cd3      	ldrb	r3, [r2, r3]
 800ad1c:	f003 031f 	and.w	r3, r3, #31
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	fa22 f303 	lsr.w	r3, r2, r3
 800ad26:	4a07      	ldr	r2, [pc, #28]	; (800ad44 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad2a:	4a07      	ldr	r2, [pc, #28]	; (800ad48 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad32:	681b      	ldr	r3, [r3, #0]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	58024400 	.word	0x58024400
 800ad40:	0801c91c 	.word	0x0801c91c
 800ad44:	24000004 	.word	0x24000004
 800ad48:	24000000 	.word	0x24000000

0800ad4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad50:	f7ff ffcc 	bl	800acec <HAL_RCC_GetHCLKFreq>
 800ad54:	4602      	mov	r2, r0
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	091b      	lsrs	r3, r3, #4
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	4904      	ldr	r1, [pc, #16]	; (800ad74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad62:	5ccb      	ldrb	r3, [r1, r3]
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	58024400 	.word	0x58024400
 800ad74:	0801c91c 	.word	0x0801c91c

0800ad78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad7c:	f7ff ffb6 	bl	800acec <HAL_RCC_GetHCLKFreq>
 800ad80:	4602      	mov	r2, r0
 800ad82:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	4904      	ldr	r1, [pc, #16]	; (800ada0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad8e:	5ccb      	ldrb	r3, [r1, r3]
 800ad90:	f003 031f 	and.w	r3, r3, #31
 800ad94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	58024400 	.word	0x58024400
 800ada0:	0801c91c 	.word	0x0801c91c

0800ada4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ada4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ada8:	b0c6      	sub	sp, #280	; 0x118
 800adaa:	af00      	add	r7, sp, #0
 800adac:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800adb0:	2300      	movs	r3, #0
 800adb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adb6:	2300      	movs	r3, #0
 800adb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800adc8:	2500      	movs	r5, #0
 800adca:	ea54 0305 	orrs.w	r3, r4, r5
 800adce:	d049      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800add6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adda:	d02f      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800addc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ade0:	d828      	bhi.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ade2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade6:	d01a      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ade8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adec:	d822      	bhi.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800adf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adf6:	d007      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800adf8:	e01c      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adfa:	4bab      	ldr	r3, [pc, #684]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfe:	4aaa      	ldr	r2, [pc, #680]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae06:	e01a      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	2102      	movs	r1, #2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f002 fa49 	bl	800d2a8 <RCCEx_PLL2_Config>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae1c:	e00f      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	3328      	adds	r3, #40	; 0x28
 800ae24:	2102      	movs	r1, #2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f002 faf0 	bl	800d40c <RCCEx_PLL3_Config>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae32:	e004      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae3a:	e000      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ae3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae46:	4b98      	ldr	r3, [pc, #608]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae54:	4a94      	ldr	r2, [pc, #592]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae56:	430b      	orrs	r3, r1
 800ae58:	6513      	str	r3, [r2, #80]	; 0x50
 800ae5a:	e003      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ae70:	f04f 0900 	mov.w	r9, #0
 800ae74:	ea58 0309 	orrs.w	r3, r8, r9
 800ae78:	d047      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d82a      	bhi.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ae84:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ae86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8a:	bf00      	nop
 800ae8c:	0800aea1 	.word	0x0800aea1
 800ae90:	0800aeaf 	.word	0x0800aeaf
 800ae94:	0800aec5 	.word	0x0800aec5
 800ae98:	0800aee3 	.word	0x0800aee3
 800ae9c:	0800aee3 	.word	0x0800aee3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea0:	4b81      	ldr	r3, [pc, #516]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	4a80      	ldr	r2, [pc, #512]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aeac:	e01a      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 f9f6 	bl	800d2a8 <RCCEx_PLL2_Config>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aec2:	e00f      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	3328      	adds	r3, #40	; 0x28
 800aeca:	2100      	movs	r1, #0
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 fa9d 	bl	800d40c <RCCEx_PLL3_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aed8:	e004      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aee0:	e000      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aeec:	4b6e      	ldr	r3, [pc, #440]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef0:	f023 0107 	bic.w	r1, r3, #7
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefa:	4a6b      	ldr	r2, [pc, #428]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aefc:	430b      	orrs	r3, r1
 800aefe:	6513      	str	r3, [r2, #80]	; 0x50
 800af00:	e003      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800af16:	f04f 0b00 	mov.w	fp, #0
 800af1a:	ea5a 030b 	orrs.w	r3, sl, fp
 800af1e:	d05b      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af28:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800af2c:	d03b      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800af2e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800af32:	d834      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af38:	d037      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800af3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af3e:	d82e      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af44:	d033      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af4a:	d828      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af50:	d01a      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800af52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af56:	d822      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800af5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af60:	d007      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800af62:	e01c      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af64:	4b50      	ldr	r3, [pc, #320]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	4a4f      	ldr	r2, [pc, #316]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af70:	e01e      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af76:	3308      	adds	r3, #8
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f002 f994 	bl	800d2a8 <RCCEx_PLL2_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af86:	e013      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8c:	3328      	adds	r3, #40	; 0x28
 800af8e:	2100      	movs	r1, #0
 800af90:	4618      	mov	r0, r3
 800af92:	f002 fa3b 	bl	800d40c <RCCEx_PLL3_Config>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af9c:	e008      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afa4:	e004      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10b      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800afb8:	4b3b      	ldr	r3, [pc, #236]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afbc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afc8:	4a37      	ldr	r2, [pc, #220]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afca:	430b      	orrs	r3, r1
 800afcc:	6593      	str	r3, [r2, #88]	; 0x58
 800afce:	e003      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800afe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800afe8:	2300      	movs	r3, #0
 800afea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800afee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aff2:	460b      	mov	r3, r1
 800aff4:	4313      	orrs	r3, r2
 800aff6:	d05d      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b000:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b004:	d03b      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b006:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b00a:	d834      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b00c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b010:	d037      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b016:	d82e      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b018:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b01c:	d033      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b01e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b022:	d828      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b028:	d01a      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b02e:	d822      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b030:	2b00      	cmp	r3, #0
 800b032:	d003      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b038:	d007      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b03a:	e01c      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b03c:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	4a19      	ldr	r2, [pc, #100]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b048:	e01e      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04e:	3308      	adds	r3, #8
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f002 f928 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b05e:	e013      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b064:	3328      	adds	r3, #40	; 0x28
 800b066:	2100      	movs	r1, #0
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 f9cf 	bl	800d40c <RCCEx_PLL3_Config>
 800b06e:	4603      	mov	r3, r0
 800b070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b074:	e008      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b07c:	e004      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b07e:	bf00      	nop
 800b080:	e002      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b082:	bf00      	nop
 800b084:	e000      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b086:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10d      	bne.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b090:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b094:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0a0:	4a01      	ldr	r2, [pc, #4]	; (800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	6593      	str	r3, [r2, #88]	; 0x58
 800b0a6:	e005      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b0a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b0c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b0ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	d03a      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0da:	2b30      	cmp	r3, #48	; 0x30
 800b0dc:	d01f      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b0de:	2b30      	cmp	r3, #48	; 0x30
 800b0e0:	d819      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	d00c      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d815      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d019      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d111      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f2:	4baa      	ldr	r3, [pc, #680]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4aa9      	ldr	r2, [pc, #676]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b0fe:	e011      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b104:	3308      	adds	r3, #8
 800b106:	2102      	movs	r1, #2
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 f8cd 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b114:	e006      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b11c:	e002      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b124:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b12c:	4b9b      	ldr	r3, [pc, #620]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b130:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13a:	4a98      	ldr	r2, [pc, #608]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b13c:	430b      	orrs	r3, r1
 800b13e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b140:	e003      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b142:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b146:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b15a:	2300      	movs	r3, #0
 800b15c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b160:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b164:	460b      	mov	r3, r1
 800b166:	4313      	orrs	r3, r2
 800b168:	d051      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b174:	d035      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b17a:	d82e      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b17c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b180:	d031      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b182:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b186:	d828      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b18c:	d01a      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b192:	d822      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19c:	d007      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b19e:	e01c      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b7e      	ldr	r3, [pc, #504]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a7d      	ldr	r2, [pc, #500]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e01c      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f002 f876 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1c2:	e011      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	3328      	adds	r3, #40	; 0x28
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 f91d 	bl	800d40c <RCCEx_PLL3_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1d8:	e006      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1e0:	e002      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b1e2:	bf00      	nop
 800b1e4:	e000      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1f0:	4b6a      	ldr	r3, [pc, #424]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1fe:	4a67      	ldr	r2, [pc, #412]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b200:	430b      	orrs	r3, r1
 800b202:	6513      	str	r3, [r2, #80]	; 0x50
 800b204:	e003      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b20a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b21a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b21e:	2300      	movs	r3, #0
 800b220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b224:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b228:	460b      	mov	r3, r1
 800b22a:	4313      	orrs	r3, r2
 800b22c:	d053      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b238:	d033      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b23a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b23e:	d82c      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b240:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b244:	d02f      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b24a:	d826      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b24c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b250:	d02b      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b256:	d820      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b25c:	d012      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b25e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b262:	d81a      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d022      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26c:	d115      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b272:	3308      	adds	r3, #8
 800b274:	2101      	movs	r1, #1
 800b276:	4618      	mov	r0, r3
 800b278:	f002 f816 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b282:	e015      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b288:	3328      	adds	r3, #40	; 0x28
 800b28a:	2101      	movs	r1, #1
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 f8bd 	bl	800d40c <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b298:	e00a      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2a0:	e006      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b2b8:	4b38      	ldr	r3, [pc, #224]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2c6:	4a35      	ldr	r2, [pc, #212]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b2cc:	e003      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b2e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b2ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	d058      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b302:	d033      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b308:	d82c      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30e:	d02f      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b314:	d826      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b316:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b31a:	d02b      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b31c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b320:	d820      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b326:	d012      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32c:	d81a      	bhi.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d022      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b336:	d115      	bne.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	3308      	adds	r3, #8
 800b33e:	2101      	movs	r1, #1
 800b340:	4618      	mov	r0, r3
 800b342:	f001 ffb1 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b346:	4603      	mov	r3, r0
 800b348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b34c:	e015      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	3328      	adds	r3, #40	; 0x28
 800b354:	2101      	movs	r1, #1
 800b356:	4618      	mov	r0, r3
 800b358:	f002 f858 	bl	800d40c <RCCEx_PLL3_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b362:	e00a      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b36a:	e006      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b36c:	bf00      	nop
 800b36e:	e004      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b370:	bf00      	nop
 800b372:	e002      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b37a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10e      	bne.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b382:	4b06      	ldr	r3, [pc, #24]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b386:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b392:	4a02      	ldr	r2, [pc, #8]	; (800b39c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b394:	430b      	orrs	r3, r1
 800b396:	6593      	str	r3, [r2, #88]	; 0x58
 800b398:	e006      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b3b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b3be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	d037      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3d2:	d00e      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3d8:	d816      	bhi.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d018      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e2:	d111      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e4:	4bc4      	ldr	r3, [pc, #784]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	4ac3      	ldr	r2, [pc, #780]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3f0:	e00f      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f6:	3308      	adds	r3, #8
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 ff54 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b400:	4603      	mov	r3, r0
 800b402:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b406:	e004      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b40e:	e000      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b412:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b41a:	4bb7      	ldr	r3, [pc, #732]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b428:	4ab3      	ldr	r2, [pc, #716]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b42a:	430b      	orrs	r3, r1
 800b42c:	6513      	str	r3, [r2, #80]	; 0x50
 800b42e:	e003      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b434:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b448:	2300      	movs	r3, #0
 800b44a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b44e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b452:	460b      	mov	r3, r1
 800b454:	4313      	orrs	r3, r2
 800b456:	d039      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d81c      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b4a5 	.word	0x0800b4a5
 800b46c:	0800b479 	.word	0x0800b479
 800b470:	0800b487 	.word	0x0800b487
 800b474:	0800b4a5 	.word	0x0800b4a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b478:	4b9f      	ldr	r3, [pc, #636]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	4a9e      	ldr	r2, [pc, #632]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b484:	e00f      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48a:	3308      	adds	r3, #8
 800b48c:	2102      	movs	r1, #2
 800b48e:	4618      	mov	r0, r3
 800b490:	f001 ff0a 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b4ae:	4b92      	ldr	r3, [pc, #584]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b2:	f023 0103 	bic.w	r1, r3, #3
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4bc:	4a8e      	ldr	r2, [pc, #568]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b4d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f000 8099 	beq.w	800b620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4ee:	4b83      	ldr	r3, [pc, #524]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a82      	ldr	r2, [pc, #520]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4fa:	f7f9 f97d 	bl	80047f8 <HAL_GetTick>
 800b4fe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b502:	e00b      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b504:	f7f9 f978 	bl	80047f8 <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b64      	cmp	r3, #100	; 0x64
 800b512:	d903      	bls.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b51a:	e005      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b51c:	4b77      	ldr	r3, [pc, #476]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0ed      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b528:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d173      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b530:	4b71      	ldr	r3, [pc, #452]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b53c:	4053      	eors	r3, r2
 800b53e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b542:	2b00      	cmp	r3, #0
 800b544:	d015      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b546:	4b6c      	ldr	r3, [pc, #432]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b54e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b552:	4b69      	ldr	r3, [pc, #420]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b556:	4a68      	ldr	r2, [pc, #416]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b55c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b55e:	4b66      	ldr	r3, [pc, #408]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b562:	4a65      	ldr	r2, [pc, #404]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b568:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b56a:	4a63      	ldr	r2, [pc, #396]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b570:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57e:	d118      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b580:	f7f9 f93a 	bl	80047f8 <HAL_GetTick>
 800b584:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b588:	e00d      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b58a:	f7f9 f935 	bl	80047f8 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b594:	1ad2      	subs	r2, r2, r3
 800b596:	f241 3388 	movw	r3, #5000	; 0x1388
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d903      	bls.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b5a4:	e005      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5a6:	4b54      	ldr	r3, [pc, #336]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0eb      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b5b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d129      	bne.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ca:	d10e      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b5cc:	4b4a      	ldr	r3, [pc, #296]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5dc:	091a      	lsrs	r2, r3, #4
 800b5de:	4b48      	ldr	r3, [pc, #288]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	4a45      	ldr	r2, [pc, #276]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6113      	str	r3, [r2, #16]
 800b5e8:	e005      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b5ea:	4b43      	ldr	r3, [pc, #268]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	4a42      	ldr	r2, [pc, #264]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5f4:	6113      	str	r3, [r2, #16]
 800b5f6:	4b40      	ldr	r3, [pc, #256]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b606:	4a3c      	ldr	r2, [pc, #240]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b608:	430b      	orrs	r3, r1
 800b60a:	6713      	str	r3, [r2, #112]	; 0x70
 800b60c:	e008      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b60e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b612:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b616:	e003      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b618:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b61c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	f002 0301 	and.w	r3, r2, #1
 800b62c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b630:	2300      	movs	r3, #0
 800b632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b636:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b63a:	460b      	mov	r3, r1
 800b63c:	4313      	orrs	r3, r2
 800b63e:	f000 808f 	beq.w	800b760 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b648:	2b28      	cmp	r3, #40	; 0x28
 800b64a:	d871      	bhi.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b739 	.word	0x0800b739
 800b658:	0800b731 	.word	0x0800b731
 800b65c:	0800b731 	.word	0x0800b731
 800b660:	0800b731 	.word	0x0800b731
 800b664:	0800b731 	.word	0x0800b731
 800b668:	0800b731 	.word	0x0800b731
 800b66c:	0800b731 	.word	0x0800b731
 800b670:	0800b731 	.word	0x0800b731
 800b674:	0800b705 	.word	0x0800b705
 800b678:	0800b731 	.word	0x0800b731
 800b67c:	0800b731 	.word	0x0800b731
 800b680:	0800b731 	.word	0x0800b731
 800b684:	0800b731 	.word	0x0800b731
 800b688:	0800b731 	.word	0x0800b731
 800b68c:	0800b731 	.word	0x0800b731
 800b690:	0800b731 	.word	0x0800b731
 800b694:	0800b71b 	.word	0x0800b71b
 800b698:	0800b731 	.word	0x0800b731
 800b69c:	0800b731 	.word	0x0800b731
 800b6a0:	0800b731 	.word	0x0800b731
 800b6a4:	0800b731 	.word	0x0800b731
 800b6a8:	0800b731 	.word	0x0800b731
 800b6ac:	0800b731 	.word	0x0800b731
 800b6b0:	0800b731 	.word	0x0800b731
 800b6b4:	0800b739 	.word	0x0800b739
 800b6b8:	0800b731 	.word	0x0800b731
 800b6bc:	0800b731 	.word	0x0800b731
 800b6c0:	0800b731 	.word	0x0800b731
 800b6c4:	0800b731 	.word	0x0800b731
 800b6c8:	0800b731 	.word	0x0800b731
 800b6cc:	0800b731 	.word	0x0800b731
 800b6d0:	0800b731 	.word	0x0800b731
 800b6d4:	0800b739 	.word	0x0800b739
 800b6d8:	0800b731 	.word	0x0800b731
 800b6dc:	0800b731 	.word	0x0800b731
 800b6e0:	0800b731 	.word	0x0800b731
 800b6e4:	0800b731 	.word	0x0800b731
 800b6e8:	0800b731 	.word	0x0800b731
 800b6ec:	0800b731 	.word	0x0800b731
 800b6f0:	0800b731 	.word	0x0800b731
 800b6f4:	0800b739 	.word	0x0800b739
 800b6f8:	58024400 	.word	0x58024400
 800b6fc:	58024800 	.word	0x58024800
 800b700:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	3308      	adds	r3, #8
 800b70a:	2101      	movs	r1, #1
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 fdcb 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b718:	e00f      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	3328      	adds	r3, #40	; 0x28
 800b720:	2101      	movs	r1, #1
 800b722:	4618      	mov	r0, r3
 800b724:	f001 fe72 	bl	800d40c <RCCEx_PLL3_Config>
 800b728:	4603      	mov	r3, r0
 800b72a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b72e:	e004      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b736:	e000      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b742:	4bbf      	ldr	r3, [pc, #764]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b746:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b750:	4abb      	ldr	r2, [pc, #748]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b752:	430b      	orrs	r3, r1
 800b754:	6553      	str	r3, [r2, #84]	; 0x54
 800b756:	e003      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b758:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b75c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f002 0302 	and.w	r3, r2, #2
 800b76c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b770:	2300      	movs	r3, #0
 800b772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b776:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4313      	orrs	r3, r2
 800b77e:	d041      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b786:	2b05      	cmp	r3, #5
 800b788:	d824      	bhi.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b78a:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b7dd 	.word	0x0800b7dd
 800b794:	0800b7a9 	.word	0x0800b7a9
 800b798:	0800b7bf 	.word	0x0800b7bf
 800b79c:	0800b7dd 	.word	0x0800b7dd
 800b7a0:	0800b7dd 	.word	0x0800b7dd
 800b7a4:	0800b7dd 	.word	0x0800b7dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f001 fd79 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7bc:	e00f      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	3328      	adds	r3, #40	; 0x28
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 fe20 	bl	800d40c <RCCEx_PLL3_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7d2:	e004      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7da:	e000      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10a      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7e6:	4b96      	ldr	r3, [pc, #600]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ea:	f023 0107 	bic.w	r1, r3, #7
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7f4:	4a92      	ldr	r2, [pc, #584]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b7fa:	e003      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f002 0304 	and.w	r3, r2, #4
 800b810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b814:	2300      	movs	r3, #0
 800b816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b81a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b81e:	460b      	mov	r3, r1
 800b820:	4313      	orrs	r3, r2
 800b822:	d044      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d825      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b830:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b836:	bf00      	nop
 800b838:	0800b885 	.word	0x0800b885
 800b83c:	0800b851 	.word	0x0800b851
 800b840:	0800b867 	.word	0x0800b867
 800b844:	0800b885 	.word	0x0800b885
 800b848:	0800b885 	.word	0x0800b885
 800b84c:	0800b885 	.word	0x0800b885
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	3308      	adds	r3, #8
 800b856:	2101      	movs	r1, #1
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 fd25 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b864:	e00f      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	3328      	adds	r3, #40	; 0x28
 800b86c:	2101      	movs	r1, #1
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fdcc 	bl	800d40c <RCCEx_PLL3_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b87a:	e004      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b882:	e000      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b88e:	4b6c      	ldr	r3, [pc, #432]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b892:	f023 0107 	bic.w	r1, r3, #7
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89e:	4a68      	ldr	r2, [pc, #416]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8a4:	e003      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f002 0320 	and.w	r3, r2, #32
 800b8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b8c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	d055      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8da:	d033      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8e0:	d82c      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e6:	d02f      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ec:	d826      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8f2:	d02b      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b8f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8f8:	d820      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8fe:	d012      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b904:	d81a      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d022      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b90e:	d115      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b914:	3308      	adds	r3, #8
 800b916:	2100      	movs	r1, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 fcc5 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b924:	e015      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92a:	3328      	adds	r3, #40	; 0x28
 800b92c:	2102      	movs	r1, #2
 800b92e:	4618      	mov	r0, r3
 800b930:	f001 fd6c 	bl	800d40c <RCCEx_PLL3_Config>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b93a:	e00a      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b942:	e006      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b952:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b95a:	4b39      	ldr	r3, [pc, #228]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b96a:	4a35      	ldr	r2, [pc, #212]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6553      	str	r3, [r2, #84]	; 0x54
 800b970:	e003      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b976:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b986:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b98a:	2300      	movs	r3, #0
 800b98c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b990:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b994:	460b      	mov	r3, r1
 800b996:	4313      	orrs	r3, r2
 800b998:	d058      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9a6:	d033      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b9a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9ac:	d82c      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b2:	d02f      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b8:	d826      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9be:	d02b      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b9c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9c4:	d820      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ca:	d012      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b9cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d0:	d81a      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d022      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9da:	d115      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fc5f 	bl	800d2a8 <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e015      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	3328      	adds	r3, #40	; 0x28
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 fd06 	bl	800d40c <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba06:	e00a      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba0e:	e006      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba10:	bf00      	nop
 800ba12:	e004      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba14:	bf00      	nop
 800ba16:	e002      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba18:	bf00      	nop
 800ba1a:	e000      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10e      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba36:	4a02      	ldr	r2, [pc, #8]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	6593      	str	r3, [r2, #88]	; 0x58
 800ba3c:	e006      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ba3e:	bf00      	nop
 800ba40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ba58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ba66:	460b      	mov	r3, r1
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	d055      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba78:	d033      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ba7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba7e:	d82c      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba84:	d02f      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ba86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8a:	d826      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba90:	d02b      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ba92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba96:	d820      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba9c:	d012      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ba9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baa2:	d81a      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d022      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800baa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baac:	d115      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab2:	3308      	adds	r3, #8
 800bab4:	2100      	movs	r1, #0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f001 fbf6 	bl	800d2a8 <RCCEx_PLL2_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bac2:	e015      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2102      	movs	r1, #2
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fc9d 	bl	800d40c <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bad8:	e00a      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bae0:	e006      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bae2:	bf00      	nop
 800bae4:	e004      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bae6:	bf00      	nop
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800baea:	bf00      	nop
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800baee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10b      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800baf8:	4ba0      	ldr	r3, [pc, #640]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb08:	4a9c      	ldr	r2, [pc, #624]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb0e:	e003      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f002 0308 	and.w	r3, r2, #8
 800bb24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb2e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bb32:	460b      	mov	r3, r1
 800bb34:	4313      	orrs	r3, r2
 800bb36:	d01e      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb44:	d10c      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4a:	3328      	adds	r3, #40	; 0x28
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 fc5c 	bl	800d40c <RCCEx_PLL3_Config>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bb60:	4b86      	ldr	r3, [pc, #536]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb70:	4a82      	ldr	r2, [pc, #520]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb72:	430b      	orrs	r3, r1
 800bb74:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f002 0310 	and.w	r3, r2, #16
 800bb82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb86:	2300      	movs	r3, #0
 800bb88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb8c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bb90:	460b      	mov	r3, r1
 800bb92:	4313      	orrs	r3, r2
 800bb94:	d01e      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bba2:	d10c      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba8:	3328      	adds	r3, #40	; 0x28
 800bbaa:	2102      	movs	r1, #2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 fc2d 	bl	800d40c <RCCEx_PLL3_Config>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bbbe:	4b6f      	ldr	r3, [pc, #444]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbce:	4a6b      	ldr	r2, [pc, #428]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bbe0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbe6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	d03e      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbfc:	d022      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bbfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc02:	d81b      	bhi.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d003      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bc08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc0c:	d00b      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bc0e:	e015      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc14:	3308      	adds	r3, #8
 800bc16:	2100      	movs	r1, #0
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f001 fb45 	bl	800d2a8 <RCCEx_PLL2_Config>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc24:	e00f      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2a:	3328      	adds	r3, #40	; 0x28
 800bc2c:	2102      	movs	r1, #2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 fbec 	bl	800d40c <RCCEx_PLL3_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc3a:	e004      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc42:	e000      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bc44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10b      	bne.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc4e:	4b4b      	ldr	r3, [pc, #300]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc52:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc5e:	4a47      	ldr	r2, [pc, #284]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc60:	430b      	orrs	r3, r1
 800bc62:	6593      	str	r3, [r2, #88]	; 0x58
 800bc64:	e003      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc7a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	677b      	str	r3, [r7, #116]	; 0x74
 800bc80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bc84:	460b      	mov	r3, r1
 800bc86:	4313      	orrs	r3, r2
 800bc88:	d03b      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc96:	d01f      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bc98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc9c:	d818      	bhi.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bc9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bca2:	d003      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bca8:	d007      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bcaa:	e011      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcac:	4b33      	ldr	r3, [pc, #204]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	4a32      	ldr	r2, [pc, #200]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcb8:	e00f      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcbe:	3328      	adds	r3, #40	; 0x28
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 fba2 	bl	800d40c <RCCEx_PLL3_Config>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcce:	e004      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcd6:	e000      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bcd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10b      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bce2:	4b26      	ldr	r3, [pc, #152]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcf2:	4a22      	ldr	r2, [pc, #136]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6553      	str	r3, [r2, #84]	; 0x54
 800bcf8:	e003      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bd0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd10:	2300      	movs	r3, #0
 800bd12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd14:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	d034      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bd28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd2c:	d007      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bd2e:	e011      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd30:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	4a11      	ldr	r2, [pc, #68]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd3c:	e00e      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd42:	3308      	adds	r3, #8
 800bd44:	2102      	movs	r1, #2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f001 faae 	bl	800d2a8 <RCCEx_PLL2_Config>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd52:	e003      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10d      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	4a02      	ldr	r2, [pc, #8]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd74:	430b      	orrs	r3, r1
 800bd76:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd78:	e006      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bd7a:	bf00      	nop
 800bd7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bd94:	663b      	str	r3, [r7, #96]	; 0x60
 800bd96:	2300      	movs	r3, #0
 800bd98:	667b      	str	r3, [r7, #100]	; 0x64
 800bd9a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4313      	orrs	r3, r2
 800bda2:	d00c      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda8:	3328      	adds	r3, #40	; 0x28
 800bdaa:	2102      	movs	r1, #2
 800bdac:	4618      	mov	r0, r3
 800bdae:	f001 fb2d 	bl	800d40c <RCCEx_PLL3_Config>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bdca:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdcc:	2300      	movs	r3, #0
 800bdce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	d036      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bde4:	d018      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bde6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdea:	d811      	bhi.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bdec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf0:	d014      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bdf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf6:	d80b      	bhi.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d011      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bdfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be00:	d106      	bne.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be02:	4bb7      	ldr	r3, [pc, #732]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	4ab6      	ldr	r2, [pc, #728]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800be0e:	e008      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be16:	e004      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be18:	bf00      	nop
 800be1a:	e002      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be2a:	4bad      	ldr	r3, [pc, #692]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be38:	4aa9      	ldr	r2, [pc, #676]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be3a:	430b      	orrs	r3, r1
 800be3c:	6553      	str	r3, [r2, #84]	; 0x54
 800be3e:	e003      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800be54:	653b      	str	r3, [r7, #80]	; 0x50
 800be56:	2300      	movs	r3, #0
 800be58:	657b      	str	r3, [r7, #84]	; 0x54
 800be5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800be5e:	460b      	mov	r3, r1
 800be60:	4313      	orrs	r3, r2
 800be62:	d009      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be64:	4b9e      	ldr	r3, [pc, #632]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be72:	4a9b      	ldr	r2, [pc, #620]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be74:	430b      	orrs	r3, r1
 800be76:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800be84:	64bb      	str	r3, [r7, #72]	; 0x48
 800be86:	2300      	movs	r3, #0
 800be88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800be8e:	460b      	mov	r3, r1
 800be90:	4313      	orrs	r3, r2
 800be92:	d009      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be94:	4b92      	ldr	r3, [pc, #584]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be98:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800be9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bea2:	4a8f      	ldr	r2, [pc, #572]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bea4:	430b      	orrs	r3, r1
 800bea6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800beb4:	643b      	str	r3, [r7, #64]	; 0x40
 800beb6:	2300      	movs	r3, #0
 800beb8:	647b      	str	r3, [r7, #68]	; 0x44
 800beba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bebe:	460b      	mov	r3, r1
 800bec0:	4313      	orrs	r3, r2
 800bec2:	d00e      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bec4:	4b86      	ldr	r3, [pc, #536]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	4a85      	ldr	r2, [pc, #532]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800beca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bece:	6113      	str	r3, [r2, #16]
 800bed0:	4b83      	ldr	r3, [pc, #524]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bed2:	6919      	ldr	r1, [r3, #16]
 800bed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bedc:	4a80      	ldr	r2, [pc, #512]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bede:	430b      	orrs	r3, r1
 800bee0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800beee:	63bb      	str	r3, [r7, #56]	; 0x38
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bef8:	460b      	mov	r3, r1
 800befa:	4313      	orrs	r3, r2
 800befc:	d009      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800befe:	4b78      	ldr	r3, [pc, #480]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0c:	4a74      	ldr	r2, [pc, #464]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf1e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf20:	2300      	movs	r3, #0
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	d00a      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf2e:	4b6c      	ldr	r3, [pc, #432]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf32:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf3e:	4a68      	ldr	r2, [pc, #416]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf40:	430b      	orrs	r3, r1
 800bf42:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf56:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	d011      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf64:	3308      	adds	r3, #8
 800bf66:	2100      	movs	r1, #0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f99d 	bl	800d2a8 <RCCEx_PLL2_Config>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	6239      	str	r1, [r7, #32]
 800bf90:	f003 0302 	and.w	r3, r3, #2
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
 800bf96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	d011      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f001 f97d 	bl	800d2a8 <RCCEx_PLL2_Config>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bfb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	61b9      	str	r1, [r7, #24]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	d011      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 f95d 	bl	800d2a8 <RCCEx_PLL2_Config>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bffc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c000:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	2100      	movs	r1, #0
 800c00e:	6139      	str	r1, [r7, #16]
 800c010:	f003 0308 	and.w	r3, r3, #8
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c01a:	460b      	mov	r3, r1
 800c01c:	4313      	orrs	r3, r2
 800c01e:	d011      	beq.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c024:	3328      	adds	r3, #40	; 0x28
 800c026:	2100      	movs	r1, #0
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 f9ef 	bl	800d40c <RCCEx_PLL3_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c034:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c040:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	2100      	movs	r1, #0
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c05a:	460b      	mov	r3, r1
 800c05c:	4313      	orrs	r3, r2
 800c05e:	d011      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c064:	3328      	adds	r3, #40	; 0x28
 800c066:	2101      	movs	r1, #1
 800c068:	4618      	mov	r0, r3
 800c06a:	f001 f9cf 	bl	800d40c <RCCEx_PLL3_Config>
 800c06e:	4603      	mov	r3, r0
 800c070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c074:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	2100      	movs	r1, #0
 800c08e:	6039      	str	r1, [r7, #0]
 800c090:	f003 0320 	and.w	r3, r3, #32
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c09a:	460b      	mov	r3, r1
 800c09c:	4313      	orrs	r3, r2
 800c09e:	d011      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a4:	3328      	adds	r3, #40	; 0x28
 800c0a6:	2102      	movs	r1, #2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f001 f9af 	bl	800d40c <RCCEx_PLL3_Config>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c0b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c0c4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e000      	b.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0de:	bf00      	nop
 800c0e0:	58024400 	.word	0x58024400

0800c0e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b090      	sub	sp, #64	; 0x40
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c0ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	f040 8094 	bne.w	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c0fc:	4b9b      	ldr	r3, [pc, #620]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c100:	f003 0307 	and.w	r3, r3, #7
 800c104:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	2b04      	cmp	r3, #4
 800c10a:	f200 8087 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c129 	.word	0x0800c129
 800c118:	0800c151 	.word	0x0800c151
 800c11c:	0800c179 	.word	0x0800c179
 800c120:	0800c215 	.word	0x0800c215
 800c124:	0800c1a1 	.word	0x0800c1a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c128:	4b90      	ldr	r3, [pc, #576]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c134:	d108      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 ff62 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c144:	f000 bc93 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c148:	2300      	movs	r3, #0
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14c:	f000 bc8f 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c150:	4b86      	ldr	r3, [pc, #536]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c15c:	d108      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15e:	f107 0318 	add.w	r3, r7, #24
 800c162:	4618      	mov	r0, r3
 800c164:	f000 fca6 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16c:	f000 bc7f 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	f000 bc7b 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c178:	4b7c      	ldr	r3, [pc, #496]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c184:	d108      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c186:	f107 030c 	add.w	r3, r7, #12
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 fde6 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c194:	f000 bc6b 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	f000 bc67 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1a0:	4b72      	ldr	r3, [pc, #456]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1aa:	4b70      	ldr	r3, [pc, #448]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0304 	and.w	r3, r3, #4
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d10c      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d109      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1bc:	4b6b      	ldr	r3, [pc, #428]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	08db      	lsrs	r3, r3, #3
 800c1c2:	f003 0303 	and.w	r3, r3, #3
 800c1c6:	4a6a      	ldr	r2, [pc, #424]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ce:	e01f      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1d0:	4b66      	ldr	r3, [pc, #408]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1dc:	d106      	bne.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1e4:	d102      	bne.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1e6:	4b63      	ldr	r3, [pc, #396]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ea:	e011      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1ec:	4b5f      	ldr	r3, [pc, #380]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1f8:	d106      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c200:	d102      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c202:	4b5d      	ldr	r3, [pc, #372]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c206:	e003      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c20c:	f000 bc2f 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c210:	f000 bc2d 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c214:	4b59      	ldr	r3, [pc, #356]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	f000 bc29 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c220:	f000 bc25 	b.w	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c228:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c22c:	430b      	orrs	r3, r1
 800c22e:	f040 80a7 	bne.w	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c232:	4b4e      	ldr	r3, [pc, #312]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c236:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c23a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c242:	d054      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c24a:	f200 808b 	bhi.w	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c254:	f000 8083 	beq.w	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c25e:	f200 8081 	bhi.w	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c268:	d02f      	beq.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c270:	d878      	bhi.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c27e:	d012      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c280:	e070      	b.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c282:	4b3a      	ldr	r3, [pc, #232]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c28a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c28e:	d107      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c294:	4618      	mov	r0, r3
 800c296:	f000 feb5 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29e:	e3e6      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a4:	e3e3      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a6:	4b31      	ldr	r3, [pc, #196]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2b2:	d107      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b4:	f107 0318 	add.w	r3, r7, #24
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 fbfb 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c2:	e3d4      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c8:	e3d1      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2ca:	4b28      	ldr	r3, [pc, #160]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d6:	d107      	bne.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d8:	f107 030c 	add.w	r3, r7, #12
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fd3d 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e6:	e3c2      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ec:	e3bf      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2ee:	4b1f      	ldr	r3, [pc, #124]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f8:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b04      	cmp	r3, #4
 800c302:	d10c      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c306:	2b00      	cmp	r3, #0
 800c308:	d109      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c30a:	4b18      	ldr	r3, [pc, #96]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	08db      	lsrs	r3, r3, #3
 800c310:	f003 0303 	and.w	r3, r3, #3
 800c314:	4a16      	ldr	r2, [pc, #88]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c316:	fa22 f303 	lsr.w	r3, r2, r3
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c31c:	e01e      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c31e:	4b13      	ldr	r3, [pc, #76]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c32a:	d106      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c332:	d102      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c334:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c338:	e010      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c346:	d106      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c34e:	d102      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c350:	4b09      	ldr	r3, [pc, #36]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c354:	e002      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c35a:	e388      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c35c:	e387      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c35e:	4b07      	ldr	r3, [pc, #28]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c362:	e384      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c368:	e381      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
 800c370:	03d09000 	.word	0x03d09000
 800c374:	003d0900 	.word	0x003d0900
 800c378:	02faf080 	.word	0x02faf080
 800c37c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c384:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c388:	430b      	orrs	r3, r1
 800c38a:	f040 809c 	bne.w	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c38e:	4b9e      	ldr	r3, [pc, #632]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c396:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c39e:	d054      	beq.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3a6:	f200 808b 	bhi.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3b0:	f000 8083 	beq.w	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c3ba:	f200 8081 	bhi.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3c4:	d02f      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3cc:	d878      	bhi.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3da:	d012      	beq.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c3dc:	e070      	b.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3de:	4b8a      	ldr	r3, [pc, #552]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ea:	d107      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 fe07 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fa:	e338      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c400:	e335      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c402:	4b81      	ldr	r3, [pc, #516]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c40e:	d107      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c410:	f107 0318 	add.w	r3, r7, #24
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fb4d 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41e:	e326      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e323      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c426:	4b78      	ldr	r3, [pc, #480]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c432:	d107      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fc8f 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e314      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e311      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c44a:	4b6f      	ldr	r3, [pc, #444]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c454:	4b6c      	ldr	r3, [pc, #432]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d10c      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c466:	4b68      	ldr	r3, [pc, #416]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	08db      	lsrs	r3, r3, #3
 800c46c:	f003 0303 	and.w	r3, r3, #3
 800c470:	4a66      	ldr	r2, [pc, #408]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c472:	fa22 f303 	lsr.w	r3, r2, r3
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c478:	e01e      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c47a:	4b63      	ldr	r3, [pc, #396]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c486:	d106      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c48e:	d102      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c490:	4b5f      	ldr	r3, [pc, #380]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c494:	e010      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c496:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a2:	d106      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4aa:	d102      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ac:	4b59      	ldr	r3, [pc, #356]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b0:	e002      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4b6:	e2da      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4b8:	e2d9      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ba:	4b57      	ldr	r3, [pc, #348]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4be:	e2d6      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e2d3      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	f040 80a7 	bne.w	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c4d4:	4b4c      	ldr	r3, [pc, #304]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c4dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4e4:	d055      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4ec:	f200 8096 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c4f6:	f000 8084 	beq.w	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c500:	f200 808c 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c50a:	d030      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c512:	f200 8083 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c522:	d012      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c524:	e07a      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c526:	4b38      	ldr	r3, [pc, #224]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c52e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c532:	d107      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fd63 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c542:	e294      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	e291      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c54a:	4b2f      	ldr	r3, [pc, #188]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c556:	d107      	bne.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c558:	f107 0318 	add.w	r3, r7, #24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 faa9 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c566:	e282      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e27f      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c56e:	4b26      	ldr	r3, [pc, #152]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c57a:	d107      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c57c:	f107 030c 	add.w	r3, r7, #12
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fbeb 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58a:	e270      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c590:	e26d      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c592:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c59c:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d10c      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d109      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ae:	4b16      	ldr	r3, [pc, #88]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	08db      	lsrs	r3, r3, #3
 800c5b4:	f003 0303 	and.w	r3, r3, #3
 800c5b8:	4a14      	ldr	r2, [pc, #80]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c0:	e01e      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ce:	d106      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5d6:	d102      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5dc:	e010      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5de:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ea:	d106      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f2:	d102      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f8:	e002      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5fe:	e236      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c600:	e235      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c606:	e232      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c608:	58024400 	.word	0x58024400
 800c60c:	03d09000 	.word	0x03d09000
 800c610:	003d0900 	.word	0x003d0900
 800c614:	02faf080 	.word	0x02faf080
 800c618:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c620:	e225      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c626:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c62a:	430b      	orrs	r3, r1
 800c62c:	f040 8085 	bne.w	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c630:	4b9c      	ldr	r3, [pc, #624]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c634:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c638:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c640:	d06b      	beq.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c648:	d874      	bhi.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c650:	d056      	beq.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c658:	d86c      	bhi.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c660:	d03b      	beq.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c668:	d864      	bhi.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c670:	d021      	beq.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c678:	d85c      	bhi.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d004      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c686:	d004      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c688:	e054      	b.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c68a:	f7fe fb5f 	bl	800ad4c <HAL_RCC_GetPCLK1Freq>
 800c68e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c690:	e1ed      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c692:	4b84      	ldr	r3, [pc, #528]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c69a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c69e:	d107      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a0:	f107 0318 	add.w	r3, r7, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fa05 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ae:	e1de      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	e1db      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6b6:	4b7b      	ldr	r3, [pc, #492]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c2:	d107      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6c4:	f107 030c 	add.w	r3, r7, #12
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 fb47 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d2:	e1cc      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d8:	e1c9      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6da:	4b72      	ldr	r3, [pc, #456]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0304 	and.w	r3, r3, #4
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	d109      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e6:	4b6f      	ldr	r3, [pc, #444]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	08db      	lsrs	r3, r3, #3
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	4a6d      	ldr	r2, [pc, #436]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f8:	e1b9      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fe:	e1b6      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c700:	4b68      	ldr	r3, [pc, #416]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c70c:	d102      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c70e:	4b67      	ldr	r3, [pc, #412]	; (800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c712:	e1ac      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e1a9      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c71a:	4b62      	ldr	r3, [pc, #392]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c726:	d102      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c728:	4b61      	ldr	r3, [pc, #388]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c72c:	e19f      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c732:	e19c      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c738:	e199      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c742:	430b      	orrs	r3, r1
 800c744:	d173      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c746:	4b57      	ldr	r3, [pc, #348]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c74e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c756:	d02f      	beq.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c75e:	d863      	bhi.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	2b00      	cmp	r3, #0
 800c764:	d004      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c76c:	d012      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c76e:	e05b      	b.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c770:	4b4c      	ldr	r3, [pc, #304]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77e:	f107 0318 	add.w	r3, r7, #24
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f996 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78c:	e16f      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c792:	e16c      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c794:	4b43      	ldr	r3, [pc, #268]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c79c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fad8 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b0:	e15d      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b6:	e15a      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7b8:	4b3a      	ldr	r3, [pc, #232]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7c2:	4b38      	ldr	r3, [pc, #224]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d10c      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d109      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d4:	4b33      	ldr	r3, [pc, #204]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	08db      	lsrs	r3, r3, #3
 800c7da:	f003 0303 	and.w	r3, r3, #3
 800c7de:	4a32      	ldr	r2, [pc, #200]	; (800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e6:	e01e      	b.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7e8:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f4:	d106      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7fc:	d102      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7fe:	4b2b      	ldr	r3, [pc, #172]	; (800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c802:	e010      	b.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c804:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c80c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c810:	d106      	bne.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c818:	d102      	bne.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c81a:	4b25      	ldr	r3, [pc, #148]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81e:	e002      	b.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c824:	e123      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c826:	e122      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82c:	e11f      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c832:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c836:	430b      	orrs	r3, r1
 800c838:	d13c      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c83a:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	2b00      	cmp	r3, #0
 800c848:	d004      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c850:	d012      	beq.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c852:	e023      	b.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c854:	4b13      	ldr	r3, [pc, #76]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c85c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c860:	d107      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fbcc 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c870:	e0fd      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c876:	e0fa      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c884:	d107      	bne.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c886:	f107 0318 	add.w	r3, r7, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f912 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c890:	6a3b      	ldr	r3, [r7, #32]
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c894:	e0eb      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89a:	e0e8      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a0:	e0e5      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c8a2:	bf00      	nop
 800c8a4:	58024400 	.word	0x58024400
 800c8a8:	03d09000 	.word	0x03d09000
 800c8ac:	003d0900 	.word	0x003d0900
 800c8b0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	f040 8085 	bne.w	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c8c2:	4b6d      	ldr	r3, [pc, #436]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c8ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8d2:	d06b      	beq.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8da:	d874      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8e2:	d056      	beq.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ea:	d86c      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8f2:	d03b      	beq.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8fa:	d864      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c902:	d021      	beq.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c90a:	d85c      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d004      	beq.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c918:	d004      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c91a:	e054      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c91c:	f000 f8b4 	bl	800ca88 <HAL_RCCEx_GetD3PCLK1Freq>
 800c920:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c922:	e0a4      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c924:	4b54      	ldr	r3, [pc, #336]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c92c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c930:	d107      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c932:	f107 0318 	add.w	r3, r7, #24
 800c936:	4618      	mov	r0, r3
 800c938:	f000 f8bc 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c940:	e095      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c946:	e092      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c948:	4b4b      	ldr	r3, [pc, #300]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c954:	d107      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f9fe 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c964:	e083      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96a:	e080      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c96c:	4b42      	ldr	r3, [pc, #264]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b04      	cmp	r3, #4
 800c976:	d109      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c978:	4b3f      	ldr	r3, [pc, #252]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	08db      	lsrs	r3, r3, #3
 800c97e:	f003 0303 	and.w	r3, r3, #3
 800c982:	4a3e      	ldr	r2, [pc, #248]	; (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c984:	fa22 f303 	lsr.w	r3, r2, r3
 800c988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c98a:	e070      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c990:	e06d      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c992:	4b39      	ldr	r3, [pc, #228]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c99e:	d102      	bne.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c9a0:	4b37      	ldr	r3, [pc, #220]	; (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a4:	e063      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9aa:	e060      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9ac:	4b32      	ldr	r3, [pc, #200]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c9ba:	4b32      	ldr	r3, [pc, #200]	; (800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9be:	e056      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c4:	e053      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ca:	e050      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	d148      	bne.n	800ca6a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c9d8:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9e8:	d02a      	beq.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f0:	d838      	bhi.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d004      	beq.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9fe:	d00d      	beq.n	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ca00:	e030      	b.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca02:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca0e:	d102      	bne.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ca10:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca14:	e02b      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca1a:	e028      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca1c:	4b16      	ldr	r3, [pc, #88]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca28:	d107      	bne.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fae8 	bl	800d004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca38:	e019      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3e:	e016      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca40:	4b0d      	ldr	r3, [pc, #52]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca4c:	d107      	bne.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca4e:	f107 0318 	add.w	r3, r7, #24
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 f82e 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5c:	e007      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca62:	e004      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca68:	e001      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3740      	adds	r7, #64	; 0x40
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	58024400 	.word	0x58024400
 800ca7c:	03d09000 	.word	0x03d09000
 800ca80:	003d0900 	.word	0x003d0900
 800ca84:	02faf080 	.word	0x02faf080

0800ca88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ca8c:	f7fe f92e 	bl	800acec <HAL_RCC_GetHCLKFreq>
 800ca90:	4602      	mov	r2, r0
 800ca92:	4b06      	ldr	r3, [pc, #24]	; (800caac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	091b      	lsrs	r3, r3, #4
 800ca98:	f003 0307 	and.w	r3, r3, #7
 800ca9c:	4904      	ldr	r1, [pc, #16]	; (800cab0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca9e:	5ccb      	ldrb	r3, [r1, r3]
 800caa0:	f003 031f 	and.w	r3, r3, #31
 800caa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	58024400 	.word	0x58024400
 800cab0:	0801c91c 	.word	0x0801c91c

0800cab4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b089      	sub	sp, #36	; 0x24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cabc:	4ba1      	ldr	r3, [pc, #644]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac0:	f003 0303 	and.w	r3, r3, #3
 800cac4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cac6:	4b9f      	ldr	r3, [pc, #636]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caca:	0b1b      	lsrs	r3, r3, #12
 800cacc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cad0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cad2:	4b9c      	ldr	r3, [pc, #624]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad6:	091b      	lsrs	r3, r3, #4
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cade:	4b99      	ldr	r3, [pc, #612]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae2:	08db      	lsrs	r3, r3, #3
 800cae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	fb02 f303 	mul.w	r3, r2, r3
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 8111 	beq.w	800cd24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	f000 8083 	beq.w	800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	f200 80a1 	bhi.w	800cc54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d056      	beq.n	800cbcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cb1e:	e099      	b.n	800cc54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb20:	4b88      	ldr	r3, [pc, #544]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0320 	and.w	r3, r3, #32
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d02d      	beq.n	800cb88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb2c:	4b85      	ldr	r3, [pc, #532]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	08db      	lsrs	r3, r3, #3
 800cb32:	f003 0303 	and.w	r3, r3, #3
 800cb36:	4a84      	ldr	r2, [pc, #528]	; (800cd48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cb38:	fa22 f303 	lsr.w	r3, r2, r3
 800cb3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	ee07 3a90 	vmov	s15, r3
 800cb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb56:	4b7b      	ldr	r3, [pc, #492]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb86:	e087      	b.n	800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb9a:	4b6a      	ldr	r3, [pc, #424]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbca:	e065      	b.n	800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	ee07 3a90 	vmov	s15, r3
 800cbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbde:	4b59      	ldr	r3, [pc, #356]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc0e:	e043      	b.n	800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cc1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc22:	4b48      	ldr	r3, [pc, #288]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc2a:	ee07 3a90 	vmov	s15, r3
 800cc2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc36:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc52:	e021      	b.n	800cc98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc66:	4b37      	ldr	r3, [pc, #220]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6e:	ee07 3a90 	vmov	s15, r3
 800cc72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc98:	4b2a      	ldr	r3, [pc, #168]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9c:	0a5b      	lsrs	r3, r3, #9
 800cc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccbe:	ee17 2a90 	vmov	r2, s15
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ccc6:	4b1f      	ldr	r3, [pc, #124]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd0:	ee07 3a90 	vmov	s15, r3
 800ccd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccec:	ee17 2a90 	vmov	r2, s15
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ccf4:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf8:	0e1b      	lsrs	r3, r3, #24
 800ccfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd1a:	ee17 2a90 	vmov	r2, s15
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cd22:	e008      	b.n	800cd36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	609a      	str	r2, [r3, #8]
}
 800cd36:	bf00      	nop
 800cd38:	3724      	adds	r7, #36	; 0x24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	58024400 	.word	0x58024400
 800cd48:	03d09000 	.word	0x03d09000
 800cd4c:	46000000 	.word	0x46000000
 800cd50:	4c742400 	.word	0x4c742400
 800cd54:	4a742400 	.word	0x4a742400
 800cd58:	4c3ebc20 	.word	0x4c3ebc20

0800cd5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b089      	sub	sp, #36	; 0x24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd64:	4ba1      	ldr	r3, [pc, #644]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd68:	f003 0303 	and.w	r3, r3, #3
 800cd6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd6e:	4b9f      	ldr	r3, [pc, #636]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	0d1b      	lsrs	r3, r3, #20
 800cd74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd7a:	4b9c      	ldr	r3, [pc, #624]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	0a1b      	lsrs	r3, r3, #8
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd86:	4b99      	ldr	r3, [pc, #612]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8a:	08db      	lsrs	r3, r3, #3
 800cd8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	fb02 f303 	mul.w	r3, r2, r3
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 8111 	beq.w	800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	f000 8083 	beq.w	800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	f200 80a1 	bhi.w	800cefc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d056      	beq.n	800ce74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cdc6:	e099      	b.n	800cefc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdc8:	4b88      	ldr	r3, [pc, #544]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 0320 	and.w	r3, r3, #32
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d02d      	beq.n	800ce30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdd4:	4b85      	ldr	r3, [pc, #532]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	08db      	lsrs	r3, r3, #3
 800cdda:	f003 0303 	and.w	r3, r3, #3
 800cdde:	4a84      	ldr	r2, [pc, #528]	; (800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cde0:	fa22 f303 	lsr.w	r3, r2, r3
 800cde4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	ee07 3a90 	vmov	s15, r3
 800cdec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	ee07 3a90 	vmov	s15, r3
 800cdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfe:	4b7b      	ldr	r3, [pc, #492]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce2e:	e087      	b.n	800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cff8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ce3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce42:	4b6a      	ldr	r3, [pc, #424]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce72:	e065      	b.n	800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce86:	4b59      	ldr	r3, [pc, #356]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceb6:	e043      	b.n	800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceca:	4b48      	ldr	r3, [pc, #288]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cede:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cefa:	e021      	b.n	800cf40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf0e:	4b37      	ldr	r3, [pc, #220]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf16:	ee07 3a90 	vmov	s15, r3
 800cf1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cf40:	4b2a      	ldr	r3, [pc, #168]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	0a5b      	lsrs	r3, r3, #9
 800cf46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf66:	ee17 2a90 	vmov	r2, s15
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf6e:	4b1f      	ldr	r3, [pc, #124]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	0c1b      	lsrs	r3, r3, #16
 800cf74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf78:	ee07 3a90 	vmov	s15, r3
 800cf7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf88:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf94:	ee17 2a90 	vmov	r2, s15
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf9c:	4b13      	ldr	r3, [pc, #76]	; (800cfec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	0e1b      	lsrs	r3, r3, #24
 800cfa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc2:	ee17 2a90 	vmov	r2, s15
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cfca:	e008      	b.n	800cfde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	609a      	str	r2, [r3, #8]
}
 800cfde:	bf00      	nop
 800cfe0:	3724      	adds	r7, #36	; 0x24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	58024400 	.word	0x58024400
 800cff0:	03d09000 	.word	0x03d09000
 800cff4:	46000000 	.word	0x46000000
 800cff8:	4c742400 	.word	0x4c742400
 800cffc:	4a742400 	.word	0x4a742400
 800d000:	4c3ebc20 	.word	0x4c3ebc20

0800d004 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d004:	b480      	push	{r7}
 800d006:	b089      	sub	sp, #36	; 0x24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d00c:	4ba0      	ldr	r3, [pc, #640]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	f003 0303 	and.w	r3, r3, #3
 800d014:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d016:	4b9e      	ldr	r3, [pc, #632]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d01a:	091b      	lsrs	r3, r3, #4
 800d01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d020:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d022:	4b9b      	ldr	r3, [pc, #620]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d02c:	4b98      	ldr	r3, [pc, #608]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	08db      	lsrs	r3, r3, #3
 800d032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	fb02 f303 	mul.w	r3, r2, r3
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d044:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 8111 	beq.w	800d272 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	2b02      	cmp	r3, #2
 800d054:	f000 8083 	beq.w	800d15e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	f200 80a1 	bhi.w	800d1a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d056      	beq.n	800d11a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d06c:	e099      	b.n	800d1a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d06e:	4b88      	ldr	r3, [pc, #544]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f003 0320 	and.w	r3, r3, #32
 800d076:	2b00      	cmp	r3, #0
 800d078:	d02d      	beq.n	800d0d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d07a:	4b85      	ldr	r3, [pc, #532]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	08db      	lsrs	r3, r3, #3
 800d080:	f003 0303 	and.w	r3, r3, #3
 800d084:	4a83      	ldr	r2, [pc, #524]	; (800d294 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d086:	fa22 f303 	lsr.w	r3, r2, r3
 800d08a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	ee07 3a90 	vmov	s15, r3
 800d09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a4:	4b7a      	ldr	r3, [pc, #488]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ac:	ee07 3a90 	vmov	s15, r3
 800d0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0d4:	e087      	b.n	800d1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	ee07 3a90 	vmov	s15, r3
 800d0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d29c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0e8:	4b69      	ldr	r3, [pc, #420]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f0:	ee07 3a90 	vmov	s15, r3
 800d0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d10c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d110:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d114:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d118:	e065      	b.n	800d1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d124:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d12c:	4b58      	ldr	r3, [pc, #352]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d134:	ee07 3a90 	vmov	s15, r3
 800d138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d13c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d140:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d14c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d154:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d15c:	e043      	b.n	800d1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	ee07 3a90 	vmov	s15, r3
 800d164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d168:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d16c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d170:	4b47      	ldr	r3, [pc, #284]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d178:	ee07 3a90 	vmov	s15, r3
 800d17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d180:	ed97 6a03 	vldr	s12, [r7, #12]
 800d184:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d18c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1a0:	e021      	b.n	800d1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	ee07 3a90 	vmov	s15, r3
 800d1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d29c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d1b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1b4:	4b36      	ldr	r3, [pc, #216]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1bc:	ee07 3a90 	vmov	s15, r3
 800d1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d298 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d1e6:	4b2a      	ldr	r3, [pc, #168]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ea:	0a5b      	lsrs	r3, r3, #9
 800d1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d200:	edd7 6a07 	vldr	s13, [r7, #28]
 800d204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20c:	ee17 2a90 	vmov	r2, s15
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d214:	4b1e      	ldr	r3, [pc, #120]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d218:	0c1b      	lsrs	r3, r3, #16
 800d21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d22a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d23a:	ee17 2a90 	vmov	r2, s15
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d242:	4b13      	ldr	r3, [pc, #76]	; (800d290 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d246:	0e1b      	lsrs	r3, r3, #24
 800d248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d24c:	ee07 3a90 	vmov	s15, r3
 800d250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d268:	ee17 2a90 	vmov	r2, s15
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d270:	e008      	b.n	800d284 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	609a      	str	r2, [r3, #8]
}
 800d284:	bf00      	nop
 800d286:	3724      	adds	r7, #36	; 0x24
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	58024400 	.word	0x58024400
 800d294:	03d09000 	.word	0x03d09000
 800d298:	46000000 	.word	0x46000000
 800d29c:	4c742400 	.word	0x4c742400
 800d2a0:	4a742400 	.word	0x4a742400
 800d2a4:	4c3ebc20 	.word	0x4c3ebc20

0800d2a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2b6:	4b53      	ldr	r3, [pc, #332]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ba:	f003 0303 	and.w	r3, r3, #3
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d101      	bne.n	800d2c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e099      	b.n	800d3fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d2c6:	4b4f      	ldr	r3, [pc, #316]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a4e      	ldr	r2, [pc, #312]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d2cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2d2:	f7f7 fa91 	bl	80047f8 <HAL_GetTick>
 800d2d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2d8:	e008      	b.n	800d2ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2da:	f7f7 fa8d 	bl	80047f8 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d901      	bls.n	800d2ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e086      	b.n	800d3fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2ec:	4b45      	ldr	r3, [pc, #276]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1f0      	bne.n	800d2da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d2f8:	4b42      	ldr	r3, [pc, #264]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	031b      	lsls	r3, r3, #12
 800d306:	493f      	ldr	r1, [pc, #252]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d308:	4313      	orrs	r3, r2
 800d30a:	628b      	str	r3, [r1, #40]	; 0x28
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	3b01      	subs	r3, #1
 800d312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	025b      	lsls	r3, r3, #9
 800d31e:	b29b      	uxth	r3, r3
 800d320:	431a      	orrs	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	3b01      	subs	r3, #1
 800d328:	041b      	lsls	r3, r3, #16
 800d32a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d32e:	431a      	orrs	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	3b01      	subs	r3, #1
 800d336:	061b      	lsls	r3, r3, #24
 800d338:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d33c:	4931      	ldr	r1, [pc, #196]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d342:	4b30      	ldr	r3, [pc, #192]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	492d      	ldr	r1, [pc, #180]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d350:	4313      	orrs	r3, r2
 800d352:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	f023 0220 	bic.w	r2, r3, #32
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	4928      	ldr	r1, [pc, #160]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d362:	4313      	orrs	r3, r2
 800d364:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d366:	4b27      	ldr	r3, [pc, #156]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36a:	4a26      	ldr	r2, [pc, #152]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d36c:	f023 0310 	bic.w	r3, r3, #16
 800d370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d372:	4b24      	ldr	r3, [pc, #144]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d376:	4b24      	ldr	r3, [pc, #144]	; (800d408 <RCCEx_PLL2_Config+0x160>)
 800d378:	4013      	ands	r3, r2
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	69d2      	ldr	r2, [r2, #28]
 800d37e:	00d2      	lsls	r2, r2, #3
 800d380:	4920      	ldr	r1, [pc, #128]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d382:	4313      	orrs	r3, r2
 800d384:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d386:	4b1f      	ldr	r3, [pc, #124]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38a:	4a1e      	ldr	r2, [pc, #120]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d38c:	f043 0310 	orr.w	r3, r3, #16
 800d390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d398:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	4a19      	ldr	r2, [pc, #100]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d39e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3a4:	e00f      	b.n	800d3c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d106      	bne.n	800d3ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d3ac:	4b15      	ldr	r3, [pc, #84]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b0:	4a14      	ldr	r2, [pc, #80]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3b8:	e005      	b.n	800d3c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d3ba:	4b12      	ldr	r3, [pc, #72]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	4a11      	ldr	r2, [pc, #68]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a0e      	ldr	r2, [pc, #56]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3d2:	f7f7 fa11 	bl	80047f8 <HAL_GetTick>
 800d3d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3d8:	e008      	b.n	800d3ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d3da:	f7f7 fa0d 	bl	80047f8 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d901      	bls.n	800d3ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e006      	b.n	800d3fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3ec:	4b05      	ldr	r3, [pc, #20]	; (800d404 <RCCEx_PLL2_Config+0x15c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0f0      	beq.n	800d3da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	58024400 	.word	0x58024400
 800d408:	ffff0007 	.word	0xffff0007

0800d40c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d41a:	4b53      	ldr	r3, [pc, #332]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41e:	f003 0303 	and.w	r3, r3, #3
 800d422:	2b03      	cmp	r3, #3
 800d424:	d101      	bne.n	800d42a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e099      	b.n	800d55e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d42a:	4b4f      	ldr	r3, [pc, #316]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a4e      	ldr	r2, [pc, #312]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d436:	f7f7 f9df 	bl	80047f8 <HAL_GetTick>
 800d43a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d43c:	e008      	b.n	800d450 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d43e:	f7f7 f9db 	bl	80047f8 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d901      	bls.n	800d450 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e086      	b.n	800d55e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d450:	4b45      	ldr	r3, [pc, #276]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1f0      	bne.n	800d43e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d45c:	4b42      	ldr	r3, [pc, #264]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d460:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	051b      	lsls	r3, r3, #20
 800d46a:	493f      	ldr	r1, [pc, #252]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d46c:	4313      	orrs	r3, r2
 800d46e:	628b      	str	r3, [r1, #40]	; 0x28
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	3b01      	subs	r3, #1
 800d476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	3b01      	subs	r3, #1
 800d480:	025b      	lsls	r3, r3, #9
 800d482:	b29b      	uxth	r3, r3
 800d484:	431a      	orrs	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	041b      	lsls	r3, r3, #16
 800d48e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d492:	431a      	orrs	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	3b01      	subs	r3, #1
 800d49a:	061b      	lsls	r3, r3, #24
 800d49c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4a0:	4931      	ldr	r1, [pc, #196]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d4a6:	4b30      	ldr	r3, [pc, #192]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	492d      	ldr	r1, [pc, #180]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d4b8:	4b2b      	ldr	r3, [pc, #172]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	4928      	ldr	r1, [pc, #160]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d4ca:	4b27      	ldr	r3, [pc, #156]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ce:	4a26      	ldr	r2, [pc, #152]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d4d6:	4b24      	ldr	r3, [pc, #144]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4da:	4b24      	ldr	r3, [pc, #144]	; (800d56c <RCCEx_PLL3_Config+0x160>)
 800d4dc:	4013      	ands	r3, r2
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	69d2      	ldr	r2, [r2, #28]
 800d4e2:	00d2      	lsls	r2, r2, #3
 800d4e4:	4920      	ldr	r1, [pc, #128]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d4ea:	4b1f      	ldr	r3, [pc, #124]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ee:	4a1e      	ldr	r2, [pc, #120]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d106      	bne.n	800d50a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d4fc:	4b1a      	ldr	r3, [pc, #104]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	4a19      	ldr	r2, [pc, #100]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d506:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d508:	e00f      	b.n	800d52a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d106      	bne.n	800d51e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d510:	4b15      	ldr	r3, [pc, #84]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d514:	4a14      	ldr	r2, [pc, #80]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d51a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d51c:	e005      	b.n	800d52a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d522:	4a11      	ldr	r2, [pc, #68]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d528:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d52a:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a0e      	ldr	r2, [pc, #56]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d536:	f7f7 f95f 	bl	80047f8 <HAL_GetTick>
 800d53a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d53c:	e008      	b.n	800d550 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d53e:	f7f7 f95b 	bl	80047f8 <HAL_GetTick>
 800d542:	4602      	mov	r2, r0
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d901      	bls.n	800d550 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e006      	b.n	800d55e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <RCCEx_PLL3_Config+0x15c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0f0      	beq.n	800d53e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	58024400 	.word	0x58024400
 800d56c:	ffff0007 	.word	0xffff0007

0800d570 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08a      	sub	sp, #40	; 0x28
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e075      	b.n	800d66e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d105      	bne.n	800d59a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7f6 f9c7 	bl	8003928 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2204      	movs	r2, #4
 800d59e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f868 	bl	800d678 <HAL_SD_InitCard>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e05d      	b.n	800d66e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d5b2:	f107 0308 	add.w	r3, r7, #8
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fdaf 	bl	800e11c <HAL_SD_GetCardStatus>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e052      	b.n	800d66e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d5c8:	7e3b      	ldrb	r3, [r7, #24]
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d5ce:	7e7b      	ldrb	r3, [r7, #25]
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d10a      	bne.n	800d5f2 <HAL_SD_Init+0x82>
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d102      	bne.n	800d5e8 <HAL_SD_Init+0x78>
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d004      	beq.n	800d5f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5ee:	659a      	str	r2, [r3, #88]	; 0x58
 800d5f0:	e00b      	b.n	800d60a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d104      	bne.n	800d604 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d600:	659a      	str	r2, [r3, #88]	; 0x58
 800d602:	e002      	b.n	800d60a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 fe6d 	bl	800e2f0 <HAL_SD_ConfigWideBusOperation>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	e026      	b.n	800d66e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d620:	f7f7 f8ea 	bl	80047f8 <HAL_GetTick>
 800d624:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d626:	e011      	b.n	800d64c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d628:	f7f7 f8e6 	bl	80047f8 <HAL_GetTick>
 800d62c:	4602      	mov	r2, r0
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d636:	d109      	bne.n	800d64c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d63e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d648:	2303      	movs	r3, #3
 800d64a:	e010      	b.n	800d66e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 ff61 	bl	800e514 <HAL_SD_GetCardState>
 800d652:	4603      	mov	r3, r0
 800d654:	2b04      	cmp	r3, #4
 800d656:	d1e7      	bne.n	800d628 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3728      	adds	r7, #40	; 0x28
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b08d      	sub	sp, #52	; 0x34
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d688:	2300      	movs	r3, #0
 800d68a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d690:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d694:	f04f 0100 	mov.w	r1, #0
 800d698:	f7fe fd24 	bl	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d69c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d109      	bne.n	800d6b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d6b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e070      	b.n	800d79a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	0a1b      	lsrs	r3, r3, #8
 800d6bc:	4a39      	ldr	r2, [pc, #228]	; (800d7a4 <HAL_SD_InitCard+0x12c>)
 800d6be:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c2:	091b      	lsrs	r3, r3, #4
 800d6c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681c      	ldr	r4, [r3, #0]
 800d6ca:	466a      	mov	r2, sp
 800d6cc:	f107 0318 	add.w	r3, r7, #24
 800d6d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6d4:	e882 0003 	stmia.w	r2, {r0, r1}
 800d6d8:	f107 030c 	add.w	r3, r7, #12
 800d6dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f004 fc28 	bl	8011f34 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f004 fc6b 	bl	8011fc4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	2b00      	cmp	r3, #0
 800d704:	d007      	beq.n	800d716 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d706:	4a28      	ldr	r2, [pc, #160]	; (800d7a8 <HAL_SD_InitCard+0x130>)
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d70e:	3301      	adds	r3, #1
 800d710:	4618      	mov	r0, r3
 800d712:	f7f7 f87d 	bl	8004810 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 ffea 	bl	800e6f0 <SD_PowerON>
 800d71c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	e02e      	b.n	800d79a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 ff09 	bl	800e554 <SD_InitCard>
 800d742:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	431a      	orrs	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e01b      	b.n	800d79a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d76a:	4618      	mov	r0, r3
 800d76c:	f004 fcc0 	bl	80120f0 <SDMMC_CmdBlockLength>
 800d770:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00f      	beq.n	800d798 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a0b      	ldr	r2, [pc, #44]	; (800d7ac <HAL_SD_InitCard+0x134>)
 800d77e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	431a      	orrs	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	e000      	b.n	800d79a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	372c      	adds	r7, #44	; 0x2c
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd90      	pop	{r4, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	014f8b59 	.word	0x014f8b59
 800d7a8:	00012110 	.word	0x00012110
 800d7ac:	1fe00fff 	.word	0x1fe00fff

0800d7b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08c      	sub	sp, #48	; 0x30
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d107      	bne.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e08d      	b.n	800d8f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	f040 8086 	bne.w	800d8f2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d907      	bls.n	800d80a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e074      	b.n	800d8f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2203      	movs	r2, #3
 800d80e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2200      	movs	r2, #0
 800d818:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	025a      	lsls	r2, r3, #9
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d002      	beq.n	800d836 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	025b      	lsls	r3, r3, #9
 800d834:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d836:	f04f 33ff 	mov.w	r3, #4294967295
 800d83a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	025b      	lsls	r3, r3, #9
 800d840:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d842:	2390      	movs	r3, #144	; 0x90
 800d844:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d846:	2302      	movs	r3, #2
 800d848:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d84e:	2300      	movs	r3, #0
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f107 0210 	add.w	r2, r7, #16
 800d85a:	4611      	mov	r1, r2
 800d85c:	4618      	mov	r0, r3
 800d85e:	f004 fc1b 	bl	8012098 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d870:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2201      	movs	r2, #1
 800d880:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	2b01      	cmp	r3, #1
 800d886:	d90a      	bls.n	800d89e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2282      	movs	r2, #130	; 0x82
 800d88c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d894:	4618      	mov	r0, r3
 800d896:	f004 fc71 	bl	801217c <SDMMC_CmdReadMultiBlock>
 800d89a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d89c:	e009      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2281      	movs	r2, #129	; 0x81
 800d8a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f004 fc43 	bl	8012136 <SDMMC_CmdReadSingleBlock>
 800d8b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d012      	beq.n	800d8de <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a0f      	ldr	r2, [pc, #60]	; (800d8fc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d8be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	431a      	orrs	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e00a      	b.n	800d8f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d8ec:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e000      	b.n	800d8f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d8f2:	2302      	movs	r3, #2
  }
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3730      	adds	r7, #48	; 0x30
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	1fe00fff 	.word	0x1fe00fff

0800d900 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b08c      	sub	sp, #48	; 0x30
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
 800d90c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d107      	bne.n	800d928 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	e08d      	b.n	800da44 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b01      	cmp	r3, #1
 800d932:	f040 8086 	bne.w	800da42 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	441a      	add	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d946:	429a      	cmp	r2, r3
 800d948:	d907      	bls.n	800d95a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e074      	b.n	800da44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2203      	movs	r2, #3
 800d95e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2200      	movs	r2, #0
 800d968:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	025a      	lsls	r2, r3, #9
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d002      	beq.n	800d986 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	025b      	lsls	r3, r3, #9
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d986:	f04f 33ff 	mov.w	r3, #4294967295
 800d98a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	025b      	lsls	r3, r3, #9
 800d990:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d992:	2390      	movs	r3, #144	; 0x90
 800d994:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d996:	2300      	movs	r3, #0
 800d998:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f107 0210 	add.w	r2, r7, #16
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f004 fb73 	bl	8012098 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68da      	ldr	r2, [r3, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9c0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d90a      	bls.n	800d9ee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	22a0      	movs	r2, #160	; 0xa0
 800d9dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f004 fc0f 	bl	8012208 <SDMMC_CmdWriteMultiBlock>
 800d9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9ec:	e009      	b.n	800da02 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2290      	movs	r2, #144	; 0x90
 800d9f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f004 fbe1 	bl	80121c2 <SDMMC_CmdWriteSingleBlock>
 800da00:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d012      	beq.n	800da2e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a0f      	ldr	r2, [pc, #60]	; (800da4c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800da0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	431a      	orrs	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e00a      	b.n	800da44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800da3c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	e000      	b.n	800da44 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da42:	2302      	movs	r3, #2
  }
}
 800da44:	4618      	mov	r0, r3
 800da46:	3730      	adds	r7, #48	; 0x30
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	1fe00fff 	.word	0x1fe00fff

0800da50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d008      	beq.n	800da7e <HAL_SD_IRQHandler+0x2e>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f003 0308 	and.w	r3, r3, #8
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f001 f926 	bl	800ecc8 <SD_Read_IT>
 800da7c:	e19a      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 80ac 	beq.w	800dbe6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da96:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	4b59      	ldr	r3, [pc, #356]	; (800dc08 <HAL_SD_IRQHandler+0x1b8>)
 800daa4:	400b      	ands	r3, r1
 800daa6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dab6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dac6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f003 0308 	and.w	r3, r3, #8
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d038      	beq.n	800db44 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f003 0302 	and.w	r3, r3, #2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d104      	bne.n	800dae6 <HAL_SD_IRQHandler+0x96>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f003 0320 	and.w	r3, r3, #32
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d011      	beq.n	800db0a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4618      	mov	r0, r3
 800daec:	f004 fbb0 	bl	8012250 <SDMMC_CmdStopTransfer>
 800daf0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d008      	beq.n	800db0a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	431a      	orrs	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f95b 	bl	800ddc0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a3f      	ldr	r2, [pc, #252]	; (800dc0c <HAL_SD_IRQHandler+0x1bc>)
 800db10:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	2b00      	cmp	r3, #0
 800db28:	d104      	bne.n	800db34 <HAL_SD_IRQHandler+0xe4>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f003 0302 	and.w	r3, r3, #2
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f006 fbb1 	bl	801429c <HAL_SD_RxCpltCallback>
 800db3a:	e13b      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f006 fba3 	bl	8014288 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db42:	e137      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 8132 	beq.w	800ddb4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2200      	movs	r2, #0
 800db56:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2200      	movs	r2, #0
 800db5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2200      	movs	r2, #0
 800db66:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f003 0302 	and.w	r3, r3, #2
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d104      	bne.n	800db7c <HAL_SD_IRQHandler+0x12c>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f003 0320 	and.w	r3, r3, #32
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d011      	beq.n	800dba0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4618      	mov	r0, r3
 800db82:	f004 fb65 	bl	8012250 <SDMMC_CmdStopTransfer>
 800db86:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d008      	beq.n	800dba0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f910 	bl	800ddc0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f003 0310 	and.w	r3, r3, #16
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d104      	bne.n	800dbc2 <HAL_SD_IRQHandler+0x172>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f003 0320 	and.w	r3, r3, #32
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f006 fb60 	bl	8014288 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d105      	bne.n	800dbde <HAL_SD_IRQHandler+0x18e>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 80eb 	beq.w	800ddb4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f006 fb5c 	bl	801429c <HAL_SD_RxCpltCallback>
}
 800dbe4:	e0e6      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00d      	beq.n	800dc10 <HAL_SD_IRQHandler+0x1c0>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0308 	and.w	r3, r3, #8
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d008      	beq.n	800dc10 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f001 f8a8 	bl	800ed54 <SD_Write_IT>
 800dc04:	e0d6      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
 800dc06:	bf00      	nop
 800dc08:	ffff3ec5 	.word	0xffff3ec5
 800dc0c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 809d 	beq.w	800dd5a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc26:	f003 0302 	and.w	r3, r3, #2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d005      	beq.n	800dc3a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc32:	f043 0202 	orr.w	r2, r3, #2
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc40:	f003 0308 	and.w	r3, r3, #8
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d005      	beq.n	800dc54 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc4c:	f043 0208 	orr.w	r2, r3, #8
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5a:	f003 0320 	and.w	r3, r3, #32
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d005      	beq.n	800dc6e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc66:	f043 0220 	orr.w	r2, r3, #32
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	f043 0210 	orr.w	r2, r3, #16
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a4b      	ldr	r2, [pc, #300]	; (800ddbc <HAL_SD_IRQHandler+0x36c>)
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc9e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dcbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dcce:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f004 fabb 	bl	8012250 <SDMMC_CmdStopTransfer>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce0:	431a      	orrs	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcf4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcfe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f003 0308 	and.w	r3, r3, #8
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f851 	bl	800ddc0 <HAL_SD_ErrorCallback>
}
 800dd1e:	e049      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d044      	beq.n	800ddb4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d040      	beq.n	800ddb4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dd40:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2200      	movs	r2, #0
 800dd48:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f834 	bl	800ddc0 <HAL_SD_ErrorCallback>
}
 800dd58:	e02c      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d025      	beq.n	800ddb4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd78:	f003 0304 	and.w	r3, r3, #4
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10c      	bne.n	800dd9a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f003 0320 	and.w	r3, r3, #32
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f001 f84a 	bl	800ee24 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dd90:	e010      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 f832 	bl	800edfc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dd98:	e00c      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f003 0320 	and.w	r3, r3, #32
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d003      	beq.n	800ddac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f001 f833 	bl	800ee10 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ddaa:	e003      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f001 f81b 	bl	800ede8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ddb2:	e7ff      	b.n	800ddb4 <HAL_SD_IRQHandler+0x364>
 800ddb4:	bf00      	nop
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	18000f3a 	.word	0x18000f3a

0800ddc0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dde2:	0f9b      	lsrs	r3, r3, #30
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddee:	0e9b      	lsrs	r3, r3, #26
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f003 030f 	and.w	r3, r3, #15
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de00:	0e1b      	lsrs	r3, r3, #24
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 0303 	and.w	r3, r3, #3
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de12:	0c1b      	lsrs	r3, r3, #16
 800de14:	b2da      	uxtb	r2, r3
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	b2da      	uxtb	r2, r3
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de34:	0d1b      	lsrs	r3, r3, #20
 800de36:	b29a      	uxth	r2, r3
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de40:	0c1b      	lsrs	r3, r3, #16
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 030f 	and.w	r3, r3, #15
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de52:	0bdb      	lsrs	r3, r3, #15
 800de54:	b2db      	uxtb	r3, r3
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de64:	0b9b      	lsrs	r3, r3, #14
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0301 	and.w	r3, r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de76:	0b5b      	lsrs	r3, r3, #13
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 0301 	and.w	r3, r3, #1
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de88:	0b1b      	lsrs	r3, r3, #12
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	b2da      	uxtb	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2200      	movs	r2, #0
 800de9a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d163      	bne.n	800df6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dea8:	009a      	lsls	r2, r3, #2
 800deaa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800deae:	4013      	ands	r3, r2
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800deb4:	0f92      	lsrs	r2, r2, #30
 800deb6:	431a      	orrs	r2, r3
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec0:	0edb      	lsrs	r3, r3, #27
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded2:	0e1b      	lsrs	r3, r3, #24
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	f003 0307 	and.w	r3, r3, #7
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee4:	0d5b      	lsrs	r3, r3, #21
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	b2da      	uxtb	r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	0c9b      	lsrs	r3, r3, #18
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	b2da      	uxtb	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df08:	0bdb      	lsrs	r3, r3, #15
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0307 	and.w	r3, r3, #7
 800df10:	b2da      	uxtb	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	1c5a      	adds	r2, r3, #1
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	7e1b      	ldrb	r3, [r3, #24]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f003 0307 	and.w	r3, r3, #7
 800df2a:	3302      	adds	r3, #2
 800df2c:	2201      	movs	r2, #1
 800df2e:	fa02 f303 	lsl.w	r3, r2, r3
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800df36:	fb03 f202 	mul.w	r2, r3, r2
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	7a1b      	ldrb	r3, [r3, #8]
 800df42:	b2db      	uxtb	r3, r3
 800df44:	f003 030f 	and.w	r3, r3, #15
 800df48:	2201      	movs	r2, #1
 800df4a:	409a      	lsls	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800df58:	0a52      	lsrs	r2, r2, #9
 800df5a:	fb03 f202 	mul.w	r2, r3, r2
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df68:	655a      	str	r2, [r3, #84]	; 0x54
 800df6a:	e031      	b.n	800dfd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df70:	2b01      	cmp	r3, #1
 800df72:	d11d      	bne.n	800dfb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df78:	041b      	lsls	r3, r3, #16
 800df7a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df82:	0c1b      	lsrs	r3, r3, #16
 800df84:	431a      	orrs	r2, r3
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	3301      	adds	r3, #1
 800df90:	029a      	lsls	r2, r3, #10
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfa4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	655a      	str	r2, [r3, #84]	; 0x54
 800dfae:	e00f      	b.n	800dfd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a58      	ldr	r2, [pc, #352]	; (800e118 <HAL_SD_GetCardCSD+0x344>)
 800dfb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e09d      	b.n	800e10c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfd4:	0b9b      	lsrs	r3, r3, #14
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe6:	09db      	lsrs	r3, r3, #7
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e008:	0fdb      	lsrs	r3, r3, #31
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e014:	0f5b      	lsrs	r3, r3, #29
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e026:	0e9b      	lsrs	r3, r3, #26
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e038:	0d9b      	lsrs	r3, r3, #22
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	f003 030f 	and.w	r3, r3, #15
 800e040:	b2da      	uxtb	r2, r3
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e04a:	0d5b      	lsrs	r3, r3, #21
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e066:	0c1b      	lsrs	r3, r3, #16
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e07a:	0bdb      	lsrs	r3, r3, #15
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	b2da      	uxtb	r2, r3
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e08e:	0b9b      	lsrs	r3, r3, #14
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	b2da      	uxtb	r2, r3
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0a2:	0b5b      	lsrs	r3, r3, #13
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0b6:	0b1b      	lsrs	r3, r3, #12
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ca:	0a9b      	lsrs	r3, r3, #10
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	f003 0303 	and.w	r3, r3, #3
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0de:	0a1b      	lsrs	r3, r3, #8
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0f2:	085b      	lsrs	r3, r3, #1
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	1fe00fff 	.word	0x1fe00fff

0800e11c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b094      	sub	sp, #80	; 0x50
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b03      	cmp	r3, #3
 800e136:	d101      	bne.n	800e13c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e0a7      	b.n	800e28c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e13c:	f107 0308 	add.w	r3, r7, #8
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fb62 	bl	800e80c <SD_SendSDStatus>
 800e148:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e14a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d011      	beq.n	800e174 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a4f      	ldr	r2, [pc, #316]	; (800e294 <HAL_SD_GetCardStatus+0x178>)
 800e156:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e15e:	431a      	orrs	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e172:	e070      	b.n	800e256 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	099b      	lsrs	r3, r3, #6
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	f003 0303 	and.w	r3, r3, #3
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	095b      	lsrs	r3, r3, #5
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 0301 	and.w	r3, r3, #1
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	0a1b      	lsrs	r3, r3, #8
 800e198:	b29b      	uxth	r3, r3
 800e19a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	0e1b      	lsrs	r3, r3, #24
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	061a      	lsls	r2, r3, #24
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	021b      	lsls	r3, r3, #8
 800e1b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	0a1b      	lsrs	r3, r3, #8
 800e1c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	0e1b      	lsrs	r3, r3, #24
 800e1ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	0a1b      	lsrs	r3, r3, #8
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	0d1b      	lsrs	r3, r3, #20
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	f003 030f 	and.w	r3, r3, #15
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	0c1b      	lsrs	r3, r3, #16
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	b29b      	uxth	r3, r3
 800e202:	b2db      	uxtb	r3, r3
 800e204:	b29b      	uxth	r3, r3
 800e206:	4313      	orrs	r3, r2
 800e208:	b29a      	uxth	r2, r3
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	0a9b      	lsrs	r3, r3, #10
 800e212:	b2db      	uxtb	r3, r3
 800e214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	0a1b      	lsrs	r3, r3, #8
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0303 	and.w	r3, r3, #3
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	091b      	lsrs	r3, r3, #4
 800e232:	b2db      	uxtb	r3, r3
 800e234:	f003 030f 	and.w	r3, r3, #15
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	b2db      	uxtb	r3, r3
 800e242:	f003 030f 	and.w	r3, r3, #15
 800e246:	b2da      	uxtb	r2, r3
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	0e1b      	lsrs	r3, r3, #24
 800e250:	b2da      	uxtb	r2, r3
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e25e:	4618      	mov	r0, r3
 800e260:	f003 ff46 	bl	80120f0 <SDMMC_CmdBlockLength>
 800e264:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00d      	beq.n	800e288 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a08      	ldr	r2, [pc, #32]	; (800e294 <HAL_SD_GetCardStatus+0x178>)
 800e272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e278:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3750      	adds	r7, #80	; 0x50
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	1fe00fff 	.word	0x1fe00fff

0800e298 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e2f0:	b590      	push	{r4, r7, lr}
 800e2f2:	b08d      	sub	sp, #52	; 0x34
 800e2f4:	af02      	add	r7, sp, #8
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2203      	movs	r2, #3
 800e304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d02e      	beq.n	800e36e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e316:	d106      	bne.n	800e326 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	635a      	str	r2, [r3, #52]	; 0x34
 800e324:	e029      	b.n	800e37a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e32c:	d10a      	bne.n	800e344 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fb64 	bl	800e9fc <SD_WideBus_Enable>
 800e334:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	431a      	orrs	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	635a      	str	r2, [r3, #52]	; 0x34
 800e342:	e01a      	b.n	800e37a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10a      	bne.n	800e360 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fba1 	bl	800ea92 <SD_WideBus_Disable>
 800e350:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	431a      	orrs	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	635a      	str	r2, [r3, #52]	; 0x34
 800e35e:	e00c      	b.n	800e37a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e364:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	635a      	str	r2, [r3, #52]	; 0x34
 800e36c:	e005      	b.n	800e37a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d007      	beq.n	800e392 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a5f      	ldr	r2, [pc, #380]	; (800e504 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e388:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e390:	e096      	b.n	800e4c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e392:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e396:	f04f 0100 	mov.w	r1, #0
 800e39a:	f7fd fea3 	bl	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800e39e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 8083 	beq.w	800e4ae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695a      	ldr	r2, [r3, #20]
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	4950      	ldr	r1, [pc, #320]	; (800e508 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3c6:	fba1 1303 	umull	r1, r3, r1, r3
 800e3ca:	0e1b      	lsrs	r3, r3, #24
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d303      	bcc.n	800e3d8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	61bb      	str	r3, [r7, #24]
 800e3d6:	e05a      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e0:	d103      	bne.n	800e3ea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	61bb      	str	r3, [r7, #24]
 800e3e8:	e051      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3f2:	d126      	bne.n	800e442 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	695b      	ldr	r3, [r3, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10e      	bne.n	800e41a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	4a43      	ldr	r2, [pc, #268]	; (800e50c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d906      	bls.n	800e412 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	4a40      	ldr	r2, [pc, #256]	; (800e508 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e408:	fba2 2303 	umull	r2, r3, r2, r3
 800e40c:	0e5b      	lsrs	r3, r3, #25
 800e40e:	61bb      	str	r3, [r7, #24]
 800e410:	e03d      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	61bb      	str	r3, [r7, #24]
 800e418:	e039      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	695b      	ldr	r3, [r3, #20]
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	fbb2 f3f3 	udiv	r3, r2, r3
 800e426:	4a39      	ldr	r2, [pc, #228]	; (800e50c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d906      	bls.n	800e43a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	4a36      	ldr	r2, [pc, #216]	; (800e508 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e430:	fba2 2303 	umull	r2, r3, r2, r3
 800e434:	0e5b      	lsrs	r3, r3, #25
 800e436:	61bb      	str	r3, [r7, #24]
 800e438:	e029      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	61bb      	str	r3, [r7, #24]
 800e440:	e025      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d10e      	bne.n	800e468 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	4a30      	ldr	r2, [pc, #192]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d906      	bls.n	800e460 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	4a2c      	ldr	r2, [pc, #176]	; (800e508 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e456:	fba2 2303 	umull	r2, r3, r2, r3
 800e45a:	0e1b      	lsrs	r3, r3, #24
 800e45c:	61bb      	str	r3, [r7, #24]
 800e45e:	e016      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	695b      	ldr	r3, [r3, #20]
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	e012      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	695b      	ldr	r3, [r3, #20]
 800e46c:	005b      	lsls	r3, r3, #1
 800e46e:	69fa      	ldr	r2, [r7, #28]
 800e470:	fbb2 f3f3 	udiv	r3, r2, r3
 800e474:	4a26      	ldr	r2, [pc, #152]	; (800e510 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d906      	bls.n	800e488 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	4a22      	ldr	r2, [pc, #136]	; (800e508 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e47e:	fba2 2303 	umull	r2, r3, r2, r3
 800e482:	0e1b      	lsrs	r3, r3, #24
 800e484:	61bb      	str	r3, [r7, #24]
 800e486:	e002      	b.n	800e48e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681c      	ldr	r4, [r3, #0]
 800e492:	466a      	mov	r2, sp
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e49c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4a0:	f107 0308 	add.w	r3, r7, #8
 800e4a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f003 fd44 	bl	8011f34 <SDMMC_Init>
 800e4ac:	e008      	b.n	800e4c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f003 fe11 	bl	80120f0 <SDMMC_CmdBlockLength>
 800e4ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00c      	beq.n	800e4f0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a0a      	ldr	r2, [pc, #40]	; (800e504 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	431a      	orrs	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	372c      	adds	r7, #44	; 0x2c
 800e500:	46bd      	mov	sp, r7
 800e502:	bd90      	pop	{r4, r7, pc}
 800e504:	1fe00fff 	.word	0x1fe00fff
 800e508:	55e63b89 	.word	0x55e63b89
 800e50c:	02faf080 	.word	0x02faf080
 800e510:	017d7840 	.word	0x017d7840

0800e514 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e520:	f107 030c 	add.w	r3, r7, #12
 800e524:	4619      	mov	r1, r3
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fa40 	bl	800e9ac <SD_SendStatus>
 800e52c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d005      	beq.n	800e540 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	431a      	orrs	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	0a5b      	lsrs	r3, r3, #9
 800e544:	f003 030f 	and.w	r3, r3, #15
 800e548:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e54a:	693b      	ldr	r3, [r7, #16]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b090      	sub	sp, #64	; 0x40
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e560:	f7f6 f94a 	bl	80047f8 <HAL_GetTick>
 800e564:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f003 fd3b 	bl	8011fe6 <SDMMC_GetPowerState>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d102      	bne.n	800e57c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e576:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e57a:	e0b5      	b.n	800e6e8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e580:	2b03      	cmp	r3, #3
 800e582:	d02e      	beq.n	800e5e2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f003 ff86 	bl	801249a <SDMMC_CmdSendCID>
 800e58e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <SD_InitCard+0x46>
    {
      return errorstate;
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	e0a6      	b.n	800e6e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f003 fd66 	bl	8012072 <SDMMC_GetResponse>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2104      	movs	r1, #4
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f003 fd5d 	bl	8012072 <SDMMC_GetResponse>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2108      	movs	r1, #8
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f003 fd54 	bl	8012072 <SDMMC_GetResponse>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	210c      	movs	r1, #12
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f003 fd4b 	bl	8012072 <SDMMC_GetResponse>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d01d      	beq.n	800e626 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e5ea:	e019      	b.n	800e620 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f107 020a 	add.w	r2, r7, #10
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f003 ff8e 	bl	8012518 <SDMMC_CmdSetRelAdd>
 800e5fc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	e06f      	b.n	800e6e8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e608:	f7f6 f8f6 	bl	80047f8 <HAL_GetTick>
 800e60c:	4602      	mov	r2, r0
 800e60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	f241 3287 	movw	r2, #4999	; 0x1387
 800e616:	4293      	cmp	r3, r2
 800e618:	d902      	bls.n	800e620 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e61a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e61e:	e063      	b.n	800e6e8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e620:	897b      	ldrh	r3, [r7, #10]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0e2      	beq.n	800e5ec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d036      	beq.n	800e69c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e62e:	897b      	ldrh	r3, [r7, #10]
 800e630:	461a      	mov	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e63e:	041b      	lsls	r3, r3, #16
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f003 ff48 	bl	80124d8 <SDMMC_CmdSendCSD>
 800e648:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <SD_InitCard+0x100>
    {
      return errorstate;
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	e049      	b.n	800e6e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2100      	movs	r1, #0
 800e65a:	4618      	mov	r0, r3
 800e65c:	f003 fd09 	bl	8012072 <SDMMC_GetResponse>
 800e660:	4602      	mov	r2, r0
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2104      	movs	r1, #4
 800e66c:	4618      	mov	r0, r3
 800e66e:	f003 fd00 	bl	8012072 <SDMMC_GetResponse>
 800e672:	4602      	mov	r2, r0
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2108      	movs	r1, #8
 800e67e:	4618      	mov	r0, r3
 800e680:	f003 fcf7 	bl	8012072 <SDMMC_GetResponse>
 800e684:	4602      	mov	r2, r0
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	210c      	movs	r1, #12
 800e690:	4618      	mov	r0, r3
 800e692:	f003 fcee 	bl	8012072 <SDMMC_GetResponse>
 800e696:	4602      	mov	r2, r0
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2104      	movs	r1, #4
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f003 fce5 	bl	8012072 <SDMMC_GetResponse>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	0d1a      	lsrs	r2, r3, #20
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e6b0:	f107 030c 	add.w	r3, r7, #12
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fb8c 	bl	800ddd4 <HAL_SD_GetCardCSD>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d002      	beq.n	800e6c8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6c6:	e00f      	b.n	800e6e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d0:	041b      	lsls	r3, r3, #16
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f003 fdf7 	bl	80122c8 <SDMMC_CmdSelDesel>
 800e6da:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <SD_InitCard+0x192>
  {
    return errorstate;
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	e000      	b.n	800e6e8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3740      	adds	r7, #64	; 0x40
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e700:	2300      	movs	r3, #0
 800e702:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4618      	mov	r0, r3
 800e70a:	f003 fe00 	bl	801230e <SDMMC_CmdGoIdleState>
 800e70e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <SD_PowerON+0x2a>
  {
    return errorstate;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	e072      	b.n	800e800 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f003 fe13 	bl	801234a <SDMMC_CmdOperCond>
 800e724:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e72c:	d10d      	bne.n	800e74a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2200      	movs	r2, #0
 800e732:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f003 fde8 	bl	801230e <SDMMC_CmdGoIdleState>
 800e73e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d004      	beq.n	800e750 <SD_PowerON+0x60>
    {
      return errorstate;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	e05a      	b.n	800e800 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2201      	movs	r2, #1
 800e74e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e754:	2b01      	cmp	r3, #1
 800e756:	d137      	bne.n	800e7c8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2100      	movs	r1, #0
 800e75e:	4618      	mov	r0, r3
 800e760:	f003 fe13 	bl	801238a <SDMMC_CmdAppCommand>
 800e764:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d02d      	beq.n	800e7c8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e76c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e770:	e046      	b.n	800e800 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2100      	movs	r1, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	f003 fe06 	bl	801238a <SDMMC_CmdAppCommand>
 800e77e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d001      	beq.n	800e78a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	e03a      	b.n	800e800 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	491e      	ldr	r1, [pc, #120]	; (800e808 <SD_PowerON+0x118>)
 800e790:	4618      	mov	r0, r3
 800e792:	f003 fe1d 	bl	80123d0 <SDMMC_CmdAppOperCommand>
 800e796:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e79e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7a2:	e02d      	b.n	800e800 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f003 fc61 	bl	8012072 <SDMMC_GetResponse>
 800e7b0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	0fdb      	lsrs	r3, r3, #31
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d101      	bne.n	800e7be <SD_PowerON+0xce>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e000      	b.n	800e7c0 <SD_PowerON+0xd0>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	613b      	str	r3, [r7, #16]

    count++;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d802      	bhi.n	800e7d8 <SD_PowerON+0xe8>
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d0cc      	beq.n	800e772 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d902      	bls.n	800e7e8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e7e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7e6:	e00b      	b.n	800e800 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	c1100000 	.word	0xc1100000

0800e80c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08c      	sub	sp, #48	; 0x30
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e816:	f7f5 ffef 	bl	80047f8 <HAL_GetTick>
 800e81a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2100      	movs	r1, #0
 800e826:	4618      	mov	r0, r3
 800e828:	f003 fc23 	bl	8012072 <SDMMC_GetResponse>
 800e82c:	4603      	mov	r3, r0
 800e82e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e836:	d102      	bne.n	800e83e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e838:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e83c:	e0b0      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2140      	movs	r1, #64	; 0x40
 800e844:	4618      	mov	r0, r3
 800e846:	f003 fc53 	bl	80120f0 <SDMMC_CmdBlockLength>
 800e84a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d005      	beq.n	800e85e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	e0a0      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e866:	041b      	lsls	r3, r3, #16
 800e868:	4619      	mov	r1, r3
 800e86a:	4610      	mov	r0, r2
 800e86c:	f003 fd8d 	bl	801238a <SDMMC_CmdAppCommand>
 800e870:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	e08d      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e884:	f04f 33ff 	mov.w	r3, #4294967295
 800e888:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e88a:	2340      	movs	r3, #64	; 0x40
 800e88c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e88e:	2360      	movs	r3, #96	; 0x60
 800e890:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e892:	2302      	movs	r3, #2
 800e894:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e896:	2300      	movs	r3, #0
 800e898:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e89a:	2301      	movs	r3, #1
 800e89c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f107 0208 	add.w	r2, r7, #8
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f003 fbf5 	bl	8012098 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f003 fe75 	bl	80125a2 <SDMMC_CmdStatusRegister>
 800e8b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d02b      	beq.n	800e918 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	e069      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d013      	beq.n	800e902 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e8da:	2300      	movs	r3, #0
 800e8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8de:	e00d      	b.n	800e8fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f003 fb4f 	bl	8011f88 <SDMMC_ReadFIFO>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ee:	601a      	str	r2, [r3, #0]
        pData++;
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	2b07      	cmp	r3, #7
 800e900:	d9ee      	bls.n	800e8e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e902:	f7f5 ff79 	bl	80047f8 <HAL_GetTick>
 800e906:	4602      	mov	r2, r0
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e910:	d102      	bne.n	800e918 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e912:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e916:	e043      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e91e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e922:	2b00      	cmp	r3, #0
 800e924:	d0d2      	beq.n	800e8cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92c:	f003 0308 	and.w	r3, r3, #8
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e934:	2308      	movs	r3, #8
 800e936:	e033      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e93e:	f003 0302 	and.w	r3, r3, #2
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e946:	2302      	movs	r3, #2
 800e948:	e02a      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e950:	f003 0320 	and.w	r3, r3, #32
 800e954:	2b00      	cmp	r3, #0
 800e956:	d017      	beq.n	800e988 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e958:	2320      	movs	r3, #32
 800e95a:	e021      	b.n	800e9a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4618      	mov	r0, r3
 800e962:	f003 fb11 	bl	8011f88 <SDMMC_ReadFIFO>
 800e966:	4602      	mov	r2, r0
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	601a      	str	r2, [r3, #0]
    pData++;
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	3304      	adds	r3, #4
 800e970:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e972:	f7f5 ff41 	bl	80047f8 <HAL_GetTick>
 800e976:	4602      	mov	r2, r0
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e980:	d102      	bne.n	800e988 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e986:	e00b      	b.n	800e9a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1e2      	bne.n	800e95c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a03      	ldr	r2, [pc, #12]	; (800e9a8 <SD_SendSDStatus+0x19c>)
 800e99c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3730      	adds	r7, #48	; 0x30
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	18000f3a 	.word	0x18000f3a

0800e9ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d102      	bne.n	800e9c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9c0:	e018      	b.n	800e9f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	041b      	lsls	r3, r3, #16
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	f003 fdc4 	bl	801255c <SDMMC_CmdSendStatus>
 800e9d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d001      	beq.n	800e9e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	e009      	b.n	800e9f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f003 fb43 	bl	8012072 <SDMMC_GetResponse>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f003 fb2d 	bl	8012072 <SDMMC_GetResponse>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea22:	d102      	bne.n	800ea2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea28:	e02f      	b.n	800ea8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea2a:	f107 030c 	add.w	r3, r7, #12
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f879 	bl	800eb28 <SD_FindSCR>
 800ea36:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	e023      	b.n	800ea8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d01c      	beq.n	800ea86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea54:	041b      	lsls	r3, r3, #16
 800ea56:	4619      	mov	r1, r3
 800ea58:	4610      	mov	r0, r2
 800ea5a:	f003 fc96 	bl	801238a <SDMMC_CmdAppCommand>
 800ea5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	e00f      	b.n	800ea8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2102      	movs	r1, #2
 800ea70:	4618      	mov	r0, r3
 800ea72:	f003 fccd 	bl	8012410 <SDMMC_CmdBusWidth>
 800ea76:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	e003      	b.n	800ea8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	e001      	b.n	800ea8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3718      	adds	r7, #24
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b086      	sub	sp, #24
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60fb      	str	r3, [r7, #12]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f003 fae2 	bl	8012072 <SDMMC_GetResponse>
 800eaae:	4603      	mov	r3, r0
 800eab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eab8:	d102      	bne.n	800eac0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eaba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eabe:	e02f      	b.n	800eb20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eac0:	f107 030c 	add.w	r3, r7, #12
 800eac4:	4619      	mov	r1, r3
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f82e 	bl	800eb28 <SD_FindSCR>
 800eacc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	e023      	b.n	800eb20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d01c      	beq.n	800eb1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaea:	041b      	lsls	r3, r3, #16
 800eaec:	4619      	mov	r1, r3
 800eaee:	4610      	mov	r0, r2
 800eaf0:	f003 fc4b 	bl	801238a <SDMMC_CmdAppCommand>
 800eaf4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d001      	beq.n	800eb00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	e00f      	b.n	800eb20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2100      	movs	r1, #0
 800eb06:	4618      	mov	r0, r3
 800eb08:	f003 fc82 	bl	8012410 <SDMMC_CmdBusWidth>
 800eb0c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	e003      	b.n	800eb20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e001      	b.n	800eb20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08e      	sub	sp, #56	; 0x38
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb32:	f7f5 fe61 	bl	80047f8 <HAL_GetTick>
 800eb36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60bb      	str	r3, [r7, #8]
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2108      	movs	r1, #8
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f003 face 	bl	80120f0 <SDMMC_CmdBlockLength>
 800eb54:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	e0ad      	b.n	800ecbc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb68:	041b      	lsls	r3, r3, #16
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	f003 fc0c 	bl	801238a <SDMMC_CmdAppCommand>
 800eb72:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	e09e      	b.n	800ecbc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb84:	2308      	movs	r3, #8
 800eb86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb88:	2330      	movs	r3, #48	; 0x30
 800eb8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb94:	2301      	movs	r3, #1
 800eb96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f107 0210 	add.w	r2, r7, #16
 800eba0:	4611      	mov	r1, r2
 800eba2:	4618      	mov	r0, r3
 800eba4:	f003 fa78 	bl	8012098 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f003 fc52 	bl	8012456 <SDMMC_CmdSendSCR>
 800ebb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d027      	beq.n	800ec0a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	e07e      	b.n	800ecbc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d113      	bne.n	800ebf4 <SD_FindSCR+0xcc>
 800ebcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d110      	bne.n	800ebf4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f003 f9d6 	bl	8011f88 <SDMMC_ReadFIFO>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f003 f9cf 	bl	8011f88 <SDMMC_ReadFIFO>
 800ebea:	4603      	mov	r3, r0
 800ebec:	60fb      	str	r3, [r7, #12]
      index++;
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ebf4:	f7f5 fe00 	bl	80047f8 <HAL_GetTick>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec02:	d102      	bne.n	800ec0a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec08:	e058      	b.n	800ecbc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec10:	f240 532a 	movw	r3, #1322	; 0x52a
 800ec14:	4013      	ands	r3, r2
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0d1      	beq.n	800ebbe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec20:	f003 0308 	and.w	r3, r3, #8
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d005      	beq.n	800ec34 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2208      	movs	r2, #8
 800ec2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec30:	2308      	movs	r3, #8
 800ec32:	e043      	b.n	800ecbc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec3a:	f003 0302 	and.w	r3, r3, #2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d005      	beq.n	800ec4e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2202      	movs	r2, #2
 800ec48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec4a:	2302      	movs	r3, #2
 800ec4c:	e036      	b.n	800ecbc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec54:	f003 0320 	and.w	r3, r3, #32
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d005      	beq.n	800ec68 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2220      	movs	r2, #32
 800ec62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec64:	2320      	movs	r3, #32
 800ec66:	e029      	b.n	800ecbc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a15      	ldr	r2, [pc, #84]	; (800ecc4 <SD_FindSCR+0x19c>)
 800ec6e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	061a      	lsls	r2, r3, #24
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	021b      	lsls	r3, r3, #8
 800ec78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	0a1b      	lsrs	r3, r3, #8
 800ec82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec86:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	0e1b      	lsrs	r3, r3, #24
 800ec8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec90:	601a      	str	r2, [r3, #0]
    scr++;
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	3304      	adds	r3, #4
 800ec96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	061a      	lsls	r2, r3, #24
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	021b      	lsls	r3, r3, #8
 800eca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eca4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	0a1b      	lsrs	r3, r3, #8
 800ecaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	0e1b      	lsrs	r3, r3, #24
 800ecb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3738      	adds	r7, #56	; 0x38
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	18000f3a 	.word	0x18000f3a

0800ecc8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecda:	2b1f      	cmp	r3, #31
 800ecdc:	d936      	bls.n	800ed4c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	e027      	b.n	800ed34 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f003 f94d 	bl	8011f88 <SDMMC_ReadFIFO>
 800ecee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	0a1b      	lsrs	r3, r3, #8
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	0c1b      	lsrs	r3, r3, #16
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	0e1b      	lsrs	r3, r3, #24
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	3301      	adds	r3, #1
 800ed32:	617b      	str	r3, [r7, #20]
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	2b07      	cmp	r3, #7
 800ed38:	d9d4      	bls.n	800ece4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed44:	f1a3 0220 	sub.w	r2, r3, #32
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ed4c:	bf00      	nop
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	2b1f      	cmp	r3, #31
 800ed68:	d93a      	bls.n	800ede0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	617b      	str	r3, [r7, #20]
 800ed6e:	e02b      	b.n	800edc8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	021a      	lsls	r2, r3, #8
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	041a      	lsls	r2, r3, #16
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	061a      	lsls	r2, r3, #24
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	4313      	orrs	r3, r2
 800edaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	3301      	adds	r3, #1
 800edb0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f107 020c 	add.w	r2, r7, #12
 800edba:	4611      	mov	r1, r2
 800edbc:	4618      	mov	r0, r3
 800edbe:	f003 f8f0 	bl	8011fa2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	3301      	adds	r3, #1
 800edc6:	617b      	str	r3, [r7, #20]
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2b07      	cmp	r3, #7
 800edcc:	d9d0      	bls.n	800ed70 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a1b      	ldr	r3, [r3, #32]
 800edd8:	f1a3 0220 	sub.w	r2, r3, #32
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	621a      	str	r2, [r3, #32]
  }
}
 800ede0:	bf00      	nop
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800edf0:	bf00      	nop
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e10f      	b.n	800f06a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a87      	ldr	r2, [pc, #540]	; (800f074 <HAL_SPI_Init+0x23c>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d00f      	beq.n	800ee7a <HAL_SPI_Init+0x42>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	4a86      	ldr	r2, [pc, #536]	; (800f078 <HAL_SPI_Init+0x240>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00a      	beq.n	800ee7a <HAL_SPI_Init+0x42>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a84      	ldr	r2, [pc, #528]	; (800f07c <HAL_SPI_Init+0x244>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d005      	beq.n	800ee7a <HAL_SPI_Init+0x42>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	2b0f      	cmp	r3, #15
 800ee74:	d901      	bls.n	800ee7a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e0f7      	b.n	800f06a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fd5a 	bl	800f934 <SPI_GetPacketSize>
 800ee80:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a7b      	ldr	r2, [pc, #492]	; (800f074 <HAL_SPI_Init+0x23c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d00c      	beq.n	800eea6 <HAL_SPI_Init+0x6e>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a79      	ldr	r2, [pc, #484]	; (800f078 <HAL_SPI_Init+0x240>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d007      	beq.n	800eea6 <HAL_SPI_Init+0x6e>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a78      	ldr	r2, [pc, #480]	; (800f07c <HAL_SPI_Init+0x244>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d002      	beq.n	800eea6 <HAL_SPI_Init+0x6e>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b08      	cmp	r3, #8
 800eea4:	d811      	bhi.n	800eeca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeaa:	4a72      	ldr	r2, [pc, #456]	; (800f074 <HAL_SPI_Init+0x23c>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d009      	beq.n	800eec4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a70      	ldr	r2, [pc, #448]	; (800f078 <HAL_SPI_Init+0x240>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d004      	beq.n	800eec4 <HAL_SPI_Init+0x8c>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a6f      	ldr	r2, [pc, #444]	; (800f07c <HAL_SPI_Init+0x244>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d104      	bne.n	800eece <HAL_SPI_Init+0x96>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b10      	cmp	r3, #16
 800eec8:	d901      	bls.n	800eece <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e0cd      	b.n	800f06a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7f4 fdf8 	bl	8003ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2202      	movs	r2, #2
 800eeec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f022 0201 	bic.w	r2, r2, #1
 800eefe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ef0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	699b      	ldr	r3, [r3, #24]
 800ef10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef14:	d119      	bne.n	800ef4a <HAL_SPI_Init+0x112>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef1e:	d103      	bne.n	800ef28 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d008      	beq.n	800ef3a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10c      	bne.n	800ef4a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef38:	d107      	bne.n	800ef4a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00f      	beq.n	800ef76 <HAL_SPI_Init+0x13e>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	2b06      	cmp	r3, #6
 800ef5c:	d90b      	bls.n	800ef76 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	430a      	orrs	r2, r1
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	e007      	b.n	800ef86 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ef84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	69da      	ldr	r2, [r3, #28]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	431a      	orrs	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef98:	ea42 0103 	orr.w	r1, r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	68da      	ldr	r2, [r3, #12]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb0:	431a      	orrs	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb6:	431a      	orrs	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	431a      	orrs	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	431a      	orrs	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	431a      	orrs	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	431a      	orrs	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	431a      	orrs	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efda:	431a      	orrs	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	431a      	orrs	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efe6:	ea42 0103 	orr.w	r1, r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	430a      	orrs	r2, r1
 800eff4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d113      	bne.n	800f026 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f010:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f024:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f022 0201 	bic.w	r2, r2, #1
 800f034:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00a      	beq.n	800f058 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	430a      	orrs	r2, r1
 800f056:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	40013000 	.word	0x40013000
 800f078:	40003800 	.word	0x40003800
 800f07c:	40003c00 	.word	0x40003c00

0800f080 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af02      	add	r7, sp, #8
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	4613      	mov	r3, r2
 800f08e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3320      	adds	r3, #32
 800f096:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f098:	2300      	movs	r3, #0
 800f09a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d101      	bne.n	800f0aa <HAL_SPI_Transmit+0x2a>
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	e1e1      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0b2:	f7f5 fba1 	bl	80047f8 <HAL_GetTick>
 800f0b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d007      	beq.n	800f0d4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0d0:	7efb      	ldrb	r3, [r7, #27]
 800f0d2:	e1cc      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <HAL_SPI_Transmit+0x60>
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d107      	bne.n	800f0f0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0ec:	7efb      	ldrb	r3, [r7, #27]
 800f0ee:	e1be      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2203      	movs	r2, #3
 800f0f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	68ba      	ldr	r2, [r7, #8]
 800f104:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	88fa      	ldrh	r2, [r7, #6]
 800f10a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	88fa      	ldrh	r2, [r7, #6]
 800f112:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f140:	d108      	bne.n	800f154 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	e009      	b.n	800f168 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f166:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	4b96      	ldr	r3, [pc, #600]	; (800f3c8 <HAL_SPI_Transmit+0x348>)
 800f170:	4013      	ands	r3, r2
 800f172:	88f9      	ldrh	r1, [r7, #6]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	6812      	ldr	r2, [r2, #0]
 800f178:	430b      	orrs	r3, r1
 800f17a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f042 0201 	orr.w	r2, r2, #1
 800f18a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f194:	d107      	bne.n	800f1a6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	2b0f      	cmp	r3, #15
 800f1ac:	d947      	bls.n	800f23e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f1ae:	e03f      	b.n	800f230 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	f003 0302 	and.w	r3, r3, #2
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d114      	bne.n	800f1e8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	6812      	ldr	r2, [r2, #0]
 800f1c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1ce:	1d1a      	adds	r2, r3, #4
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f1e6:	e023      	b.n	800f230 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1e8:	f7f5 fb06 	bl	80047f8 <HAL_GetTick>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d803      	bhi.n	800f200 <HAL_SPI_Transmit+0x180>
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1fe:	d102      	bne.n	800f206 <HAL_SPI_Transmit+0x186>
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d114      	bne.n	800f230 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f000 fac6 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f21a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e11e      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f236:	b29b      	uxth	r3, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1b9      	bne.n	800f1b0 <HAL_SPI_Transmit+0x130>
 800f23c:	e0f1      	b.n	800f422 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	2b07      	cmp	r3, #7
 800f244:	f240 80e6 	bls.w	800f414 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f248:	e05d      	b.n	800f306 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	f003 0302 	and.w	r3, r3, #2
 800f254:	2b02      	cmp	r3, #2
 800f256:	d132      	bne.n	800f2be <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f25e:	b29b      	uxth	r3, r3
 800f260:	2b01      	cmp	r3, #1
 800f262:	d918      	bls.n	800f296 <HAL_SPI_Transmit+0x216>
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d014      	beq.n	800f296 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	6812      	ldr	r2, [r2, #0]
 800f276:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f288:	b29b      	uxth	r3, r3
 800f28a:	3b02      	subs	r3, #2
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f294:	e037      	b.n	800f306 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f29a:	881a      	ldrh	r2, [r3, #0]
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2a4:	1c9a      	adds	r2, r3, #2
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2bc:	e023      	b.n	800f306 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2be:	f7f5 fa9b 	bl	80047f8 <HAL_GetTick>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d803      	bhi.n	800f2d6 <HAL_SPI_Transmit+0x256>
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d4:	d102      	bne.n	800f2dc <HAL_SPI_Transmit+0x25c>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d114      	bne.n	800f306 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 fa5b 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f302:	2303      	movs	r3, #3
 800f304:	e0b3      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d19b      	bne.n	800f24a <HAL_SPI_Transmit+0x1ca>
 800f312:	e086      	b.n	800f422 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	f003 0302 	and.w	r3, r3, #2
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d154      	bne.n	800f3cc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f328:	b29b      	uxth	r3, r3
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d918      	bls.n	800f360 <HAL_SPI_Transmit+0x2e0>
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f332:	2b40      	cmp	r3, #64	; 0x40
 800f334:	d914      	bls.n	800f360 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	6812      	ldr	r2, [r2, #0]
 800f340:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f346:	1d1a      	adds	r2, r3, #4
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f352:	b29b      	uxth	r3, r3
 800f354:	3b04      	subs	r3, #4
 800f356:	b29a      	uxth	r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f35e:	e059      	b.n	800f414 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f366:	b29b      	uxth	r3, r3
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d917      	bls.n	800f39c <HAL_SPI_Transmit+0x31c>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d013      	beq.n	800f39c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f378:	881a      	ldrh	r2, [r3, #0]
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f382:	1c9a      	adds	r2, r3, #2
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f38e:	b29b      	uxth	r3, r3
 800f390:	3b02      	subs	r3, #2
 800f392:	b29a      	uxth	r2, r3
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f39a:	e03b      	b.n	800f414 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3320      	adds	r3, #32
 800f3a6:	7812      	ldrb	r2, [r2, #0]
 800f3a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3ae:	1c5a      	adds	r2, r3, #1
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3c6:	e025      	b.n	800f414 <HAL_SPI_Transmit+0x394>
 800f3c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3cc:	f7f5 fa14 	bl	80047f8 <HAL_GetTick>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d803      	bhi.n	800f3e4 <HAL_SPI_Transmit+0x364>
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	d102      	bne.n	800f3ea <HAL_SPI_Transmit+0x36a>
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d114      	bne.n	800f414 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f000 f9d4 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f410:	2303      	movs	r3, #3
 800f412:	e02c      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f47f af79 	bne.w	800f314 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	2200      	movs	r2, #0
 800f42a:	2108      	movs	r1, #8
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f000 fa53 	bl	800f8d8 <SPI_WaitOnFlagUntilTimeout>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d007      	beq.n	800f448 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f43e:	f043 0220 	orr.w	r2, r3, #32
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f000 f9a5 	bl	800f798 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f46c:	7efb      	ldrb	r3, [r7, #27]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3720      	adds	r7, #32
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop

0800f478 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	4613      	mov	r3, r2
 800f486:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f488:	2300      	movs	r3, #0
 800f48a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	3330      	adds	r3, #48	; 0x30
 800f492:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d101      	bne.n	800f4a2 <HAL_SPI_Receive+0x2a>
 800f49e:	2302      	movs	r3, #2
 800f4a0:	e173      	b.n	800f78a <HAL_SPI_Receive+0x312>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4aa:	f7f5 f9a5 	bl	80047f8 <HAL_GetTick>
 800f4ae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d007      	beq.n	800f4cc <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4c8:	7ffb      	ldrb	r3, [r7, #31]
 800f4ca:	e15e      	b.n	800f78a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d002      	beq.n	800f4d8 <HAL_SPI_Receive+0x60>
 800f4d2:	88fb      	ldrh	r3, [r7, #6]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d107      	bne.n	800f4e8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4e4:	7ffb      	ldrb	r3, [r7, #31]
 800f4e6:	e150      	b.n	800f78a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2204      	movs	r2, #4
 800f4ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	88fa      	ldrh	r2, [r7, #6]
 800f502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	88fa      	ldrh	r2, [r7, #6]
 800f50a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2200      	movs	r2, #0
 800f512:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f538:	d108      	bne.n	800f54c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	e009      	b.n	800f560 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f55e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685a      	ldr	r2, [r3, #4]
 800f566:	4b8b      	ldr	r3, [pc, #556]	; (800f794 <HAL_SPI_Receive+0x31c>)
 800f568:	4013      	ands	r3, r2
 800f56a:	88f9      	ldrh	r1, [r7, #6]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	6812      	ldr	r2, [r2, #0]
 800f570:	430b      	orrs	r3, r1
 800f572:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f042 0201 	orr.w	r2, r2, #1
 800f582:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f58c:	d107      	bne.n	800f59e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f59c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	2b0f      	cmp	r3, #15
 800f5a4:	d948      	bls.n	800f638 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f5a6:	e040      	b.n	800f62a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	695a      	ldr	r2, [r3, #20]
 800f5ae:	f248 0308 	movw	r3, #32776	; 0x8008
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d014      	beq.n	800f5e2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f5c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c8:	1d1a      	adds	r2, r3, #4
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5e0:	e023      	b.n	800f62a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5e2:	f7f5 f909 	bl	80047f8 <HAL_GetTick>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d803      	bhi.n	800f5fa <HAL_SPI_Receive+0x182>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d102      	bne.n	800f600 <HAL_SPI_Receive+0x188>
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d114      	bne.n	800f62a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f8c9 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f626:	2303      	movs	r3, #3
 800f628:	e0af      	b.n	800f78a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f630:	b29b      	uxth	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d1b8      	bne.n	800f5a8 <HAL_SPI_Receive+0x130>
 800f636:	e095      	b.n	800f764 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	2b07      	cmp	r3, #7
 800f63e:	f240 808b 	bls.w	800f758 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f642:	e03f      	b.n	800f6c4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d114      	bne.n	800f67c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f656:	69ba      	ldr	r2, [r7, #24]
 800f658:	8812      	ldrh	r2, [r2, #0]
 800f65a:	b292      	uxth	r2, r2
 800f65c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f662:	1c9a      	adds	r2, r3, #2
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f66e:	b29b      	uxth	r3, r3
 800f670:	3b01      	subs	r3, #1
 800f672:	b29a      	uxth	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f67a:	e023      	b.n	800f6c4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f67c:	f7f5 f8bc 	bl	80047f8 <HAL_GetTick>
 800f680:	4602      	mov	r2, r0
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d803      	bhi.n	800f694 <HAL_SPI_Receive+0x21c>
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f692:	d102      	bne.n	800f69a <HAL_SPI_Receive+0x222>
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d114      	bne.n	800f6c4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f000 f87c 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6c0:	2303      	movs	r3, #3
 800f6c2:	e062      	b.n	800f78a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1b9      	bne.n	800f644 <HAL_SPI_Receive+0x1cc>
 800f6d0:	e048      	b.n	800f764 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	695b      	ldr	r3, [r3, #20]
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d117      	bne.n	800f710 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f702:	b29b      	uxth	r3, r3
 800f704:	3b01      	subs	r3, #1
 800f706:	b29a      	uxth	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f70e:	e023      	b.n	800f758 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f710:	f7f5 f872 	bl	80047f8 <HAL_GetTick>
 800f714:	4602      	mov	r2, r0
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d803      	bhi.n	800f728 <HAL_SPI_Receive+0x2b0>
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f726:	d102      	bne.n	800f72e <HAL_SPI_Receive+0x2b6>
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d114      	bne.n	800f758 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f000 f832 	bl	800f798 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2200      	movs	r2, #0
 800f738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f754:	2303      	movs	r3, #3
 800f756:	e018      	b.n	800f78a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f75e:	b29b      	uxth	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1b6      	bne.n	800f6d2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 f817 	bl	800f798 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2201      	movs	r2, #1
 800f776:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	e000      	b.n	800f78a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f788:	7ffb      	ldrb	r3, [r7, #31]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3720      	adds	r7, #32
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	ffff0000 	.word	0xffff0000

0800f798 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	695b      	ldr	r3, [r3, #20]
 800f7a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	699a      	ldr	r2, [r3, #24]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f042 0208 	orr.w	r2, r2, #8
 800f7b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	699a      	ldr	r2, [r3, #24]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f042 0210 	orr.w	r2, r2, #16
 800f7c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f022 0201 	bic.w	r2, r2, #1
 800f7d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6919      	ldr	r1, [r3, #16]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4b3c      	ldr	r3, [pc, #240]	; (800f8d4 <SPI_CloseTransfer+0x13c>)
 800f7e4:	400b      	ands	r3, r1
 800f7e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	689a      	ldr	r2, [r3, #8]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f7f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b04      	cmp	r3, #4
 800f802:	d014      	beq.n	800f82e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f003 0320 	and.w	r3, r3, #32
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00f      	beq.n	800f82e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	699a      	ldr	r2, [r3, #24]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f042 0220 	orr.w	r2, r2, #32
 800f82c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b03      	cmp	r3, #3
 800f838:	d014      	beq.n	800f864 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00f      	beq.n	800f864 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f84a:	f043 0204 	orr.w	r2, r3, #4
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	699a      	ldr	r2, [r3, #24]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f862:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d00f      	beq.n	800f88e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f874:	f043 0201 	orr.w	r2, r3, #1
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	699a      	ldr	r2, [r3, #24]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f88c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00f      	beq.n	800f8b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f89e:	f043 0208 	orr.w	r2, r3, #8
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	699a      	ldr	r2, [r3, #24]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f8c8:	bf00      	nop
 800f8ca:	3714      	adds	r7, #20
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	fffffc90 	.word	0xfffffc90

0800f8d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	603b      	str	r3, [r7, #0]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f8e8:	e010      	b.n	800f90c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8ea:	f7f4 ff85 	bl	80047f8 <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d803      	bhi.n	800f902 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f900:	d102      	bne.n	800f908 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f908:	2303      	movs	r3, #3
 800f90a:	e00f      	b.n	800f92c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	695a      	ldr	r2, [r3, #20]
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	4013      	ands	r3, r2
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	429a      	cmp	r2, r3
 800f91a:	bf0c      	ite	eq
 800f91c:	2301      	moveq	r3, #1
 800f91e:	2300      	movne	r3, #0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	461a      	mov	r2, r3
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	429a      	cmp	r2, r3
 800f928:	d0df      	beq.n	800f8ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f940:	095b      	lsrs	r3, r3, #5
 800f942:	3301      	adds	r3, #1
 800f944:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	3301      	adds	r3, #1
 800f94c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	3307      	adds	r3, #7
 800f952:	08db      	lsrs	r3, r3, #3
 800f954:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b082      	sub	sp, #8
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f978:	2301      	movs	r3, #1
 800f97a:	e049      	b.n	800fa10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b00      	cmp	r3, #0
 800f986:	d106      	bne.n	800f996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7f4 faf3 	bl	8003f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2202      	movs	r2, #2
 800f99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	f000 fc8d 	bl	80102c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2201      	movs	r2, #1
 800fa02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e056      	b.n	800fade <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2202      	movs	r2, #2
 800fa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a2b      	ldr	r2, [pc, #172]	; (800faec <HAL_TIM_Base_Start+0xd4>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d02c      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa4a:	d027      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a27      	ldr	r2, [pc, #156]	; (800faf0 <HAL_TIM_Base_Start+0xd8>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d022      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a26      	ldr	r2, [pc, #152]	; (800faf4 <HAL_TIM_Base_Start+0xdc>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d01d      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a24      	ldr	r2, [pc, #144]	; (800faf8 <HAL_TIM_Base_Start+0xe0>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d018      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a23      	ldr	r2, [pc, #140]	; (800fafc <HAL_TIM_Base_Start+0xe4>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d013      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a21      	ldr	r2, [pc, #132]	; (800fb00 <HAL_TIM_Base_Start+0xe8>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d00e      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a20      	ldr	r2, [pc, #128]	; (800fb04 <HAL_TIM_Base_Start+0xec>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d009      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a1e      	ldr	r2, [pc, #120]	; (800fb08 <HAL_TIM_Base_Start+0xf0>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d004      	beq.n	800fa9c <HAL_TIM_Base_Start+0x84>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a1d      	ldr	r2, [pc, #116]	; (800fb0c <HAL_TIM_Base_Start+0xf4>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d115      	bne.n	800fac8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	689a      	ldr	r2, [r3, #8]
 800faa2:	4b1b      	ldr	r3, [pc, #108]	; (800fb10 <HAL_TIM_Base_Start+0xf8>)
 800faa4:	4013      	ands	r3, r2
 800faa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b06      	cmp	r3, #6
 800faac:	d015      	beq.n	800fada <HAL_TIM_Base_Start+0xc2>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fab4:	d011      	beq.n	800fada <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f042 0201 	orr.w	r2, r2, #1
 800fac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fac6:	e008      	b.n	800fada <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f042 0201 	orr.w	r2, r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	e000      	b.n	800fadc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	40010000 	.word	0x40010000
 800faf0:	40000400 	.word	0x40000400
 800faf4:	40000800 	.word	0x40000800
 800faf8:	40000c00 	.word	0x40000c00
 800fafc:	40010400 	.word	0x40010400
 800fb00:	40001800 	.word	0x40001800
 800fb04:	40014000 	.word	0x40014000
 800fb08:	4000e000 	.word	0x4000e000
 800fb0c:	4000e400 	.word	0x4000e400
 800fb10:	00010007 	.word	0x00010007

0800fb14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	e049      	b.n	800fbba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d106      	bne.n	800fb40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7f4 f888 	bl	8003c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2202      	movs	r2, #2
 800fb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681a      	ldr	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	f000 fbb8 	bl	80102c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
	...

0800fbc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d109      	bne.n	800fbe8 <HAL_TIM_PWM_Start+0x24>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	bf14      	ite	ne
 800fbe0:	2301      	movne	r3, #1
 800fbe2:	2300      	moveq	r3, #0
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	e03c      	b.n	800fc62 <HAL_TIM_PWM_Start+0x9e>
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	d109      	bne.n	800fc02 <HAL_TIM_PWM_Start+0x3e>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	bf14      	ite	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	2300      	moveq	r3, #0
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	e02f      	b.n	800fc62 <HAL_TIM_PWM_Start+0x9e>
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	2b08      	cmp	r3, #8
 800fc06:	d109      	bne.n	800fc1c <HAL_TIM_PWM_Start+0x58>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	bf14      	ite	ne
 800fc14:	2301      	movne	r3, #1
 800fc16:	2300      	moveq	r3, #0
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	e022      	b.n	800fc62 <HAL_TIM_PWM_Start+0x9e>
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	2b0c      	cmp	r3, #12
 800fc20:	d109      	bne.n	800fc36 <HAL_TIM_PWM_Start+0x72>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	bf14      	ite	ne
 800fc2e:	2301      	movne	r3, #1
 800fc30:	2300      	moveq	r3, #0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	e015      	b.n	800fc62 <HAL_TIM_PWM_Start+0x9e>
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	d109      	bne.n	800fc50 <HAL_TIM_PWM_Start+0x8c>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	bf14      	ite	ne
 800fc48:	2301      	movne	r3, #1
 800fc4a:	2300      	moveq	r3, #0
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	e008      	b.n	800fc62 <HAL_TIM_PWM_Start+0x9e>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	bf14      	ite	ne
 800fc5c:	2301      	movne	r3, #1
 800fc5e:	2300      	moveq	r3, #0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e0ab      	b.n	800fdc2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d104      	bne.n	800fc7a <HAL_TIM_PWM_Start+0xb6>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2202      	movs	r2, #2
 800fc74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc78:	e023      	b.n	800fcc2 <HAL_TIM_PWM_Start+0xfe>
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2b04      	cmp	r3, #4
 800fc7e:	d104      	bne.n	800fc8a <HAL_TIM_PWM_Start+0xc6>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2202      	movs	r2, #2
 800fc84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc88:	e01b      	b.n	800fcc2 <HAL_TIM_PWM_Start+0xfe>
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	2b08      	cmp	r3, #8
 800fc8e:	d104      	bne.n	800fc9a <HAL_TIM_PWM_Start+0xd6>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2202      	movs	r2, #2
 800fc94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc98:	e013      	b.n	800fcc2 <HAL_TIM_PWM_Start+0xfe>
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2b0c      	cmp	r3, #12
 800fc9e:	d104      	bne.n	800fcaa <HAL_TIM_PWM_Start+0xe6>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2202      	movs	r2, #2
 800fca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fca8:	e00b      	b.n	800fcc2 <HAL_TIM_PWM_Start+0xfe>
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2b10      	cmp	r3, #16
 800fcae:	d104      	bne.n	800fcba <HAL_TIM_PWM_Start+0xf6>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcb8:	e003      	b.n	800fcc2 <HAL_TIM_PWM_Start+0xfe>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 fe78 	bl	80109c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a3d      	ldr	r2, [pc, #244]	; (800fdcc <HAL_TIM_PWM_Start+0x208>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d013      	beq.n	800fd02 <HAL_TIM_PWM_Start+0x13e>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a3c      	ldr	r2, [pc, #240]	; (800fdd0 <HAL_TIM_PWM_Start+0x20c>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d00e      	beq.n	800fd02 <HAL_TIM_PWM_Start+0x13e>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a3a      	ldr	r2, [pc, #232]	; (800fdd4 <HAL_TIM_PWM_Start+0x210>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d009      	beq.n	800fd02 <HAL_TIM_PWM_Start+0x13e>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a39      	ldr	r2, [pc, #228]	; (800fdd8 <HAL_TIM_PWM_Start+0x214>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d004      	beq.n	800fd02 <HAL_TIM_PWM_Start+0x13e>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a37      	ldr	r2, [pc, #220]	; (800fddc <HAL_TIM_PWM_Start+0x218>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d101      	bne.n	800fd06 <HAL_TIM_PWM_Start+0x142>
 800fd02:	2301      	movs	r3, #1
 800fd04:	e000      	b.n	800fd08 <HAL_TIM_PWM_Start+0x144>
 800fd06:	2300      	movs	r3, #0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d007      	beq.n	800fd1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a2a      	ldr	r2, [pc, #168]	; (800fdcc <HAL_TIM_PWM_Start+0x208>)
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d02c      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd2e:	d027      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a2a      	ldr	r2, [pc, #168]	; (800fde0 <HAL_TIM_PWM_Start+0x21c>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d022      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4a29      	ldr	r2, [pc, #164]	; (800fde4 <HAL_TIM_PWM_Start+0x220>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d01d      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a27      	ldr	r2, [pc, #156]	; (800fde8 <HAL_TIM_PWM_Start+0x224>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d018      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	4a1f      	ldr	r2, [pc, #124]	; (800fdd0 <HAL_TIM_PWM_Start+0x20c>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d013      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a23      	ldr	r2, [pc, #140]	; (800fdec <HAL_TIM_PWM_Start+0x228>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d00e      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a1b      	ldr	r2, [pc, #108]	; (800fdd4 <HAL_TIM_PWM_Start+0x210>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d009      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a1f      	ldr	r2, [pc, #124]	; (800fdf0 <HAL_TIM_PWM_Start+0x22c>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d004      	beq.n	800fd80 <HAL_TIM_PWM_Start+0x1bc>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a1e      	ldr	r2, [pc, #120]	; (800fdf4 <HAL_TIM_PWM_Start+0x230>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d115      	bne.n	800fdac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	4b1c      	ldr	r3, [pc, #112]	; (800fdf8 <HAL_TIM_PWM_Start+0x234>)
 800fd88:	4013      	ands	r3, r2
 800fd8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2b06      	cmp	r3, #6
 800fd90:	d015      	beq.n	800fdbe <HAL_TIM_PWM_Start+0x1fa>
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd98:	d011      	beq.n	800fdbe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f042 0201 	orr.w	r2, r2, #1
 800fda8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdaa:	e008      	b.n	800fdbe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f042 0201 	orr.w	r2, r2, #1
 800fdba:	601a      	str	r2, [r3, #0]
 800fdbc:	e000      	b.n	800fdc0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	40010000 	.word	0x40010000
 800fdd0:	40010400 	.word	0x40010400
 800fdd4:	40014000 	.word	0x40014000
 800fdd8:	40014400 	.word	0x40014400
 800fddc:	40014800 	.word	0x40014800
 800fde0:	40000400 	.word	0x40000400
 800fde4:	40000800 	.word	0x40000800
 800fde8:	40000c00 	.word	0x40000c00
 800fdec:	40001800 	.word	0x40001800
 800fdf0:	4000e000 	.word	0x4000e000
 800fdf4:	4000e400 	.word	0x4000e400
 800fdf8:	00010007 	.word	0x00010007

0800fdfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	f003 0302 	and.w	r3, r3, #2
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d122      	bne.n	800fe58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	f003 0302 	and.w	r3, r3, #2
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	d11b      	bne.n	800fe58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f06f 0202 	mvn.w	r2, #2
 800fe28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	699b      	ldr	r3, [r3, #24]
 800fe36:	f003 0303 	and.w	r3, r3, #3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 fa24 	bl	801028c <HAL_TIM_IC_CaptureCallback>
 800fe44:	e005      	b.n	800fe52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 fa16 	bl	8010278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 fa27 	bl	80102a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	f003 0304 	and.w	r3, r3, #4
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d122      	bne.n	800feac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	f003 0304 	and.w	r3, r3, #4
 800fe70:	2b04      	cmp	r3, #4
 800fe72:	d11b      	bne.n	800feac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f06f 0204 	mvn.w	r2, #4
 800fe7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2202      	movs	r2, #2
 800fe82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 f9fa 	bl	801028c <HAL_TIM_IC_CaptureCallback>
 800fe98:	e005      	b.n	800fea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f9ec 	bl	8010278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 f9fd 	bl	80102a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	f003 0308 	and.w	r3, r3, #8
 800feb6:	2b08      	cmp	r3, #8
 800feb8:	d122      	bne.n	800ff00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	f003 0308 	and.w	r3, r3, #8
 800fec4:	2b08      	cmp	r3, #8
 800fec6:	d11b      	bne.n	800ff00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f06f 0208 	mvn.w	r2, #8
 800fed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2204      	movs	r2, #4
 800fed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	69db      	ldr	r3, [r3, #28]
 800fede:	f003 0303 	and.w	r3, r3, #3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f9d0 	bl	801028c <HAL_TIM_IC_CaptureCallback>
 800feec:	e005      	b.n	800fefa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f9c2 	bl	8010278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f9d3 	bl	80102a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	f003 0310 	and.w	r3, r3, #16
 800ff0a:	2b10      	cmp	r3, #16
 800ff0c:	d122      	bne.n	800ff54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b10      	cmp	r3, #16
 800ff1a:	d11b      	bne.n	800ff54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f06f 0210 	mvn.w	r2, #16
 800ff24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2208      	movs	r2, #8
 800ff2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	69db      	ldr	r3, [r3, #28]
 800ff32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d003      	beq.n	800ff42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f9a6 	bl	801028c <HAL_TIM_IC_CaptureCallback>
 800ff40:	e005      	b.n	800ff4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f998 	bl	8010278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f9a9 	bl	80102a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	691b      	ldr	r3, [r3, #16]
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d10e      	bne.n	800ff80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d107      	bne.n	800ff80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f06f 0201 	mvn.w	r2, #1
 800ff78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f972 	bl	8010264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff8a:	2b80      	cmp	r3, #128	; 0x80
 800ff8c:	d10e      	bne.n	800ffac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff98:	2b80      	cmp	r3, #128	; 0x80
 800ff9a:	d107      	bne.n	800ffac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ffa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fdd6 	bl	8010b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffba:	d10e      	bne.n	800ffda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc6:	2b80      	cmp	r3, #128	; 0x80
 800ffc8:	d107      	bne.n	800ffda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ffd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fdc9 	bl	8010b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffe4:	2b40      	cmp	r3, #64	; 0x40
 800ffe6:	d10e      	bne.n	8010006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff2:	2b40      	cmp	r3, #64	; 0x40
 800fff4:	d107      	bne.n	8010006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 f957 	bl	80102b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	f003 0320 	and.w	r3, r3, #32
 8010010:	2b20      	cmp	r3, #32
 8010012:	d10e      	bne.n	8010032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	f003 0320 	and.w	r3, r3, #32
 801001e:	2b20      	cmp	r3, #32
 8010020:	d107      	bne.n	8010032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f06f 0220 	mvn.w	r2, #32
 801002a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 fd89 	bl	8010b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010032:	bf00      	nop
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010048:	2300      	movs	r3, #0
 801004a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010052:	2b01      	cmp	r3, #1
 8010054:	d101      	bne.n	801005a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010056:	2302      	movs	r3, #2
 8010058:	e0ff      	b.n	801025a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b14      	cmp	r3, #20
 8010066:	f200 80f0 	bhi.w	801024a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801006a:	a201      	add	r2, pc, #4	; (adr r2, 8010070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801006c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010070:	080100c5 	.word	0x080100c5
 8010074:	0801024b 	.word	0x0801024b
 8010078:	0801024b 	.word	0x0801024b
 801007c:	0801024b 	.word	0x0801024b
 8010080:	08010105 	.word	0x08010105
 8010084:	0801024b 	.word	0x0801024b
 8010088:	0801024b 	.word	0x0801024b
 801008c:	0801024b 	.word	0x0801024b
 8010090:	08010147 	.word	0x08010147
 8010094:	0801024b 	.word	0x0801024b
 8010098:	0801024b 	.word	0x0801024b
 801009c:	0801024b 	.word	0x0801024b
 80100a0:	08010187 	.word	0x08010187
 80100a4:	0801024b 	.word	0x0801024b
 80100a8:	0801024b 	.word	0x0801024b
 80100ac:	0801024b 	.word	0x0801024b
 80100b0:	080101c9 	.word	0x080101c9
 80100b4:	0801024b 	.word	0x0801024b
 80100b8:	0801024b 	.word	0x0801024b
 80100bc:	0801024b 	.word	0x0801024b
 80100c0:	08010209 	.word	0x08010209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68b9      	ldr	r1, [r7, #8]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 f9a2 	bl	8010414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	699a      	ldr	r2, [r3, #24]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f042 0208 	orr.w	r2, r2, #8
 80100de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	699a      	ldr	r2, [r3, #24]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f022 0204 	bic.w	r2, r2, #4
 80100ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	6999      	ldr	r1, [r3, #24]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	691a      	ldr	r2, [r3, #16]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	430a      	orrs	r2, r1
 8010100:	619a      	str	r2, [r3, #24]
      break;
 8010102:	e0a5      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	68b9      	ldr	r1, [r7, #8]
 801010a:	4618      	mov	r0, r3
 801010c:	f000 fa12 	bl	8010534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	699a      	ldr	r2, [r3, #24]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801011e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	699a      	ldr	r2, [r3, #24]
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801012e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6999      	ldr	r1, [r3, #24]
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	021a      	lsls	r2, r3, #8
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	430a      	orrs	r2, r1
 8010142:	619a      	str	r2, [r3, #24]
      break;
 8010144:	e084      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68b9      	ldr	r1, [r7, #8]
 801014c:	4618      	mov	r0, r3
 801014e:	f000 fa7b 	bl	8010648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69da      	ldr	r2, [r3, #28]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f042 0208 	orr.w	r2, r2, #8
 8010160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	69da      	ldr	r2, [r3, #28]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f022 0204 	bic.w	r2, r2, #4
 8010170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	69d9      	ldr	r1, [r3, #28]
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	691a      	ldr	r2, [r3, #16]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	430a      	orrs	r2, r1
 8010182:	61da      	str	r2, [r3, #28]
      break;
 8010184:	e064      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68b9      	ldr	r1, [r7, #8]
 801018c:	4618      	mov	r0, r3
 801018e:	f000 fae3 	bl	8010758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	69da      	ldr	r2, [r3, #28]
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	69da      	ldr	r2, [r3, #28]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	69d9      	ldr	r1, [r3, #28]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	021a      	lsls	r2, r3, #8
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	430a      	orrs	r2, r1
 80101c4:	61da      	str	r2, [r3, #28]
      break;
 80101c6:	e043      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68b9      	ldr	r1, [r7, #8]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 fb2c 	bl	801082c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f042 0208 	orr.w	r2, r2, #8
 80101e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f022 0204 	bic.w	r2, r2, #4
 80101f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	691a      	ldr	r2, [r3, #16]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	430a      	orrs	r2, r1
 8010204:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010206:	e023      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	4618      	mov	r0, r3
 8010210:	f000 fb70 	bl	80108f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	021a      	lsls	r2, r3, #8
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010248:	e002      	b.n	8010250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801024a:	2301      	movs	r3, #1
 801024c:	75fb      	strb	r3, [r7, #23]
      break;
 801024e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2200      	movs	r2, #0
 8010254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010258:	7dfb      	ldrb	r3, [r7, #23]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3718      	adds	r7, #24
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop

08010264 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80102bc:	bf00      	nop
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b085      	sub	sp, #20
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a44      	ldr	r2, [pc, #272]	; (80103ec <TIM_Base_SetConfig+0x124>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d013      	beq.n	8010308 <TIM_Base_SetConfig+0x40>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102e6:	d00f      	beq.n	8010308 <TIM_Base_SetConfig+0x40>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a41      	ldr	r2, [pc, #260]	; (80103f0 <TIM_Base_SetConfig+0x128>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d00b      	beq.n	8010308 <TIM_Base_SetConfig+0x40>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a40      	ldr	r2, [pc, #256]	; (80103f4 <TIM_Base_SetConfig+0x12c>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d007      	beq.n	8010308 <TIM_Base_SetConfig+0x40>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	4a3f      	ldr	r2, [pc, #252]	; (80103f8 <TIM_Base_SetConfig+0x130>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d003      	beq.n	8010308 <TIM_Base_SetConfig+0x40>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4a3e      	ldr	r2, [pc, #248]	; (80103fc <TIM_Base_SetConfig+0x134>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d108      	bne.n	801031a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801030e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4313      	orrs	r3, r2
 8010318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a33      	ldr	r2, [pc, #204]	; (80103ec <TIM_Base_SetConfig+0x124>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d027      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010328:	d023      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a30      	ldr	r2, [pc, #192]	; (80103f0 <TIM_Base_SetConfig+0x128>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d01f      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a2f      	ldr	r2, [pc, #188]	; (80103f4 <TIM_Base_SetConfig+0x12c>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d01b      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a2e      	ldr	r2, [pc, #184]	; (80103f8 <TIM_Base_SetConfig+0x130>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d017      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a2d      	ldr	r2, [pc, #180]	; (80103fc <TIM_Base_SetConfig+0x134>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d013      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4a2c      	ldr	r2, [pc, #176]	; (8010400 <TIM_Base_SetConfig+0x138>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d00f      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a2b      	ldr	r2, [pc, #172]	; (8010404 <TIM_Base_SetConfig+0x13c>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d00b      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a2a      	ldr	r2, [pc, #168]	; (8010408 <TIM_Base_SetConfig+0x140>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d007      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a29      	ldr	r2, [pc, #164]	; (801040c <TIM_Base_SetConfig+0x144>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d003      	beq.n	8010372 <TIM_Base_SetConfig+0xaa>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a28      	ldr	r2, [pc, #160]	; (8010410 <TIM_Base_SetConfig+0x148>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d108      	bne.n	8010384 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	4313      	orrs	r3, r2
 8010382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	695b      	ldr	r3, [r3, #20]
 801038e:	4313      	orrs	r3, r2
 8010390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	689a      	ldr	r2, [r3, #8]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a10      	ldr	r2, [pc, #64]	; (80103ec <TIM_Base_SetConfig+0x124>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d00f      	beq.n	80103d0 <TIM_Base_SetConfig+0x108>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a12      	ldr	r2, [pc, #72]	; (80103fc <TIM_Base_SetConfig+0x134>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00b      	beq.n	80103d0 <TIM_Base_SetConfig+0x108>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a11      	ldr	r2, [pc, #68]	; (8010400 <TIM_Base_SetConfig+0x138>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d007      	beq.n	80103d0 <TIM_Base_SetConfig+0x108>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a10      	ldr	r2, [pc, #64]	; (8010404 <TIM_Base_SetConfig+0x13c>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d003      	beq.n	80103d0 <TIM_Base_SetConfig+0x108>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a0f      	ldr	r2, [pc, #60]	; (8010408 <TIM_Base_SetConfig+0x140>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d103      	bne.n	80103d8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	691a      	ldr	r2, [r3, #16]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2201      	movs	r2, #1
 80103dc:	615a      	str	r2, [r3, #20]
}
 80103de:	bf00      	nop
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	40010000 	.word	0x40010000
 80103f0:	40000400 	.word	0x40000400
 80103f4:	40000800 	.word	0x40000800
 80103f8:	40000c00 	.word	0x40000c00
 80103fc:	40010400 	.word	0x40010400
 8010400:	40014000 	.word	0x40014000
 8010404:	40014400 	.word	0x40014400
 8010408:	40014800 	.word	0x40014800
 801040c:	4000e000 	.word	0x4000e000
 8010410:	4000e400 	.word	0x4000e400

08010414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010414:	b480      	push	{r7}
 8010416:	b087      	sub	sp, #28
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a1b      	ldr	r3, [r3, #32]
 8010422:	f023 0201 	bic.w	r2, r3, #1
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	4b37      	ldr	r3, [pc, #220]	; (801051c <TIM_OC1_SetConfig+0x108>)
 8010440:	4013      	ands	r3, r2
 8010442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f023 0303 	bic.w	r3, r3, #3
 801044a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	4313      	orrs	r3, r2
 8010454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	f023 0302 	bic.w	r3, r3, #2
 801045c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	4313      	orrs	r3, r2
 8010466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4a2d      	ldr	r2, [pc, #180]	; (8010520 <TIM_OC1_SetConfig+0x10c>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d00f      	beq.n	8010490 <TIM_OC1_SetConfig+0x7c>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a2c      	ldr	r2, [pc, #176]	; (8010524 <TIM_OC1_SetConfig+0x110>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d00b      	beq.n	8010490 <TIM_OC1_SetConfig+0x7c>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a2b      	ldr	r2, [pc, #172]	; (8010528 <TIM_OC1_SetConfig+0x114>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d007      	beq.n	8010490 <TIM_OC1_SetConfig+0x7c>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4a2a      	ldr	r2, [pc, #168]	; (801052c <TIM_OC1_SetConfig+0x118>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d003      	beq.n	8010490 <TIM_OC1_SetConfig+0x7c>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4a29      	ldr	r2, [pc, #164]	; (8010530 <TIM_OC1_SetConfig+0x11c>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d10c      	bne.n	80104aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	f023 0308 	bic.w	r3, r3, #8
 8010496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	697a      	ldr	r2, [r7, #20]
 801049e:	4313      	orrs	r3, r2
 80104a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f023 0304 	bic.w	r3, r3, #4
 80104a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a1c      	ldr	r2, [pc, #112]	; (8010520 <TIM_OC1_SetConfig+0x10c>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d00f      	beq.n	80104d2 <TIM_OC1_SetConfig+0xbe>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a1b      	ldr	r2, [pc, #108]	; (8010524 <TIM_OC1_SetConfig+0x110>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d00b      	beq.n	80104d2 <TIM_OC1_SetConfig+0xbe>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a1a      	ldr	r2, [pc, #104]	; (8010528 <TIM_OC1_SetConfig+0x114>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d007      	beq.n	80104d2 <TIM_OC1_SetConfig+0xbe>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a19      	ldr	r2, [pc, #100]	; (801052c <TIM_OC1_SetConfig+0x118>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d003      	beq.n	80104d2 <TIM_OC1_SetConfig+0xbe>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a18      	ldr	r2, [pc, #96]	; (8010530 <TIM_OC1_SetConfig+0x11c>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d111      	bne.n	80104f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	4313      	orrs	r3, r2
 80104ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	699b      	ldr	r3, [r3, #24]
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	697a      	ldr	r2, [r7, #20]
 801050e:	621a      	str	r2, [r3, #32]
}
 8010510:	bf00      	nop
 8010512:	371c      	adds	r7, #28
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr
 801051c:	fffeff8f 	.word	0xfffeff8f
 8010520:	40010000 	.word	0x40010000
 8010524:	40010400 	.word	0x40010400
 8010528:	40014000 	.word	0x40014000
 801052c:	40014400 	.word	0x40014400
 8010530:	40014800 	.word	0x40014800

08010534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010534:	b480      	push	{r7}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a1b      	ldr	r3, [r3, #32]
 8010542:	f023 0210 	bic.w	r2, r3, #16
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	4b34      	ldr	r3, [pc, #208]	; (8010630 <TIM_OC2_SetConfig+0xfc>)
 8010560:	4013      	ands	r3, r2
 8010562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801056a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	021b      	lsls	r3, r3, #8
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	4313      	orrs	r3, r2
 8010576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	f023 0320 	bic.w	r3, r3, #32
 801057e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	011b      	lsls	r3, r3, #4
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	4313      	orrs	r3, r2
 801058a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4a29      	ldr	r2, [pc, #164]	; (8010634 <TIM_OC2_SetConfig+0x100>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d003      	beq.n	801059c <TIM_OC2_SetConfig+0x68>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4a28      	ldr	r2, [pc, #160]	; (8010638 <TIM_OC2_SetConfig+0x104>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d10d      	bne.n	80105b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	011b      	lsls	r3, r3, #4
 80105aa:	697a      	ldr	r2, [r7, #20]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4a1e      	ldr	r2, [pc, #120]	; (8010634 <TIM_OC2_SetConfig+0x100>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d00f      	beq.n	80105e0 <TIM_OC2_SetConfig+0xac>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a1d      	ldr	r2, [pc, #116]	; (8010638 <TIM_OC2_SetConfig+0x104>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d00b      	beq.n	80105e0 <TIM_OC2_SetConfig+0xac>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a1c      	ldr	r2, [pc, #112]	; (801063c <TIM_OC2_SetConfig+0x108>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d007      	beq.n	80105e0 <TIM_OC2_SetConfig+0xac>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a1b      	ldr	r2, [pc, #108]	; (8010640 <TIM_OC2_SetConfig+0x10c>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d003      	beq.n	80105e0 <TIM_OC2_SetConfig+0xac>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a1a      	ldr	r2, [pc, #104]	; (8010644 <TIM_OC2_SetConfig+0x110>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d113      	bne.n	8010608 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	693a      	ldr	r2, [r7, #16]
 8010604:	4313      	orrs	r3, r2
 8010606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	685a      	ldr	r2, [r3, #4]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	621a      	str	r2, [r3, #32]
}
 8010622:	bf00      	nop
 8010624:	371c      	adds	r7, #28
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr
 801062e:	bf00      	nop
 8010630:	feff8fff 	.word	0xfeff8fff
 8010634:	40010000 	.word	0x40010000
 8010638:	40010400 	.word	0x40010400
 801063c:	40014000 	.word	0x40014000
 8010640:	40014400 	.word	0x40014400
 8010644:	40014800 	.word	0x40014800

08010648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010648:	b480      	push	{r7}
 801064a:	b087      	sub	sp, #28
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	69db      	ldr	r3, [r3, #28]
 801066e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	4b33      	ldr	r3, [pc, #204]	; (8010740 <TIM_OC3_SetConfig+0xf8>)
 8010674:	4013      	ands	r3, r2
 8010676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f023 0303 	bic.w	r3, r3, #3
 801067e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	4313      	orrs	r3, r2
 8010688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	689b      	ldr	r3, [r3, #8]
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	4313      	orrs	r3, r2
 801069c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a28      	ldr	r2, [pc, #160]	; (8010744 <TIM_OC3_SetConfig+0xfc>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d003      	beq.n	80106ae <TIM_OC3_SetConfig+0x66>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a27      	ldr	r2, [pc, #156]	; (8010748 <TIM_OC3_SetConfig+0x100>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d10d      	bne.n	80106ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	4313      	orrs	r3, r2
 80106c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a1d      	ldr	r2, [pc, #116]	; (8010744 <TIM_OC3_SetConfig+0xfc>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00f      	beq.n	80106f2 <TIM_OC3_SetConfig+0xaa>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a1c      	ldr	r2, [pc, #112]	; (8010748 <TIM_OC3_SetConfig+0x100>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d00b      	beq.n	80106f2 <TIM_OC3_SetConfig+0xaa>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a1b      	ldr	r2, [pc, #108]	; (801074c <TIM_OC3_SetConfig+0x104>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d007      	beq.n	80106f2 <TIM_OC3_SetConfig+0xaa>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a1a      	ldr	r2, [pc, #104]	; (8010750 <TIM_OC3_SetConfig+0x108>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d003      	beq.n	80106f2 <TIM_OC3_SetConfig+0xaa>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a19      	ldr	r2, [pc, #100]	; (8010754 <TIM_OC3_SetConfig+0x10c>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d113      	bne.n	801071a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	695b      	ldr	r3, [r3, #20]
 8010706:	011b      	lsls	r3, r3, #4
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	4313      	orrs	r3, r2
 801070c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	011b      	lsls	r3, r3, #4
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	4313      	orrs	r3, r2
 8010718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	693a      	ldr	r2, [r7, #16]
 801071e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	685a      	ldr	r2, [r3, #4]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	621a      	str	r2, [r3, #32]
}
 8010734:	bf00      	nop
 8010736:	371c      	adds	r7, #28
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr
 8010740:	fffeff8f 	.word	0xfffeff8f
 8010744:	40010000 	.word	0x40010000
 8010748:	40010400 	.word	0x40010400
 801074c:	40014000 	.word	0x40014000
 8010750:	40014400 	.word	0x40014400
 8010754:	40014800 	.word	0x40014800

08010758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010758:	b480      	push	{r7}
 801075a:	b087      	sub	sp, #28
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a1b      	ldr	r3, [r3, #32]
 8010766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a1b      	ldr	r3, [r3, #32]
 8010772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	69db      	ldr	r3, [r3, #28]
 801077e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	4b24      	ldr	r3, [pc, #144]	; (8010814 <TIM_OC4_SetConfig+0xbc>)
 8010784:	4013      	ands	r3, r2
 8010786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801078e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	021b      	lsls	r3, r3, #8
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	4313      	orrs	r3, r2
 801079a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	031b      	lsls	r3, r3, #12
 80107aa:	693a      	ldr	r2, [r7, #16]
 80107ac:	4313      	orrs	r3, r2
 80107ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4a19      	ldr	r2, [pc, #100]	; (8010818 <TIM_OC4_SetConfig+0xc0>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d00f      	beq.n	80107d8 <TIM_OC4_SetConfig+0x80>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a18      	ldr	r2, [pc, #96]	; (801081c <TIM_OC4_SetConfig+0xc4>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d00b      	beq.n	80107d8 <TIM_OC4_SetConfig+0x80>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a17      	ldr	r2, [pc, #92]	; (8010820 <TIM_OC4_SetConfig+0xc8>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d007      	beq.n	80107d8 <TIM_OC4_SetConfig+0x80>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a16      	ldr	r2, [pc, #88]	; (8010824 <TIM_OC4_SetConfig+0xcc>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d003      	beq.n	80107d8 <TIM_OC4_SetConfig+0x80>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a15      	ldr	r2, [pc, #84]	; (8010828 <TIM_OC4_SetConfig+0xd0>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d109      	bne.n	80107ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	695b      	ldr	r3, [r3, #20]
 80107e4:	019b      	lsls	r3, r3, #6
 80107e6:	697a      	ldr	r2, [r7, #20]
 80107e8:	4313      	orrs	r3, r2
 80107ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	68fa      	ldr	r2, [r7, #12]
 80107f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	693a      	ldr	r2, [r7, #16]
 8010804:	621a      	str	r2, [r3, #32]
}
 8010806:	bf00      	nop
 8010808:	371c      	adds	r7, #28
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	feff8fff 	.word	0xfeff8fff
 8010818:	40010000 	.word	0x40010000
 801081c:	40010400 	.word	0x40010400
 8010820:	40014000 	.word	0x40014000
 8010824:	40014400 	.word	0x40014400
 8010828:	40014800 	.word	0x40014800

0801082c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801082c:	b480      	push	{r7}
 801082e:	b087      	sub	sp, #28
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6a1b      	ldr	r3, [r3, #32]
 8010846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4b21      	ldr	r3, [pc, #132]	; (80108dc <TIM_OC5_SetConfig+0xb0>)
 8010858:	4013      	ands	r3, r2
 801085a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	4313      	orrs	r3, r2
 8010864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801086c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	041b      	lsls	r3, r3, #16
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	4313      	orrs	r3, r2
 8010878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a18      	ldr	r2, [pc, #96]	; (80108e0 <TIM_OC5_SetConfig+0xb4>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d00f      	beq.n	80108a2 <TIM_OC5_SetConfig+0x76>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a17      	ldr	r2, [pc, #92]	; (80108e4 <TIM_OC5_SetConfig+0xb8>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d00b      	beq.n	80108a2 <TIM_OC5_SetConfig+0x76>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a16      	ldr	r2, [pc, #88]	; (80108e8 <TIM_OC5_SetConfig+0xbc>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d007      	beq.n	80108a2 <TIM_OC5_SetConfig+0x76>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4a15      	ldr	r2, [pc, #84]	; (80108ec <TIM_OC5_SetConfig+0xc0>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d003      	beq.n	80108a2 <TIM_OC5_SetConfig+0x76>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4a14      	ldr	r2, [pc, #80]	; (80108f0 <TIM_OC5_SetConfig+0xc4>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d109      	bne.n	80108b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	695b      	ldr	r3, [r3, #20]
 80108ae:	021b      	lsls	r3, r3, #8
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	4313      	orrs	r3, r2
 80108b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	693a      	ldr	r2, [r7, #16]
 80108ce:	621a      	str	r2, [r3, #32]
}
 80108d0:	bf00      	nop
 80108d2:	371c      	adds	r7, #28
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	fffeff8f 	.word	0xfffeff8f
 80108e0:	40010000 	.word	0x40010000
 80108e4:	40010400 	.word	0x40010400
 80108e8:	40014000 	.word	0x40014000
 80108ec:	40014400 	.word	0x40014400
 80108f0:	40014800 	.word	0x40014800

080108f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b087      	sub	sp, #28
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a1b      	ldr	r3, [r3, #32]
 8010902:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801091a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	4b22      	ldr	r3, [pc, #136]	; (80109a8 <TIM_OC6_SetConfig+0xb4>)
 8010920:	4013      	ands	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	021b      	lsls	r3, r3, #8
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	4313      	orrs	r3, r2
 801092e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	051b      	lsls	r3, r3, #20
 801093e:	693a      	ldr	r2, [r7, #16]
 8010940:	4313      	orrs	r3, r2
 8010942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a19      	ldr	r2, [pc, #100]	; (80109ac <TIM_OC6_SetConfig+0xb8>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d00f      	beq.n	801096c <TIM_OC6_SetConfig+0x78>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a18      	ldr	r2, [pc, #96]	; (80109b0 <TIM_OC6_SetConfig+0xbc>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d00b      	beq.n	801096c <TIM_OC6_SetConfig+0x78>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a17      	ldr	r2, [pc, #92]	; (80109b4 <TIM_OC6_SetConfig+0xc0>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d007      	beq.n	801096c <TIM_OC6_SetConfig+0x78>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	4a16      	ldr	r2, [pc, #88]	; (80109b8 <TIM_OC6_SetConfig+0xc4>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d003      	beq.n	801096c <TIM_OC6_SetConfig+0x78>
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4a15      	ldr	r2, [pc, #84]	; (80109bc <TIM_OC6_SetConfig+0xc8>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d109      	bne.n	8010980 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	695b      	ldr	r3, [r3, #20]
 8010978:	029b      	lsls	r3, r3, #10
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	4313      	orrs	r3, r2
 801097e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	621a      	str	r2, [r3, #32]
}
 801099a:	bf00      	nop
 801099c:	371c      	adds	r7, #28
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	feff8fff 	.word	0xfeff8fff
 80109ac:	40010000 	.word	0x40010000
 80109b0:	40010400 	.word	0x40010400
 80109b4:	40014000 	.word	0x40014000
 80109b8:	40014400 	.word	0x40014400
 80109bc:	40014800 	.word	0x40014800

080109c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	f003 031f 	and.w	r3, r3, #31
 80109d2:	2201      	movs	r2, #1
 80109d4:	fa02 f303 	lsl.w	r3, r2, r3
 80109d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6a1a      	ldr	r2, [r3, #32]
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	43db      	mvns	r3, r3
 80109e2:	401a      	ands	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6a1a      	ldr	r2, [r3, #32]
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	f003 031f 	and.w	r3, r3, #31
 80109f2:	6879      	ldr	r1, [r7, #4]
 80109f4:	fa01 f303 	lsl.w	r3, r1, r3
 80109f8:	431a      	orrs	r2, r3
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	621a      	str	r2, [r3, #32]
}
 80109fe:	bf00      	nop
 8010a00:	371c      	adds	r7, #28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
	...

08010a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d101      	bne.n	8010a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a20:	2302      	movs	r3, #2
 8010a22:	e077      	b.n	8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2202      	movs	r2, #2
 8010a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a35      	ldr	r2, [pc, #212]	; (8010b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d004      	beq.n	8010a58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a34      	ldr	r2, [pc, #208]	; (8010b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d108      	bne.n	8010a6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	4313      	orrs	r3, r2
 8010a68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a25      	ldr	r2, [pc, #148]	; (8010b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d02c      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a96:	d027      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a22      	ldr	r2, [pc, #136]	; (8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d022      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4a21      	ldr	r2, [pc, #132]	; (8010b2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d01d      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a1f      	ldr	r2, [pc, #124]	; (8010b30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d018      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a1a      	ldr	r2, [pc, #104]	; (8010b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d013      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a1b      	ldr	r2, [pc, #108]	; (8010b34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d00e      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a1a      	ldr	r2, [pc, #104]	; (8010b38 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d009      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a18      	ldr	r2, [pc, #96]	; (8010b3c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d004      	beq.n	8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a17      	ldr	r2, [pc, #92]	; (8010b40 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d10c      	bne.n	8010b02 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2201      	movs	r2, #1
 8010b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b12:	2300      	movs	r3, #0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr
 8010b20:	40010000 	.word	0x40010000
 8010b24:	40010400 	.word	0x40010400
 8010b28:	40000400 	.word	0x40000400
 8010b2c:	40000800 	.word	0x40000800
 8010b30:	40000c00 	.word	0x40000c00
 8010b34:	40001800 	.word	0x40001800
 8010b38:	40014000 	.word	0x40014000
 8010b3c:	4000e000 	.word	0x4000e000
 8010b40:	4000e400 	.word	0x4000e400

08010b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b60:	bf00      	nop
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e042      	b.n	8010c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d106      	bne.n	8010baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7f3 fae7 	bl	8004178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2224      	movs	r2, #36	; 0x24
 8010bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f022 0201 	bic.w	r2, r2, #1
 8010bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f82c 	bl	8010c20 <UART_SetConfig>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d101      	bne.n	8010bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e022      	b.n	8010c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d002      	beq.n	8010be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 fe8c 	bl	80118f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	685a      	ldr	r2, [r3, #4]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	689a      	ldr	r2, [r3, #8]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f042 0201 	orr.w	r2, r2, #1
 8010c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 ff13 	bl	8011a3c <UART_CheckIdleState>
 8010c16:	4603      	mov	r3, r0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c24:	b092      	sub	sp, #72	; 0x48
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	689a      	ldr	r2, [r3, #8]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	691b      	ldr	r3, [r3, #16]
 8010c38:	431a      	orrs	r2, r3
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	695b      	ldr	r3, [r3, #20]
 8010c3e:	431a      	orrs	r2, r3
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	69db      	ldr	r3, [r3, #28]
 8010c44:	4313      	orrs	r3, r2
 8010c46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	4bbe      	ldr	r3, [pc, #760]	; (8010f48 <UART_SetConfig+0x328>)
 8010c50:	4013      	ands	r3, r2
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	6812      	ldr	r2, [r2, #0]
 8010c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c58:	430b      	orrs	r3, r1
 8010c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	68da      	ldr	r2, [r3, #12]
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	430a      	orrs	r2, r1
 8010c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4ab3      	ldr	r2, [pc, #716]	; (8010f4c <UART_SetConfig+0x32c>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d004      	beq.n	8010c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	689a      	ldr	r2, [r3, #8]
 8010c92:	4baf      	ldr	r3, [pc, #700]	; (8010f50 <UART_SetConfig+0x330>)
 8010c94:	4013      	ands	r3, r2
 8010c96:	697a      	ldr	r2, [r7, #20]
 8010c98:	6812      	ldr	r2, [r2, #0]
 8010c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c9c:	430b      	orrs	r3, r1
 8010c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca6:	f023 010f 	bic.w	r1, r3, #15
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	430a      	orrs	r2, r1
 8010cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4aa6      	ldr	r2, [pc, #664]	; (8010f54 <UART_SetConfig+0x334>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d177      	bne.n	8010db0 <UART_SetConfig+0x190>
 8010cc0:	4ba5      	ldr	r3, [pc, #660]	; (8010f58 <UART_SetConfig+0x338>)
 8010cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cc8:	2b28      	cmp	r3, #40	; 0x28
 8010cca:	d86d      	bhi.n	8010da8 <UART_SetConfig+0x188>
 8010ccc:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <UART_SetConfig+0xb4>)
 8010cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd2:	bf00      	nop
 8010cd4:	08010d79 	.word	0x08010d79
 8010cd8:	08010da9 	.word	0x08010da9
 8010cdc:	08010da9 	.word	0x08010da9
 8010ce0:	08010da9 	.word	0x08010da9
 8010ce4:	08010da9 	.word	0x08010da9
 8010ce8:	08010da9 	.word	0x08010da9
 8010cec:	08010da9 	.word	0x08010da9
 8010cf0:	08010da9 	.word	0x08010da9
 8010cf4:	08010d81 	.word	0x08010d81
 8010cf8:	08010da9 	.word	0x08010da9
 8010cfc:	08010da9 	.word	0x08010da9
 8010d00:	08010da9 	.word	0x08010da9
 8010d04:	08010da9 	.word	0x08010da9
 8010d08:	08010da9 	.word	0x08010da9
 8010d0c:	08010da9 	.word	0x08010da9
 8010d10:	08010da9 	.word	0x08010da9
 8010d14:	08010d89 	.word	0x08010d89
 8010d18:	08010da9 	.word	0x08010da9
 8010d1c:	08010da9 	.word	0x08010da9
 8010d20:	08010da9 	.word	0x08010da9
 8010d24:	08010da9 	.word	0x08010da9
 8010d28:	08010da9 	.word	0x08010da9
 8010d2c:	08010da9 	.word	0x08010da9
 8010d30:	08010da9 	.word	0x08010da9
 8010d34:	08010d91 	.word	0x08010d91
 8010d38:	08010da9 	.word	0x08010da9
 8010d3c:	08010da9 	.word	0x08010da9
 8010d40:	08010da9 	.word	0x08010da9
 8010d44:	08010da9 	.word	0x08010da9
 8010d48:	08010da9 	.word	0x08010da9
 8010d4c:	08010da9 	.word	0x08010da9
 8010d50:	08010da9 	.word	0x08010da9
 8010d54:	08010d99 	.word	0x08010d99
 8010d58:	08010da9 	.word	0x08010da9
 8010d5c:	08010da9 	.word	0x08010da9
 8010d60:	08010da9 	.word	0x08010da9
 8010d64:	08010da9 	.word	0x08010da9
 8010d68:	08010da9 	.word	0x08010da9
 8010d6c:	08010da9 	.word	0x08010da9
 8010d70:	08010da9 	.word	0x08010da9
 8010d74:	08010da1 	.word	0x08010da1
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e326      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010d80:	2304      	movs	r3, #4
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e322      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010d88:	2308      	movs	r3, #8
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e31e      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010d90:	2310      	movs	r3, #16
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e31a      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010d98:	2320      	movs	r3, #32
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e316      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010da0:	2340      	movs	r3, #64	; 0x40
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e312      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010da8:	2380      	movs	r3, #128	; 0x80
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dae:	e30e      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a69      	ldr	r2, [pc, #420]	; (8010f5c <UART_SetConfig+0x33c>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d130      	bne.n	8010e1c <UART_SetConfig+0x1fc>
 8010dba:	4b67      	ldr	r3, [pc, #412]	; (8010f58 <UART_SetConfig+0x338>)
 8010dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dbe:	f003 0307 	and.w	r3, r3, #7
 8010dc2:	2b05      	cmp	r3, #5
 8010dc4:	d826      	bhi.n	8010e14 <UART_SetConfig+0x1f4>
 8010dc6:	a201      	add	r2, pc, #4	; (adr r2, 8010dcc <UART_SetConfig+0x1ac>)
 8010dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dcc:	08010de5 	.word	0x08010de5
 8010dd0:	08010ded 	.word	0x08010ded
 8010dd4:	08010df5 	.word	0x08010df5
 8010dd8:	08010dfd 	.word	0x08010dfd
 8010ddc:	08010e05 	.word	0x08010e05
 8010de0:	08010e0d 	.word	0x08010e0d
 8010de4:	2300      	movs	r3, #0
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e2f0      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010dec:	2304      	movs	r3, #4
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e2ec      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010df4:	2308      	movs	r3, #8
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e2e8      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010dfc:	2310      	movs	r3, #16
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e2e4      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e04:	2320      	movs	r3, #32
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e2e0      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e0c:	2340      	movs	r3, #64	; 0x40
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e2dc      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e14:	2380      	movs	r3, #128	; 0x80
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e2d8      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a4f      	ldr	r2, [pc, #316]	; (8010f60 <UART_SetConfig+0x340>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d130      	bne.n	8010e88 <UART_SetConfig+0x268>
 8010e26:	4b4c      	ldr	r3, [pc, #304]	; (8010f58 <UART_SetConfig+0x338>)
 8010e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e2a:	f003 0307 	and.w	r3, r3, #7
 8010e2e:	2b05      	cmp	r3, #5
 8010e30:	d826      	bhi.n	8010e80 <UART_SetConfig+0x260>
 8010e32:	a201      	add	r2, pc, #4	; (adr r2, 8010e38 <UART_SetConfig+0x218>)
 8010e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e38:	08010e51 	.word	0x08010e51
 8010e3c:	08010e59 	.word	0x08010e59
 8010e40:	08010e61 	.word	0x08010e61
 8010e44:	08010e69 	.word	0x08010e69
 8010e48:	08010e71 	.word	0x08010e71
 8010e4c:	08010e79 	.word	0x08010e79
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e2ba      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e2b6      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e60:	2308      	movs	r3, #8
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e2b2      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e68:	2310      	movs	r3, #16
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e2ae      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e70:	2320      	movs	r3, #32
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e2aa      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e78:	2340      	movs	r3, #64	; 0x40
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e2a6      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e80:	2380      	movs	r3, #128	; 0x80
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e2a2      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a35      	ldr	r2, [pc, #212]	; (8010f64 <UART_SetConfig+0x344>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d130      	bne.n	8010ef4 <UART_SetConfig+0x2d4>
 8010e92:	4b31      	ldr	r3, [pc, #196]	; (8010f58 <UART_SetConfig+0x338>)
 8010e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e96:	f003 0307 	and.w	r3, r3, #7
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d826      	bhi.n	8010eec <UART_SetConfig+0x2cc>
 8010e9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <UART_SetConfig+0x284>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010ebd 	.word	0x08010ebd
 8010ea8:	08010ec5 	.word	0x08010ec5
 8010eac:	08010ecd 	.word	0x08010ecd
 8010eb0:	08010ed5 	.word	0x08010ed5
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010ee5 	.word	0x08010ee5
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e284      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e280      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010ecc:	2308      	movs	r3, #8
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e27c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010ed4:	2310      	movs	r3, #16
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e278      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010edc:	2320      	movs	r3, #32
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e274      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010ee4:	2340      	movs	r3, #64	; 0x40
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e270      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010eec:	2380      	movs	r3, #128	; 0x80
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e26c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a1b      	ldr	r2, [pc, #108]	; (8010f68 <UART_SetConfig+0x348>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d142      	bne.n	8010f84 <UART_SetConfig+0x364>
 8010efe:	4b16      	ldr	r3, [pc, #88]	; (8010f58 <UART_SetConfig+0x338>)
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	f003 0307 	and.w	r3, r3, #7
 8010f06:	2b05      	cmp	r3, #5
 8010f08:	d838      	bhi.n	8010f7c <UART_SetConfig+0x35c>
 8010f0a:	a201      	add	r2, pc, #4	; (adr r2, 8010f10 <UART_SetConfig+0x2f0>)
 8010f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f10:	08010f29 	.word	0x08010f29
 8010f14:	08010f31 	.word	0x08010f31
 8010f18:	08010f39 	.word	0x08010f39
 8010f1c:	08010f41 	.word	0x08010f41
 8010f20:	08010f6d 	.word	0x08010f6d
 8010f24:	08010f75 	.word	0x08010f75
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e24e      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f30:	2304      	movs	r3, #4
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e24a      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f38:	2308      	movs	r3, #8
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e246      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f40:	2310      	movs	r3, #16
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e242      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f48:	cfff69f3 	.word	0xcfff69f3
 8010f4c:	58000c00 	.word	0x58000c00
 8010f50:	11fff4ff 	.word	0x11fff4ff
 8010f54:	40011000 	.word	0x40011000
 8010f58:	58024400 	.word	0x58024400
 8010f5c:	40004400 	.word	0x40004400
 8010f60:	40004800 	.word	0x40004800
 8010f64:	40004c00 	.word	0x40004c00
 8010f68:	40005000 	.word	0x40005000
 8010f6c:	2320      	movs	r3, #32
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e22c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f74:	2340      	movs	r3, #64	; 0x40
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e228      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f7c:	2380      	movs	r3, #128	; 0x80
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e224      	b.n	80113ce <UART_SetConfig+0x7ae>
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4ab1      	ldr	r2, [pc, #708]	; (8011250 <UART_SetConfig+0x630>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d176      	bne.n	801107c <UART_SetConfig+0x45c>
 8010f8e:	4bb1      	ldr	r3, [pc, #708]	; (8011254 <UART_SetConfig+0x634>)
 8010f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f96:	2b28      	cmp	r3, #40	; 0x28
 8010f98:	d86c      	bhi.n	8011074 <UART_SetConfig+0x454>
 8010f9a:	a201      	add	r2, pc, #4	; (adr r2, 8010fa0 <UART_SetConfig+0x380>)
 8010f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa0:	08011045 	.word	0x08011045
 8010fa4:	08011075 	.word	0x08011075
 8010fa8:	08011075 	.word	0x08011075
 8010fac:	08011075 	.word	0x08011075
 8010fb0:	08011075 	.word	0x08011075
 8010fb4:	08011075 	.word	0x08011075
 8010fb8:	08011075 	.word	0x08011075
 8010fbc:	08011075 	.word	0x08011075
 8010fc0:	0801104d 	.word	0x0801104d
 8010fc4:	08011075 	.word	0x08011075
 8010fc8:	08011075 	.word	0x08011075
 8010fcc:	08011075 	.word	0x08011075
 8010fd0:	08011075 	.word	0x08011075
 8010fd4:	08011075 	.word	0x08011075
 8010fd8:	08011075 	.word	0x08011075
 8010fdc:	08011075 	.word	0x08011075
 8010fe0:	08011055 	.word	0x08011055
 8010fe4:	08011075 	.word	0x08011075
 8010fe8:	08011075 	.word	0x08011075
 8010fec:	08011075 	.word	0x08011075
 8010ff0:	08011075 	.word	0x08011075
 8010ff4:	08011075 	.word	0x08011075
 8010ff8:	08011075 	.word	0x08011075
 8010ffc:	08011075 	.word	0x08011075
 8011000:	0801105d 	.word	0x0801105d
 8011004:	08011075 	.word	0x08011075
 8011008:	08011075 	.word	0x08011075
 801100c:	08011075 	.word	0x08011075
 8011010:	08011075 	.word	0x08011075
 8011014:	08011075 	.word	0x08011075
 8011018:	08011075 	.word	0x08011075
 801101c:	08011075 	.word	0x08011075
 8011020:	08011065 	.word	0x08011065
 8011024:	08011075 	.word	0x08011075
 8011028:	08011075 	.word	0x08011075
 801102c:	08011075 	.word	0x08011075
 8011030:	08011075 	.word	0x08011075
 8011034:	08011075 	.word	0x08011075
 8011038:	08011075 	.word	0x08011075
 801103c:	08011075 	.word	0x08011075
 8011040:	0801106d 	.word	0x0801106d
 8011044:	2301      	movs	r3, #1
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e1c0      	b.n	80113ce <UART_SetConfig+0x7ae>
 801104c:	2304      	movs	r3, #4
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e1bc      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011054:	2308      	movs	r3, #8
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e1b8      	b.n	80113ce <UART_SetConfig+0x7ae>
 801105c:	2310      	movs	r3, #16
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e1b4      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011064:	2320      	movs	r3, #32
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e1b0      	b.n	80113ce <UART_SetConfig+0x7ae>
 801106c:	2340      	movs	r3, #64	; 0x40
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e1ac      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011074:	2380      	movs	r3, #128	; 0x80
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e1a8      	b.n	80113ce <UART_SetConfig+0x7ae>
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4a75      	ldr	r2, [pc, #468]	; (8011258 <UART_SetConfig+0x638>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d130      	bne.n	80110e8 <UART_SetConfig+0x4c8>
 8011086:	4b73      	ldr	r3, [pc, #460]	; (8011254 <UART_SetConfig+0x634>)
 8011088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	2b05      	cmp	r3, #5
 8011090:	d826      	bhi.n	80110e0 <UART_SetConfig+0x4c0>
 8011092:	a201      	add	r2, pc, #4	; (adr r2, 8011098 <UART_SetConfig+0x478>)
 8011094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011098:	080110b1 	.word	0x080110b1
 801109c:	080110b9 	.word	0x080110b9
 80110a0:	080110c1 	.word	0x080110c1
 80110a4:	080110c9 	.word	0x080110c9
 80110a8:	080110d1 	.word	0x080110d1
 80110ac:	080110d9 	.word	0x080110d9
 80110b0:	2300      	movs	r3, #0
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e18a      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110b8:	2304      	movs	r3, #4
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e186      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110c0:	2308      	movs	r3, #8
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e182      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110c8:	2310      	movs	r3, #16
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e17e      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110d0:	2320      	movs	r3, #32
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e17a      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110d8:	2340      	movs	r3, #64	; 0x40
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e176      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110e0:	2380      	movs	r3, #128	; 0x80
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e172      	b.n	80113ce <UART_SetConfig+0x7ae>
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a5b      	ldr	r2, [pc, #364]	; (801125c <UART_SetConfig+0x63c>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d130      	bne.n	8011154 <UART_SetConfig+0x534>
 80110f2:	4b58      	ldr	r3, [pc, #352]	; (8011254 <UART_SetConfig+0x634>)
 80110f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110f6:	f003 0307 	and.w	r3, r3, #7
 80110fa:	2b05      	cmp	r3, #5
 80110fc:	d826      	bhi.n	801114c <UART_SetConfig+0x52c>
 80110fe:	a201      	add	r2, pc, #4	; (adr r2, 8011104 <UART_SetConfig+0x4e4>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	0801111d 	.word	0x0801111d
 8011108:	08011125 	.word	0x08011125
 801110c:	0801112d 	.word	0x0801112d
 8011110:	08011135 	.word	0x08011135
 8011114:	0801113d 	.word	0x0801113d
 8011118:	08011145 	.word	0x08011145
 801111c:	2300      	movs	r3, #0
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e154      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011124:	2304      	movs	r3, #4
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e150      	b.n	80113ce <UART_SetConfig+0x7ae>
 801112c:	2308      	movs	r3, #8
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e14c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011134:	2310      	movs	r3, #16
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e148      	b.n	80113ce <UART_SetConfig+0x7ae>
 801113c:	2320      	movs	r3, #32
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e144      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011144:	2340      	movs	r3, #64	; 0x40
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e140      	b.n	80113ce <UART_SetConfig+0x7ae>
 801114c:	2380      	movs	r3, #128	; 0x80
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e13c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4a41      	ldr	r2, [pc, #260]	; (8011260 <UART_SetConfig+0x640>)
 801115a:	4293      	cmp	r3, r2
 801115c:	f040 8082 	bne.w	8011264 <UART_SetConfig+0x644>
 8011160:	4b3c      	ldr	r3, [pc, #240]	; (8011254 <UART_SetConfig+0x634>)
 8011162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011168:	2b28      	cmp	r3, #40	; 0x28
 801116a:	d86d      	bhi.n	8011248 <UART_SetConfig+0x628>
 801116c:	a201      	add	r2, pc, #4	; (adr r2, 8011174 <UART_SetConfig+0x554>)
 801116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011172:	bf00      	nop
 8011174:	08011219 	.word	0x08011219
 8011178:	08011249 	.word	0x08011249
 801117c:	08011249 	.word	0x08011249
 8011180:	08011249 	.word	0x08011249
 8011184:	08011249 	.word	0x08011249
 8011188:	08011249 	.word	0x08011249
 801118c:	08011249 	.word	0x08011249
 8011190:	08011249 	.word	0x08011249
 8011194:	08011221 	.word	0x08011221
 8011198:	08011249 	.word	0x08011249
 801119c:	08011249 	.word	0x08011249
 80111a0:	08011249 	.word	0x08011249
 80111a4:	08011249 	.word	0x08011249
 80111a8:	08011249 	.word	0x08011249
 80111ac:	08011249 	.word	0x08011249
 80111b0:	08011249 	.word	0x08011249
 80111b4:	08011229 	.word	0x08011229
 80111b8:	08011249 	.word	0x08011249
 80111bc:	08011249 	.word	0x08011249
 80111c0:	08011249 	.word	0x08011249
 80111c4:	08011249 	.word	0x08011249
 80111c8:	08011249 	.word	0x08011249
 80111cc:	08011249 	.word	0x08011249
 80111d0:	08011249 	.word	0x08011249
 80111d4:	08011231 	.word	0x08011231
 80111d8:	08011249 	.word	0x08011249
 80111dc:	08011249 	.word	0x08011249
 80111e0:	08011249 	.word	0x08011249
 80111e4:	08011249 	.word	0x08011249
 80111e8:	08011249 	.word	0x08011249
 80111ec:	08011249 	.word	0x08011249
 80111f0:	08011249 	.word	0x08011249
 80111f4:	08011239 	.word	0x08011239
 80111f8:	08011249 	.word	0x08011249
 80111fc:	08011249 	.word	0x08011249
 8011200:	08011249 	.word	0x08011249
 8011204:	08011249 	.word	0x08011249
 8011208:	08011249 	.word	0x08011249
 801120c:	08011249 	.word	0x08011249
 8011210:	08011249 	.word	0x08011249
 8011214:	08011241 	.word	0x08011241
 8011218:	2301      	movs	r3, #1
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e0d6      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011220:	2304      	movs	r3, #4
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e0d2      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011228:	2308      	movs	r3, #8
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e0ce      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011230:	2310      	movs	r3, #16
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e0ca      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011238:	2320      	movs	r3, #32
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e0c6      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011240:	2340      	movs	r3, #64	; 0x40
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e0c2      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011248:	2380      	movs	r3, #128	; 0x80
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124e:	e0be      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011250:	40011400 	.word	0x40011400
 8011254:	58024400 	.word	0x58024400
 8011258:	40007800 	.word	0x40007800
 801125c:	40007c00 	.word	0x40007c00
 8011260:	40011800 	.word	0x40011800
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4aad      	ldr	r2, [pc, #692]	; (8011520 <UART_SetConfig+0x900>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d176      	bne.n	801135c <UART_SetConfig+0x73c>
 801126e:	4bad      	ldr	r3, [pc, #692]	; (8011524 <UART_SetConfig+0x904>)
 8011270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011276:	2b28      	cmp	r3, #40	; 0x28
 8011278:	d86c      	bhi.n	8011354 <UART_SetConfig+0x734>
 801127a:	a201      	add	r2, pc, #4	; (adr r2, 8011280 <UART_SetConfig+0x660>)
 801127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011280:	08011325 	.word	0x08011325
 8011284:	08011355 	.word	0x08011355
 8011288:	08011355 	.word	0x08011355
 801128c:	08011355 	.word	0x08011355
 8011290:	08011355 	.word	0x08011355
 8011294:	08011355 	.word	0x08011355
 8011298:	08011355 	.word	0x08011355
 801129c:	08011355 	.word	0x08011355
 80112a0:	0801132d 	.word	0x0801132d
 80112a4:	08011355 	.word	0x08011355
 80112a8:	08011355 	.word	0x08011355
 80112ac:	08011355 	.word	0x08011355
 80112b0:	08011355 	.word	0x08011355
 80112b4:	08011355 	.word	0x08011355
 80112b8:	08011355 	.word	0x08011355
 80112bc:	08011355 	.word	0x08011355
 80112c0:	08011335 	.word	0x08011335
 80112c4:	08011355 	.word	0x08011355
 80112c8:	08011355 	.word	0x08011355
 80112cc:	08011355 	.word	0x08011355
 80112d0:	08011355 	.word	0x08011355
 80112d4:	08011355 	.word	0x08011355
 80112d8:	08011355 	.word	0x08011355
 80112dc:	08011355 	.word	0x08011355
 80112e0:	0801133d 	.word	0x0801133d
 80112e4:	08011355 	.word	0x08011355
 80112e8:	08011355 	.word	0x08011355
 80112ec:	08011355 	.word	0x08011355
 80112f0:	08011355 	.word	0x08011355
 80112f4:	08011355 	.word	0x08011355
 80112f8:	08011355 	.word	0x08011355
 80112fc:	08011355 	.word	0x08011355
 8011300:	08011345 	.word	0x08011345
 8011304:	08011355 	.word	0x08011355
 8011308:	08011355 	.word	0x08011355
 801130c:	08011355 	.word	0x08011355
 8011310:	08011355 	.word	0x08011355
 8011314:	08011355 	.word	0x08011355
 8011318:	08011355 	.word	0x08011355
 801131c:	08011355 	.word	0x08011355
 8011320:	0801134d 	.word	0x0801134d
 8011324:	2301      	movs	r3, #1
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132a:	e050      	b.n	80113ce <UART_SetConfig+0x7ae>
 801132c:	2304      	movs	r3, #4
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011332:	e04c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011334:	2308      	movs	r3, #8
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e048      	b.n	80113ce <UART_SetConfig+0x7ae>
 801133c:	2310      	movs	r3, #16
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e044      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011344:	2320      	movs	r3, #32
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e040      	b.n	80113ce <UART_SetConfig+0x7ae>
 801134c:	2340      	movs	r3, #64	; 0x40
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e03c      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011354:	2380      	movs	r3, #128	; 0x80
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e038      	b.n	80113ce <UART_SetConfig+0x7ae>
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a71      	ldr	r2, [pc, #452]	; (8011528 <UART_SetConfig+0x908>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d130      	bne.n	80113c8 <UART_SetConfig+0x7a8>
 8011366:	4b6f      	ldr	r3, [pc, #444]	; (8011524 <UART_SetConfig+0x904>)
 8011368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801136a:	f003 0307 	and.w	r3, r3, #7
 801136e:	2b05      	cmp	r3, #5
 8011370:	d826      	bhi.n	80113c0 <UART_SetConfig+0x7a0>
 8011372:	a201      	add	r2, pc, #4	; (adr r2, 8011378 <UART_SetConfig+0x758>)
 8011374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011378:	08011391 	.word	0x08011391
 801137c:	08011399 	.word	0x08011399
 8011380:	080113a1 	.word	0x080113a1
 8011384:	080113a9 	.word	0x080113a9
 8011388:	080113b1 	.word	0x080113b1
 801138c:	080113b9 	.word	0x080113b9
 8011390:	2302      	movs	r3, #2
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e01a      	b.n	80113ce <UART_SetConfig+0x7ae>
 8011398:	2304      	movs	r3, #4
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e016      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113a0:	2308      	movs	r3, #8
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e012      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113a8:	2310      	movs	r3, #16
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e00e      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113b0:	2320      	movs	r3, #32
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e00a      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113b8:	2340      	movs	r3, #64	; 0x40
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e006      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113c0:	2380      	movs	r3, #128	; 0x80
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e002      	b.n	80113ce <UART_SetConfig+0x7ae>
 80113c8:	2380      	movs	r3, #128	; 0x80
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a55      	ldr	r2, [pc, #340]	; (8011528 <UART_SetConfig+0x908>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	f040 80f8 	bne.w	80115ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113de:	2b20      	cmp	r3, #32
 80113e0:	dc46      	bgt.n	8011470 <UART_SetConfig+0x850>
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	db75      	blt.n	80114d2 <UART_SetConfig+0x8b2>
 80113e6:	3b02      	subs	r3, #2
 80113e8:	2b1e      	cmp	r3, #30
 80113ea:	d872      	bhi.n	80114d2 <UART_SetConfig+0x8b2>
 80113ec:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <UART_SetConfig+0x7d4>)
 80113ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f2:	bf00      	nop
 80113f4:	08011477 	.word	0x08011477
 80113f8:	080114d3 	.word	0x080114d3
 80113fc:	0801147f 	.word	0x0801147f
 8011400:	080114d3 	.word	0x080114d3
 8011404:	080114d3 	.word	0x080114d3
 8011408:	080114d3 	.word	0x080114d3
 801140c:	0801148f 	.word	0x0801148f
 8011410:	080114d3 	.word	0x080114d3
 8011414:	080114d3 	.word	0x080114d3
 8011418:	080114d3 	.word	0x080114d3
 801141c:	080114d3 	.word	0x080114d3
 8011420:	080114d3 	.word	0x080114d3
 8011424:	080114d3 	.word	0x080114d3
 8011428:	080114d3 	.word	0x080114d3
 801142c:	0801149f 	.word	0x0801149f
 8011430:	080114d3 	.word	0x080114d3
 8011434:	080114d3 	.word	0x080114d3
 8011438:	080114d3 	.word	0x080114d3
 801143c:	080114d3 	.word	0x080114d3
 8011440:	080114d3 	.word	0x080114d3
 8011444:	080114d3 	.word	0x080114d3
 8011448:	080114d3 	.word	0x080114d3
 801144c:	080114d3 	.word	0x080114d3
 8011450:	080114d3 	.word	0x080114d3
 8011454:	080114d3 	.word	0x080114d3
 8011458:	080114d3 	.word	0x080114d3
 801145c:	080114d3 	.word	0x080114d3
 8011460:	080114d3 	.word	0x080114d3
 8011464:	080114d3 	.word	0x080114d3
 8011468:	080114d3 	.word	0x080114d3
 801146c:	080114c5 	.word	0x080114c5
 8011470:	2b40      	cmp	r3, #64	; 0x40
 8011472:	d02a      	beq.n	80114ca <UART_SetConfig+0x8aa>
 8011474:	e02d      	b.n	80114d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011476:	f7fb fb07 	bl	800ca88 <HAL_RCCEx_GetD3PCLK1Freq>
 801147a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801147c:	e02f      	b.n	80114de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb fb16 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148c:	e027      	b.n	80114de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801148e:	f107 0318 	add.w	r3, r7, #24
 8011492:	4618      	mov	r0, r3
 8011494:	f7fb fc62 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801149c:	e01f      	b.n	80114de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801149e:	4b21      	ldr	r3, [pc, #132]	; (8011524 <UART_SetConfig+0x904>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 0320 	and.w	r3, r3, #32
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d009      	beq.n	80114be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114aa:	4b1e      	ldr	r3, [pc, #120]	; (8011524 <UART_SetConfig+0x904>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	08db      	lsrs	r3, r3, #3
 80114b0:	f003 0303 	and.w	r3, r3, #3
 80114b4:	4a1d      	ldr	r2, [pc, #116]	; (801152c <UART_SetConfig+0x90c>)
 80114b6:	fa22 f303 	lsr.w	r3, r2, r3
 80114ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114bc:	e00f      	b.n	80114de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114be:	4b1b      	ldr	r3, [pc, #108]	; (801152c <UART_SetConfig+0x90c>)
 80114c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c2:	e00c      	b.n	80114de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114c4:	4b1a      	ldr	r3, [pc, #104]	; (8011530 <UART_SetConfig+0x910>)
 80114c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c8:	e009      	b.n	80114de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d0:	e005      	b.n	80114de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114d2:	2300      	movs	r3, #0
 80114d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	f000 81ee 	beq.w	80118c2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ea:	4a12      	ldr	r2, [pc, #72]	; (8011534 <UART_SetConfig+0x914>)
 80114ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114f0:	461a      	mov	r2, r3
 80114f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80114f8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	4613      	mov	r3, r2
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	4413      	add	r3, r2
 8011504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011506:	429a      	cmp	r2, r3
 8011508:	d305      	bcc.n	8011516 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011512:	429a      	cmp	r2, r3
 8011514:	d910      	bls.n	8011538 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801151c:	e1d1      	b.n	80118c2 <UART_SetConfig+0xca2>
 801151e:	bf00      	nop
 8011520:	40011c00 	.word	0x40011c00
 8011524:	58024400 	.word	0x58024400
 8011528:	58000c00 	.word	0x58000c00
 801152c:	03d09000 	.word	0x03d09000
 8011530:	003d0900 	.word	0x003d0900
 8011534:	0801c934 	.word	0x0801c934
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801153a:	2200      	movs	r2, #0
 801153c:	60bb      	str	r3, [r7, #8]
 801153e:	60fa      	str	r2, [r7, #12]
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	4ac0      	ldr	r2, [pc, #768]	; (8011848 <UART_SetConfig+0xc28>)
 8011546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801154a:	b29b      	uxth	r3, r3
 801154c:	2200      	movs	r2, #0
 801154e:	603b      	str	r3, [r7, #0]
 8011550:	607a      	str	r2, [r7, #4]
 8011552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801155a:	f7ef f8ed 	bl	8000738 <__aeabi_uldivmod>
 801155e:	4602      	mov	r2, r0
 8011560:	460b      	mov	r3, r1
 8011562:	4610      	mov	r0, r2
 8011564:	4619      	mov	r1, r3
 8011566:	f04f 0200 	mov.w	r2, #0
 801156a:	f04f 0300 	mov.w	r3, #0
 801156e:	020b      	lsls	r3, r1, #8
 8011570:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011574:	0202      	lsls	r2, r0, #8
 8011576:	6979      	ldr	r1, [r7, #20]
 8011578:	6849      	ldr	r1, [r1, #4]
 801157a:	0849      	lsrs	r1, r1, #1
 801157c:	2000      	movs	r0, #0
 801157e:	460c      	mov	r4, r1
 8011580:	4605      	mov	r5, r0
 8011582:	eb12 0804 	adds.w	r8, r2, r4
 8011586:	eb43 0905 	adc.w	r9, r3, r5
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	469a      	mov	sl, r3
 8011592:	4693      	mov	fp, r2
 8011594:	4652      	mov	r2, sl
 8011596:	465b      	mov	r3, fp
 8011598:	4640      	mov	r0, r8
 801159a:	4649      	mov	r1, r9
 801159c:	f7ef f8cc 	bl	8000738 <__aeabi_uldivmod>
 80115a0:	4602      	mov	r2, r0
 80115a2:	460b      	mov	r3, r1
 80115a4:	4613      	mov	r3, r2
 80115a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115ae:	d308      	bcc.n	80115c2 <UART_SetConfig+0x9a2>
 80115b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115b6:	d204      	bcs.n	80115c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115be:	60da      	str	r2, [r3, #12]
 80115c0:	e17f      	b.n	80118c2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115c2:	2301      	movs	r3, #1
 80115c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115c8:	e17b      	b.n	80118c2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	69db      	ldr	r3, [r3, #28]
 80115ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115d2:	f040 80bd 	bne.w	8011750 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115da:	2b20      	cmp	r3, #32
 80115dc:	dc48      	bgt.n	8011670 <UART_SetConfig+0xa50>
 80115de:	2b00      	cmp	r3, #0
 80115e0:	db7b      	blt.n	80116da <UART_SetConfig+0xaba>
 80115e2:	2b20      	cmp	r3, #32
 80115e4:	d879      	bhi.n	80116da <UART_SetConfig+0xaba>
 80115e6:	a201      	add	r2, pc, #4	; (adr r2, 80115ec <UART_SetConfig+0x9cc>)
 80115e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ec:	08011677 	.word	0x08011677
 80115f0:	0801167f 	.word	0x0801167f
 80115f4:	080116db 	.word	0x080116db
 80115f8:	080116db 	.word	0x080116db
 80115fc:	08011687 	.word	0x08011687
 8011600:	080116db 	.word	0x080116db
 8011604:	080116db 	.word	0x080116db
 8011608:	080116db 	.word	0x080116db
 801160c:	08011697 	.word	0x08011697
 8011610:	080116db 	.word	0x080116db
 8011614:	080116db 	.word	0x080116db
 8011618:	080116db 	.word	0x080116db
 801161c:	080116db 	.word	0x080116db
 8011620:	080116db 	.word	0x080116db
 8011624:	080116db 	.word	0x080116db
 8011628:	080116db 	.word	0x080116db
 801162c:	080116a7 	.word	0x080116a7
 8011630:	080116db 	.word	0x080116db
 8011634:	080116db 	.word	0x080116db
 8011638:	080116db 	.word	0x080116db
 801163c:	080116db 	.word	0x080116db
 8011640:	080116db 	.word	0x080116db
 8011644:	080116db 	.word	0x080116db
 8011648:	080116db 	.word	0x080116db
 801164c:	080116db 	.word	0x080116db
 8011650:	080116db 	.word	0x080116db
 8011654:	080116db 	.word	0x080116db
 8011658:	080116db 	.word	0x080116db
 801165c:	080116db 	.word	0x080116db
 8011660:	080116db 	.word	0x080116db
 8011664:	080116db 	.word	0x080116db
 8011668:	080116db 	.word	0x080116db
 801166c:	080116cd 	.word	0x080116cd
 8011670:	2b40      	cmp	r3, #64	; 0x40
 8011672:	d02e      	beq.n	80116d2 <UART_SetConfig+0xab2>
 8011674:	e031      	b.n	80116da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011676:	f7f9 fb69 	bl	800ad4c <HAL_RCC_GetPCLK1Freq>
 801167a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801167c:	e033      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801167e:	f7f9 fb7b 	bl	800ad78 <HAL_RCC_GetPCLK2Freq>
 8011682:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011684:	e02f      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801168a:	4618      	mov	r0, r3
 801168c:	f7fb fa12 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011694:	e027      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011696:	f107 0318 	add.w	r3, r7, #24
 801169a:	4618      	mov	r0, r3
 801169c:	f7fb fb5e 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a4:	e01f      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116a6:	4b69      	ldr	r3, [pc, #420]	; (801184c <UART_SetConfig+0xc2c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f003 0320 	and.w	r3, r3, #32
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d009      	beq.n	80116c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116b2:	4b66      	ldr	r3, [pc, #408]	; (801184c <UART_SetConfig+0xc2c>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	08db      	lsrs	r3, r3, #3
 80116b8:	f003 0303 	and.w	r3, r3, #3
 80116bc:	4a64      	ldr	r2, [pc, #400]	; (8011850 <UART_SetConfig+0xc30>)
 80116be:	fa22 f303 	lsr.w	r3, r2, r3
 80116c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116c4:	e00f      	b.n	80116e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116c6:	4b62      	ldr	r3, [pc, #392]	; (8011850 <UART_SetConfig+0xc30>)
 80116c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ca:	e00c      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116cc:	4b61      	ldr	r3, [pc, #388]	; (8011854 <UART_SetConfig+0xc34>)
 80116ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d0:	e009      	b.n	80116e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d8:	e005      	b.n	80116e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116da:	2300      	movs	r3, #0
 80116dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116de:	2301      	movs	r3, #1
 80116e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 80ea 	beq.w	80118c2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f2:	4a55      	ldr	r2, [pc, #340]	; (8011848 <UART_SetConfig+0xc28>)
 80116f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f8:	461a      	mov	r2, r3
 80116fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011700:	005a      	lsls	r2, r3, #1
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	085b      	lsrs	r3, r3, #1
 8011708:	441a      	add	r2, r3
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011712:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011716:	2b0f      	cmp	r3, #15
 8011718:	d916      	bls.n	8011748 <UART_SetConfig+0xb28>
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011720:	d212      	bcs.n	8011748 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	b29b      	uxth	r3, r3
 8011726:	f023 030f 	bic.w	r3, r3, #15
 801172a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172e:	085b      	lsrs	r3, r3, #1
 8011730:	b29b      	uxth	r3, r3
 8011732:	f003 0307 	and.w	r3, r3, #7
 8011736:	b29a      	uxth	r2, r3
 8011738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801173a:	4313      	orrs	r3, r2
 801173c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011744:	60da      	str	r2, [r3, #12]
 8011746:	e0bc      	b.n	80118c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011748:	2301      	movs	r3, #1
 801174a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801174e:	e0b8      	b.n	80118c2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011750:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011754:	2b20      	cmp	r3, #32
 8011756:	dc4b      	bgt.n	80117f0 <UART_SetConfig+0xbd0>
 8011758:	2b00      	cmp	r3, #0
 801175a:	f2c0 8087 	blt.w	801186c <UART_SetConfig+0xc4c>
 801175e:	2b20      	cmp	r3, #32
 8011760:	f200 8084 	bhi.w	801186c <UART_SetConfig+0xc4c>
 8011764:	a201      	add	r2, pc, #4	; (adr r2, 801176c <UART_SetConfig+0xb4c>)
 8011766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176a:	bf00      	nop
 801176c:	080117f7 	.word	0x080117f7
 8011770:	080117ff 	.word	0x080117ff
 8011774:	0801186d 	.word	0x0801186d
 8011778:	0801186d 	.word	0x0801186d
 801177c:	08011807 	.word	0x08011807
 8011780:	0801186d 	.word	0x0801186d
 8011784:	0801186d 	.word	0x0801186d
 8011788:	0801186d 	.word	0x0801186d
 801178c:	08011817 	.word	0x08011817
 8011790:	0801186d 	.word	0x0801186d
 8011794:	0801186d 	.word	0x0801186d
 8011798:	0801186d 	.word	0x0801186d
 801179c:	0801186d 	.word	0x0801186d
 80117a0:	0801186d 	.word	0x0801186d
 80117a4:	0801186d 	.word	0x0801186d
 80117a8:	0801186d 	.word	0x0801186d
 80117ac:	08011827 	.word	0x08011827
 80117b0:	0801186d 	.word	0x0801186d
 80117b4:	0801186d 	.word	0x0801186d
 80117b8:	0801186d 	.word	0x0801186d
 80117bc:	0801186d 	.word	0x0801186d
 80117c0:	0801186d 	.word	0x0801186d
 80117c4:	0801186d 	.word	0x0801186d
 80117c8:	0801186d 	.word	0x0801186d
 80117cc:	0801186d 	.word	0x0801186d
 80117d0:	0801186d 	.word	0x0801186d
 80117d4:	0801186d 	.word	0x0801186d
 80117d8:	0801186d 	.word	0x0801186d
 80117dc:	0801186d 	.word	0x0801186d
 80117e0:	0801186d 	.word	0x0801186d
 80117e4:	0801186d 	.word	0x0801186d
 80117e8:	0801186d 	.word	0x0801186d
 80117ec:	0801185f 	.word	0x0801185f
 80117f0:	2b40      	cmp	r3, #64	; 0x40
 80117f2:	d037      	beq.n	8011864 <UART_SetConfig+0xc44>
 80117f4:	e03a      	b.n	801186c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117f6:	f7f9 faa9 	bl	800ad4c <HAL_RCC_GetPCLK1Freq>
 80117fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117fc:	e03c      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117fe:	f7f9 fabb 	bl	800ad78 <HAL_RCC_GetPCLK2Freq>
 8011802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011804:	e038      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801180a:	4618      	mov	r0, r3
 801180c:	f7fb f952 	bl	800cab4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011814:	e030      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011816:	f107 0318 	add.w	r3, r7, #24
 801181a:	4618      	mov	r0, r3
 801181c:	f7fb fa9e 	bl	800cd5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011824:	e028      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011826:	4b09      	ldr	r3, [pc, #36]	; (801184c <UART_SetConfig+0xc2c>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f003 0320 	and.w	r3, r3, #32
 801182e:	2b00      	cmp	r3, #0
 8011830:	d012      	beq.n	8011858 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011832:	4b06      	ldr	r3, [pc, #24]	; (801184c <UART_SetConfig+0xc2c>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	08db      	lsrs	r3, r3, #3
 8011838:	f003 0303 	and.w	r3, r3, #3
 801183c:	4a04      	ldr	r2, [pc, #16]	; (8011850 <UART_SetConfig+0xc30>)
 801183e:	fa22 f303 	lsr.w	r3, r2, r3
 8011842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011844:	e018      	b.n	8011878 <UART_SetConfig+0xc58>
 8011846:	bf00      	nop
 8011848:	0801c934 	.word	0x0801c934
 801184c:	58024400 	.word	0x58024400
 8011850:	03d09000 	.word	0x03d09000
 8011854:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011858:	4b24      	ldr	r3, [pc, #144]	; (80118ec <UART_SetConfig+0xccc>)
 801185a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801185c:	e00c      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801185e:	4b24      	ldr	r3, [pc, #144]	; (80118f0 <UART_SetConfig+0xcd0>)
 8011860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011862:	e009      	b.n	8011878 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801186a:	e005      	b.n	8011878 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801186c:	2300      	movs	r3, #0
 801186e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011870:	2301      	movs	r3, #1
 8011872:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011876:	bf00      	nop
    }

    if (pclk != 0U)
 8011878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801187a:	2b00      	cmp	r3, #0
 801187c:	d021      	beq.n	80118c2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	4a1c      	ldr	r2, [pc, #112]	; (80118f4 <UART_SetConfig+0xcd4>)
 8011884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011888:	461a      	mov	r2, r3
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	085b      	lsrs	r3, r3, #1
 8011896:	441a      	add	r2, r3
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a4:	2b0f      	cmp	r3, #15
 80118a6:	d909      	bls.n	80118bc <UART_SetConfig+0xc9c>
 80118a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118ae:	d205      	bcs.n	80118bc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	60da      	str	r2, [r3, #12]
 80118ba:	e002      	b.n	80118c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2201      	movs	r2, #1
 80118c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2201      	movs	r2, #1
 80118ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	2200      	movs	r2, #0
 80118d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	2200      	movs	r2, #0
 80118dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3748      	adds	r7, #72	; 0x48
 80118e6:	46bd      	mov	sp, r7
 80118e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118ec:	03d09000 	.word	0x03d09000
 80118f0:	003d0900 	.word	0x003d0900
 80118f4:	0801c934 	.word	0x0801c934

080118f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011904:	f003 0301 	and.w	r3, r3, #1
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	430a      	orrs	r2, r1
 8011920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011926:	f003 0302 	and.w	r3, r3, #2
 801192a:	2b00      	cmp	r3, #0
 801192c:	d00a      	beq.n	8011944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	430a      	orrs	r2, r1
 8011942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00a      	beq.n	8011966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	430a      	orrs	r2, r1
 8011964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801196a:	f003 0308 	and.w	r3, r3, #8
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00a      	beq.n	8011988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	430a      	orrs	r2, r1
 8011986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	f003 0310 	and.w	r3, r3, #16
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00a      	beq.n	80119aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	430a      	orrs	r2, r1
 80119a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ae:	f003 0320 	and.w	r3, r3, #32
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00a      	beq.n	80119cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	430a      	orrs	r2, r1
 80119ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d01a      	beq.n	8011a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	430a      	orrs	r2, r1
 80119ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119f6:	d10a      	bne.n	8011a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	430a      	orrs	r2, r1
 8011a2e:	605a      	str	r2, [r3, #4]
  }
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b098      	sub	sp, #96	; 0x60
 8011a40:	af02      	add	r7, sp, #8
 8011a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a4c:	f7f2 fed4 	bl	80047f8 <HAL_GetTick>
 8011a50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f003 0308 	and.w	r3, r3, #8
 8011a5c:	2b08      	cmp	r3, #8
 8011a5e:	d12f      	bne.n	8011ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 f88e 	bl	8011b90 <UART_WaitOnFlagUntilTimeout>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d022      	beq.n	8011ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a82:	e853 3f00 	ldrex	r3, [r3]
 8011a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	461a      	mov	r2, r3
 8011a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a98:	647b      	str	r3, [r7, #68]	; 0x44
 8011a9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011aa0:	e841 2300 	strex	r3, r2, [r1]
 8011aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1e6      	bne.n	8011a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2220      	movs	r2, #32
 8011ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011abc:	2303      	movs	r3, #3
 8011abe:	e063      	b.n	8011b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f003 0304 	and.w	r3, r3, #4
 8011aca:	2b04      	cmp	r3, #4
 8011acc:	d149      	bne.n	8011b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ace:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ad2:	9300      	str	r3, [sp, #0]
 8011ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 f857 	bl	8011b90 <UART_WaitOnFlagUntilTimeout>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d03c      	beq.n	8011b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	e853 3f00 	ldrex	r3, [r3]
 8011af4:	623b      	str	r3, [r7, #32]
   return(result);
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	461a      	mov	r2, r3
 8011b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b06:	633b      	str	r3, [r7, #48]	; 0x30
 8011b08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b0e:	e841 2300 	strex	r3, r2, [r1]
 8011b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1e6      	bne.n	8011ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	3308      	adds	r3, #8
 8011b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	e853 3f00 	ldrex	r3, [r3]
 8011b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	f023 0301 	bic.w	r3, r3, #1
 8011b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	3308      	adds	r3, #8
 8011b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b3a:	61fa      	str	r2, [r7, #28]
 8011b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3e:	69b9      	ldr	r1, [r7, #24]
 8011b40:	69fa      	ldr	r2, [r7, #28]
 8011b42:	e841 2300 	strex	r3, r2, [r1]
 8011b46:	617b      	str	r3, [r7, #20]
   return(result);
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1e5      	bne.n	8011b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2220      	movs	r2, #32
 8011b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e012      	b.n	8011b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2220      	movs	r2, #32
 8011b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2220      	movs	r2, #32
 8011b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3758      	adds	r7, #88	; 0x58
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	603b      	str	r3, [r7, #0]
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ba0:	e049      	b.n	8011c36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba8:	d045      	beq.n	8011c36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011baa:	f7f2 fe25 	bl	80047f8 <HAL_GetTick>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	69ba      	ldr	r2, [r7, #24]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d302      	bcc.n	8011bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d101      	bne.n	8011bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bc0:	2303      	movs	r3, #3
 8011bc2:	e048      	b.n	8011c56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f003 0304 	and.w	r3, r3, #4
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d031      	beq.n	8011c36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	69db      	ldr	r3, [r3, #28]
 8011bd8:	f003 0308 	and.w	r3, r3, #8
 8011bdc:	2b08      	cmp	r3, #8
 8011bde:	d110      	bne.n	8011c02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2208      	movs	r2, #8
 8011be6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f000 f839 	bl	8011c60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e029      	b.n	8011c56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	69db      	ldr	r3, [r3, #28]
 8011c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c10:	d111      	bne.n	8011c36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f000 f81f 	bl	8011c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2220      	movs	r2, #32
 8011c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c32:	2303      	movs	r3, #3
 8011c34:	e00f      	b.n	8011c56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	69da      	ldr	r2, [r3, #28]
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	4013      	ands	r3, r2
 8011c40:	68ba      	ldr	r2, [r7, #8]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	bf0c      	ite	eq
 8011c46:	2301      	moveq	r3, #1
 8011c48:	2300      	movne	r3, #0
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d0a6      	beq.n	8011ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
	...

08011c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b095      	sub	sp, #84	; 0x54
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c70:	e853 3f00 	ldrex	r3, [r3]
 8011c74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c86:	643b      	str	r3, [r7, #64]	; 0x40
 8011c88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c8e:	e841 2300 	strex	r3, r2, [r1]
 8011c92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1e6      	bne.n	8011c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	3308      	adds	r3, #8
 8011ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca2:	6a3b      	ldr	r3, [r7, #32]
 8011ca4:	e853 3f00 	ldrex	r3, [r3]
 8011ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011caa:	69fa      	ldr	r2, [r7, #28]
 8011cac:	4b1e      	ldr	r3, [pc, #120]	; (8011d28 <UART_EndRxTransfer+0xc8>)
 8011cae:	4013      	ands	r3, r2
 8011cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	3308      	adds	r3, #8
 8011cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cc2:	e841 2300 	strex	r3, r2, [r1]
 8011cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1e5      	bne.n	8011c9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d118      	bne.n	8011d08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	e853 3f00 	ldrex	r3, [r3]
 8011ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	f023 0310 	bic.w	r3, r3, #16
 8011cea:	647b      	str	r3, [r7, #68]	; 0x44
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cf4:	61bb      	str	r3, [r7, #24]
 8011cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf8:	6979      	ldr	r1, [r7, #20]
 8011cfa:	69ba      	ldr	r2, [r7, #24]
 8011cfc:	e841 2300 	strex	r3, r2, [r1]
 8011d00:	613b      	str	r3, [r7, #16]
   return(result);
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1e6      	bne.n	8011cd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2220      	movs	r2, #32
 8011d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d1c:	bf00      	nop
 8011d1e:	3754      	adds	r7, #84	; 0x54
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr
 8011d28:	effffffe 	.word	0xeffffffe

08011d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d101      	bne.n	8011d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8011d3e:	2302      	movs	r3, #2
 8011d40:	e027      	b.n	8011d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2201      	movs	r2, #1
 8011d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2224      	movs	r2, #36	; 0x24
 8011d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f022 0201 	bic.w	r2, r2, #1
 8011d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2220      	movs	r2, #32
 8011d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d90:	2300      	movs	r3, #0
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr

08011d9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b084      	sub	sp, #16
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d101      	bne.n	8011db6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011db2:	2302      	movs	r3, #2
 8011db4:	e02d      	b.n	8011e12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2224      	movs	r2, #36	; 0x24
 8011dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f022 0201 	bic.w	r2, r2, #1
 8011ddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	430a      	orrs	r2, r1
 8011df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 f850 	bl	8011e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2220      	movs	r2, #32
 8011e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b084      	sub	sp, #16
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d101      	bne.n	8011e32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e2e:	2302      	movs	r3, #2
 8011e30:	e02d      	b.n	8011e8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2201      	movs	r2, #1
 8011e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2224      	movs	r2, #36	; 0x24
 8011e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f022 0201 	bic.w	r2, r2, #1
 8011e58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	683a      	ldr	r2, [r7, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 f812 	bl	8011e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2220      	movs	r2, #32
 8011e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d108      	bne.n	8011eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2201      	movs	r2, #1
 8011eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011eb8:	e031      	b.n	8011f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011eba:	2310      	movs	r3, #16
 8011ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ebe:	2310      	movs	r3, #16
 8011ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	0e5b      	lsrs	r3, r3, #25
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	f003 0307 	and.w	r3, r3, #7
 8011ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	689b      	ldr	r3, [r3, #8]
 8011ed8:	0f5b      	lsrs	r3, r3, #29
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	f003 0307 	and.w	r3, r3, #7
 8011ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ee2:	7bbb      	ldrb	r3, [r7, #14]
 8011ee4:	7b3a      	ldrb	r2, [r7, #12]
 8011ee6:	4911      	ldr	r1, [pc, #68]	; (8011f2c <UARTEx_SetNbDataToProcess+0x94>)
 8011ee8:	5c8a      	ldrb	r2, [r1, r2]
 8011eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011eee:	7b3a      	ldrb	r2, [r7, #12]
 8011ef0:	490f      	ldr	r1, [pc, #60]	; (8011f30 <UARTEx_SetNbDataToProcess+0x98>)
 8011ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f00:	7bfb      	ldrb	r3, [r7, #15]
 8011f02:	7b7a      	ldrb	r2, [r7, #13]
 8011f04:	4909      	ldr	r1, [pc, #36]	; (8011f2c <UARTEx_SetNbDataToProcess+0x94>)
 8011f06:	5c8a      	ldrb	r2, [r1, r2]
 8011f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011f0c:	7b7a      	ldrb	r2, [r7, #13]
 8011f0e:	4908      	ldr	r1, [pc, #32]	; (8011f30 <UARTEx_SetNbDataToProcess+0x98>)
 8011f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f1e:	bf00      	nop
 8011f20:	3714      	adds	r7, #20
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	0801c94c 	.word	0x0801c94c
 8011f30:	0801c954 	.word	0x0801c954

08011f34 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f34:	b084      	sub	sp, #16
 8011f36:	b480      	push	{r7}
 8011f38:	b085      	sub	sp, #20
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
 8011f3e:	f107 001c 	add.w	r0, r7, #28
 8011f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f4e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	4b07      	ldr	r3, [pc, #28]	; (8011f84 <SDMMC_Init+0x50>)
 8011f68:	4013      	ands	r3, r2
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	431a      	orrs	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	b004      	add	sp, #16
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	ffc02c00 	.word	0xffc02c00

08011f88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	370c      	adds	r7, #12
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr

08011fa2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	b083      	sub	sp, #12
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
 8011faa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f043 0203 	orr.w	r2, r3, #3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011fd8:	2300      	movs	r3, #0
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	370c      	adds	r7, #12
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b083      	sub	sp, #12
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f003 0303 	and.w	r3, r3, #3
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr
	...

08012004 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012004:	b480      	push	{r7}
 8012006:	b085      	sub	sp, #20
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012022:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012028:	431a      	orrs	r2, r3
                       Command->CPSM);
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801202e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	4313      	orrs	r3, r2
 8012034:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	68da      	ldr	r2, [r3, #12]
 801203a:	4b06      	ldr	r3, [pc, #24]	; (8012054 <SDMMC_SendCommand+0x50>)
 801203c:	4013      	ands	r3, r2
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	431a      	orrs	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	3714      	adds	r7, #20
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	fffee0c0 	.word	0xfffee0c0

08012058 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	b2db      	uxtb	r3, r3
}
 8012066:	4618      	mov	r0, r3
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012072:	b480      	push	{r7}
 8012074:	b085      	sub	sp, #20
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	3314      	adds	r3, #20
 8012080:	461a      	mov	r2, r3
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	4413      	add	r3, r2
 8012086:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
}
 801208c:	4618      	mov	r0, r3
 801208e:	3714      	adds	r7, #20
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80120a2:	2300      	movs	r3, #0
 80120a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120be:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	4313      	orrs	r3, r2
 80120d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	431a      	orrs	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120e2:	2300      	movs	r3, #0

}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b088      	sub	sp, #32
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120fe:	2310      	movs	r3, #16
 8012100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012112:	f107 0308 	add.w	r3, r7, #8
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff ff73 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012122:	2110      	movs	r1, #16
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 fa5f 	bl	80125e8 <SDMMC_GetCmdResp1>
 801212a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801212c:	69fb      	ldr	r3, [r7, #28]
}
 801212e:	4618      	mov	r0, r3
 8012130:	3720      	adds	r7, #32
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b088      	sub	sp, #32
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012144:	2311      	movs	r3, #17
 8012146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012148:	f44f 7380 	mov.w	r3, #256	; 0x100
 801214c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801214e:	2300      	movs	r3, #0
 8012150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012158:	f107 0308 	add.w	r3, r7, #8
 801215c:	4619      	mov	r1, r3
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7ff ff50 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012164:	f241 3288 	movw	r2, #5000	; 0x1388
 8012168:	2111      	movs	r1, #17
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f000 fa3c 	bl	80125e8 <SDMMC_GetCmdResp1>
 8012170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012172:	69fb      	ldr	r3, [r7, #28]
}
 8012174:	4618      	mov	r0, r3
 8012176:	3720      	adds	r7, #32
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801218a:	2312      	movs	r3, #18
 801218c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012194:	2300      	movs	r3, #0
 8012196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801219c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801219e:	f107 0308 	add.w	r3, r7, #8
 80121a2:	4619      	mov	r1, r3
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7ff ff2d 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80121aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80121ae:	2112      	movs	r1, #18
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 fa19 	bl	80125e8 <SDMMC_GetCmdResp1>
 80121b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121b8:	69fb      	ldr	r3, [r7, #28]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3720      	adds	r7, #32
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b088      	sub	sp, #32
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121d0:	2318      	movs	r3, #24
 80121d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121da:	2300      	movs	r3, #0
 80121dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121e4:	f107 0308 	add.w	r3, r7, #8
 80121e8:	4619      	mov	r1, r3
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ff ff0a 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f4:	2118      	movs	r1, #24
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 f9f6 	bl	80125e8 <SDMMC_GetCmdResp1>
 80121fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121fe:	69fb      	ldr	r3, [r7, #28]
}
 8012200:	4618      	mov	r0, r3
 8012202:	3720      	adds	r7, #32
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b088      	sub	sp, #32
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012216:	2319      	movs	r3, #25
 8012218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801221e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012220:	2300      	movs	r3, #0
 8012222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012228:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801222a:	f107 0308 	add.w	r3, r7, #8
 801222e:	4619      	mov	r1, r3
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7ff fee7 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012236:	f241 3288 	movw	r2, #5000	; 0x1388
 801223a:	2119      	movs	r1, #25
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 f9d3 	bl	80125e8 <SDMMC_GetCmdResp1>
 8012242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012244:	69fb      	ldr	r3, [r7, #28]
}
 8012246:	4618      	mov	r0, r3
 8012248:	3720      	adds	r7, #32
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
	...

08012250 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b088      	sub	sp, #32
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012258:	2300      	movs	r3, #0
 801225a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801225c:	230c      	movs	r3, #12
 801225e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012266:	2300      	movs	r3, #0
 8012268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801226e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012288:	f107 0308 	add.w	r3, r7, #8
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ff feb8 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012294:	4a0b      	ldr	r2, [pc, #44]	; (80122c4 <SDMMC_CmdStopTransfer+0x74>)
 8012296:	210c      	movs	r1, #12
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 f9a5 	bl	80125e8 <SDMMC_GetCmdResp1>
 801229e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80122ac:	69fb      	ldr	r3, [r7, #28]
 80122ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80122b2:	d101      	bne.n	80122b8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80122b4:	2300      	movs	r3, #0
 80122b6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80122b8:	69fb      	ldr	r3, [r7, #28]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3720      	adds	r7, #32
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	05f5e100 	.word	0x05f5e100

080122c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b088      	sub	sp, #32
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80122d6:	2307      	movs	r3, #7
 80122d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122e0:	2300      	movs	r3, #0
 80122e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122ea:	f107 0308 	add.w	r3, r7, #8
 80122ee:	4619      	mov	r1, r3
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ff fe87 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80122fa:	2107      	movs	r1, #7
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f973 	bl	80125e8 <SDMMC_GetCmdResp1>
 8012302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012304:	69fb      	ldr	r3, [r7, #28]
}
 8012306:	4618      	mov	r0, r3
 8012308:	3720      	adds	r7, #32
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801230e:	b580      	push	{r7, lr}
 8012310:	b088      	sub	sp, #32
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012316:	2300      	movs	r3, #0
 8012318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801231a:	2300      	movs	r3, #0
 801231c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801231e:	2300      	movs	r3, #0
 8012320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012322:	2300      	movs	r3, #0
 8012324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801232a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801232c:	f107 0308 	add.w	r3, r7, #8
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff fe66 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 fb97 	bl	8012a6c <SDMMC_GetCmdError>
 801233e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012340:	69fb      	ldr	r3, [r7, #28]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3720      	adds	r7, #32
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}

0801234a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801234a:	b580      	push	{r7, lr}
 801234c:	b088      	sub	sp, #32
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012352:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012358:	2308      	movs	r3, #8
 801235a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012362:	2300      	movs	r3, #0
 8012364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801236a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801236c:	f107 0308 	add.w	r3, r7, #8
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7ff fe46 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 fb29 	bl	80129d0 <SDMMC_GetCmdResp7>
 801237e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012380:	69fb      	ldr	r3, [r7, #28]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3720      	adds	r7, #32
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b088      	sub	sp, #32
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
 8012392:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012398:	2337      	movs	r3, #55	; 0x37
 801239a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801239c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123a2:	2300      	movs	r3, #0
 80123a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ac:	f107 0308 	add.w	r3, r7, #8
 80123b0:	4619      	mov	r1, r3
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff fe26 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80123b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123bc:	2137      	movs	r1, #55	; 0x37
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f912 	bl	80125e8 <SDMMC_GetCmdResp1>
 80123c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123c6:	69fb      	ldr	r3, [r7, #28]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3720      	adds	r7, #32
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b088      	sub	sp, #32
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80123de:	2329      	movs	r3, #41	; 0x29
 80123e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123e8:	2300      	movs	r3, #0
 80123ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123f2:	f107 0308 	add.w	r3, r7, #8
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff fe03 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 fa2e 	bl	8012860 <SDMMC_GetCmdResp3>
 8012404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012406:	69fb      	ldr	r3, [r7, #28]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3720      	adds	r7, #32
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b088      	sub	sp, #32
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801241e:	2306      	movs	r3, #6
 8012420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012428:	2300      	movs	r3, #0
 801242a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012432:	f107 0308 	add.w	r3, r7, #8
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff fde3 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012442:	2106      	movs	r1, #6
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f8cf 	bl	80125e8 <SDMMC_GetCmdResp1>
 801244a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801244c:	69fb      	ldr	r3, [r7, #28]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3720      	adds	r7, #32
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b088      	sub	sp, #32
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012462:	2333      	movs	r3, #51	; 0x33
 8012464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012466:	f44f 7380 	mov.w	r3, #256	; 0x100
 801246a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801246c:	2300      	movs	r3, #0
 801246e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012476:	f107 0308 	add.w	r3, r7, #8
 801247a:	4619      	mov	r1, r3
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff fdc1 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012482:	f241 3288 	movw	r2, #5000	; 0x1388
 8012486:	2133      	movs	r1, #51	; 0x33
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f8ad 	bl	80125e8 <SDMMC_GetCmdResp1>
 801248e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012490:	69fb      	ldr	r3, [r7, #28]
}
 8012492:	4618      	mov	r0, r3
 8012494:	3720      	adds	r7, #32
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b088      	sub	sp, #32
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80124a2:	2300      	movs	r3, #0
 80124a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80124a6:	2302      	movs	r3, #2
 80124a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124b0:	2300      	movs	r3, #0
 80124b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124ba:	f107 0308 	add.w	r3, r7, #8
 80124be:	4619      	mov	r1, r3
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff fd9f 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 f980 	bl	80127cc <SDMMC_GetCmdResp2>
 80124cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ce:	69fb      	ldr	r3, [r7, #28]
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3720      	adds	r7, #32
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b088      	sub	sp, #32
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124e6:	2309      	movs	r3, #9
 80124e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124f0:	2300      	movs	r3, #0
 80124f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124fa:	f107 0308 	add.w	r3, r7, #8
 80124fe:	4619      	mov	r1, r3
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f7ff fd7f 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f960 	bl	80127cc <SDMMC_GetCmdResp2>
 801250c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801250e:	69fb      	ldr	r3, [r7, #28]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3720      	adds	r7, #32
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b088      	sub	sp, #32
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012522:	2300      	movs	r3, #0
 8012524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012526:	2303      	movs	r3, #3
 8012528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801252a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801252e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012530:	2300      	movs	r3, #0
 8012532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801253a:	f107 0308 	add.w	r3, r7, #8
 801253e:	4619      	mov	r1, r3
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7ff fd5f 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012546:	683a      	ldr	r2, [r7, #0]
 8012548:	2103      	movs	r1, #3
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 f9c8 	bl	80128e0 <SDMMC_GetCmdResp6>
 8012550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012552:	69fb      	ldr	r3, [r7, #28]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3720      	adds	r7, #32
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b088      	sub	sp, #32
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801256a:	230d      	movs	r3, #13
 801256c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801256e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012574:	2300      	movs	r3, #0
 8012576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801257c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801257e:	f107 0308 	add.w	r3, r7, #8
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff fd3d 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801258a:	f241 3288 	movw	r2, #5000	; 0x1388
 801258e:	210d      	movs	r1, #13
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 f829 	bl	80125e8 <SDMMC_GetCmdResp1>
 8012596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012598:	69fb      	ldr	r3, [r7, #28]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3720      	adds	r7, #32
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b088      	sub	sp, #32
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80125aa:	2300      	movs	r3, #0
 80125ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80125ae:	230d      	movs	r3, #13
 80125b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125b8:	2300      	movs	r3, #0
 80125ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125c2:	f107 0308 	add.w	r3, r7, #8
 80125c6:	4619      	mov	r1, r3
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7ff fd1b 	bl	8012004 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80125ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80125d2:	210d      	movs	r1, #13
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 f807 	bl	80125e8 <SDMMC_GetCmdResp1>
 80125da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125dc:	69fb      	ldr	r3, [r7, #28]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3720      	adds	r7, #32
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
	...

080125e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b088      	sub	sp, #32
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	460b      	mov	r3, r1
 80125f2:	607a      	str	r2, [r7, #4]
 80125f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125f6:	4b70      	ldr	r3, [pc, #448]	; (80127b8 <SDMMC_GetCmdResp1+0x1d0>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4a70      	ldr	r2, [pc, #448]	; (80127bc <SDMMC_GetCmdResp1+0x1d4>)
 80125fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012600:	0a5a      	lsrs	r2, r3, #9
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	fb02 f303 	mul.w	r3, r2, r3
 8012608:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	1e5a      	subs	r2, r3, #1
 801260e:	61fa      	str	r2, [r7, #28]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d102      	bne.n	801261a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012618:	e0c9      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012620:	69ba      	ldr	r2, [r7, #24]
 8012622:	4b67      	ldr	r3, [pc, #412]	; (80127c0 <SDMMC_GetCmdResp1+0x1d8>)
 8012624:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012626:	2b00      	cmp	r3, #0
 8012628:	d0ef      	beq.n	801260a <SDMMC_GetCmdResp1+0x22>
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012630:	2b00      	cmp	r3, #0
 8012632:	d1ea      	bne.n	801260a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012638:	f003 0304 	and.w	r3, r3, #4
 801263c:	2b00      	cmp	r3, #0
 801263e:	d004      	beq.n	801264a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2204      	movs	r2, #4
 8012644:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012646:	2304      	movs	r3, #4
 8012648:	e0b1      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801264e:	f003 0301 	and.w	r3, r3, #1
 8012652:	2b00      	cmp	r3, #0
 8012654:	d004      	beq.n	8012660 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2201      	movs	r2, #1
 801265a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801265c:	2301      	movs	r3, #1
 801265e:	e0a6      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	4a58      	ldr	r2, [pc, #352]	; (80127c4 <SDMMC_GetCmdResp1+0x1dc>)
 8012664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012666:	68f8      	ldr	r0, [r7, #12]
 8012668:	f7ff fcf6 	bl	8012058 <SDMMC_GetCommandResponse>
 801266c:	4603      	mov	r3, r0
 801266e:	461a      	mov	r2, r3
 8012670:	7afb      	ldrb	r3, [r7, #11]
 8012672:	4293      	cmp	r3, r2
 8012674:	d001      	beq.n	801267a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012676:	2301      	movs	r3, #1
 8012678:	e099      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801267a:	2100      	movs	r1, #0
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f7ff fcf8 	bl	8012072 <SDMMC_GetResponse>
 8012682:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012684:	697a      	ldr	r2, [r7, #20]
 8012686:	4b50      	ldr	r3, [pc, #320]	; (80127c8 <SDMMC_GetCmdResp1+0x1e0>)
 8012688:	4013      	ands	r3, r2
 801268a:	2b00      	cmp	r3, #0
 801268c:	d101      	bne.n	8012692 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801268e:	2300      	movs	r3, #0
 8012690:	e08d      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b00      	cmp	r3, #0
 8012696:	da02      	bge.n	801269e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801269c:	e087      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80126a8:	2340      	movs	r3, #64	; 0x40
 80126aa:	e080      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80126b6:	2380      	movs	r3, #128	; 0x80
 80126b8:	e079      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c8:	e071      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126d8:	e069      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126e8:	e061      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126f8:	e059      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012700:	2b00      	cmp	r3, #0
 8012702:	d002      	beq.n	801270a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012708:	e051      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d002      	beq.n	801271a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012718:	e049      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012728:	e041      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012738:	e039      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012748:	e031      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012758:	e029      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012768:	e021      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012774:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012778:	e019      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012788:	e011      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012790:	2b00      	cmp	r3, #0
 8012792:	d002      	beq.n	801279a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012798:	e009      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	f003 0308 	and.w	r3, r3, #8
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d002      	beq.n	80127aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80127a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80127a8:	e001      	b.n	80127ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3720      	adds	r7, #32
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	24000000 	.word	0x24000000
 80127bc:	10624dd3 	.word	0x10624dd3
 80127c0:	00200045 	.word	0x00200045
 80127c4:	002000c5 	.word	0x002000c5
 80127c8:	fdffe008 	.word	0xfdffe008

080127cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b085      	sub	sp, #20
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127d4:	4b1f      	ldr	r3, [pc, #124]	; (8012854 <SDMMC_GetCmdResp2+0x88>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a1f      	ldr	r2, [pc, #124]	; (8012858 <SDMMC_GetCmdResp2+0x8c>)
 80127da:	fba2 2303 	umull	r2, r3, r2, r3
 80127de:	0a5b      	lsrs	r3, r3, #9
 80127e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127e4:	fb02 f303 	mul.w	r3, r2, r3
 80127e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	1e5a      	subs	r2, r3, #1
 80127ee:	60fa      	str	r2, [r7, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d102      	bne.n	80127fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127f8:	e026      	b.n	8012848 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012806:	2b00      	cmp	r3, #0
 8012808:	d0ef      	beq.n	80127ea <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1ea      	bne.n	80127ea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	2b00      	cmp	r3, #0
 801281e:	d004      	beq.n	801282a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2204      	movs	r2, #4
 8012824:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012826:	2304      	movs	r3, #4
 8012828:	e00e      	b.n	8012848 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801282e:	f003 0301 	and.w	r3, r3, #1
 8012832:	2b00      	cmp	r3, #0
 8012834:	d004      	beq.n	8012840 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2201      	movs	r2, #1
 801283a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801283c:	2301      	movs	r3, #1
 801283e:	e003      	b.n	8012848 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	4a06      	ldr	r2, [pc, #24]	; (801285c <SDMMC_GetCmdResp2+0x90>)
 8012844:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	3714      	adds	r7, #20
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr
 8012854:	24000000 	.word	0x24000000
 8012858:	10624dd3 	.word	0x10624dd3
 801285c:	002000c5 	.word	0x002000c5

08012860 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012860:	b480      	push	{r7}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012868:	4b1a      	ldr	r3, [pc, #104]	; (80128d4 <SDMMC_GetCmdResp3+0x74>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	4a1a      	ldr	r2, [pc, #104]	; (80128d8 <SDMMC_GetCmdResp3+0x78>)
 801286e:	fba2 2303 	umull	r2, r3, r2, r3
 8012872:	0a5b      	lsrs	r3, r3, #9
 8012874:	f241 3288 	movw	r2, #5000	; 0x1388
 8012878:	fb02 f303 	mul.w	r3, r2, r3
 801287c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	1e5a      	subs	r2, r3, #1
 8012882:	60fa      	str	r2, [r7, #12]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d102      	bne.n	801288e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801288c:	e01b      	b.n	80128c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012892:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801289a:	2b00      	cmp	r3, #0
 801289c:	d0ef      	beq.n	801287e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d1ea      	bne.n	801287e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ac:	f003 0304 	and.w	r3, r3, #4
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d004      	beq.n	80128be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2204      	movs	r2, #4
 80128b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128ba:	2304      	movs	r3, #4
 80128bc:	e003      	b.n	80128c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4a06      	ldr	r2, [pc, #24]	; (80128dc <SDMMC_GetCmdResp3+0x7c>)
 80128c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	24000000 	.word	0x24000000
 80128d8:	10624dd3 	.word	0x10624dd3
 80128dc:	002000c5 	.word	0x002000c5

080128e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b088      	sub	sp, #32
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	460b      	mov	r3, r1
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128ee:	4b35      	ldr	r3, [pc, #212]	; (80129c4 <SDMMC_GetCmdResp6+0xe4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4a35      	ldr	r2, [pc, #212]	; (80129c8 <SDMMC_GetCmdResp6+0xe8>)
 80128f4:	fba2 2303 	umull	r2, r3, r2, r3
 80128f8:	0a5b      	lsrs	r3, r3, #9
 80128fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80128fe:	fb02 f303 	mul.w	r3, r2, r3
 8012902:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	1e5a      	subs	r2, r3, #1
 8012908:	61fa      	str	r2, [r7, #28]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d102      	bne.n	8012914 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801290e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012912:	e052      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012918:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012920:	2b00      	cmp	r3, #0
 8012922:	d0ef      	beq.n	8012904 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1ea      	bne.n	8012904 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012932:	f003 0304 	and.w	r3, r3, #4
 8012936:	2b00      	cmp	r3, #0
 8012938:	d004      	beq.n	8012944 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2204      	movs	r2, #4
 801293e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012940:	2304      	movs	r3, #4
 8012942:	e03a      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012948:	f003 0301 	and.w	r3, r3, #1
 801294c:	2b00      	cmp	r3, #0
 801294e:	d004      	beq.n	801295a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2201      	movs	r2, #1
 8012954:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012956:	2301      	movs	r3, #1
 8012958:	e02f      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff fb7c 	bl	8012058 <SDMMC_GetCommandResponse>
 8012960:	4603      	mov	r3, r0
 8012962:	461a      	mov	r2, r3
 8012964:	7afb      	ldrb	r3, [r7, #11]
 8012966:	4293      	cmp	r3, r2
 8012968:	d001      	beq.n	801296e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801296a:	2301      	movs	r3, #1
 801296c:	e025      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	4a16      	ldr	r2, [pc, #88]	; (80129cc <SDMMC_GetCmdResp6+0xec>)
 8012972:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012974:	2100      	movs	r1, #0
 8012976:	68f8      	ldr	r0, [r7, #12]
 8012978:	f7ff fb7b 	bl	8012072 <SDMMC_GetResponse>
 801297c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012984:	2b00      	cmp	r3, #0
 8012986:	d106      	bne.n	8012996 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	0c1b      	lsrs	r3, r3, #16
 801298c:	b29a      	uxth	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012992:	2300      	movs	r3, #0
 8012994:	e011      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80129a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129a4:	e009      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d002      	beq.n	80129b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129b4:	e001      	b.n	80129ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3720      	adds	r7, #32
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	24000000 	.word	0x24000000
 80129c8:	10624dd3 	.word	0x10624dd3
 80129cc:	002000c5 	.word	0x002000c5

080129d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b085      	sub	sp, #20
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129d8:	4b22      	ldr	r3, [pc, #136]	; (8012a64 <SDMMC_GetCmdResp7+0x94>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4a22      	ldr	r2, [pc, #136]	; (8012a68 <SDMMC_GetCmdResp7+0x98>)
 80129de:	fba2 2303 	umull	r2, r3, r2, r3
 80129e2:	0a5b      	lsrs	r3, r3, #9
 80129e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80129e8:	fb02 f303 	mul.w	r3, r2, r3
 80129ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	1e5a      	subs	r2, r3, #1
 80129f2:	60fa      	str	r2, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129fc:	e02c      	b.n	8012a58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a02:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d0ef      	beq.n	80129ee <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1ea      	bne.n	80129ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a1c:	f003 0304 	and.w	r3, r3, #4
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d004      	beq.n	8012a2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2204      	movs	r2, #4
 8012a28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a2a:	2304      	movs	r3, #4
 8012a2c:	e014      	b.n	8012a58 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a32:	f003 0301 	and.w	r3, r3, #1
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d004      	beq.n	8012a44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a40:	2301      	movs	r3, #1
 8012a42:	e009      	b.n	8012a58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d002      	beq.n	8012a56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2240      	movs	r2, #64	; 0x40
 8012a54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a56:	2300      	movs	r3, #0

}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3714      	adds	r7, #20
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr
 8012a64:	24000000 	.word	0x24000000
 8012a68:	10624dd3 	.word	0x10624dd3

08012a6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b085      	sub	sp, #20
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a74:	4b11      	ldr	r3, [pc, #68]	; (8012abc <SDMMC_GetCmdError+0x50>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a11      	ldr	r2, [pc, #68]	; (8012ac0 <SDMMC_GetCmdError+0x54>)
 8012a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a7e:	0a5b      	lsrs	r3, r3, #9
 8012a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a84:	fb02 f303 	mul.w	r3, r2, r3
 8012a88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	1e5a      	subs	r2, r3, #1
 8012a8e:	60fa      	str	r2, [r7, #12]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d102      	bne.n	8012a9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a98:	e009      	b.n	8012aae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d0f1      	beq.n	8012a8a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4a06      	ldr	r2, [pc, #24]	; (8012ac4 <SDMMC_GetCmdError+0x58>)
 8012aaa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3714      	adds	r7, #20
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr
 8012aba:	bf00      	nop
 8012abc:	24000000 	.word	0x24000000
 8012ac0:	10624dd3 	.word	0x10624dd3
 8012ac4:	002000c5 	.word	0x002000c5

08012ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ac8:	b084      	sub	sp, #16
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b084      	sub	sp, #16
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	6078      	str	r0, [r7, #4]
 8012ad2:	f107 001c 	add.w	r0, r7, #28
 8012ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d120      	bne.n	8012b22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	68da      	ldr	r2, [r3, #12]
 8012af0:	4b2a      	ldr	r3, [pc, #168]	; (8012b9c <USB_CoreInit+0xd4>)
 8012af2:	4013      	ands	r3, r2
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d105      	bne.n	8012b16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f001 faf8 	bl	801410c <USB_CoreReset>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	73fb      	strb	r3, [r7, #15]
 8012b20:	e01a      	b.n	8012b58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f001 faec 	bl	801410c <USB_CoreReset>
 8012b34:	4603      	mov	r3, r0
 8012b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d106      	bne.n	8012b4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	639a      	str	r2, [r3, #56]	; 0x38
 8012b4a:	e005      	b.n	8012b58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d116      	bne.n	8012b8c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <USB_CoreInit+0xd8>)
 8012b6e:	4313      	orrs	r3, r2
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	f043 0206 	orr.w	r2, r3, #6
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	689b      	ldr	r3, [r3, #8]
 8012b84:	f043 0220 	orr.w	r2, r3, #32
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3710      	adds	r7, #16
 8012b92:	46bd      	mov	sp, r7
 8012b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b98:	b004      	add	sp, #16
 8012b9a:	4770      	bx	lr
 8012b9c:	ffbdffbf 	.word	0xffbdffbf
 8012ba0:	03ee0000 	.word	0x03ee0000

08012ba4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012bb2:	79fb      	ldrb	r3, [r7, #7]
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d165      	bne.n	8012c84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	4a41      	ldr	r2, [pc, #260]	; (8012cc0 <USB_SetTurnaroundTime+0x11c>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d906      	bls.n	8012bce <USB_SetTurnaroundTime+0x2a>
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	4a40      	ldr	r2, [pc, #256]	; (8012cc4 <USB_SetTurnaroundTime+0x120>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d202      	bcs.n	8012bce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012bc8:	230f      	movs	r3, #15
 8012bca:	617b      	str	r3, [r7, #20]
 8012bcc:	e062      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	4a3c      	ldr	r2, [pc, #240]	; (8012cc4 <USB_SetTurnaroundTime+0x120>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d306      	bcc.n	8012be4 <USB_SetTurnaroundTime+0x40>
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	4a3b      	ldr	r2, [pc, #236]	; (8012cc8 <USB_SetTurnaroundTime+0x124>)
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	d202      	bcs.n	8012be4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012bde:	230e      	movs	r3, #14
 8012be0:	617b      	str	r3, [r7, #20]
 8012be2:	e057      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	4a38      	ldr	r2, [pc, #224]	; (8012cc8 <USB_SetTurnaroundTime+0x124>)
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d306      	bcc.n	8012bfa <USB_SetTurnaroundTime+0x56>
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	4a37      	ldr	r2, [pc, #220]	; (8012ccc <USB_SetTurnaroundTime+0x128>)
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d202      	bcs.n	8012bfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012bf4:	230d      	movs	r3, #13
 8012bf6:	617b      	str	r3, [r7, #20]
 8012bf8:	e04c      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	4a33      	ldr	r2, [pc, #204]	; (8012ccc <USB_SetTurnaroundTime+0x128>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d306      	bcc.n	8012c10 <USB_SetTurnaroundTime+0x6c>
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	4a32      	ldr	r2, [pc, #200]	; (8012cd0 <USB_SetTurnaroundTime+0x12c>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d802      	bhi.n	8012c10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012c0a:	230c      	movs	r3, #12
 8012c0c:	617b      	str	r3, [r7, #20]
 8012c0e:	e041      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	4a2f      	ldr	r2, [pc, #188]	; (8012cd0 <USB_SetTurnaroundTime+0x12c>)
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d906      	bls.n	8012c26 <USB_SetTurnaroundTime+0x82>
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	4a2e      	ldr	r2, [pc, #184]	; (8012cd4 <USB_SetTurnaroundTime+0x130>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d802      	bhi.n	8012c26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c20:	230b      	movs	r3, #11
 8012c22:	617b      	str	r3, [r7, #20]
 8012c24:	e036      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	4a2a      	ldr	r2, [pc, #168]	; (8012cd4 <USB_SetTurnaroundTime+0x130>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d906      	bls.n	8012c3c <USB_SetTurnaroundTime+0x98>
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	4a29      	ldr	r2, [pc, #164]	; (8012cd8 <USB_SetTurnaroundTime+0x134>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d802      	bhi.n	8012c3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c36:	230a      	movs	r3, #10
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	e02b      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	4a26      	ldr	r2, [pc, #152]	; (8012cd8 <USB_SetTurnaroundTime+0x134>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d906      	bls.n	8012c52 <USB_SetTurnaroundTime+0xae>
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	4a25      	ldr	r2, [pc, #148]	; (8012cdc <USB_SetTurnaroundTime+0x138>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d202      	bcs.n	8012c52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c4c:	2309      	movs	r3, #9
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	e020      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	4a21      	ldr	r2, [pc, #132]	; (8012cdc <USB_SetTurnaroundTime+0x138>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d306      	bcc.n	8012c68 <USB_SetTurnaroundTime+0xc4>
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	4a20      	ldr	r2, [pc, #128]	; (8012ce0 <USB_SetTurnaroundTime+0x13c>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d802      	bhi.n	8012c68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c62:	2308      	movs	r3, #8
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e015      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	4a1d      	ldr	r2, [pc, #116]	; (8012ce0 <USB_SetTurnaroundTime+0x13c>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d906      	bls.n	8012c7e <USB_SetTurnaroundTime+0xda>
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	4a1c      	ldr	r2, [pc, #112]	; (8012ce4 <USB_SetTurnaroundTime+0x140>)
 8012c74:	4293      	cmp	r3, r2
 8012c76:	d202      	bcs.n	8012c7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c78:	2307      	movs	r3, #7
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	e00a      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c7e:	2306      	movs	r3, #6
 8012c80:	617b      	str	r3, [r7, #20]
 8012c82:	e007      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c84:	79fb      	ldrb	r3, [r7, #7]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d102      	bne.n	8012c90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c8a:	2309      	movs	r3, #9
 8012c8c:	617b      	str	r3, [r7, #20]
 8012c8e:	e001      	b.n	8012c94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c90:	2309      	movs	r3, #9
 8012c92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	68da      	ldr	r2, [r3, #12]
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	029b      	lsls	r3, r3, #10
 8012ca8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012cac:	431a      	orrs	r2, r3
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012cb2:	2300      	movs	r3, #0
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	371c      	adds	r7, #28
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	00d8acbf 	.word	0x00d8acbf
 8012cc4:	00e4e1c0 	.word	0x00e4e1c0
 8012cc8:	00f42400 	.word	0x00f42400
 8012ccc:	01067380 	.word	0x01067380
 8012cd0:	011a499f 	.word	0x011a499f
 8012cd4:	01312cff 	.word	0x01312cff
 8012cd8:	014ca43f 	.word	0x014ca43f
 8012cdc:	016e3600 	.word	0x016e3600
 8012ce0:	01a6ab1f 	.word	0x01a6ab1f
 8012ce4:	01e84800 	.word	0x01e84800

08012ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	f043 0201 	orr.w	r2, r3, #1
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cfc:	2300      	movs	r3, #0
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	370c      	adds	r7, #12
 8012d02:	46bd      	mov	sp, r7
 8012d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d08:	4770      	bx	lr

08012d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d0a:	b480      	push	{r7}
 8012d0c:	b083      	sub	sp, #12
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	f023 0201 	bic.w	r2, r3, #1
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	460b      	mov	r3, r1
 8012d36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d48:	78fb      	ldrb	r3, [r7, #3]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d115      	bne.n	8012d7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d5a:	2001      	movs	r0, #1
 8012d5c:	f7f1 fd58 	bl	8004810 <HAL_Delay>
      ms++;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	3301      	adds	r3, #1
 8012d64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f001 f93f 	bl	8013fea <USB_GetMode>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d01e      	beq.n	8012db0 <USB_SetCurrentMode+0x84>
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2b31      	cmp	r3, #49	; 0x31
 8012d76:	d9f0      	bls.n	8012d5a <USB_SetCurrentMode+0x2e>
 8012d78:	e01a      	b.n	8012db0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d7a:	78fb      	ldrb	r3, [r7, #3]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d115      	bne.n	8012dac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d8c:	2001      	movs	r0, #1
 8012d8e:	f7f1 fd3f 	bl	8004810 <HAL_Delay>
      ms++;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	3301      	adds	r3, #1
 8012d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f001 f926 	bl	8013fea <USB_GetMode>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d005      	beq.n	8012db0 <USB_SetCurrentMode+0x84>
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b31      	cmp	r3, #49	; 0x31
 8012da8:	d9f0      	bls.n	8012d8c <USB_SetCurrentMode+0x60>
 8012daa:	e001      	b.n	8012db0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012dac:	2301      	movs	r3, #1
 8012dae:	e005      	b.n	8012dbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2b32      	cmp	r3, #50	; 0x32
 8012db4:	d101      	bne.n	8012dba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012db6:	2301      	movs	r3, #1
 8012db8:	e000      	b.n	8012dbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3710      	adds	r7, #16
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012dc4:	b084      	sub	sp, #16
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b086      	sub	sp, #24
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
 8012dce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012dde:	2300      	movs	r3, #0
 8012de0:	613b      	str	r3, [r7, #16]
 8012de2:	e009      	b.n	8012df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	3340      	adds	r3, #64	; 0x40
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	4413      	add	r3, r2
 8012dee:	2200      	movs	r2, #0
 8012df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	3301      	adds	r3, #1
 8012df6:	613b      	str	r3, [r7, #16]
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	2b0e      	cmp	r3, #14
 8012dfc:	d9f2      	bls.n	8012de4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d11c      	bne.n	8012e3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e12:	f043 0302 	orr.w	r3, r3, #2
 8012e16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	e005      	b.n	8012e4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e50:	461a      	mov	r2, r3
 8012e52:	2300      	movs	r3, #0
 8012e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e64:	461a      	mov	r2, r3
 8012e66:	680b      	ldr	r3, [r1, #0]
 8012e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d10c      	bne.n	8012e8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d104      	bne.n	8012e80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e76:	2100      	movs	r1, #0
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 f965 	bl	8013148 <USB_SetDevSpeed>
 8012e7e:	e008      	b.n	8012e92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e80:	2101      	movs	r1, #1
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 f960 	bl	8013148 <USB_SetDevSpeed>
 8012e88:	e003      	b.n	8012e92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e8a:	2103      	movs	r1, #3
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f000 f95b 	bl	8013148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e92:	2110      	movs	r1, #16
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f000 f8f3 	bl	8013080 <USB_FlushTxFifo>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f91f 	bl	80130e8 <USB_FlushRxFifo>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eba:	461a      	mov	r2, r3
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	2300      	movs	r3, #0
 8012eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ed8:	2300      	movs	r3, #0
 8012eda:	613b      	str	r3, [r7, #16]
 8012edc:	e043      	b.n	8012f66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ef4:	d118      	bne.n	8012f28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d10a      	bne.n	8012f12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	015a      	lsls	r2, r3, #5
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	4413      	add	r3, r2
 8012f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f08:	461a      	mov	r2, r3
 8012f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f0e:	6013      	str	r3, [r2, #0]
 8012f10:	e013      	b.n	8012f3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f1e:	461a      	mov	r2, r3
 8012f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	e008      	b.n	8012f3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	015a      	lsls	r2, r3, #5
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	4413      	add	r3, r2
 8012f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f34:	461a      	mov	r2, r3
 8012f36:	2300      	movs	r3, #0
 8012f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	015a      	lsls	r2, r3, #5
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	4413      	add	r3, r2
 8012f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f46:	461a      	mov	r2, r3
 8012f48:	2300      	movs	r3, #0
 8012f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	015a      	lsls	r2, r3, #5
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	4413      	add	r3, r2
 8012f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f58:	461a      	mov	r2, r3
 8012f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	3301      	adds	r3, #1
 8012f64:	613b      	str	r3, [r7, #16]
 8012f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f68:	693a      	ldr	r2, [r7, #16]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d3b7      	bcc.n	8012ede <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f6e:	2300      	movs	r3, #0
 8012f70:	613b      	str	r3, [r7, #16]
 8012f72:	e043      	b.n	8012ffc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	015a      	lsls	r2, r3, #5
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f8a:	d118      	bne.n	8012fbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10a      	bne.n	8012fa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	015a      	lsls	r2, r3, #5
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	4413      	add	r3, r2
 8012f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012fa4:	6013      	str	r3, [r2, #0]
 8012fa6:	e013      	b.n	8012fd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	015a      	lsls	r2, r3, #5
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	e008      	b.n	8012fd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	015a      	lsls	r2, r3, #5
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fca:	461a      	mov	r2, r3
 8012fcc:	2300      	movs	r3, #0
 8012fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	015a      	lsls	r2, r3, #5
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	4413      	add	r3, r2
 8012fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fdc:	461a      	mov	r2, r3
 8012fde:	2300      	movs	r3, #0
 8012fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	015a      	lsls	r2, r3, #5
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	4413      	add	r3, r2
 8012fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fee:	461a      	mov	r2, r3
 8012ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	613b      	str	r3, [r7, #16]
 8012ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffe:	693a      	ldr	r2, [r7, #16]
 8013000:	429a      	cmp	r2, r3
 8013002:	d3b7      	bcc.n	8012f74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801300a:	691b      	ldr	r3, [r3, #16]
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2200      	movs	r2, #0
 801301c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013028:	2b00      	cmp	r3, #0
 801302a:	d105      	bne.n	8013038 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	699b      	ldr	r3, [r3, #24]
 8013030:	f043 0210 	orr.w	r2, r3, #16
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	699a      	ldr	r2, [r3, #24]
 801303c:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <USB_DevInit+0x2b4>)
 801303e:	4313      	orrs	r3, r2
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013046:	2b00      	cmp	r3, #0
 8013048:	d005      	beq.n	8013056 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	699b      	ldr	r3, [r3, #24]
 801304e:	f043 0208 	orr.w	r2, r3, #8
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013058:	2b01      	cmp	r3, #1
 801305a:	d105      	bne.n	8013068 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	699a      	ldr	r2, [r3, #24]
 8013060:	4b06      	ldr	r3, [pc, #24]	; (801307c <USB_DevInit+0x2b8>)
 8013062:	4313      	orrs	r3, r2
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013068:	7dfb      	ldrb	r3, [r7, #23]
}
 801306a:	4618      	mov	r0, r3
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013074:	b004      	add	sp, #16
 8013076:	4770      	bx	lr
 8013078:	803c3800 	.word	0x803c3800
 801307c:	40000004 	.word	0x40000004

08013080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013080:	b480      	push	{r7}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801308a:	2300      	movs	r3, #0
 801308c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	3301      	adds	r3, #1
 8013092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	4a13      	ldr	r2, [pc, #76]	; (80130e4 <USB_FlushTxFifo+0x64>)
 8013098:	4293      	cmp	r3, r2
 801309a:	d901      	bls.n	80130a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801309c:	2303      	movs	r3, #3
 801309e:	e01b      	b.n	80130d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	691b      	ldr	r3, [r3, #16]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	daf2      	bge.n	801308e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80130a8:	2300      	movs	r3, #0
 80130aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	019b      	lsls	r3, r3, #6
 80130b0:	f043 0220 	orr.w	r2, r3, #32
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3301      	adds	r3, #1
 80130bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	4a08      	ldr	r2, [pc, #32]	; (80130e4 <USB_FlushTxFifo+0x64>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d901      	bls.n	80130ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130c6:	2303      	movs	r3, #3
 80130c8:	e006      	b.n	80130d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	f003 0320 	and.w	r3, r3, #32
 80130d2:	2b20      	cmp	r3, #32
 80130d4:	d0f0      	beq.n	80130b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80130d6:	2300      	movs	r3, #0
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3714      	adds	r7, #20
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr
 80130e4:	00030d40 	.word	0x00030d40

080130e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b085      	sub	sp, #20
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130f0:	2300      	movs	r3, #0
 80130f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3301      	adds	r3, #1
 80130f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	4a11      	ldr	r2, [pc, #68]	; (8013144 <USB_FlushRxFifo+0x5c>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d901      	bls.n	8013106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e018      	b.n	8013138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	2b00      	cmp	r3, #0
 801310c:	daf2      	bge.n	80130f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801310e:	2300      	movs	r3, #0
 8013110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2210      	movs	r2, #16
 8013116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	3301      	adds	r3, #1
 801311c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	4a08      	ldr	r2, [pc, #32]	; (8013144 <USB_FlushRxFifo+0x5c>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d901      	bls.n	801312a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013126:	2303      	movs	r3, #3
 8013128:	e006      	b.n	8013138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	f003 0310 	and.w	r3, r3, #16
 8013132:	2b10      	cmp	r3, #16
 8013134:	d0f0      	beq.n	8013118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013136:	2300      	movs	r3, #0
}
 8013138:	4618      	mov	r0, r3
 801313a:	3714      	adds	r7, #20
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr
 8013144:	00030d40 	.word	0x00030d40

08013148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	460b      	mov	r3, r1
 8013152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	78fb      	ldrb	r3, [r7, #3]
 8013162:	68f9      	ldr	r1, [r7, #12]
 8013164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013168:	4313      	orrs	r3, r2
 801316a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3714      	adds	r7, #20
 8013172:	46bd      	mov	sp, r7
 8013174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013178:	4770      	bx	lr

0801317a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801317a:	b480      	push	{r7}
 801317c:	b087      	sub	sp, #28
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801318c:	689b      	ldr	r3, [r3, #8]
 801318e:	f003 0306 	and.w	r3, r3, #6
 8013192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d102      	bne.n	80131a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801319a:	2300      	movs	r3, #0
 801319c:	75fb      	strb	r3, [r7, #23]
 801319e:	e00a      	b.n	80131b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2b02      	cmp	r3, #2
 80131a4:	d002      	beq.n	80131ac <USB_GetDevSpeed+0x32>
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2b06      	cmp	r3, #6
 80131aa:	d102      	bne.n	80131b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80131ac:	2302      	movs	r3, #2
 80131ae:	75fb      	strb	r3, [r7, #23]
 80131b0:	e001      	b.n	80131b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80131b2:	230f      	movs	r3, #15
 80131b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	371c      	adds	r7, #28
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	785b      	ldrb	r3, [r3, #1]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d139      	bne.n	8013254 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131e6:	69da      	ldr	r2, [r3, #28]
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f003 030f 	and.w	r3, r3, #15
 80131f0:	2101      	movs	r1, #1
 80131f2:	fa01 f303 	lsl.w	r3, r1, r3
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	68f9      	ldr	r1, [r7, #12]
 80131fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131fe:	4313      	orrs	r3, r2
 8013200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	015a      	lsls	r2, r3, #5
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	4413      	add	r3, r2
 801320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013214:	2b00      	cmp	r3, #0
 8013216:	d153      	bne.n	80132c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	015a      	lsls	r2, r3, #5
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	4413      	add	r3, r2
 8013220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	791b      	ldrb	r3, [r3, #4]
 8013232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	059b      	lsls	r3, r3, #22
 801323a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801323c:	431a      	orrs	r2, r3
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	0159      	lsls	r1, r3, #5
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	440b      	add	r3, r1
 8013246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801324a:	4619      	mov	r1, r3
 801324c:	4b20      	ldr	r3, [pc, #128]	; (80132d0 <USB_ActivateEndpoint+0x10c>)
 801324e:	4313      	orrs	r3, r2
 8013250:	600b      	str	r3, [r1, #0]
 8013252:	e035      	b.n	80132c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801325a:	69da      	ldr	r2, [r3, #28]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	f003 030f 	and.w	r3, r3, #15
 8013264:	2101      	movs	r1, #1
 8013266:	fa01 f303 	lsl.w	r3, r1, r3
 801326a:	041b      	lsls	r3, r3, #16
 801326c:	68f9      	ldr	r1, [r7, #12]
 801326e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013272:	4313      	orrs	r3, r2
 8013274:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	015a      	lsls	r2, r3, #5
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	4413      	add	r3, r2
 801327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013288:	2b00      	cmp	r3, #0
 801328a:	d119      	bne.n	80132c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	015a      	lsls	r2, r3, #5
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	4413      	add	r3, r2
 8013294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	689b      	ldr	r3, [r3, #8]
 801329e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	791b      	ldrb	r3, [r3, #4]
 80132a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80132a8:	430b      	orrs	r3, r1
 80132aa:	431a      	orrs	r2, r3
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	0159      	lsls	r1, r3, #5
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	440b      	add	r3, r1
 80132b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b8:	4619      	mov	r1, r3
 80132ba:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <USB_ActivateEndpoint+0x10c>)
 80132bc:	4313      	orrs	r3, r2
 80132be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3714      	adds	r7, #20
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	10008000 	.word	0x10008000

080132d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132d4:	b480      	push	{r7}
 80132d6:	b085      	sub	sp, #20
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	785b      	ldrb	r3, [r3, #1]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d161      	bne.n	80133b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	015a      	lsls	r2, r3, #5
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	4413      	add	r3, r2
 80132f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013306:	d11f      	bne.n	8013348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	015a      	lsls	r2, r3, #5
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	4413      	add	r3, r2
 8013310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	68ba      	ldr	r2, [r7, #8]
 8013318:	0151      	lsls	r1, r2, #5
 801331a:	68fa      	ldr	r2, [r7, #12]
 801331c:	440a      	add	r2, r1
 801331e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	0151      	lsls	r1, r2, #5
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	440a      	add	r2, r1
 801333e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f003 030f 	and.w	r3, r3, #15
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f303 	lsl.w	r3, r1, r3
 801335e:	b29b      	uxth	r3, r3
 8013360:	43db      	mvns	r3, r3
 8013362:	68f9      	ldr	r1, [r7, #12]
 8013364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013368:	4013      	ands	r3, r2
 801336a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013372:	69da      	ldr	r2, [r3, #28]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f003 030f 	and.w	r3, r3, #15
 801337c:	2101      	movs	r1, #1
 801337e:	fa01 f303 	lsl.w	r3, r1, r3
 8013382:	b29b      	uxth	r3, r3
 8013384:	43db      	mvns	r3, r3
 8013386:	68f9      	ldr	r1, [r7, #12]
 8013388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801338c:	4013      	ands	r3, r2
 801338e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	0159      	lsls	r1, r3, #5
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	440b      	add	r3, r1
 80133a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133aa:	4619      	mov	r1, r3
 80133ac:	4b35      	ldr	r3, [pc, #212]	; (8013484 <USB_DeactivateEndpoint+0x1b0>)
 80133ae:	4013      	ands	r3, r2
 80133b0:	600b      	str	r3, [r1, #0]
 80133b2:	e060      	b.n	8013476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	015a      	lsls	r2, r3, #5
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4413      	add	r3, r2
 80133bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133ca:	d11f      	bne.n	801340c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	015a      	lsls	r2, r3, #5
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	4413      	add	r3, r2
 80133d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	0151      	lsls	r1, r2, #5
 80133de:	68fa      	ldr	r2, [r7, #12]
 80133e0:	440a      	add	r2, r1
 80133e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	015a      	lsls	r2, r3, #5
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	4413      	add	r3, r2
 80133f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	0151      	lsls	r1, r2, #5
 80133fe:	68fa      	ldr	r2, [r7, #12]
 8013400:	440a      	add	r2, r1
 8013402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801340a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	f003 030f 	and.w	r3, r3, #15
 801341c:	2101      	movs	r1, #1
 801341e:	fa01 f303 	lsl.w	r3, r1, r3
 8013422:	041b      	lsls	r3, r3, #16
 8013424:	43db      	mvns	r3, r3
 8013426:	68f9      	ldr	r1, [r7, #12]
 8013428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801342c:	4013      	ands	r3, r2
 801342e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013436:	69da      	ldr	r2, [r3, #28]
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 030f 	and.w	r3, r3, #15
 8013440:	2101      	movs	r1, #1
 8013442:	fa01 f303 	lsl.w	r3, r1, r3
 8013446:	041b      	lsls	r3, r3, #16
 8013448:	43db      	mvns	r3, r3
 801344a:	68f9      	ldr	r1, [r7, #12]
 801344c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013450:	4013      	ands	r3, r2
 8013452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	015a      	lsls	r2, r3, #5
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	4413      	add	r3, r2
 801345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013460:	681a      	ldr	r2, [r3, #0]
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	0159      	lsls	r1, r3, #5
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	440b      	add	r3, r1
 801346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801346e:	4619      	mov	r1, r3
 8013470:	4b05      	ldr	r3, [pc, #20]	; (8013488 <USB_DeactivateEndpoint+0x1b4>)
 8013472:	4013      	ands	r3, r2
 8013474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013476:	2300      	movs	r3, #0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3714      	adds	r7, #20
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr
 8013484:	ec337800 	.word	0xec337800
 8013488:	eff37800 	.word	0xeff37800

0801348c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b08a      	sub	sp, #40	; 0x28
 8013490:	af02      	add	r7, sp, #8
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	4613      	mov	r3, r2
 8013498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	785b      	ldrb	r3, [r3, #1]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	f040 8181 	bne.w	80137b0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	691b      	ldr	r3, [r3, #16]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d132      	bne.n	801351c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	015a      	lsls	r2, r3, #5
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	4413      	add	r3, r2
 80134be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c2:	691a      	ldr	r2, [r3, #16]
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	0159      	lsls	r1, r3, #5
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	440b      	add	r3, r1
 80134cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d0:	4619      	mov	r1, r3
 80134d2:	4ba5      	ldr	r3, [pc, #660]	; (8013768 <USB_EPStartXfer+0x2dc>)
 80134d4:	4013      	ands	r3, r2
 80134d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	015a      	lsls	r2, r3, #5
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	4413      	add	r3, r2
 80134e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	69ba      	ldr	r2, [r7, #24]
 80134e8:	0151      	lsls	r1, r2, #5
 80134ea:	69fa      	ldr	r2, [r7, #28]
 80134ec:	440a      	add	r2, r1
 80134ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	015a      	lsls	r2, r3, #5
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	4413      	add	r3, r2
 8013500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013504:	691a      	ldr	r2, [r3, #16]
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	0159      	lsls	r1, r3, #5
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	440b      	add	r3, r1
 801350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013512:	4619      	mov	r1, r3
 8013514:	4b95      	ldr	r3, [pc, #596]	; (801376c <USB_EPStartXfer+0x2e0>)
 8013516:	4013      	ands	r3, r2
 8013518:	610b      	str	r3, [r1, #16]
 801351a:	e092      	b.n	8013642 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	015a      	lsls	r2, r3, #5
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	4413      	add	r3, r2
 8013524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013528:	691a      	ldr	r2, [r3, #16]
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	0159      	lsls	r1, r3, #5
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	440b      	add	r3, r1
 8013532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013536:	4619      	mov	r1, r3
 8013538:	4b8c      	ldr	r3, [pc, #560]	; (801376c <USB_EPStartXfer+0x2e0>)
 801353a:	4013      	ands	r3, r2
 801353c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	015a      	lsls	r2, r3, #5
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	4413      	add	r3, r2
 8013546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801354a:	691a      	ldr	r2, [r3, #16]
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	0159      	lsls	r1, r3, #5
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	440b      	add	r3, r1
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	4619      	mov	r1, r3
 801355a:	4b83      	ldr	r3, [pc, #524]	; (8013768 <USB_EPStartXfer+0x2dc>)
 801355c:	4013      	ands	r3, r2
 801355e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013560:	69bb      	ldr	r3, [r7, #24]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d11a      	bne.n	801359c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	691a      	ldr	r2, [r3, #16]
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	429a      	cmp	r2, r3
 8013570:	d903      	bls.n	801357a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	689a      	ldr	r2, [r3, #8]
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	015a      	lsls	r2, r3, #5
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	4413      	add	r3, r2
 8013582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013586:	691b      	ldr	r3, [r3, #16]
 8013588:	69ba      	ldr	r2, [r7, #24]
 801358a:	0151      	lsls	r1, r2, #5
 801358c:	69fa      	ldr	r2, [r7, #28]
 801358e:	440a      	add	r2, r1
 8013590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013598:	6113      	str	r3, [r2, #16]
 801359a:	e01b      	b.n	80135d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	6919      	ldr	r1, [r3, #16]
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	440b      	add	r3, r1
 80135b4:	1e59      	subs	r1, r3, #1
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80135be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135c0:	4b6b      	ldr	r3, [pc, #428]	; (8013770 <USB_EPStartXfer+0x2e4>)
 80135c2:	400b      	ands	r3, r1
 80135c4:	69b9      	ldr	r1, [r7, #24]
 80135c6:	0148      	lsls	r0, r1, #5
 80135c8:	69f9      	ldr	r1, [r7, #28]
 80135ca:	4401      	add	r1, r0
 80135cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135d0:	4313      	orrs	r3, r2
 80135d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	015a      	lsls	r2, r3, #5
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	4413      	add	r3, r2
 80135dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e0:	691a      	ldr	r2, [r3, #16]
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	691b      	ldr	r3, [r3, #16]
 80135e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135ea:	69b9      	ldr	r1, [r7, #24]
 80135ec:	0148      	lsls	r0, r1, #5
 80135ee:	69f9      	ldr	r1, [r7, #28]
 80135f0:	4401      	add	r1, r0
 80135f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135f6:	4313      	orrs	r3, r2
 80135f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	791b      	ldrb	r3, [r3, #4]
 80135fe:	2b01      	cmp	r3, #1
 8013600:	d11f      	bne.n	8013642 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	015a      	lsls	r2, r3, #5
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	4413      	add	r3, r2
 801360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360e:	691b      	ldr	r3, [r3, #16]
 8013610:	69ba      	ldr	r2, [r7, #24]
 8013612:	0151      	lsls	r1, r2, #5
 8013614:	69fa      	ldr	r2, [r7, #28]
 8013616:	440a      	add	r2, r1
 8013618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801361c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	69ba      	ldr	r2, [r7, #24]
 8013632:	0151      	lsls	r1, r2, #5
 8013634:	69fa      	ldr	r2, [r7, #28]
 8013636:	440a      	add	r2, r1
 8013638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801363c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013642:	79fb      	ldrb	r3, [r7, #7]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d14b      	bne.n	80136e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	69db      	ldr	r3, [r3, #28]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d009      	beq.n	8013664 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	015a      	lsls	r2, r3, #5
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	4413      	add	r3, r2
 8013658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801365c:	461a      	mov	r2, r3
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	69db      	ldr	r3, [r3, #28]
 8013662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	791b      	ldrb	r3, [r3, #4]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d128      	bne.n	80136be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013678:	2b00      	cmp	r3, #0
 801367a:	d110      	bne.n	801369e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	015a      	lsls	r2, r3, #5
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	4413      	add	r3, r2
 8013684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	69ba      	ldr	r2, [r7, #24]
 801368c:	0151      	lsls	r1, r2, #5
 801368e:	69fa      	ldr	r2, [r7, #28]
 8013690:	440a      	add	r2, r1
 8013692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801369a:	6013      	str	r3, [r2, #0]
 801369c:	e00f      	b.n	80136be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	015a      	lsls	r2, r3, #5
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	4413      	add	r3, r2
 80136a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	69ba      	ldr	r2, [r7, #24]
 80136ae:	0151      	lsls	r1, r2, #5
 80136b0:	69fa      	ldr	r2, [r7, #28]
 80136b2:	440a      	add	r2, r1
 80136b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	015a      	lsls	r2, r3, #5
 80136c2:	69fb      	ldr	r3, [r7, #28]
 80136c4:	4413      	add	r3, r2
 80136c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	69ba      	ldr	r2, [r7, #24]
 80136ce:	0151      	lsls	r1, r2, #5
 80136d0:	69fa      	ldr	r2, [r7, #28]
 80136d2:	440a      	add	r2, r1
 80136d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136dc:	6013      	str	r3, [r2, #0]
 80136de:	e16a      	b.n	80139b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	015a      	lsls	r2, r3, #5
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	4413      	add	r3, r2
 80136e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	69ba      	ldr	r2, [r7, #24]
 80136f0:	0151      	lsls	r1, r2, #5
 80136f2:	69fa      	ldr	r2, [r7, #28]
 80136f4:	440a      	add	r2, r1
 80136f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	791b      	ldrb	r3, [r3, #4]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d015      	beq.n	8013734 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	691b      	ldr	r3, [r3, #16]
 801370c:	2b00      	cmp	r3, #0
 801370e:	f000 8152 	beq.w	80139b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	f003 030f 	and.w	r3, r3, #15
 8013722:	2101      	movs	r1, #1
 8013724:	fa01 f303 	lsl.w	r3, r1, r3
 8013728:	69f9      	ldr	r1, [r7, #28]
 801372a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801372e:	4313      	orrs	r3, r2
 8013730:	634b      	str	r3, [r1, #52]	; 0x34
 8013732:	e140      	b.n	80139b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013740:	2b00      	cmp	r3, #0
 8013742:	d117      	bne.n	8013774 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	015a      	lsls	r2, r3, #5
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	4413      	add	r3, r2
 801374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	69ba      	ldr	r2, [r7, #24]
 8013754:	0151      	lsls	r1, r2, #5
 8013756:	69fa      	ldr	r2, [r7, #28]
 8013758:	440a      	add	r2, r1
 801375a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801375e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013762:	6013      	str	r3, [r2, #0]
 8013764:	e016      	b.n	8013794 <USB_EPStartXfer+0x308>
 8013766:	bf00      	nop
 8013768:	e007ffff 	.word	0xe007ffff
 801376c:	fff80000 	.word	0xfff80000
 8013770:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	015a      	lsls	r2, r3, #5
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	4413      	add	r3, r2
 801377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	69ba      	ldr	r2, [r7, #24]
 8013784:	0151      	lsls	r1, r2, #5
 8013786:	69fa      	ldr	r2, [r7, #28]
 8013788:	440a      	add	r2, r1
 801378a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013792:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	68d9      	ldr	r1, [r3, #12]
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	781a      	ldrb	r2, [r3, #0]
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	691b      	ldr	r3, [r3, #16]
 80137a0:	b298      	uxth	r0, r3
 80137a2:	79fb      	ldrb	r3, [r7, #7]
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	4603      	mov	r3, r0
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f000 f9b9 	bl	8013b20 <USB_WritePacket>
 80137ae:	e102      	b.n	80139b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	015a      	lsls	r2, r3, #5
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	4413      	add	r3, r2
 80137b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137bc:	691a      	ldr	r2, [r3, #16]
 80137be:	69bb      	ldr	r3, [r7, #24]
 80137c0:	0159      	lsls	r1, r3, #5
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	440b      	add	r3, r1
 80137c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ca:	4619      	mov	r1, r3
 80137cc:	4b7c      	ldr	r3, [pc, #496]	; (80139c0 <USB_EPStartXfer+0x534>)
 80137ce:	4013      	ands	r3, r2
 80137d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	015a      	lsls	r2, r3, #5
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	4413      	add	r3, r2
 80137da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137de:	691a      	ldr	r2, [r3, #16]
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	0159      	lsls	r1, r3, #5
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	440b      	add	r3, r1
 80137e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ec:	4619      	mov	r1, r3
 80137ee:	4b75      	ldr	r3, [pc, #468]	; (80139c4 <USB_EPStartXfer+0x538>)
 80137f0:	4013      	ands	r3, r2
 80137f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d12f      	bne.n	801385a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d003      	beq.n	801380a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	689a      	ldr	r2, [r3, #8]
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	689a      	ldr	r2, [r3, #8]
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	015a      	lsls	r2, r3, #5
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	4413      	add	r3, r2
 801381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801381e:	691a      	ldr	r2, [r3, #16]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	6a1b      	ldr	r3, [r3, #32]
 8013824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013828:	69b9      	ldr	r1, [r7, #24]
 801382a:	0148      	lsls	r0, r1, #5
 801382c:	69f9      	ldr	r1, [r7, #28]
 801382e:	4401      	add	r1, r0
 8013830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013834:	4313      	orrs	r3, r2
 8013836:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013838:	69bb      	ldr	r3, [r7, #24]
 801383a:	015a      	lsls	r2, r3, #5
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	4413      	add	r3, r2
 8013840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013844:	691b      	ldr	r3, [r3, #16]
 8013846:	69ba      	ldr	r2, [r7, #24]
 8013848:	0151      	lsls	r1, r2, #5
 801384a:	69fa      	ldr	r2, [r7, #28]
 801384c:	440a      	add	r2, r1
 801384e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013856:	6113      	str	r3, [r2, #16]
 8013858:	e05f      	b.n	801391a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d123      	bne.n	80138aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	015a      	lsls	r2, r3, #5
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	4413      	add	r3, r2
 801386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801386e:	691a      	ldr	r2, [r3, #16]
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	689b      	ldr	r3, [r3, #8]
 8013874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013878:	69b9      	ldr	r1, [r7, #24]
 801387a:	0148      	lsls	r0, r1, #5
 801387c:	69f9      	ldr	r1, [r7, #28]
 801387e:	4401      	add	r1, r0
 8013880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013884:	4313      	orrs	r3, r2
 8013886:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	015a      	lsls	r2, r3, #5
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	4413      	add	r3, r2
 8013890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013894:	691b      	ldr	r3, [r3, #16]
 8013896:	69ba      	ldr	r2, [r7, #24]
 8013898:	0151      	lsls	r1, r2, #5
 801389a:	69fa      	ldr	r2, [r7, #28]
 801389c:	440a      	add	r2, r1
 801389e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138a6:	6113      	str	r3, [r2, #16]
 80138a8:	e037      	b.n	801391a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	691a      	ldr	r2, [r3, #16]
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	4413      	add	r3, r2
 80138b4:	1e5a      	subs	r2, r3, #1
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	689b      	ldr	r3, [r3, #8]
 80138ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80138be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	689b      	ldr	r3, [r3, #8]
 80138c4:	8afa      	ldrh	r2, [r7, #22]
 80138c6:	fb03 f202 	mul.w	r2, r3, r2
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	015a      	lsls	r2, r3, #5
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	4413      	add	r3, r2
 80138d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138da:	691a      	ldr	r2, [r3, #16]
 80138dc:	8afb      	ldrh	r3, [r7, #22]
 80138de:	04d9      	lsls	r1, r3, #19
 80138e0:	4b39      	ldr	r3, [pc, #228]	; (80139c8 <USB_EPStartXfer+0x53c>)
 80138e2:	400b      	ands	r3, r1
 80138e4:	69b9      	ldr	r1, [r7, #24]
 80138e6:	0148      	lsls	r0, r1, #5
 80138e8:	69f9      	ldr	r1, [r7, #28]
 80138ea:	4401      	add	r1, r0
 80138ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138f0:	4313      	orrs	r3, r2
 80138f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	015a      	lsls	r2, r3, #5
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	4413      	add	r3, r2
 80138fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013900:	691a      	ldr	r2, [r3, #16]
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	6a1b      	ldr	r3, [r3, #32]
 8013906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801390a:	69b9      	ldr	r1, [r7, #24]
 801390c:	0148      	lsls	r0, r1, #5
 801390e:	69f9      	ldr	r1, [r7, #28]
 8013910:	4401      	add	r1, r0
 8013912:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013916:	4313      	orrs	r3, r2
 8013918:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801391a:	79fb      	ldrb	r3, [r7, #7]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d10d      	bne.n	801393c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d009      	beq.n	801393c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	68d9      	ldr	r1, [r3, #12]
 801392c:	69bb      	ldr	r3, [r7, #24]
 801392e:	015a      	lsls	r2, r3, #5
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	4413      	add	r3, r2
 8013934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013938:	460a      	mov	r2, r1
 801393a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	791b      	ldrb	r3, [r3, #4]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d128      	bne.n	8013996 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013950:	2b00      	cmp	r3, #0
 8013952:	d110      	bne.n	8013976 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	015a      	lsls	r2, r3, #5
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	4413      	add	r3, r2
 801395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	69ba      	ldr	r2, [r7, #24]
 8013964:	0151      	lsls	r1, r2, #5
 8013966:	69fa      	ldr	r2, [r7, #28]
 8013968:	440a      	add	r2, r1
 801396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801396e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013972:	6013      	str	r3, [r2, #0]
 8013974:	e00f      	b.n	8013996 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	015a      	lsls	r2, r3, #5
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	4413      	add	r3, r2
 801397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	69ba      	ldr	r2, [r7, #24]
 8013986:	0151      	lsls	r1, r2, #5
 8013988:	69fa      	ldr	r2, [r7, #28]
 801398a:	440a      	add	r2, r1
 801398c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013994:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	015a      	lsls	r2, r3, #5
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	4413      	add	r3, r2
 801399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	69ba      	ldr	r2, [r7, #24]
 80139a6:	0151      	lsls	r1, r2, #5
 80139a8:	69fa      	ldr	r2, [r7, #28]
 80139aa:	440a      	add	r2, r1
 80139ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139b6:	2300      	movs	r3, #0
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3720      	adds	r7, #32
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	fff80000 	.word	0xfff80000
 80139c4:	e007ffff 	.word	0xe007ffff
 80139c8:	1ff80000 	.word	0x1ff80000

080139cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139cc:	b480      	push	{r7}
 80139ce:	b087      	sub	sp, #28
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139d6:	2300      	movs	r3, #0
 80139d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139da:	2300      	movs	r3, #0
 80139dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	785b      	ldrb	r3, [r3, #1]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d14a      	bne.n	8013a80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	015a      	lsls	r2, r3, #5
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	4413      	add	r3, r2
 80139f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a02:	f040 8086 	bne.w	8013b12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	015a      	lsls	r2, r3, #5
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	4413      	add	r3, r2
 8013a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	7812      	ldrb	r2, [r2, #0]
 8013a1a:	0151      	lsls	r1, r2, #5
 8013a1c:	693a      	ldr	r2, [r7, #16]
 8013a1e:	440a      	add	r2, r1
 8013a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	015a      	lsls	r2, r3, #5
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	4413      	add	r3, r2
 8013a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	7812      	ldrb	r2, [r2, #0]
 8013a3e:	0151      	lsls	r1, r2, #5
 8013a40:	693a      	ldr	r2, [r7, #16]
 8013a42:	440a      	add	r2, r1
 8013a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	3301      	adds	r3, #1
 8013a52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d902      	bls.n	8013a64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a5e:	2301      	movs	r3, #1
 8013a60:	75fb      	strb	r3, [r7, #23]
          break;
 8013a62:	e056      	b.n	8013b12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	015a      	lsls	r2, r3, #5
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a7c:	d0e7      	beq.n	8013a4e <USB_EPStopXfer+0x82>
 8013a7e:	e048      	b.n	8013b12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	015a      	lsls	r2, r3, #5
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	4413      	add	r3, r2
 8013a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a98:	d13b      	bne.n	8013b12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	015a      	lsls	r2, r3, #5
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	683a      	ldr	r2, [r7, #0]
 8013aac:	7812      	ldrb	r2, [r2, #0]
 8013aae:	0151      	lsls	r1, r2, #5
 8013ab0:	693a      	ldr	r2, [r7, #16]
 8013ab2:	440a      	add	r2, r1
 8013ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013abc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	015a      	lsls	r2, r3, #5
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	683a      	ldr	r2, [r7, #0]
 8013ad0:	7812      	ldrb	r2, [r2, #0]
 8013ad2:	0151      	lsls	r1, r2, #5
 8013ad4:	693a      	ldr	r2, [r7, #16]
 8013ad6:	440a      	add	r2, r1
 8013ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ae0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f242 7210 	movw	r2, #10000	; 0x2710
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d902      	bls.n	8013af8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013af2:	2301      	movs	r3, #1
 8013af4:	75fb      	strb	r3, [r7, #23]
          break;
 8013af6:	e00c      	b.n	8013b12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	015a      	lsls	r2, r3, #5
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	4413      	add	r3, r2
 8013b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b10:	d0e7      	beq.n	8013ae2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	371c      	adds	r7, #28
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b20:	b480      	push	{r7}
 8013b22:	b089      	sub	sp, #36	; 0x24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	4611      	mov	r1, r2
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	460b      	mov	r3, r1
 8013b30:	71fb      	strb	r3, [r7, #7]
 8013b32:	4613      	mov	r3, r2
 8013b34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d123      	bne.n	8013b8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b46:	88bb      	ldrh	r3, [r7, #4]
 8013b48:	3303      	adds	r3, #3
 8013b4a:	089b      	lsrs	r3, r3, #2
 8013b4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b4e:	2300      	movs	r3, #0
 8013b50:	61bb      	str	r3, [r7, #24]
 8013b52:	e018      	b.n	8013b86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b54:	79fb      	ldrb	r3, [r7, #7]
 8013b56:	031a      	lsls	r2, r3, #12
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	4413      	add	r3, r2
 8013b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b60:	461a      	mov	r2, r3
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	3301      	adds	r3, #1
 8013b72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b74:	69fb      	ldr	r3, [r7, #28]
 8013b76:	3301      	adds	r3, #1
 8013b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b7a:	69fb      	ldr	r3, [r7, #28]
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b80:	69bb      	ldr	r3, [r7, #24]
 8013b82:	3301      	adds	r3, #1
 8013b84:	61bb      	str	r3, [r7, #24]
 8013b86:	69ba      	ldr	r2, [r7, #24]
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d3e2      	bcc.n	8013b54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b8e:	2300      	movs	r3, #0
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3724      	adds	r7, #36	; 0x24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b08b      	sub	sp, #44	; 0x2c
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013bb2:	88fb      	ldrh	r3, [r7, #6]
 8013bb4:	089b      	lsrs	r3, r3, #2
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013bba:	88fb      	ldrh	r3, [r7, #6]
 8013bbc:	f003 0303 	and.w	r3, r3, #3
 8013bc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	623b      	str	r3, [r7, #32]
 8013bc6:	e014      	b.n	8013bf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	3301      	adds	r3, #1
 8013bde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be2:	3301      	adds	r3, #1
 8013be4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be8:	3301      	adds	r3, #1
 8013bea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013bec:	6a3b      	ldr	r3, [r7, #32]
 8013bee:	3301      	adds	r3, #1
 8013bf0:	623b      	str	r3, [r7, #32]
 8013bf2:	6a3a      	ldr	r2, [r7, #32]
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d3e6      	bcc.n	8013bc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bfa:	8bfb      	ldrh	r3, [r7, #30]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d01e      	beq.n	8013c3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013c00:	2300      	movs	r3, #0
 8013c02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013c04:	69bb      	ldr	r3, [r7, #24]
 8013c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	f107 0310 	add.w	r3, r7, #16
 8013c10:	6812      	ldr	r2, [r2, #0]
 8013c12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c14:	693a      	ldr	r2, [r7, #16]
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	00db      	lsls	r3, r3, #3
 8013c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8013c20:	b2da      	uxtb	r2, r3
 8013c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c24:	701a      	strb	r2, [r3, #0]
      i++;
 8013c26:	6a3b      	ldr	r3, [r7, #32]
 8013c28:	3301      	adds	r3, #1
 8013c2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2e:	3301      	adds	r3, #1
 8013c30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c32:	8bfb      	ldrh	r3, [r7, #30]
 8013c34:	3b01      	subs	r3, #1
 8013c36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c38:	8bfb      	ldrh	r3, [r7, #30]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d1ea      	bne.n	8013c14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	372c      	adds	r7, #44	; 0x2c
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	785b      	ldrb	r3, [r3, #1]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d12c      	bne.n	8013cc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	015a      	lsls	r2, r3, #5
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	4413      	add	r3, r2
 8013c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	db12      	blt.n	8013ca0 <USB_EPSetStall+0x54>
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00f      	beq.n	8013ca0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	015a      	lsls	r2, r3, #5
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	4413      	add	r3, r2
 8013c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	0151      	lsls	r1, r2, #5
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	440a      	add	r2, r1
 8013c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	015a      	lsls	r2, r3, #5
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4413      	add	r3, r2
 8013ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	68ba      	ldr	r2, [r7, #8]
 8013cb0:	0151      	lsls	r1, r2, #5
 8013cb2:	68fa      	ldr	r2, [r7, #12]
 8013cb4:	440a      	add	r2, r1
 8013cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	e02b      	b.n	8013d1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	015a      	lsls	r2, r3, #5
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	4413      	add	r3, r2
 8013cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	db12      	blt.n	8013cfa <USB_EPSetStall+0xae>
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d00f      	beq.n	8013cfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	015a      	lsls	r2, r3, #5
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	4413      	add	r3, r2
 8013ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68ba      	ldr	r2, [r7, #8]
 8013cea:	0151      	lsls	r1, r2, #5
 8013cec:	68fa      	ldr	r2, [r7, #12]
 8013cee:	440a      	add	r2, r1
 8013cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cf8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	015a      	lsls	r2, r3, #5
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	4413      	add	r3, r2
 8013d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	68ba      	ldr	r2, [r7, #8]
 8013d0a:	0151      	lsls	r1, r2, #5
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	440a      	add	r2, r1
 8013d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d1a:	2300      	movs	r3, #0
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3714      	adds	r7, #20
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	785b      	ldrb	r3, [r3, #1]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d128      	bne.n	8013d96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	015a      	lsls	r2, r3, #5
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	0151      	lsls	r1, r2, #5
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	440a      	add	r2, r1
 8013d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	791b      	ldrb	r3, [r3, #4]
 8013d68:	2b03      	cmp	r3, #3
 8013d6a:	d003      	beq.n	8013d74 <USB_EPClearStall+0x4c>
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	791b      	ldrb	r3, [r3, #4]
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	d138      	bne.n	8013de6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	015a      	lsls	r2, r3, #5
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	68ba      	ldr	r2, [r7, #8]
 8013d84:	0151      	lsls	r1, r2, #5
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	440a      	add	r2, r1
 8013d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d92:	6013      	str	r3, [r2, #0]
 8013d94:	e027      	b.n	8013de6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	015a      	lsls	r2, r3, #5
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	68ba      	ldr	r2, [r7, #8]
 8013da6:	0151      	lsls	r1, r2, #5
 8013da8:	68fa      	ldr	r2, [r7, #12]
 8013daa:	440a      	add	r2, r1
 8013dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013db4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	791b      	ldrb	r3, [r3, #4]
 8013dba:	2b03      	cmp	r3, #3
 8013dbc:	d003      	beq.n	8013dc6 <USB_EPClearStall+0x9e>
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	791b      	ldrb	r3, [r3, #4]
 8013dc2:	2b02      	cmp	r3, #2
 8013dc4:	d10f      	bne.n	8013de6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	015a      	lsls	r2, r3, #5
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	4413      	add	r3, r2
 8013dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	68ba      	ldr	r2, [r7, #8]
 8013dd6:	0151      	lsls	r1, r2, #5
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	440a      	add	r2, r1
 8013ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013de4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3714      	adds	r7, #20
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	78fb      	ldrb	r3, [r7, #3]
 8013e22:	011b      	lsls	r3, r3, #4
 8013e24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e28:	68f9      	ldr	r1, [r7, #12]
 8013e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e32:	2300      	movs	r3, #0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr

08013e40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b085      	sub	sp, #20
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e5a:	f023 0303 	bic.w	r3, r3, #3
 8013e5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	68fa      	ldr	r2, [r7, #12]
 8013e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e6e:	f023 0302 	bic.w	r3, r3, #2
 8013e72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e74:	2300      	movs	r3, #0
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3714      	adds	r7, #20
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e82:	b480      	push	{r7}
 8013e84:	b085      	sub	sp, #20
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	68fa      	ldr	r2, [r7, #12]
 8013e98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e9c:	f023 0303 	bic.w	r3, r3, #3
 8013ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	68fa      	ldr	r2, [r7, #12]
 8013eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013eb0:	f043 0302 	orr.w	r3, r3, #2
 8013eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013eb6:	2300      	movs	r3, #0
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3714      	adds	r7, #20
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	695b      	ldr	r3, [r3, #20]
 8013ed0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	699b      	ldr	r3, [r3, #24]
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	4013      	ands	r3, r2
 8013eda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013edc:	68fb      	ldr	r3, [r7, #12]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3714      	adds	r7, #20
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee8:	4770      	bx	lr

08013eea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013eea:	b480      	push	{r7}
 8013eec:	b085      	sub	sp, #20
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013efc:	699b      	ldr	r3, [r3, #24]
 8013efe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f06:	69db      	ldr	r3, [r3, #28]
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	0c1b      	lsrs	r3, r3, #16
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3714      	adds	r7, #20
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr

08013f1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f1e:	b480      	push	{r7}
 8013f20:	b085      	sub	sp, #20
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f30:	699b      	ldr	r3, [r3, #24]
 8013f32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f3a:	69db      	ldr	r3, [r3, #28]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	4013      	ands	r3, r2
 8013f40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	b29b      	uxth	r3, r3
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3714      	adds	r7, #20
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr

08013f52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f52:	b480      	push	{r7}
 8013f54:	b085      	sub	sp, #20
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f62:	78fb      	ldrb	r3, [r7, #3]
 8013f64:	015a      	lsls	r2, r3, #5
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4413      	add	r3, r2
 8013f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f6e:	689b      	ldr	r3, [r3, #8]
 8013f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f78:	695b      	ldr	r3, [r3, #20]
 8013f7a:	68ba      	ldr	r2, [r7, #8]
 8013f7c:	4013      	ands	r3, r2
 8013f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f80:	68bb      	ldr	r3, [r7, #8]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3714      	adds	r7, #20
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b087      	sub	sp, #28
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	460b      	mov	r3, r1
 8013f98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa4:	691b      	ldr	r3, [r3, #16]
 8013fa6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013fb2:	78fb      	ldrb	r3, [r7, #3]
 8013fb4:	f003 030f 	and.w	r3, r3, #15
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	fa22 f303 	lsr.w	r3, r2, r3
 8013fbe:	01db      	lsls	r3, r3, #7
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	693a      	ldr	r2, [r7, #16]
 8013fc4:	4313      	orrs	r3, r2
 8013fc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fc8:	78fb      	ldrb	r3, [r7, #3]
 8013fca:	015a      	lsls	r2, r3, #5
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	4413      	add	r3, r2
 8013fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd4:	689b      	ldr	r3, [r3, #8]
 8013fd6:	693a      	ldr	r2, [r7, #16]
 8013fd8:	4013      	ands	r3, r2
 8013fda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	371c      	adds	r7, #28
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe8:	4770      	bx	lr

08013fea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fea:	b480      	push	{r7}
 8013fec:	b083      	sub	sp, #12
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	f003 0301 	and.w	r3, r3, #1
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
	...

08014008 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014022:	4619      	mov	r1, r3
 8014024:	4b09      	ldr	r3, [pc, #36]	; (801404c <USB_ActivateSetup+0x44>)
 8014026:	4013      	ands	r3, r2
 8014028:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801403c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3714      	adds	r7, #20
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	fffff800 	.word	0xfffff800

08014050 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	460b      	mov	r3, r1
 801405a:	607a      	str	r2, [r7, #4]
 801405c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	333c      	adds	r3, #60	; 0x3c
 8014066:	3304      	adds	r3, #4
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	4a26      	ldr	r2, [pc, #152]	; (8014108 <USB_EP0_OutStart+0xb8>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d90a      	bls.n	801408a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014084:	d101      	bne.n	801408a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	e037      	b.n	80140fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014090:	461a      	mov	r2, r3
 8014092:	2300      	movs	r3, #0
 8014094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409c:	691b      	ldr	r3, [r3, #16]
 801409e:	697a      	ldr	r2, [r7, #20]
 80140a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80140a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	697a      	ldr	r2, [r7, #20]
 80140b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140b8:	f043 0318 	orr.w	r3, r3, #24
 80140bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140c4:	691b      	ldr	r3, [r3, #16]
 80140c6:	697a      	ldr	r2, [r7, #20]
 80140c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140d2:	7afb      	ldrb	r3, [r7, #11]
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d10f      	bne.n	80140f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140de:	461a      	mov	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	697a      	ldr	r2, [r7, #20]
 80140ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140f8:	2300      	movs	r3, #0
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	371c      	adds	r7, #28
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
 8014106:	bf00      	nop
 8014108:	4f54300a 	.word	0x4f54300a

0801410c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801410c:	b480      	push	{r7}
 801410e:	b085      	sub	sp, #20
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014114:	2300      	movs	r3, #0
 8014116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	3301      	adds	r3, #1
 801411c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	4a13      	ldr	r2, [pc, #76]	; (8014170 <USB_CoreReset+0x64>)
 8014122:	4293      	cmp	r3, r2
 8014124:	d901      	bls.n	801412a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014126:	2303      	movs	r3, #3
 8014128:	e01b      	b.n	8014162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	2b00      	cmp	r3, #0
 8014130:	daf2      	bge.n	8014118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014132:	2300      	movs	r3, #0
 8014134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	691b      	ldr	r3, [r3, #16]
 801413a:	f043 0201 	orr.w	r2, r3, #1
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	3301      	adds	r3, #1
 8014146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	4a09      	ldr	r2, [pc, #36]	; (8014170 <USB_CoreReset+0x64>)
 801414c:	4293      	cmp	r3, r2
 801414e:	d901      	bls.n	8014154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014150:	2303      	movs	r3, #3
 8014152:	e006      	b.n	8014162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	691b      	ldr	r3, [r3, #16]
 8014158:	f003 0301 	and.w	r3, r3, #1
 801415c:	2b01      	cmp	r3, #1
 801415e:	d0f0      	beq.n	8014142 <USB_CoreReset+0x36>

  return HAL_OK;
 8014160:	2300      	movs	r3, #0
}
 8014162:	4618      	mov	r0, r3
 8014164:	3714      	adds	r7, #20
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	00030d40 	.word	0x00030d40

08014174 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014178:	4904      	ldr	r1, [pc, #16]	; (801418c <MX_FATFS_Init+0x18>)
 801417a:	4805      	ldr	r0, [pc, #20]	; (8014190 <MX_FATFS_Init+0x1c>)
 801417c:	f002 fa56 	bl	801662c <FATFS_LinkDriver>
 8014180:	4603      	mov	r3, r0
 8014182:	461a      	mov	r2, r3
 8014184:	4b03      	ldr	r3, [pc, #12]	; (8014194 <MX_FATFS_Init+0x20>)
 8014186:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014188:	bf00      	nop
 801418a:	bd80      	pop	{r7, pc}
 801418c:	24000d74 	.word	0x24000d74
 8014190:	0801c95c 	.word	0x0801c95c
 8014194:	24000d70 	.word	0x24000d70

08014198 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80141a2:	f000 f885 	bl	80142b0 <BSP_SD_IsDetected>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d001      	beq.n	80141b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80141ac:	2302      	movs	r3, #2
 80141ae:	e012      	b.n	80141d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80141b0:	480b      	ldr	r0, [pc, #44]	; (80141e0 <BSP_SD_Init+0x48>)
 80141b2:	f7f9 f9dd 	bl	800d570 <HAL_SD_Init>
 80141b6:	4603      	mov	r3, r0
 80141b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80141ba:	79fb      	ldrb	r3, [r7, #7]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d109      	bne.n	80141d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141c4:	4806      	ldr	r0, [pc, #24]	; (80141e0 <BSP_SD_Init+0x48>)
 80141c6:	f7fa f893 	bl	800e2f0 <HAL_SD_ConfigWideBusOperation>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d001      	beq.n	80141d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141d0:	2301      	movs	r3, #1
 80141d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141d4:	79fb      	ldrb	r3, [r7, #7]
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	240005a8 	.word	0x240005a8

080141e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b086      	sub	sp, #24
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141f0:	2300      	movs	r3, #0
 80141f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	68f9      	ldr	r1, [r7, #12]
 80141fa:	4806      	ldr	r0, [pc, #24]	; (8014214 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141fc:	f7f9 fad8 	bl	800d7b0 <HAL_SD_ReadBlocks_DMA>
 8014200:	4603      	mov	r3, r0
 8014202:	2b00      	cmp	r3, #0
 8014204:	d001      	beq.n	801420a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014206:	2301      	movs	r3, #1
 8014208:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801420a:	7dfb      	ldrb	r3, [r7, #23]
}
 801420c:	4618      	mov	r0, r3
 801420e:	3718      	adds	r7, #24
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}
 8014214:	240005a8 	.word	0x240005a8

08014218 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b086      	sub	sp, #24
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014224:	2300      	movs	r3, #0
 8014226:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	68f9      	ldr	r1, [r7, #12]
 801422e:	4806      	ldr	r0, [pc, #24]	; (8014248 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014230:	f7f9 fb66 	bl	800d900 <HAL_SD_WriteBlocks_DMA>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d001      	beq.n	801423e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801423a:	2301      	movs	r3, #1
 801423c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3718      	adds	r7, #24
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	240005a8 	.word	0x240005a8

0801424c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014250:	4805      	ldr	r0, [pc, #20]	; (8014268 <BSP_SD_GetCardState+0x1c>)
 8014252:	f7fa f95f 	bl	800e514 <HAL_SD_GetCardState>
 8014256:	4603      	mov	r3, r0
 8014258:	2b04      	cmp	r3, #4
 801425a:	bf14      	ite	ne
 801425c:	2301      	movne	r3, #1
 801425e:	2300      	moveq	r3, #0
 8014260:	b2db      	uxtb	r3, r3
}
 8014262:	4618      	mov	r0, r3
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	240005a8 	.word	0x240005a8

0801426c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014274:	6879      	ldr	r1, [r7, #4]
 8014276:	4803      	ldr	r0, [pc, #12]	; (8014284 <BSP_SD_GetCardInfo+0x18>)
 8014278:	f7fa f80e 	bl	800e298 <HAL_SD_GetCardInfo>
}
 801427c:	bf00      	nop
 801427e:	3708      	adds	r7, #8
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	240005a8 	.word	0x240005a8

08014288 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014290:	f000 f9a0 	bl	80145d4 <BSP_SD_WriteCpltCallback>
}
 8014294:	bf00      	nop
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80142a4:	f000 f9a2 	bl	80145ec <BSP_SD_ReadCpltCallback>
}
 80142a8:	bf00      	nop
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80142b6:	2301      	movs	r3, #1
 80142b8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80142ba:	f000 f80b 	bl	80142d4 <BSP_PlatformIsDetected>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d101      	bne.n	80142c8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142c4:	2300      	movs	r3, #0
 80142c6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142c8:	79fb      	ldrb	r3, [r7, #7]
 80142ca:	b2db      	uxtb	r3, r3
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80142da:	2301      	movs	r3, #1
 80142dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80142de:	2104      	movs	r1, #4
 80142e0:	4806      	ldr	r0, [pc, #24]	; (80142fc <BSP_PlatformIsDetected+0x28>)
 80142e2:	f7f4 f919 	bl	8008518 <HAL_GPIO_ReadPin>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d001      	beq.n	80142f0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142ec:	2300      	movs	r3, #0
 80142ee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142f0:	79fb      	ldrb	r3, [r7, #7]
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	58020400 	.word	0x58020400

08014300 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b084      	sub	sp, #16
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014308:	f7f0 fa76 	bl	80047f8 <HAL_GetTick>
 801430c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801430e:	e006      	b.n	801431e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014310:	f7ff ff9c 	bl	801424c <BSP_SD_GetCardState>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801431a:	2300      	movs	r3, #0
 801431c:	e009      	b.n	8014332 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801431e:	f7f0 fa6b 	bl	80047f8 <HAL_GetTick>
 8014322:	4602      	mov	r2, r0
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	429a      	cmp	r2, r3
 801432c:	d8f0      	bhi.n	8014310 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014332:	4618      	mov	r0, r3
 8014334:	3710      	adds	r7, #16
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
	...

0801433c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	4603      	mov	r3, r0
 8014344:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014346:	4b0b      	ldr	r3, [pc, #44]	; (8014374 <SD_CheckStatus+0x38>)
 8014348:	2201      	movs	r2, #1
 801434a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801434c:	f7ff ff7e 	bl	801424c <BSP_SD_GetCardState>
 8014350:	4603      	mov	r3, r0
 8014352:	2b00      	cmp	r3, #0
 8014354:	d107      	bne.n	8014366 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <SD_CheckStatus+0x38>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	f023 0301 	bic.w	r3, r3, #1
 8014360:	b2da      	uxtb	r2, r3
 8014362:	4b04      	ldr	r3, [pc, #16]	; (8014374 <SD_CheckStatus+0x38>)
 8014364:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014366:	4b03      	ldr	r3, [pc, #12]	; (8014374 <SD_CheckStatus+0x38>)
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	b2db      	uxtb	r3, r3
}
 801436c:	4618      	mov	r0, r3
 801436e:	3708      	adds	r7, #8
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	2400000d 	.word	0x2400000d

08014378 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	4603      	mov	r3, r0
 8014380:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014382:	f7ff ff09 	bl	8014198 <BSP_SD_Init>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	d107      	bne.n	801439c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801438c:	79fb      	ldrb	r3, [r7, #7]
 801438e:	4618      	mov	r0, r3
 8014390:	f7ff ffd4 	bl	801433c <SD_CheckStatus>
 8014394:	4603      	mov	r3, r0
 8014396:	461a      	mov	r2, r3
 8014398:	4b04      	ldr	r3, [pc, #16]	; (80143ac <SD_initialize+0x34>)
 801439a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801439c:	4b03      	ldr	r3, [pc, #12]	; (80143ac <SD_initialize+0x34>)
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	b2db      	uxtb	r3, r3
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3708      	adds	r7, #8
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	2400000d 	.word	0x2400000d

080143b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	4603      	mov	r3, r0
 80143b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80143ba:	79fb      	ldrb	r3, [r7, #7]
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff ffbd 	bl	801433c <SD_CheckStatus>
 80143c2:	4603      	mov	r3, r0
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}

080143cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b086      	sub	sp, #24
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	60b9      	str	r1, [r7, #8]
 80143d4:	607a      	str	r2, [r7, #4]
 80143d6:	603b      	str	r3, [r7, #0]
 80143d8:	4603      	mov	r3, r0
 80143da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143dc:	2301      	movs	r3, #1
 80143de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80143e4:	f7ff ff8c 	bl	8014300 <SD_CheckStatusWithTimeout>
 80143e8:	4603      	mov	r3, r0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	da01      	bge.n	80143f2 <SD_read+0x26>
  {
    return res;
 80143ee:	7dfb      	ldrb	r3, [r7, #23]
 80143f0:	e03b      	b.n	801446a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143f2:	683a      	ldr	r2, [r7, #0]
 80143f4:	6879      	ldr	r1, [r7, #4]
 80143f6:	68b8      	ldr	r0, [r7, #8]
 80143f8:	f7ff fef4 	bl	80141e4 <BSP_SD_ReadBlocks_DMA>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d132      	bne.n	8014468 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014402:	4b1c      	ldr	r3, [pc, #112]	; (8014474 <SD_read+0xa8>)
 8014404:	2200      	movs	r2, #0
 8014406:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014408:	f7f0 f9f6 	bl	80047f8 <HAL_GetTick>
 801440c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801440e:	bf00      	nop
 8014410:	4b18      	ldr	r3, [pc, #96]	; (8014474 <SD_read+0xa8>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d108      	bne.n	801442a <SD_read+0x5e>
 8014418:	f7f0 f9ee 	bl	80047f8 <HAL_GetTick>
 801441c:	4602      	mov	r2, r0
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	1ad3      	subs	r3, r2, r3
 8014422:	f247 522f 	movw	r2, #29999	; 0x752f
 8014426:	4293      	cmp	r3, r2
 8014428:	d9f2      	bls.n	8014410 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801442a:	4b12      	ldr	r3, [pc, #72]	; (8014474 <SD_read+0xa8>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014432:	2301      	movs	r3, #1
 8014434:	75fb      	strb	r3, [r7, #23]
 8014436:	e017      	b.n	8014468 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014438:	4b0e      	ldr	r3, [pc, #56]	; (8014474 <SD_read+0xa8>)
 801443a:	2200      	movs	r2, #0
 801443c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801443e:	f7f0 f9db 	bl	80047f8 <HAL_GetTick>
 8014442:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014444:	e007      	b.n	8014456 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014446:	f7ff ff01 	bl	801424c <BSP_SD_GetCardState>
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d102      	bne.n	8014456 <SD_read+0x8a>
          {
            res = RES_OK;
 8014450:	2300      	movs	r3, #0
 8014452:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014454:	e008      	b.n	8014468 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014456:	f7f0 f9cf 	bl	80047f8 <HAL_GetTick>
 801445a:	4602      	mov	r2, r0
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	1ad3      	subs	r3, r2, r3
 8014460:	f247 522f 	movw	r2, #29999	; 0x752f
 8014464:	4293      	cmp	r3, r2
 8014466:	d9ee      	bls.n	8014446 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014468:	7dfb      	ldrb	r3, [r7, #23]
}
 801446a:	4618      	mov	r0, r3
 801446c:	3718      	adds	r7, #24
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop
 8014474:	24000d7c 	.word	0x24000d7c

08014478 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b086      	sub	sp, #24
 801447c:	af00      	add	r7, sp, #0
 801447e:	60b9      	str	r1, [r7, #8]
 8014480:	607a      	str	r2, [r7, #4]
 8014482:	603b      	str	r3, [r7, #0]
 8014484:	4603      	mov	r3, r0
 8014486:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014488:	2301      	movs	r3, #1
 801448a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801448c:	4b24      	ldr	r3, [pc, #144]	; (8014520 <SD_write+0xa8>)
 801448e:	2200      	movs	r2, #0
 8014490:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014492:	f247 5030 	movw	r0, #30000	; 0x7530
 8014496:	f7ff ff33 	bl	8014300 <SD_CheckStatusWithTimeout>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	da01      	bge.n	80144a4 <SD_write+0x2c>
  {
    return res;
 80144a0:	7dfb      	ldrb	r3, [r7, #23]
 80144a2:	e038      	b.n	8014516 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80144a4:	683a      	ldr	r2, [r7, #0]
 80144a6:	6879      	ldr	r1, [r7, #4]
 80144a8:	68b8      	ldr	r0, [r7, #8]
 80144aa:	f7ff feb5 	bl	8014218 <BSP_SD_WriteBlocks_DMA>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d12f      	bne.n	8014514 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80144b4:	f7f0 f9a0 	bl	80047f8 <HAL_GetTick>
 80144b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80144ba:	bf00      	nop
 80144bc:	4b18      	ldr	r3, [pc, #96]	; (8014520 <SD_write+0xa8>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d108      	bne.n	80144d6 <SD_write+0x5e>
 80144c4:	f7f0 f998 	bl	80047f8 <HAL_GetTick>
 80144c8:	4602      	mov	r2, r0
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d9f2      	bls.n	80144bc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80144d6:	4b12      	ldr	r3, [pc, #72]	; (8014520 <SD_write+0xa8>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d102      	bne.n	80144e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80144de:	2301      	movs	r3, #1
 80144e0:	75fb      	strb	r3, [r7, #23]
 80144e2:	e017      	b.n	8014514 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144e4:	4b0e      	ldr	r3, [pc, #56]	; (8014520 <SD_write+0xa8>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144ea:	f7f0 f985 	bl	80047f8 <HAL_GetTick>
 80144ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144f0:	e007      	b.n	8014502 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144f2:	f7ff feab 	bl	801424c <BSP_SD_GetCardState>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <SD_write+0x8a>
          {
            res = RES_OK;
 80144fc:	2300      	movs	r3, #0
 80144fe:	75fb      	strb	r3, [r7, #23]
            break;
 8014500:	e008      	b.n	8014514 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014502:	f7f0 f979 	bl	80047f8 <HAL_GetTick>
 8014506:	4602      	mov	r2, r0
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014510:	4293      	cmp	r3, r2
 8014512:	d9ee      	bls.n	80144f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014514:	7dfb      	ldrb	r3, [r7, #23]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3718      	adds	r7, #24
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	24000d78 	.word	0x24000d78

08014524 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b08c      	sub	sp, #48	; 0x30
 8014528:	af00      	add	r7, sp, #0
 801452a:	4603      	mov	r3, r0
 801452c:	603a      	str	r2, [r7, #0]
 801452e:	71fb      	strb	r3, [r7, #7]
 8014530:	460b      	mov	r3, r1
 8014532:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014534:	2301      	movs	r3, #1
 8014536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801453a:	4b25      	ldr	r3, [pc, #148]	; (80145d0 <SD_ioctl+0xac>)
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	b2db      	uxtb	r3, r3
 8014540:	f003 0301 	and.w	r3, r3, #1
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <SD_ioctl+0x28>
 8014548:	2303      	movs	r3, #3
 801454a:	e03c      	b.n	80145c6 <SD_ioctl+0xa2>

  switch (cmd)
 801454c:	79bb      	ldrb	r3, [r7, #6]
 801454e:	2b03      	cmp	r3, #3
 8014550:	d834      	bhi.n	80145bc <SD_ioctl+0x98>
 8014552:	a201      	add	r2, pc, #4	; (adr r2, 8014558 <SD_ioctl+0x34>)
 8014554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014558:	08014569 	.word	0x08014569
 801455c:	08014571 	.word	0x08014571
 8014560:	08014589 	.word	0x08014589
 8014564:	080145a3 	.word	0x080145a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801456e:	e028      	b.n	80145c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014570:	f107 0308 	add.w	r3, r7, #8
 8014574:	4618      	mov	r0, r3
 8014576:	f7ff fe79 	bl	801426c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801457a:	6a3a      	ldr	r2, [r7, #32]
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014580:	2300      	movs	r3, #0
 8014582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014586:	e01c      	b.n	80145c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014588:	f107 0308 	add.w	r3, r7, #8
 801458c:	4618      	mov	r0, r3
 801458e:	f7ff fe6d 	bl	801426c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014594:	b29a      	uxth	r2, r3
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801459a:	2300      	movs	r3, #0
 801459c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145a0:	e00f      	b.n	80145c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80145a2:	f107 0308 	add.w	r3, r7, #8
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff fe60 	bl	801426c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80145ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ae:	0a5a      	lsrs	r2, r3, #9
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145ba:	e002      	b.n	80145c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80145bc:	2304      	movs	r3, #4
 80145be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80145c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3730      	adds	r7, #48	; 0x30
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	2400000d 	.word	0x2400000d

080145d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80145d4:	b480      	push	{r7}
 80145d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80145d8:	4b03      	ldr	r3, [pc, #12]	; (80145e8 <BSP_SD_WriteCpltCallback+0x14>)
 80145da:	2201      	movs	r2, #1
 80145dc:	601a      	str	r2, [r3, #0]
}
 80145de:	bf00      	nop
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr
 80145e8:	24000d78 	.word	0x24000d78

080145ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145ec:	b480      	push	{r7}
 80145ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145f0:	4b03      	ldr	r3, [pc, #12]	; (8014600 <BSP_SD_ReadCpltCallback+0x14>)
 80145f2:	2201      	movs	r2, #1
 80145f4:	601a      	str	r2, [r3, #0]
}
 80145f6:	bf00      	nop
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr
 8014600:	24000d7c 	.word	0x24000d7c

08014604 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	460b      	mov	r3, r1
 801460e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014610:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014614:	f002 fcea 	bl	8016fec <USBD_static_malloc>
 8014618:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d109      	bne.n	8014634 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	32b0      	adds	r2, #176	; 0xb0
 801462a:	2100      	movs	r1, #0
 801462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014630:	2302      	movs	r3, #2
 8014632:	e0d4      	b.n	80147de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014634:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014638:	2100      	movs	r1, #0
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f003 fc7f 	bl	8017f3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	32b0      	adds	r2, #176	; 0xb0
 801464a:	68f9      	ldr	r1, [r7, #12]
 801464c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	32b0      	adds	r2, #176	; 0xb0
 801465a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	7c1b      	ldrb	r3, [r3, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d138      	bne.n	80146de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801466c:	4b5e      	ldr	r3, [pc, #376]	; (80147e8 <USBD_CDC_Init+0x1e4>)
 801466e:	7819      	ldrb	r1, [r3, #0]
 8014670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014674:	2202      	movs	r2, #2
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f002 fb95 	bl	8016da6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801467c:	4b5a      	ldr	r3, [pc, #360]	; (80147e8 <USBD_CDC_Init+0x1e4>)
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	f003 020f 	and.w	r2, r3, #15
 8014684:	6879      	ldr	r1, [r7, #4]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	440b      	add	r3, r1
 8014690:	3324      	adds	r3, #36	; 0x24
 8014692:	2201      	movs	r2, #1
 8014694:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014696:	4b55      	ldr	r3, [pc, #340]	; (80147ec <USBD_CDC_Init+0x1e8>)
 8014698:	7819      	ldrb	r1, [r3, #0]
 801469a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801469e:	2202      	movs	r2, #2
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f002 fb80 	bl	8016da6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146a6:	4b51      	ldr	r3, [pc, #324]	; (80147ec <USBD_CDC_Init+0x1e8>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	f003 020f 	and.w	r2, r3, #15
 80146ae:	6879      	ldr	r1, [r7, #4]
 80146b0:	4613      	mov	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	4413      	add	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	440b      	add	r3, r1
 80146ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146be:	2201      	movs	r2, #1
 80146c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80146c2:	4b4b      	ldr	r3, [pc, #300]	; (80147f0 <USBD_CDC_Init+0x1ec>)
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	f003 020f 	and.w	r2, r3, #15
 80146ca:	6879      	ldr	r1, [r7, #4]
 80146cc:	4613      	mov	r3, r2
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	4413      	add	r3, r2
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	440b      	add	r3, r1
 80146d6:	3326      	adds	r3, #38	; 0x26
 80146d8:	2210      	movs	r2, #16
 80146da:	801a      	strh	r2, [r3, #0]
 80146dc:	e035      	b.n	801474a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146de:	4b42      	ldr	r3, [pc, #264]	; (80147e8 <USBD_CDC_Init+0x1e4>)
 80146e0:	7819      	ldrb	r1, [r3, #0]
 80146e2:	2340      	movs	r3, #64	; 0x40
 80146e4:	2202      	movs	r2, #2
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f002 fb5d 	bl	8016da6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146ec:	4b3e      	ldr	r3, [pc, #248]	; (80147e8 <USBD_CDC_Init+0x1e4>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	f003 020f 	and.w	r2, r3, #15
 80146f4:	6879      	ldr	r1, [r7, #4]
 80146f6:	4613      	mov	r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4413      	add	r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	440b      	add	r3, r1
 8014700:	3324      	adds	r3, #36	; 0x24
 8014702:	2201      	movs	r2, #1
 8014704:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014706:	4b39      	ldr	r3, [pc, #228]	; (80147ec <USBD_CDC_Init+0x1e8>)
 8014708:	7819      	ldrb	r1, [r3, #0]
 801470a:	2340      	movs	r3, #64	; 0x40
 801470c:	2202      	movs	r2, #2
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f002 fb49 	bl	8016da6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014714:	4b35      	ldr	r3, [pc, #212]	; (80147ec <USBD_CDC_Init+0x1e8>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	f003 020f 	and.w	r2, r3, #15
 801471c:	6879      	ldr	r1, [r7, #4]
 801471e:	4613      	mov	r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	4413      	add	r3, r2
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	440b      	add	r3, r1
 8014728:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801472c:	2201      	movs	r2, #1
 801472e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014730:	4b2f      	ldr	r3, [pc, #188]	; (80147f0 <USBD_CDC_Init+0x1ec>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 020f 	and.w	r2, r3, #15
 8014738:	6879      	ldr	r1, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3326      	adds	r3, #38	; 0x26
 8014746:	2210      	movs	r2, #16
 8014748:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801474a:	4b29      	ldr	r3, [pc, #164]	; (80147f0 <USBD_CDC_Init+0x1ec>)
 801474c:	7819      	ldrb	r1, [r3, #0]
 801474e:	2308      	movs	r3, #8
 8014750:	2203      	movs	r2, #3
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f002 fb27 	bl	8016da6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014758:	4b25      	ldr	r3, [pc, #148]	; (80147f0 <USBD_CDC_Init+0x1ec>)
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	f003 020f 	and.w	r2, r3, #15
 8014760:	6879      	ldr	r1, [r7, #4]
 8014762:	4613      	mov	r3, r2
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4413      	add	r3, r2
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	440b      	add	r3, r1
 801476c:	3324      	adds	r3, #36	; 0x24
 801476e:	2201      	movs	r2, #1
 8014770:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2200      	movs	r2, #0
 8014776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	33b0      	adds	r3, #176	; 0xb0
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	4413      	add	r3, r2
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2200      	movs	r2, #0
 8014792:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2200      	movs	r2, #0
 801479a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d101      	bne.n	80147ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80147a8:	2302      	movs	r3, #2
 80147aa:	e018      	b.n	80147de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	7c1b      	ldrb	r3, [r3, #16]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d10a      	bne.n	80147ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147b4:	4b0d      	ldr	r3, [pc, #52]	; (80147ec <USBD_CDC_Init+0x1e8>)
 80147b6:	7819      	ldrb	r1, [r3, #0]
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f002 fbde 	bl	8016f84 <USBD_LL_PrepareReceive>
 80147c8:	e008      	b.n	80147dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147ca:	4b08      	ldr	r3, [pc, #32]	; (80147ec <USBD_CDC_Init+0x1e8>)
 80147cc:	7819      	ldrb	r1, [r3, #0]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147d4:	2340      	movs	r3, #64	; 0x40
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f002 fbd4 	bl	8016f84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	24000097 	.word	0x24000097
 80147ec:	24000098 	.word	0x24000098
 80147f0:	24000099 	.word	0x24000099

080147f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	460b      	mov	r3, r1
 80147fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014800:	4b3a      	ldr	r3, [pc, #232]	; (80148ec <USBD_CDC_DeInit+0xf8>)
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	4619      	mov	r1, r3
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f002 faf3 	bl	8016df2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801480c:	4b37      	ldr	r3, [pc, #220]	; (80148ec <USBD_CDC_DeInit+0xf8>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	f003 020f 	and.w	r2, r3, #15
 8014814:	6879      	ldr	r1, [r7, #4]
 8014816:	4613      	mov	r3, r2
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	4413      	add	r3, r2
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	440b      	add	r3, r1
 8014820:	3324      	adds	r3, #36	; 0x24
 8014822:	2200      	movs	r2, #0
 8014824:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014826:	4b32      	ldr	r3, [pc, #200]	; (80148f0 <USBD_CDC_DeInit+0xfc>)
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	4619      	mov	r1, r3
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f002 fae0 	bl	8016df2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014832:	4b2f      	ldr	r3, [pc, #188]	; (80148f0 <USBD_CDC_DeInit+0xfc>)
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	f003 020f 	and.w	r2, r3, #15
 801483a:	6879      	ldr	r1, [r7, #4]
 801483c:	4613      	mov	r3, r2
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	4413      	add	r3, r2
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	440b      	add	r3, r1
 8014846:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801484a:	2200      	movs	r2, #0
 801484c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801484e:	4b29      	ldr	r3, [pc, #164]	; (80148f4 <USBD_CDC_DeInit+0x100>)
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	4619      	mov	r1, r3
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f002 facc 	bl	8016df2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801485a:	4b26      	ldr	r3, [pc, #152]	; (80148f4 <USBD_CDC_DeInit+0x100>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	f003 020f 	and.w	r2, r3, #15
 8014862:	6879      	ldr	r1, [r7, #4]
 8014864:	4613      	mov	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	440b      	add	r3, r1
 801486e:	3324      	adds	r3, #36	; 0x24
 8014870:	2200      	movs	r2, #0
 8014872:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014874:	4b1f      	ldr	r3, [pc, #124]	; (80148f4 <USBD_CDC_DeInit+0x100>)
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	f003 020f 	and.w	r2, r3, #15
 801487c:	6879      	ldr	r1, [r7, #4]
 801487e:	4613      	mov	r3, r2
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	4413      	add	r3, r2
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	440b      	add	r3, r1
 8014888:	3326      	adds	r3, #38	; 0x26
 801488a:	2200      	movs	r2, #0
 801488c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	32b0      	adds	r2, #176	; 0xb0
 8014898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d01f      	beq.n	80148e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	33b0      	adds	r3, #176	; 0xb0
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	4413      	add	r3, r2
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	32b0      	adds	r2, #176	; 0xb0
 80148be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f002 fba0 	bl	8017008 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	32b0      	adds	r2, #176	; 0xb0
 80148d2:	2100      	movs	r1, #0
 80148d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2200      	movs	r2, #0
 80148dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80148e0:	2300      	movs	r3, #0
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	24000097 	.word	0x24000097
 80148f0:	24000098 	.word	0x24000098
 80148f4:	24000099 	.word	0x24000099

080148f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b086      	sub	sp, #24
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	32b0      	adds	r2, #176	; 0xb0
 801490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014910:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014912:	2300      	movs	r3, #0
 8014914:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014916:	2300      	movs	r3, #0
 8014918:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801491a:	2300      	movs	r3, #0
 801491c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d101      	bne.n	8014928 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014924:	2303      	movs	r3, #3
 8014926:	e0bf      	b.n	8014aa8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014930:	2b00      	cmp	r3, #0
 8014932:	d050      	beq.n	80149d6 <USBD_CDC_Setup+0xde>
 8014934:	2b20      	cmp	r3, #32
 8014936:	f040 80af 	bne.w	8014a98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	88db      	ldrh	r3, [r3, #6]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d03a      	beq.n	80149b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	b25b      	sxtb	r3, r3
 8014948:	2b00      	cmp	r3, #0
 801494a:	da1b      	bge.n	8014984 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	33b0      	adds	r3, #176	; 0xb0
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	4413      	add	r3, r2
 801495a:	685b      	ldr	r3, [r3, #4]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	683a      	ldr	r2, [r7, #0]
 8014960:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014962:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014964:	683a      	ldr	r2, [r7, #0]
 8014966:	88d2      	ldrh	r2, [r2, #6]
 8014968:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	88db      	ldrh	r3, [r3, #6]
 801496e:	2b07      	cmp	r3, #7
 8014970:	bf28      	it	cs
 8014972:	2307      	movcs	r3, #7
 8014974:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	89fa      	ldrh	r2, [r7, #14]
 801497a:	4619      	mov	r1, r3
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f001 fd89 	bl	8016494 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014982:	e090      	b.n	8014aa6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	785a      	ldrb	r2, [r3, #1]
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	88db      	ldrh	r3, [r3, #6]
 8014992:	2b3f      	cmp	r3, #63	; 0x3f
 8014994:	d803      	bhi.n	801499e <USBD_CDC_Setup+0xa6>
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	88db      	ldrh	r3, [r3, #6]
 801499a:	b2da      	uxtb	r2, r3
 801499c:	e000      	b.n	80149a0 <USBD_CDC_Setup+0xa8>
 801499e:	2240      	movs	r2, #64	; 0x40
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80149a6:	6939      	ldr	r1, [r7, #16]
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80149ae:	461a      	mov	r2, r3
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f001 fd9b 	bl	80164ec <USBD_CtlPrepareRx>
      break;
 80149b6:	e076      	b.n	8014aa6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	33b0      	adds	r3, #176	; 0xb0
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	7850      	ldrb	r0, [r2, #1]
 80149ce:	2200      	movs	r2, #0
 80149d0:	6839      	ldr	r1, [r7, #0]
 80149d2:	4798      	blx	r3
      break;
 80149d4:	e067      	b.n	8014aa6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	785b      	ldrb	r3, [r3, #1]
 80149da:	2b0b      	cmp	r3, #11
 80149dc:	d851      	bhi.n	8014a82 <USBD_CDC_Setup+0x18a>
 80149de:	a201      	add	r2, pc, #4	; (adr r2, 80149e4 <USBD_CDC_Setup+0xec>)
 80149e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e4:	08014a15 	.word	0x08014a15
 80149e8:	08014a91 	.word	0x08014a91
 80149ec:	08014a83 	.word	0x08014a83
 80149f0:	08014a83 	.word	0x08014a83
 80149f4:	08014a83 	.word	0x08014a83
 80149f8:	08014a83 	.word	0x08014a83
 80149fc:	08014a83 	.word	0x08014a83
 8014a00:	08014a83 	.word	0x08014a83
 8014a04:	08014a83 	.word	0x08014a83
 8014a08:	08014a83 	.word	0x08014a83
 8014a0c:	08014a3f 	.word	0x08014a3f
 8014a10:	08014a69 	.word	0x08014a69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	2b03      	cmp	r3, #3
 8014a1e:	d107      	bne.n	8014a30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a20:	f107 030a 	add.w	r3, r7, #10
 8014a24:	2202      	movs	r2, #2
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f001 fd33 	bl	8016494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a2e:	e032      	b.n	8014a96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a30:	6839      	ldr	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f001 fcbd 	bl	80163b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	75fb      	strb	r3, [r7, #23]
          break;
 8014a3c:	e02b      	b.n	8014a96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	2b03      	cmp	r3, #3
 8014a48:	d107      	bne.n	8014a5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a4a:	f107 030d 	add.w	r3, r7, #13
 8014a4e:	2201      	movs	r2, #1
 8014a50:	4619      	mov	r1, r3
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f001 fd1e 	bl	8016494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a58:	e01d      	b.n	8014a96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a5a:	6839      	ldr	r1, [r7, #0]
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f001 fca8 	bl	80163b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a62:	2303      	movs	r3, #3
 8014a64:	75fb      	strb	r3, [r7, #23]
          break;
 8014a66:	e016      	b.n	8014a96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	2b03      	cmp	r3, #3
 8014a72:	d00f      	beq.n	8014a94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f001 fc9b 	bl	80163b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a7c:	2303      	movs	r3, #3
 8014a7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a80:	e008      	b.n	8014a94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a82:	6839      	ldr	r1, [r7, #0]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f001 fc94 	bl	80163b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014a8a:	2303      	movs	r3, #3
 8014a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8014a8e:	e002      	b.n	8014a96 <USBD_CDC_Setup+0x19e>
          break;
 8014a90:	bf00      	nop
 8014a92:	e008      	b.n	8014aa6 <USBD_CDC_Setup+0x1ae>
          break;
 8014a94:	bf00      	nop
      }
      break;
 8014a96:	e006      	b.n	8014aa6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a98:	6839      	ldr	r1, [r7, #0]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f001 fc89 	bl	80163b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014aa0:	2303      	movs	r3, #3
 8014aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8014aa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3718      	adds	r7, #24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014ac2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	32b0      	adds	r2, #176	; 0xb0
 8014ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ad6:	2303      	movs	r3, #3
 8014ad8:	e065      	b.n	8014ba6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	32b0      	adds	r2, #176	; 0xb0
 8014ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014aea:	78fb      	ldrb	r3, [r7, #3]
 8014aec:	f003 020f 	and.w	r2, r3, #15
 8014af0:	6879      	ldr	r1, [r7, #4]
 8014af2:	4613      	mov	r3, r2
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	4413      	add	r3, r2
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	440b      	add	r3, r1
 8014afc:	3318      	adds	r3, #24
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d02f      	beq.n	8014b64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014b04:	78fb      	ldrb	r3, [r7, #3]
 8014b06:	f003 020f 	and.w	r2, r3, #15
 8014b0a:	6879      	ldr	r1, [r7, #4]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	4413      	add	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	440b      	add	r3, r1
 8014b16:	3318      	adds	r3, #24
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	78fb      	ldrb	r3, [r7, #3]
 8014b1c:	f003 010f 	and.w	r1, r3, #15
 8014b20:	68f8      	ldr	r0, [r7, #12]
 8014b22:	460b      	mov	r3, r1
 8014b24:	00db      	lsls	r3, r3, #3
 8014b26:	440b      	add	r3, r1
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4403      	add	r3, r0
 8014b2c:	3344      	adds	r3, #68	; 0x44
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b34:	fb01 f303 	mul.w	r3, r1, r3
 8014b38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d112      	bne.n	8014b64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b3e:	78fb      	ldrb	r3, [r7, #3]
 8014b40:	f003 020f 	and.w	r2, r3, #15
 8014b44:	6879      	ldr	r1, [r7, #4]
 8014b46:	4613      	mov	r3, r2
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	4413      	add	r3, r2
 8014b4c:	009b      	lsls	r3, r3, #2
 8014b4e:	440b      	add	r3, r1
 8014b50:	3318      	adds	r3, #24
 8014b52:	2200      	movs	r2, #0
 8014b54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b56:	78f9      	ldrb	r1, [r7, #3]
 8014b58:	2300      	movs	r3, #0
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f002 f9f0 	bl	8016f42 <USBD_LL_Transmit>
 8014b62:	e01f      	b.n	8014ba4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	2200      	movs	r2, #0
 8014b68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	33b0      	adds	r3, #176	; 0xb0
 8014b76:	009b      	lsls	r3, r3, #2
 8014b78:	4413      	add	r3, r2
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	691b      	ldr	r3, [r3, #16]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d010      	beq.n	8014ba4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	33b0      	adds	r3, #176	; 0xb0
 8014b8c:	009b      	lsls	r3, r3, #2
 8014b8e:	4413      	add	r3, r2
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	691b      	ldr	r3, [r3, #16]
 8014b94:	68ba      	ldr	r2, [r7, #8]
 8014b96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ba0:	78fa      	ldrb	r2, [r7, #3]
 8014ba2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3710      	adds	r7, #16
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b084      	sub	sp, #16
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	32b0      	adds	r2, #176	; 0xb0
 8014bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	32b0      	adds	r2, #176	; 0xb0
 8014bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e01a      	b.n	8014c16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014be0:	78fb      	ldrb	r3, [r7, #3]
 8014be2:	4619      	mov	r1, r3
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f002 f9ee 	bl	8016fc6 <USBD_LL_GetRxDataSize>
 8014bea:	4602      	mov	r2, r0
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	33b0      	adds	r3, #176	; 0xb0
 8014bfc:	009b      	lsls	r3, r3, #2
 8014bfe:	4413      	add	r3, r2
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	68fa      	ldr	r2, [r7, #12]
 8014c06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014c0a:	68fa      	ldr	r2, [r7, #12]
 8014c0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c10:	4611      	mov	r1, r2
 8014c12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c14:	2300      	movs	r3, #0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b084      	sub	sp, #16
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	32b0      	adds	r2, #176	; 0xb0
 8014c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d101      	bne.n	8014c40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e025      	b.n	8014c8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	33b0      	adds	r3, #176	; 0xb0
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	4413      	add	r3, r2
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d01a      	beq.n	8014c8a <USBD_CDC_EP0_RxReady+0x6c>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c5a:	2bff      	cmp	r3, #255	; 0xff
 8014c5c:	d015      	beq.n	8014c8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	33b0      	adds	r3, #176	; 0xb0
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4413      	add	r3, r2
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	689b      	ldr	r3, [r3, #8]
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c78:	68fa      	ldr	r2, [r7, #12]
 8014c7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c7e:	b292      	uxth	r2, r2
 8014c80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	22ff      	movs	r2, #255	; 0xff
 8014c86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c8a:	2300      	movs	r3, #0
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3710      	adds	r7, #16
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b086      	sub	sp, #24
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c9c:	2182      	movs	r1, #130	; 0x82
 8014c9e:	4818      	ldr	r0, [pc, #96]	; (8014d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ca0:	f000 fd4f 	bl	8015742 <USBD_GetEpDesc>
 8014ca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ca6:	2101      	movs	r1, #1
 8014ca8:	4815      	ldr	r0, [pc, #84]	; (8014d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014caa:	f000 fd4a 	bl	8015742 <USBD_GetEpDesc>
 8014cae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cb0:	2181      	movs	r1, #129	; 0x81
 8014cb2:	4813      	ldr	r0, [pc, #76]	; (8014d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014cb4:	f000 fd45 	bl	8015742 <USBD_GetEpDesc>
 8014cb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	2210      	movs	r2, #16
 8014cc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d006      	beq.n	8014cda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cd4:	711a      	strb	r2, [r3, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d006      	beq.n	8014cee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ce8:	711a      	strb	r2, [r3, #4]
 8014cea:	2200      	movs	r2, #0
 8014cec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2243      	movs	r2, #67	; 0x43
 8014cf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cf4:	4b02      	ldr	r3, [pc, #8]	; (8014d00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3718      	adds	r7, #24
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	24000054 	.word	0x24000054

08014d04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d0c:	2182      	movs	r1, #130	; 0x82
 8014d0e:	4818      	ldr	r0, [pc, #96]	; (8014d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d10:	f000 fd17 	bl	8015742 <USBD_GetEpDesc>
 8014d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d16:	2101      	movs	r1, #1
 8014d18:	4815      	ldr	r0, [pc, #84]	; (8014d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d1a:	f000 fd12 	bl	8015742 <USBD_GetEpDesc>
 8014d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d20:	2181      	movs	r1, #129	; 0x81
 8014d22:	4813      	ldr	r0, [pc, #76]	; (8014d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d24:	f000 fd0d 	bl	8015742 <USBD_GetEpDesc>
 8014d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d002      	beq.n	8014d36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	2210      	movs	r2, #16
 8014d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d006      	beq.n	8014d4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	711a      	strb	r2, [r3, #4]
 8014d42:	2200      	movs	r2, #0
 8014d44:	f042 0202 	orr.w	r2, r2, #2
 8014d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d006      	beq.n	8014d5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	2200      	movs	r2, #0
 8014d54:	711a      	strb	r2, [r3, #4]
 8014d56:	2200      	movs	r2, #0
 8014d58:	f042 0202 	orr.w	r2, r2, #2
 8014d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2243      	movs	r2, #67	; 0x43
 8014d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d64:	4b02      	ldr	r3, [pc, #8]	; (8014d70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3718      	adds	r7, #24
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	24000054 	.word	0x24000054

08014d74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d7c:	2182      	movs	r1, #130	; 0x82
 8014d7e:	4818      	ldr	r0, [pc, #96]	; (8014de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d80:	f000 fcdf 	bl	8015742 <USBD_GetEpDesc>
 8014d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d86:	2101      	movs	r1, #1
 8014d88:	4815      	ldr	r0, [pc, #84]	; (8014de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d8a:	f000 fcda 	bl	8015742 <USBD_GetEpDesc>
 8014d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d90:	2181      	movs	r1, #129	; 0x81
 8014d92:	4813      	ldr	r0, [pc, #76]	; (8014de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d94:	f000 fcd5 	bl	8015742 <USBD_GetEpDesc>
 8014d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d002      	beq.n	8014da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	2210      	movs	r2, #16
 8014da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d006      	beq.n	8014dba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	2200      	movs	r2, #0
 8014db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014db4:	711a      	strb	r2, [r3, #4]
 8014db6:	2200      	movs	r2, #0
 8014db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d006      	beq.n	8014dce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014dc8:	711a      	strb	r2, [r3, #4]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2243      	movs	r2, #67	; 0x43
 8014dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014dd4:	4b02      	ldr	r3, [pc, #8]	; (8014de0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3718      	adds	r7, #24
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	24000054 	.word	0x24000054

08014de4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b083      	sub	sp, #12
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	220a      	movs	r2, #10
 8014df0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014df2:	4b03      	ldr	r3, [pc, #12]	; (8014e00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr
 8014e00:	24000010 	.word	0x24000010

08014e04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b083      	sub	sp, #12
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d101      	bne.n	8014e18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014e14:	2303      	movs	r3, #3
 8014e16:	e009      	b.n	8014e2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	33b0      	adds	r3, #176	; 0xb0
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	4413      	add	r3, r2
 8014e26:	683a      	ldr	r2, [r7, #0]
 8014e28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e2a:	2300      	movs	r3, #0
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	370c      	adds	r7, #12
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b087      	sub	sp, #28
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	32b0      	adds	r2, #176	; 0xb0
 8014e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e5a:	2303      	movs	r3, #3
 8014e5c:	e008      	b.n	8014e70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e6e:	2300      	movs	r3, #0
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	371c      	adds	r7, #28
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b085      	sub	sp, #20
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	32b0      	adds	r2, #176	; 0xb0
 8014e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d101      	bne.n	8014ea0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e9c:	2303      	movs	r3, #3
 8014e9e:	e004      	b.n	8014eaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	683a      	ldr	r2, [r7, #0]
 8014ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014ea8:	2300      	movs	r3, #0
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3714      	adds	r7, #20
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb4:	4770      	bx	lr
	...

08014eb8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b084      	sub	sp, #16
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	32b0      	adds	r2, #176	; 0xb0
 8014eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ece:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014eda:	2303      	movs	r3, #3
 8014edc:	e025      	b.n	8014f2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d11f      	bne.n	8014f28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	2201      	movs	r2, #1
 8014eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ef0:	4b10      	ldr	r3, [pc, #64]	; (8014f34 <USBD_CDC_TransmitPacket+0x7c>)
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	f003 020f 	and.w	r2, r3, #15
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	4613      	mov	r3, r2
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	4413      	add	r3, r2
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4403      	add	r3, r0
 8014f0a:	3318      	adds	r3, #24
 8014f0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014f0e:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <USBD_CDC_TransmitPacket+0x7c>)
 8014f10:	7819      	ldrb	r1, [r3, #0]
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f002 f80f 	bl	8016f42 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f24:	2300      	movs	r3, #0
 8014f26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	24000097 	.word	0x24000097

08014f38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b084      	sub	sp, #16
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	32b0      	adds	r2, #176	; 0xb0
 8014f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	32b0      	adds	r2, #176	; 0xb0
 8014f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d101      	bne.n	8014f66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f62:	2303      	movs	r3, #3
 8014f64:	e018      	b.n	8014f98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	7c1b      	ldrb	r3, [r3, #16]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d10a      	bne.n	8014f84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f6e:	4b0c      	ldr	r3, [pc, #48]	; (8014fa0 <USBD_CDC_ReceivePacket+0x68>)
 8014f70:	7819      	ldrb	r1, [r3, #0]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f002 f801 	bl	8016f84 <USBD_LL_PrepareReceive>
 8014f82:	e008      	b.n	8014f96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f84:	4b06      	ldr	r3, [pc, #24]	; (8014fa0 <USBD_CDC_ReceivePacket+0x68>)
 8014f86:	7819      	ldrb	r1, [r3, #0]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f8e:	2340      	movs	r3, #64	; 0x40
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f001 fff7 	bl	8016f84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f96:	2300      	movs	r3, #0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3710      	adds	r7, #16
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	24000098 	.word	0x24000098

08014fa4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b086      	sub	sp, #24
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d101      	bne.n	8014fbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fb8:	2303      	movs	r3, #3
 8014fba:	e01f      	b.n	8014ffc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d003      	beq.n	8014fe2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	68ba      	ldr	r2, [r7, #8]
 8014fde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	2201      	movs	r2, #1
 8014fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	79fa      	ldrb	r2, [r7, #7]
 8014fee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f001 fe6b 	bl	8016ccc <USBD_LL_Init>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801500e:	2300      	movs	r3, #0
 8015010:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d101      	bne.n	801501c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015018:	2303      	movs	r3, #3
 801501a:	e025      	b.n	8015068 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	683a      	ldr	r2, [r7, #0]
 8015020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	32ae      	adds	r2, #174	; 0xae
 801502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015034:	2b00      	cmp	r3, #0
 8015036:	d00f      	beq.n	8015058 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	32ae      	adds	r2, #174	; 0xae
 8015042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	f107 020e 	add.w	r2, r7, #14
 801504c:	4610      	mov	r0, r2
 801504e:	4798      	blx	r3
 8015050:	4602      	mov	r2, r0
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801505e:	1c5a      	adds	r2, r3, #1
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015066:	2300      	movs	r3, #0
}
 8015068:	4618      	mov	r0, r3
 801506a:	3710      	adds	r7, #16
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f001 fe79 	bl	8016d70 <USBD_LL_Start>
 801507e:	4603      	mov	r3, r0
}
 8015080:	4618      	mov	r0, r3
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015090:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015092:	4618      	mov	r0, r3
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b084      	sub	sp, #16
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
 80150a6:	460b      	mov	r3, r1
 80150a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150aa:	2300      	movs	r3, #0
 80150ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d009      	beq.n	80150cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	78fa      	ldrb	r2, [r7, #3]
 80150c2:	4611      	mov	r1, r2
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	4798      	blx	r3
 80150c8:	4603      	mov	r3, r0
 80150ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150d6:	b580      	push	{r7, lr}
 80150d8:	b084      	sub	sp, #16
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
 80150de:	460b      	mov	r3, r1
 80150e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150e2:	2300      	movs	r3, #0
 80150e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	78fa      	ldrb	r2, [r7, #3]
 80150f0:	4611      	mov	r1, r2
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	4798      	blx	r3
 80150f6:	4603      	mov	r3, r0
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d001      	beq.n	8015100 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150fc:	2303      	movs	r3, #3
 80150fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015100:	7bfb      	ldrb	r3, [r7, #15]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b084      	sub	sp, #16
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
 8015112:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801511a:	6839      	ldr	r1, [r7, #0]
 801511c:	4618      	mov	r0, r3
 801511e:	f001 f90e 	bl	801633e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2201      	movs	r2, #1
 8015126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015130:	461a      	mov	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801513e:	f003 031f 	and.w	r3, r3, #31
 8015142:	2b02      	cmp	r3, #2
 8015144:	d01a      	beq.n	801517c <USBD_LL_SetupStage+0x72>
 8015146:	2b02      	cmp	r3, #2
 8015148:	d822      	bhi.n	8015190 <USBD_LL_SetupStage+0x86>
 801514a:	2b00      	cmp	r3, #0
 801514c:	d002      	beq.n	8015154 <USBD_LL_SetupStage+0x4a>
 801514e:	2b01      	cmp	r3, #1
 8015150:	d00a      	beq.n	8015168 <USBD_LL_SetupStage+0x5e>
 8015152:	e01d      	b.n	8015190 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801515a:	4619      	mov	r1, r3
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f000 fb65 	bl	801582c <USBD_StdDevReq>
 8015162:	4603      	mov	r3, r0
 8015164:	73fb      	strb	r3, [r7, #15]
      break;
 8015166:	e020      	b.n	80151aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801516e:	4619      	mov	r1, r3
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 fbcd 	bl	8015910 <USBD_StdItfReq>
 8015176:	4603      	mov	r3, r0
 8015178:	73fb      	strb	r3, [r7, #15]
      break;
 801517a:	e016      	b.n	80151aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015182:	4619      	mov	r1, r3
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 fc2f 	bl	80159e8 <USBD_StdEPReq>
 801518a:	4603      	mov	r3, r0
 801518c:	73fb      	strb	r3, [r7, #15]
      break;
 801518e:	e00c      	b.n	80151aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801519a:	b2db      	uxtb	r3, r3
 801519c:	4619      	mov	r1, r3
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f001 fe46 	bl	8016e30 <USBD_LL_StallEP>
 80151a4:	4603      	mov	r3, r0
 80151a6:	73fb      	strb	r3, [r7, #15]
      break;
 80151a8:	bf00      	nop
  }

  return ret;
 80151aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3710      	adds	r7, #16
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	460b      	mov	r3, r1
 80151be:	607a      	str	r2, [r7, #4]
 80151c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80151c2:	2300      	movs	r3, #0
 80151c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151c6:	7afb      	ldrb	r3, [r7, #11]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d16e      	bne.n	80152aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80151d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80151da:	2b03      	cmp	r3, #3
 80151dc:	f040 8098 	bne.w	8015310 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	689a      	ldr	r2, [r3, #8]
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	68db      	ldr	r3, [r3, #12]
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d913      	bls.n	8015214 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	689a      	ldr	r2, [r3, #8]
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	1ad2      	subs	r2, r2, r3
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	68da      	ldr	r2, [r3, #12]
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	4293      	cmp	r3, r2
 8015204:	bf28      	it	cs
 8015206:	4613      	movcs	r3, r2
 8015208:	461a      	mov	r2, r3
 801520a:	6879      	ldr	r1, [r7, #4]
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f001 f98a 	bl	8016526 <USBD_CtlContinueRx>
 8015212:	e07d      	b.n	8015310 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801521a:	f003 031f 	and.w	r3, r3, #31
 801521e:	2b02      	cmp	r3, #2
 8015220:	d014      	beq.n	801524c <USBD_LL_DataOutStage+0x98>
 8015222:	2b02      	cmp	r3, #2
 8015224:	d81d      	bhi.n	8015262 <USBD_LL_DataOutStage+0xae>
 8015226:	2b00      	cmp	r3, #0
 8015228:	d002      	beq.n	8015230 <USBD_LL_DataOutStage+0x7c>
 801522a:	2b01      	cmp	r3, #1
 801522c:	d003      	beq.n	8015236 <USBD_LL_DataOutStage+0x82>
 801522e:	e018      	b.n	8015262 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015230:	2300      	movs	r3, #0
 8015232:	75bb      	strb	r3, [r7, #22]
            break;
 8015234:	e018      	b.n	8015268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801523c:	b2db      	uxtb	r3, r3
 801523e:	4619      	mov	r1, r3
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	f000 fa64 	bl	801570e <USBD_CoreFindIF>
 8015246:	4603      	mov	r3, r0
 8015248:	75bb      	strb	r3, [r7, #22]
            break;
 801524a:	e00d      	b.n	8015268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015252:	b2db      	uxtb	r3, r3
 8015254:	4619      	mov	r1, r3
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	f000 fa66 	bl	8015728 <USBD_CoreFindEP>
 801525c:	4603      	mov	r3, r0
 801525e:	75bb      	strb	r3, [r7, #22]
            break;
 8015260:	e002      	b.n	8015268 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015262:	2300      	movs	r3, #0
 8015264:	75bb      	strb	r3, [r7, #22]
            break;
 8015266:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015268:	7dbb      	ldrb	r3, [r7, #22]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d119      	bne.n	80152a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2b03      	cmp	r3, #3
 8015278:	d113      	bne.n	80152a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801527a:	7dba      	ldrb	r2, [r7, #22]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	32ae      	adds	r2, #174	; 0xae
 8015280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015284:	691b      	ldr	r3, [r3, #16]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d00b      	beq.n	80152a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801528a:	7dba      	ldrb	r2, [r7, #22]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015292:	7dba      	ldrb	r2, [r7, #22]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	32ae      	adds	r2, #174	; 0xae
 8015298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	68f8      	ldr	r0, [r7, #12]
 80152a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	f001 f950 	bl	8016548 <USBD_CtlSendStatus>
 80152a8:	e032      	b.n	8015310 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80152aa:	7afb      	ldrb	r3, [r7, #11]
 80152ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	4619      	mov	r1, r3
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f000 fa37 	bl	8015728 <USBD_CoreFindEP>
 80152ba:	4603      	mov	r3, r0
 80152bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152be:	7dbb      	ldrb	r3, [r7, #22]
 80152c0:	2bff      	cmp	r3, #255	; 0xff
 80152c2:	d025      	beq.n	8015310 <USBD_LL_DataOutStage+0x15c>
 80152c4:	7dbb      	ldrb	r3, [r7, #22]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d122      	bne.n	8015310 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	2b03      	cmp	r3, #3
 80152d4:	d117      	bne.n	8015306 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152d6:	7dba      	ldrb	r2, [r7, #22]
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	32ae      	adds	r2, #174	; 0xae
 80152dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152e0:	699b      	ldr	r3, [r3, #24]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d00f      	beq.n	8015306 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152e6:	7dba      	ldrb	r2, [r7, #22]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152ee:	7dba      	ldrb	r2, [r7, #22]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	32ae      	adds	r2, #174	; 0xae
 80152f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152f8:	699b      	ldr	r3, [r3, #24]
 80152fa:	7afa      	ldrb	r2, [r7, #11]
 80152fc:	4611      	mov	r1, r2
 80152fe:	68f8      	ldr	r0, [r7, #12]
 8015300:	4798      	blx	r3
 8015302:	4603      	mov	r3, r0
 8015304:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015306:	7dfb      	ldrb	r3, [r7, #23]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d001      	beq.n	8015310 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801530c:	7dfb      	ldrb	r3, [r7, #23]
 801530e:	e000      	b.n	8015312 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3718      	adds	r7, #24
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}

0801531a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801531a:	b580      	push	{r7, lr}
 801531c:	b086      	sub	sp, #24
 801531e:	af00      	add	r7, sp, #0
 8015320:	60f8      	str	r0, [r7, #12]
 8015322:	460b      	mov	r3, r1
 8015324:	607a      	str	r2, [r7, #4]
 8015326:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015328:	7afb      	ldrb	r3, [r7, #11]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d16f      	bne.n	801540e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	3314      	adds	r3, #20
 8015332:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801533a:	2b02      	cmp	r3, #2
 801533c:	d15a      	bne.n	80153f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	689a      	ldr	r2, [r3, #8]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	429a      	cmp	r2, r3
 8015348:	d914      	bls.n	8015374 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	689a      	ldr	r2, [r3, #8]
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	68db      	ldr	r3, [r3, #12]
 8015352:	1ad2      	subs	r2, r2, r3
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	689b      	ldr	r3, [r3, #8]
 801535c:	461a      	mov	r2, r3
 801535e:	6879      	ldr	r1, [r7, #4]
 8015360:	68f8      	ldr	r0, [r7, #12]
 8015362:	f001 f8b2 	bl	80164ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015366:	2300      	movs	r3, #0
 8015368:	2200      	movs	r2, #0
 801536a:	2100      	movs	r1, #0
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f001 fe09 	bl	8016f84 <USBD_LL_PrepareReceive>
 8015372:	e03f      	b.n	80153f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	68da      	ldr	r2, [r3, #12]
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	689b      	ldr	r3, [r3, #8]
 801537c:	429a      	cmp	r2, r3
 801537e:	d11c      	bne.n	80153ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	685a      	ldr	r2, [r3, #4]
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015388:	429a      	cmp	r2, r3
 801538a:	d316      	bcc.n	80153ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	685a      	ldr	r2, [r3, #4]
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015396:	429a      	cmp	r2, r3
 8015398:	d20f      	bcs.n	80153ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801539a:	2200      	movs	r2, #0
 801539c:	2100      	movs	r1, #0
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	f001 f893 	bl	80164ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2200      	movs	r2, #0
 80153a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153ac:	2300      	movs	r3, #0
 80153ae:	2200      	movs	r2, #0
 80153b0:	2100      	movs	r1, #0
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f001 fde6 	bl	8016f84 <USBD_LL_PrepareReceive>
 80153b8:	e01c      	b.n	80153f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	2b03      	cmp	r3, #3
 80153c4:	d10f      	bne.n	80153e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153cc:	68db      	ldr	r3, [r3, #12]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d009      	beq.n	80153e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	2200      	movs	r2, #0
 80153d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153e6:	2180      	movs	r1, #128	; 0x80
 80153e8:	68f8      	ldr	r0, [r7, #12]
 80153ea:	f001 fd21 	bl	8016e30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153ee:	68f8      	ldr	r0, [r7, #12]
 80153f0:	f001 f8bd 	bl	801656e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d03a      	beq.n	8015474 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f7ff fe42 	bl	8015088 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2200      	movs	r2, #0
 8015408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801540c:	e032      	b.n	8015474 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801540e:	7afb      	ldrb	r3, [r7, #11]
 8015410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015414:	b2db      	uxtb	r3, r3
 8015416:	4619      	mov	r1, r3
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f000 f985 	bl	8015728 <USBD_CoreFindEP>
 801541e:	4603      	mov	r3, r0
 8015420:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015422:	7dfb      	ldrb	r3, [r7, #23]
 8015424:	2bff      	cmp	r3, #255	; 0xff
 8015426:	d025      	beq.n	8015474 <USBD_LL_DataInStage+0x15a>
 8015428:	7dfb      	ldrb	r3, [r7, #23]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d122      	bne.n	8015474 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015434:	b2db      	uxtb	r3, r3
 8015436:	2b03      	cmp	r3, #3
 8015438:	d11c      	bne.n	8015474 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801543a:	7dfa      	ldrb	r2, [r7, #23]
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	32ae      	adds	r2, #174	; 0xae
 8015440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015444:	695b      	ldr	r3, [r3, #20]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d014      	beq.n	8015474 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801544a:	7dfa      	ldrb	r2, [r7, #23]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015452:	7dfa      	ldrb	r2, [r7, #23]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	32ae      	adds	r2, #174	; 0xae
 8015458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801545c:	695b      	ldr	r3, [r3, #20]
 801545e:	7afa      	ldrb	r2, [r7, #11]
 8015460:	4611      	mov	r1, r2
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	4798      	blx	r3
 8015466:	4603      	mov	r3, r0
 8015468:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801546a:	7dbb      	ldrb	r3, [r7, #22]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d001      	beq.n	8015474 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015470:	7dbb      	ldrb	r3, [r7, #22]
 8015472:	e000      	b.n	8015476 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015474:	2300      	movs	r3, #0
}
 8015476:	4618      	mov	r0, r3
 8015478:	3718      	adds	r7, #24
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}

0801547e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801547e:	b580      	push	{r7, lr}
 8015480:	b084      	sub	sp, #16
 8015482:	af00      	add	r7, sp, #0
 8015484:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015486:	2300      	movs	r3, #0
 8015488:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2201      	movs	r2, #1
 801548e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2200      	movs	r2, #0
 801549e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d014      	beq.n	80154e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d00e      	beq.n	80154e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	6852      	ldr	r2, [r2, #4]
 80154d2:	b2d2      	uxtb	r2, r2
 80154d4:	4611      	mov	r1, r2
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	4798      	blx	r3
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154e0:	2303      	movs	r3, #3
 80154e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154e4:	2340      	movs	r3, #64	; 0x40
 80154e6:	2200      	movs	r2, #0
 80154e8:	2100      	movs	r1, #0
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f001 fc5b 	bl	8016da6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2201      	movs	r2, #1
 80154f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2240      	movs	r2, #64	; 0x40
 80154fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015500:	2340      	movs	r3, #64	; 0x40
 8015502:	2200      	movs	r2, #0
 8015504:	2180      	movs	r1, #128	; 0x80
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f001 fc4d 	bl	8016da6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2201      	movs	r2, #1
 8015510:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2240      	movs	r2, #64	; 0x40
 8015516:	621a      	str	r2, [r3, #32]

  return ret;
 8015518:	7bfb      	ldrb	r3, [r7, #15]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015522:	b480      	push	{r7}
 8015524:	b083      	sub	sp, #12
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	78fa      	ldrb	r2, [r7, #3]
 8015532:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015534:	2300      	movs	r3, #0
}
 8015536:	4618      	mov	r0, r3
 8015538:	370c      	adds	r7, #12
 801553a:	46bd      	mov	sp, r7
 801553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015540:	4770      	bx	lr

08015542 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015542:	b480      	push	{r7}
 8015544:	b083      	sub	sp, #12
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015550:	b2db      	uxtb	r3, r3
 8015552:	2b04      	cmp	r3, #4
 8015554:	d006      	beq.n	8015564 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801555c:	b2da      	uxtb	r2, r3
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2204      	movs	r2, #4
 8015568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801556c:	2300      	movs	r3, #0
}
 801556e:	4618      	mov	r0, r3
 8015570:	370c      	adds	r7, #12
 8015572:	46bd      	mov	sp, r7
 8015574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015578:	4770      	bx	lr

0801557a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801557a:	b480      	push	{r7}
 801557c:	b083      	sub	sp, #12
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015588:	b2db      	uxtb	r3, r3
 801558a:	2b04      	cmp	r3, #4
 801558c:	d106      	bne.n	801559c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015594:	b2da      	uxtb	r2, r3
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801559c:	2300      	movs	r3, #0
}
 801559e:	4618      	mov	r0, r3
 80155a0:	370c      	adds	r7, #12
 80155a2:	46bd      	mov	sp, r7
 80155a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a8:	4770      	bx	lr

080155aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b082      	sub	sp, #8
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	2b03      	cmp	r3, #3
 80155bc:	d110      	bne.n	80155e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d00b      	beq.n	80155e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ce:	69db      	ldr	r3, [r3, #28]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d005      	beq.n	80155e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155da:	69db      	ldr	r3, [r3, #28]
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155e0:	2300      	movs	r3, #0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b082      	sub	sp, #8
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
 80155f2:	460b      	mov	r3, r1
 80155f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	32ae      	adds	r2, #174	; 0xae
 8015600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d101      	bne.n	801560c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015608:	2303      	movs	r3, #3
 801560a:	e01c      	b.n	8015646 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015612:	b2db      	uxtb	r3, r3
 8015614:	2b03      	cmp	r3, #3
 8015616:	d115      	bne.n	8015644 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	32ae      	adds	r2, #174	; 0xae
 8015622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015626:	6a1b      	ldr	r3, [r3, #32]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d00b      	beq.n	8015644 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	32ae      	adds	r2, #174	; 0xae
 8015636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801563a:	6a1b      	ldr	r3, [r3, #32]
 801563c:	78fa      	ldrb	r2, [r7, #3]
 801563e:	4611      	mov	r1, r2
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	3708      	adds	r7, #8
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b082      	sub	sp, #8
 8015652:	af00      	add	r7, sp, #0
 8015654:	6078      	str	r0, [r7, #4]
 8015656:	460b      	mov	r3, r1
 8015658:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	32ae      	adds	r2, #174	; 0xae
 8015664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d101      	bne.n	8015670 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801566c:	2303      	movs	r3, #3
 801566e:	e01c      	b.n	80156aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015676:	b2db      	uxtb	r3, r3
 8015678:	2b03      	cmp	r3, #3
 801567a:	d115      	bne.n	80156a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	32ae      	adds	r2, #174	; 0xae
 8015686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801568c:	2b00      	cmp	r3, #0
 801568e:	d00b      	beq.n	80156a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	32ae      	adds	r2, #174	; 0xae
 801569a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a0:	78fa      	ldrb	r2, [r7, #3]
 80156a2:	4611      	mov	r1, r2
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156a8:	2300      	movs	r3, #0
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80156b2:	b480      	push	{r7}
 80156b4:	b083      	sub	sp, #12
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156ba:	2300      	movs	r3, #0
}
 80156bc:	4618      	mov	r0, r3
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b084      	sub	sp, #16
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156d0:	2300      	movs	r3, #0
 80156d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2201      	movs	r2, #1
 80156d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00e      	beq.n	8015704 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	6852      	ldr	r2, [r2, #4]
 80156f2:	b2d2      	uxtb	r2, r2
 80156f4:	4611      	mov	r1, r2
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	4798      	blx	r3
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d001      	beq.n	8015704 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015700:	2303      	movs	r3, #3
 8015702:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015704:	7bfb      	ldrb	r3, [r7, #15]
}
 8015706:	4618      	mov	r0, r3
 8015708:	3710      	adds	r7, #16
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}

0801570e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801570e:	b480      	push	{r7}
 8015710:	b083      	sub	sp, #12
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]
 8015716:	460b      	mov	r3, r1
 8015718:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801571a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801571c:	4618      	mov	r0, r3
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015734:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015736:	4618      	mov	r0, r3
 8015738:	370c      	adds	r7, #12
 801573a:	46bd      	mov	sp, r7
 801573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015740:	4770      	bx	lr

08015742 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b086      	sub	sp, #24
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
 801574a:	460b      	mov	r3, r1
 801574c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015756:	2300      	movs	r3, #0
 8015758:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	885b      	ldrh	r3, [r3, #2]
 801575e:	b29a      	uxth	r2, r3
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	b29b      	uxth	r3, r3
 8015766:	429a      	cmp	r2, r3
 8015768:	d920      	bls.n	80157ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	b29b      	uxth	r3, r3
 8015770:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015772:	e013      	b.n	801579c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015774:	f107 030a 	add.w	r3, r7, #10
 8015778:	4619      	mov	r1, r3
 801577a:	6978      	ldr	r0, [r7, #20]
 801577c:	f000 f81b 	bl	80157b6 <USBD_GetNextDesc>
 8015780:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	785b      	ldrb	r3, [r3, #1]
 8015786:	2b05      	cmp	r3, #5
 8015788:	d108      	bne.n	801579c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	789b      	ldrb	r3, [r3, #2]
 8015792:	78fa      	ldrb	r2, [r7, #3]
 8015794:	429a      	cmp	r2, r3
 8015796:	d008      	beq.n	80157aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015798:	2300      	movs	r3, #0
 801579a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	885b      	ldrh	r3, [r3, #2]
 80157a0:	b29a      	uxth	r2, r3
 80157a2:	897b      	ldrh	r3, [r7, #10]
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d8e5      	bhi.n	8015774 <USBD_GetEpDesc+0x32>
 80157a8:	e000      	b.n	80157ac <USBD_GetEpDesc+0x6a>
          break;
 80157aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80157ac:	693b      	ldr	r3, [r7, #16]
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3718      	adds	r7, #24
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}

080157b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80157b6:	b480      	push	{r7}
 80157b8:	b085      	sub	sp, #20
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	6078      	str	r0, [r7, #4]
 80157be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	881a      	ldrh	r2, [r3, #0]
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	4413      	add	r3, r2
 80157d0:	b29a      	uxth	r2, r3
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	461a      	mov	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	4413      	add	r3, r2
 80157e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80157e2:	68fb      	ldr	r3, [r7, #12]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3714      	adds	r7, #20
 80157e8:	46bd      	mov	sp, r7
 80157ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ee:	4770      	bx	lr

080157f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b087      	sub	sp, #28
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	3301      	adds	r3, #1
 8015806:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801580e:	8a3b      	ldrh	r3, [r7, #16]
 8015810:	021b      	lsls	r3, r3, #8
 8015812:	b21a      	sxth	r2, r3
 8015814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015818:	4313      	orrs	r3, r2
 801581a:	b21b      	sxth	r3, r3
 801581c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801581e:	89fb      	ldrh	r3, [r7, #14]
}
 8015820:	4618      	mov	r0, r3
 8015822:	371c      	adds	r7, #28
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr

0801582c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015842:	2b40      	cmp	r3, #64	; 0x40
 8015844:	d005      	beq.n	8015852 <USBD_StdDevReq+0x26>
 8015846:	2b40      	cmp	r3, #64	; 0x40
 8015848:	d857      	bhi.n	80158fa <USBD_StdDevReq+0xce>
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00f      	beq.n	801586e <USBD_StdDevReq+0x42>
 801584e:	2b20      	cmp	r3, #32
 8015850:	d153      	bne.n	80158fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	32ae      	adds	r2, #174	; 0xae
 801585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015860:	689b      	ldr	r3, [r3, #8]
 8015862:	6839      	ldr	r1, [r7, #0]
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	4798      	blx	r3
 8015868:	4603      	mov	r3, r0
 801586a:	73fb      	strb	r3, [r7, #15]
      break;
 801586c:	e04a      	b.n	8015904 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	785b      	ldrb	r3, [r3, #1]
 8015872:	2b09      	cmp	r3, #9
 8015874:	d83b      	bhi.n	80158ee <USBD_StdDevReq+0xc2>
 8015876:	a201      	add	r2, pc, #4	; (adr r2, 801587c <USBD_StdDevReq+0x50>)
 8015878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587c:	080158d1 	.word	0x080158d1
 8015880:	080158e5 	.word	0x080158e5
 8015884:	080158ef 	.word	0x080158ef
 8015888:	080158db 	.word	0x080158db
 801588c:	080158ef 	.word	0x080158ef
 8015890:	080158af 	.word	0x080158af
 8015894:	080158a5 	.word	0x080158a5
 8015898:	080158ef 	.word	0x080158ef
 801589c:	080158c7 	.word	0x080158c7
 80158a0:	080158b9 	.word	0x080158b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 fa3c 	bl	8015d24 <USBD_GetDescriptor>
          break;
 80158ac:	e024      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80158ae:	6839      	ldr	r1, [r7, #0]
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fba1 	bl	8015ff8 <USBD_SetAddress>
          break;
 80158b6:	e01f      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 fbe0 	bl	8016080 <USBD_SetConfig>
 80158c0:	4603      	mov	r3, r0
 80158c2:	73fb      	strb	r3, [r7, #15]
          break;
 80158c4:	e018      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158c6:	6839      	ldr	r1, [r7, #0]
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f000 fc83 	bl	80161d4 <USBD_GetConfig>
          break;
 80158ce:	e013      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158d0:	6839      	ldr	r1, [r7, #0]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 fcb4 	bl	8016240 <USBD_GetStatus>
          break;
 80158d8:	e00e      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158da:	6839      	ldr	r1, [r7, #0]
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f000 fce3 	bl	80162a8 <USBD_SetFeature>
          break;
 80158e2:	e009      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158e4:	6839      	ldr	r1, [r7, #0]
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 fd07 	bl	80162fa <USBD_ClrFeature>
          break;
 80158ec:	e004      	b.n	80158f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158ee:	6839      	ldr	r1, [r7, #0]
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f000 fd5e 	bl	80163b2 <USBD_CtlError>
          break;
 80158f6:	bf00      	nop
      }
      break;
 80158f8:	e004      	b.n	8015904 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fd58 	bl	80163b2 <USBD_CtlError>
      break;
 8015902:	bf00      	nop
  }

  return ret;
 8015904:	7bfb      	ldrb	r3, [r7, #15]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop

08015910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801591a:	2300      	movs	r3, #0
 801591c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015926:	2b40      	cmp	r3, #64	; 0x40
 8015928:	d005      	beq.n	8015936 <USBD_StdItfReq+0x26>
 801592a:	2b40      	cmp	r3, #64	; 0x40
 801592c:	d852      	bhi.n	80159d4 <USBD_StdItfReq+0xc4>
 801592e:	2b00      	cmp	r3, #0
 8015930:	d001      	beq.n	8015936 <USBD_StdItfReq+0x26>
 8015932:	2b20      	cmp	r3, #32
 8015934:	d14e      	bne.n	80159d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801593c:	b2db      	uxtb	r3, r3
 801593e:	3b01      	subs	r3, #1
 8015940:	2b02      	cmp	r3, #2
 8015942:	d840      	bhi.n	80159c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	889b      	ldrh	r3, [r3, #4]
 8015948:	b2db      	uxtb	r3, r3
 801594a:	2b01      	cmp	r3, #1
 801594c:	d836      	bhi.n	80159bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	889b      	ldrh	r3, [r3, #4]
 8015952:	b2db      	uxtb	r3, r3
 8015954:	4619      	mov	r1, r3
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f7ff fed9 	bl	801570e <USBD_CoreFindIF>
 801595c:	4603      	mov	r3, r0
 801595e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015960:	7bbb      	ldrb	r3, [r7, #14]
 8015962:	2bff      	cmp	r3, #255	; 0xff
 8015964:	d01d      	beq.n	80159a2 <USBD_StdItfReq+0x92>
 8015966:	7bbb      	ldrb	r3, [r7, #14]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d11a      	bne.n	80159a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801596c:	7bba      	ldrb	r2, [r7, #14]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	32ae      	adds	r2, #174	; 0xae
 8015972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015976:	689b      	ldr	r3, [r3, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d00f      	beq.n	801599c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801597c:	7bba      	ldrb	r2, [r7, #14]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015984:	7bba      	ldrb	r2, [r7, #14]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	32ae      	adds	r2, #174	; 0xae
 801598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801598e:	689b      	ldr	r3, [r3, #8]
 8015990:	6839      	ldr	r1, [r7, #0]
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	4798      	blx	r3
 8015996:	4603      	mov	r3, r0
 8015998:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801599a:	e004      	b.n	80159a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801599c:	2303      	movs	r3, #3
 801599e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80159a0:	e001      	b.n	80159a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80159a2:	2303      	movs	r3, #3
 80159a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	88db      	ldrh	r3, [r3, #6]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d110      	bne.n	80159d0 <USBD_StdItfReq+0xc0>
 80159ae:	7bfb      	ldrb	r3, [r7, #15]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d10d      	bne.n	80159d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fdc7 	bl	8016548 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159ba:	e009      	b.n	80159d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 fcf7 	bl	80163b2 <USBD_CtlError>
          break;
 80159c4:	e004      	b.n	80159d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159c6:	6839      	ldr	r1, [r7, #0]
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 fcf2 	bl	80163b2 <USBD_CtlError>
          break;
 80159ce:	e000      	b.n	80159d2 <USBD_StdItfReq+0xc2>
          break;
 80159d0:	bf00      	nop
      }
      break;
 80159d2:	e004      	b.n	80159de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159d4:	6839      	ldr	r1, [r7, #0]
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f000 fceb 	bl	80163b2 <USBD_CtlError>
      break;
 80159dc:	bf00      	nop
  }

  return ret;
 80159de:	7bfb      	ldrb	r3, [r7, #15]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3710      	adds	r7, #16
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	889b      	ldrh	r3, [r3, #4]
 80159fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a04:	2b40      	cmp	r3, #64	; 0x40
 8015a06:	d007      	beq.n	8015a18 <USBD_StdEPReq+0x30>
 8015a08:	2b40      	cmp	r3, #64	; 0x40
 8015a0a:	f200 817f 	bhi.w	8015d0c <USBD_StdEPReq+0x324>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d02a      	beq.n	8015a68 <USBD_StdEPReq+0x80>
 8015a12:	2b20      	cmp	r3, #32
 8015a14:	f040 817a 	bne.w	8015d0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a18:	7bbb      	ldrb	r3, [r7, #14]
 8015a1a:	4619      	mov	r1, r3
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f7ff fe83 	bl	8015728 <USBD_CoreFindEP>
 8015a22:	4603      	mov	r3, r0
 8015a24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a26:	7b7b      	ldrb	r3, [r7, #13]
 8015a28:	2bff      	cmp	r3, #255	; 0xff
 8015a2a:	f000 8174 	beq.w	8015d16 <USBD_StdEPReq+0x32e>
 8015a2e:	7b7b      	ldrb	r3, [r7, #13]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f040 8170 	bne.w	8015d16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a36:	7b7a      	ldrb	r2, [r7, #13]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a3e:	7b7a      	ldrb	r2, [r7, #13]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	32ae      	adds	r2, #174	; 0xae
 8015a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a48:	689b      	ldr	r3, [r3, #8]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	f000 8163 	beq.w	8015d16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a50:	7b7a      	ldrb	r2, [r7, #13]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	32ae      	adds	r2, #174	; 0xae
 8015a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a5a:	689b      	ldr	r3, [r3, #8]
 8015a5c:	6839      	ldr	r1, [r7, #0]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	4798      	blx	r3
 8015a62:	4603      	mov	r3, r0
 8015a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a66:	e156      	b.n	8015d16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	785b      	ldrb	r3, [r3, #1]
 8015a6c:	2b03      	cmp	r3, #3
 8015a6e:	d008      	beq.n	8015a82 <USBD_StdEPReq+0x9a>
 8015a70:	2b03      	cmp	r3, #3
 8015a72:	f300 8145 	bgt.w	8015d00 <USBD_StdEPReq+0x318>
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	f000 809b 	beq.w	8015bb2 <USBD_StdEPReq+0x1ca>
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d03c      	beq.n	8015afa <USBD_StdEPReq+0x112>
 8015a80:	e13e      	b.n	8015d00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b02      	cmp	r3, #2
 8015a8c:	d002      	beq.n	8015a94 <USBD_StdEPReq+0xac>
 8015a8e:	2b03      	cmp	r3, #3
 8015a90:	d016      	beq.n	8015ac0 <USBD_StdEPReq+0xd8>
 8015a92:	e02c      	b.n	8015aee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a94:	7bbb      	ldrb	r3, [r7, #14]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d00d      	beq.n	8015ab6 <USBD_StdEPReq+0xce>
 8015a9a:	7bbb      	ldrb	r3, [r7, #14]
 8015a9c:	2b80      	cmp	r3, #128	; 0x80
 8015a9e:	d00a      	beq.n	8015ab6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f001 f9c3 	bl	8016e30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015aaa:	2180      	movs	r1, #128	; 0x80
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f001 f9bf 	bl	8016e30 <USBD_LL_StallEP>
 8015ab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ab4:	e020      	b.n	8015af8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015ab6:	6839      	ldr	r1, [r7, #0]
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f000 fc7a 	bl	80163b2 <USBD_CtlError>
              break;
 8015abe:	e01b      	b.n	8015af8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	885b      	ldrh	r3, [r3, #2]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d10e      	bne.n	8015ae6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015ac8:	7bbb      	ldrb	r3, [r7, #14]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00b      	beq.n	8015ae6 <USBD_StdEPReq+0xfe>
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b80      	cmp	r3, #128	; 0x80
 8015ad2:	d008      	beq.n	8015ae6 <USBD_StdEPReq+0xfe>
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	88db      	ldrh	r3, [r3, #6]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d104      	bne.n	8015ae6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f001 f9a5 	bl	8016e30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ae6:	6878      	ldr	r0, [r7, #4]
 8015ae8:	f000 fd2e 	bl	8016548 <USBD_CtlSendStatus>

              break;
 8015aec:	e004      	b.n	8015af8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015aee:	6839      	ldr	r1, [r7, #0]
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 fc5e 	bl	80163b2 <USBD_CtlError>
              break;
 8015af6:	bf00      	nop
          }
          break;
 8015af8:	e107      	b.n	8015d0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	d002      	beq.n	8015b0c <USBD_StdEPReq+0x124>
 8015b06:	2b03      	cmp	r3, #3
 8015b08:	d016      	beq.n	8015b38 <USBD_StdEPReq+0x150>
 8015b0a:	e04b      	b.n	8015ba4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00d      	beq.n	8015b2e <USBD_StdEPReq+0x146>
 8015b12:	7bbb      	ldrb	r3, [r7, #14]
 8015b14:	2b80      	cmp	r3, #128	; 0x80
 8015b16:	d00a      	beq.n	8015b2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b18:	7bbb      	ldrb	r3, [r7, #14]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f001 f987 	bl	8016e30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b22:	2180      	movs	r1, #128	; 0x80
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f001 f983 	bl	8016e30 <USBD_LL_StallEP>
 8015b2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b2c:	e040      	b.n	8015bb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b2e:	6839      	ldr	r1, [r7, #0]
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 fc3e 	bl	80163b2 <USBD_CtlError>
              break;
 8015b36:	e03b      	b.n	8015bb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	885b      	ldrh	r3, [r3, #2]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d136      	bne.n	8015bae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b40:	7bbb      	ldrb	r3, [r7, #14]
 8015b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d004      	beq.n	8015b54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b4a:	7bbb      	ldrb	r3, [r7, #14]
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f001 f98d 	bl	8016e6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f000 fcf7 	bl	8016548 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b5a:	7bbb      	ldrb	r3, [r7, #14]
 8015b5c:	4619      	mov	r1, r3
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f7ff fde2 	bl	8015728 <USBD_CoreFindEP>
 8015b64:	4603      	mov	r3, r0
 8015b66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b68:	7b7b      	ldrb	r3, [r7, #13]
 8015b6a:	2bff      	cmp	r3, #255	; 0xff
 8015b6c:	d01f      	beq.n	8015bae <USBD_StdEPReq+0x1c6>
 8015b6e:	7b7b      	ldrb	r3, [r7, #13]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d11c      	bne.n	8015bae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b74:	7b7a      	ldrb	r2, [r7, #13]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b7c:	7b7a      	ldrb	r2, [r7, #13]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	32ae      	adds	r2, #174	; 0xae
 8015b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b86:	689b      	ldr	r3, [r3, #8]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d010      	beq.n	8015bae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b8c:	7b7a      	ldrb	r2, [r7, #13]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	32ae      	adds	r2, #174	; 0xae
 8015b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	6839      	ldr	r1, [r7, #0]
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	4798      	blx	r3
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ba2:	e004      	b.n	8015bae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ba4:	6839      	ldr	r1, [r7, #0]
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f000 fc03 	bl	80163b2 <USBD_CtlError>
              break;
 8015bac:	e000      	b.n	8015bb0 <USBD_StdEPReq+0x1c8>
              break;
 8015bae:	bf00      	nop
          }
          break;
 8015bb0:	e0ab      	b.n	8015d0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2b02      	cmp	r3, #2
 8015bbc:	d002      	beq.n	8015bc4 <USBD_StdEPReq+0x1dc>
 8015bbe:	2b03      	cmp	r3, #3
 8015bc0:	d032      	beq.n	8015c28 <USBD_StdEPReq+0x240>
 8015bc2:	e097      	b.n	8015cf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bc4:	7bbb      	ldrb	r3, [r7, #14]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d007      	beq.n	8015bda <USBD_StdEPReq+0x1f2>
 8015bca:	7bbb      	ldrb	r3, [r7, #14]
 8015bcc:	2b80      	cmp	r3, #128	; 0x80
 8015bce:	d004      	beq.n	8015bda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015bd0:	6839      	ldr	r1, [r7, #0]
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f000 fbed 	bl	80163b2 <USBD_CtlError>
                break;
 8015bd8:	e091      	b.n	8015cfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	da0b      	bge.n	8015bfa <USBD_StdEPReq+0x212>
 8015be2:	7bbb      	ldrb	r3, [r7, #14]
 8015be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015be8:	4613      	mov	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	4413      	add	r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	3310      	adds	r3, #16
 8015bf2:	687a      	ldr	r2, [r7, #4]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	3304      	adds	r3, #4
 8015bf8:	e00b      	b.n	8015c12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bfa:	7bbb      	ldrb	r3, [r7, #14]
 8015bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c00:	4613      	mov	r3, r2
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	4413      	add	r3, r2
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	4413      	add	r3, r2
 8015c10:	3304      	adds	r3, #4
 8015c12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	2200      	movs	r2, #0
 8015c18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	2202      	movs	r2, #2
 8015c1e:	4619      	mov	r1, r3
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f000 fc37 	bl	8016494 <USBD_CtlSendData>
              break;
 8015c26:	e06a      	b.n	8015cfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	da11      	bge.n	8015c54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c30:	7bbb      	ldrb	r3, [r7, #14]
 8015c32:	f003 020f 	and.w	r2, r3, #15
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	4613      	mov	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4413      	add	r3, r2
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	440b      	add	r3, r1
 8015c42:	3324      	adds	r3, #36	; 0x24
 8015c44:	881b      	ldrh	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d117      	bne.n	8015c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c4a:	6839      	ldr	r1, [r7, #0]
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f000 fbb0 	bl	80163b2 <USBD_CtlError>
                  break;
 8015c52:	e054      	b.n	8015cfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c54:	7bbb      	ldrb	r3, [r7, #14]
 8015c56:	f003 020f 	and.w	r2, r3, #15
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4413      	add	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	440b      	add	r3, r1
 8015c66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c6a:	881b      	ldrh	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d104      	bne.n	8015c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c70:	6839      	ldr	r1, [r7, #0]
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 fb9d 	bl	80163b2 <USBD_CtlError>
                  break;
 8015c78:	e041      	b.n	8015cfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	da0b      	bge.n	8015c9a <USBD_StdEPReq+0x2b2>
 8015c82:	7bbb      	ldrb	r3, [r7, #14]
 8015c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c88:	4613      	mov	r3, r2
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	4413      	add	r3, r2
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	3310      	adds	r3, #16
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	4413      	add	r3, r2
 8015c96:	3304      	adds	r3, #4
 8015c98:	e00b      	b.n	8015cb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c9a:	7bbb      	ldrb	r3, [r7, #14]
 8015c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	4413      	add	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	4413      	add	r3, r2
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015cb4:	7bbb      	ldrb	r3, [r7, #14]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d002      	beq.n	8015cc0 <USBD_StdEPReq+0x2d8>
 8015cba:	7bbb      	ldrb	r3, [r7, #14]
 8015cbc:	2b80      	cmp	r3, #128	; 0x80
 8015cbe:	d103      	bne.n	8015cc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	601a      	str	r2, [r3, #0]
 8015cc6:	e00e      	b.n	8015ce6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cc8:	7bbb      	ldrb	r3, [r7, #14]
 8015cca:	4619      	mov	r1, r3
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f001 f8ed 	bl	8016eac <USBD_LL_IsStallEP>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d003      	beq.n	8015ce0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	2201      	movs	r2, #1
 8015cdc:	601a      	str	r2, [r3, #0]
 8015cde:	e002      	b.n	8015ce6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	2202      	movs	r2, #2
 8015cea:	4619      	mov	r1, r3
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f000 fbd1 	bl	8016494 <USBD_CtlSendData>
              break;
 8015cf2:	e004      	b.n	8015cfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cf4:	6839      	ldr	r1, [r7, #0]
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f000 fb5b 	bl	80163b2 <USBD_CtlError>
              break;
 8015cfc:	bf00      	nop
          }
          break;
 8015cfe:	e004      	b.n	8015d0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015d00:	6839      	ldr	r1, [r7, #0]
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f000 fb55 	bl	80163b2 <USBD_CtlError>
          break;
 8015d08:	bf00      	nop
      }
      break;
 8015d0a:	e005      	b.n	8015d18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f000 fb4f 	bl	80163b2 <USBD_CtlError>
      break;
 8015d14:	e000      	b.n	8015d18 <USBD_StdEPReq+0x330>
      break;
 8015d16:	bf00      	nop
  }

  return ret;
 8015d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
	...

08015d24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d32:	2300      	movs	r3, #0
 8015d34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d36:	2300      	movs	r3, #0
 8015d38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	885b      	ldrh	r3, [r3, #2]
 8015d3e:	0a1b      	lsrs	r3, r3, #8
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	3b01      	subs	r3, #1
 8015d44:	2b06      	cmp	r3, #6
 8015d46:	f200 8128 	bhi.w	8015f9a <USBD_GetDescriptor+0x276>
 8015d4a:	a201      	add	r2, pc, #4	; (adr r2, 8015d50 <USBD_GetDescriptor+0x2c>)
 8015d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d50:	08015d6d 	.word	0x08015d6d
 8015d54:	08015d85 	.word	0x08015d85
 8015d58:	08015dc5 	.word	0x08015dc5
 8015d5c:	08015f9b 	.word	0x08015f9b
 8015d60:	08015f9b 	.word	0x08015f9b
 8015d64:	08015f3b 	.word	0x08015f3b
 8015d68:	08015f67 	.word	0x08015f67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	7c12      	ldrb	r2, [r2, #16]
 8015d78:	f107 0108 	add.w	r1, r7, #8
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	4798      	blx	r3
 8015d80:	60f8      	str	r0, [r7, #12]
      break;
 8015d82:	e112      	b.n	8015faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	7c1b      	ldrb	r3, [r3, #16]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10d      	bne.n	8015da8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d94:	f107 0208 	add.w	r2, r7, #8
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	3301      	adds	r3, #1
 8015da2:	2202      	movs	r2, #2
 8015da4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015da6:	e100      	b.n	8015faa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015db0:	f107 0208 	add.w	r2, r7, #8
 8015db4:	4610      	mov	r0, r2
 8015db6:	4798      	blx	r3
 8015db8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	2202      	movs	r2, #2
 8015dc0:	701a      	strb	r2, [r3, #0]
      break;
 8015dc2:	e0f2      	b.n	8015faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	885b      	ldrh	r3, [r3, #2]
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	2b05      	cmp	r3, #5
 8015dcc:	f200 80ac 	bhi.w	8015f28 <USBD_GetDescriptor+0x204>
 8015dd0:	a201      	add	r2, pc, #4	; (adr r2, 8015dd8 <USBD_GetDescriptor+0xb4>)
 8015dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd6:	bf00      	nop
 8015dd8:	08015df1 	.word	0x08015df1
 8015ddc:	08015e25 	.word	0x08015e25
 8015de0:	08015e59 	.word	0x08015e59
 8015de4:	08015e8d 	.word	0x08015e8d
 8015de8:	08015ec1 	.word	0x08015ec1
 8015dec:	08015ef5 	.word	0x08015ef5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d00b      	beq.n	8015e14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e02:	685b      	ldr	r3, [r3, #4]
 8015e04:	687a      	ldr	r2, [r7, #4]
 8015e06:	7c12      	ldrb	r2, [r2, #16]
 8015e08:	f107 0108 	add.w	r1, r7, #8
 8015e0c:	4610      	mov	r0, r2
 8015e0e:	4798      	blx	r3
 8015e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e12:	e091      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e14:	6839      	ldr	r1, [r7, #0]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f000 facb 	bl	80163b2 <USBD_CtlError>
            err++;
 8015e1c:	7afb      	ldrb	r3, [r7, #11]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	72fb      	strb	r3, [r7, #11]
          break;
 8015e22:	e089      	b.n	8015f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2a:	689b      	ldr	r3, [r3, #8]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00b      	beq.n	8015e48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	7c12      	ldrb	r2, [r2, #16]
 8015e3c:	f107 0108 	add.w	r1, r7, #8
 8015e40:	4610      	mov	r0, r2
 8015e42:	4798      	blx	r3
 8015e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e46:	e077      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f000 fab1 	bl	80163b2 <USBD_CtlError>
            err++;
 8015e50:	7afb      	ldrb	r3, [r7, #11]
 8015e52:	3301      	adds	r3, #1
 8015e54:	72fb      	strb	r3, [r7, #11]
          break;
 8015e56:	e06f      	b.n	8015f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00b      	beq.n	8015e7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e6a:	68db      	ldr	r3, [r3, #12]
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	7c12      	ldrb	r2, [r2, #16]
 8015e70:	f107 0108 	add.w	r1, r7, #8
 8015e74:	4610      	mov	r0, r2
 8015e76:	4798      	blx	r3
 8015e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e7a:	e05d      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fa97 	bl	80163b2 <USBD_CtlError>
            err++;
 8015e84:	7afb      	ldrb	r3, [r7, #11]
 8015e86:	3301      	adds	r3, #1
 8015e88:	72fb      	strb	r3, [r7, #11]
          break;
 8015e8a:	e055      	b.n	8015f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e92:	691b      	ldr	r3, [r3, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00b      	beq.n	8015eb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e9e:	691b      	ldr	r3, [r3, #16]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	7c12      	ldrb	r2, [r2, #16]
 8015ea4:	f107 0108 	add.w	r1, r7, #8
 8015ea8:	4610      	mov	r0, r2
 8015eaa:	4798      	blx	r3
 8015eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eae:	e043      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015eb0:	6839      	ldr	r1, [r7, #0]
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f000 fa7d 	bl	80163b2 <USBD_CtlError>
            err++;
 8015eb8:	7afb      	ldrb	r3, [r7, #11]
 8015eba:	3301      	adds	r3, #1
 8015ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8015ebe:	e03b      	b.n	8015f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ec6:	695b      	ldr	r3, [r3, #20]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00b      	beq.n	8015ee4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ed2:	695b      	ldr	r3, [r3, #20]
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	7c12      	ldrb	r2, [r2, #16]
 8015ed8:	f107 0108 	add.w	r1, r7, #8
 8015edc:	4610      	mov	r0, r2
 8015ede:	4798      	blx	r3
 8015ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ee2:	e029      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 fa63 	bl	80163b2 <USBD_CtlError>
            err++;
 8015eec:	7afb      	ldrb	r3, [r7, #11]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ef2:	e021      	b.n	8015f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015efa:	699b      	ldr	r3, [r3, #24]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d00b      	beq.n	8015f18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f06:	699b      	ldr	r3, [r3, #24]
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	7c12      	ldrb	r2, [r2, #16]
 8015f0c:	f107 0108 	add.w	r1, r7, #8
 8015f10:	4610      	mov	r0, r2
 8015f12:	4798      	blx	r3
 8015f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f16:	e00f      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 fa49 	bl	80163b2 <USBD_CtlError>
            err++;
 8015f20:	7afb      	ldrb	r3, [r7, #11]
 8015f22:	3301      	adds	r3, #1
 8015f24:	72fb      	strb	r3, [r7, #11]
          break;
 8015f26:	e007      	b.n	8015f38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 fa41 	bl	80163b2 <USBD_CtlError>
          err++;
 8015f30:	7afb      	ldrb	r3, [r7, #11]
 8015f32:	3301      	adds	r3, #1
 8015f34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f36:	bf00      	nop
      }
      break;
 8015f38:	e037      	b.n	8015faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	7c1b      	ldrb	r3, [r3, #16]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d109      	bne.n	8015f56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f4a:	f107 0208 	add.w	r2, r7, #8
 8015f4e:	4610      	mov	r0, r2
 8015f50:	4798      	blx	r3
 8015f52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f54:	e029      	b.n	8015faa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f56:	6839      	ldr	r1, [r7, #0]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 fa2a 	bl	80163b2 <USBD_CtlError>
        err++;
 8015f5e:	7afb      	ldrb	r3, [r7, #11]
 8015f60:	3301      	adds	r3, #1
 8015f62:	72fb      	strb	r3, [r7, #11]
      break;
 8015f64:	e021      	b.n	8015faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	7c1b      	ldrb	r3, [r3, #16]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d10d      	bne.n	8015f8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f76:	f107 0208 	add.w	r2, r7, #8
 8015f7a:	4610      	mov	r0, r2
 8015f7c:	4798      	blx	r3
 8015f7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	3301      	adds	r3, #1
 8015f84:	2207      	movs	r2, #7
 8015f86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f88:	e00f      	b.n	8015faa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fa10 	bl	80163b2 <USBD_CtlError>
        err++;
 8015f92:	7afb      	ldrb	r3, [r7, #11]
 8015f94:	3301      	adds	r3, #1
 8015f96:	72fb      	strb	r3, [r7, #11]
      break;
 8015f98:	e007      	b.n	8015faa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f9a:	6839      	ldr	r1, [r7, #0]
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f000 fa08 	bl	80163b2 <USBD_CtlError>
      err++;
 8015fa2:	7afb      	ldrb	r3, [r7, #11]
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8015fa8:	bf00      	nop
  }

  if (err != 0U)
 8015faa:	7afb      	ldrb	r3, [r7, #11]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d11e      	bne.n	8015fee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	88db      	ldrh	r3, [r3, #6]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d016      	beq.n	8015fe6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015fb8:	893b      	ldrh	r3, [r7, #8]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00e      	beq.n	8015fdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	88da      	ldrh	r2, [r3, #6]
 8015fc2:	893b      	ldrh	r3, [r7, #8]
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	bf28      	it	cs
 8015fc8:	4613      	movcs	r3, r2
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fce:	893b      	ldrh	r3, [r7, #8]
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	68f9      	ldr	r1, [r7, #12]
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f000 fa5d 	bl	8016494 <USBD_CtlSendData>
 8015fda:	e009      	b.n	8015ff0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fdc:	6839      	ldr	r1, [r7, #0]
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 f9e7 	bl	80163b2 <USBD_CtlError>
 8015fe4:	e004      	b.n	8015ff0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f000 faae 	bl	8016548 <USBD_CtlSendStatus>
 8015fec:	e000      	b.n	8015ff0 <USBD_GetDescriptor+0x2cc>
    return;
 8015fee:	bf00      	nop
  }
}
 8015ff0:	3710      	adds	r7, #16
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop

08015ff8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	889b      	ldrh	r3, [r3, #4]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d131      	bne.n	801606e <USBD_SetAddress+0x76>
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	88db      	ldrh	r3, [r3, #6]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d12d      	bne.n	801606e <USBD_SetAddress+0x76>
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	885b      	ldrh	r3, [r3, #2]
 8016016:	2b7f      	cmp	r3, #127	; 0x7f
 8016018:	d829      	bhi.n	801606e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	885b      	ldrh	r3, [r3, #2]
 801601e:	b2db      	uxtb	r3, r3
 8016020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801602c:	b2db      	uxtb	r3, r3
 801602e:	2b03      	cmp	r3, #3
 8016030:	d104      	bne.n	801603c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016032:	6839      	ldr	r1, [r7, #0]
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f000 f9bc 	bl	80163b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801603a:	e01d      	b.n	8016078 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	7bfa      	ldrb	r2, [r7, #15]
 8016040:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016044:	7bfb      	ldrb	r3, [r7, #15]
 8016046:	4619      	mov	r1, r3
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 ff5b 	bl	8016f04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f000 fa7a 	bl	8016548 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016054:	7bfb      	ldrb	r3, [r7, #15]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d004      	beq.n	8016064 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2202      	movs	r2, #2
 801605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016062:	e009      	b.n	8016078 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2201      	movs	r2, #1
 8016068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801606c:	e004      	b.n	8016078 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801606e:	6839      	ldr	r1, [r7, #0]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 f99e 	bl	80163b2 <USBD_CtlError>
  }
}
 8016076:	bf00      	nop
 8016078:	bf00      	nop
 801607a:	3710      	adds	r7, #16
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801608a:	2300      	movs	r3, #0
 801608c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	885b      	ldrh	r3, [r3, #2]
 8016092:	b2da      	uxtb	r2, r3
 8016094:	4b4e      	ldr	r3, [pc, #312]	; (80161d0 <USBD_SetConfig+0x150>)
 8016096:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016098:	4b4d      	ldr	r3, [pc, #308]	; (80161d0 <USBD_SetConfig+0x150>)
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b01      	cmp	r3, #1
 801609e:	d905      	bls.n	80160ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80160a0:	6839      	ldr	r1, [r7, #0]
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 f985 	bl	80163b2 <USBD_CtlError>
    return USBD_FAIL;
 80160a8:	2303      	movs	r3, #3
 80160aa:	e08c      	b.n	80161c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	2b02      	cmp	r3, #2
 80160b6:	d002      	beq.n	80160be <USBD_SetConfig+0x3e>
 80160b8:	2b03      	cmp	r3, #3
 80160ba:	d029      	beq.n	8016110 <USBD_SetConfig+0x90>
 80160bc:	e075      	b.n	80161aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160be:	4b44      	ldr	r3, [pc, #272]	; (80161d0 <USBD_SetConfig+0x150>)
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d020      	beq.n	8016108 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160c6:	4b42      	ldr	r3, [pc, #264]	; (80161d0 <USBD_SetConfig+0x150>)
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	461a      	mov	r2, r3
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160d0:	4b3f      	ldr	r3, [pc, #252]	; (80161d0 <USBD_SetConfig+0x150>)
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	4619      	mov	r1, r3
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7fe ffe1 	bl	801509e <USBD_SetClassConfig>
 80160dc:	4603      	mov	r3, r0
 80160de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160e0:	7bfb      	ldrb	r3, [r7, #15]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d008      	beq.n	80160f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 f962 	bl	80163b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2202      	movs	r2, #2
 80160f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160f6:	e065      	b.n	80161c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 fa25 	bl	8016548 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2203      	movs	r2, #3
 8016102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016106:	e05d      	b.n	80161c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 fa1d 	bl	8016548 <USBD_CtlSendStatus>
      break;
 801610e:	e059      	b.n	80161c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016110:	4b2f      	ldr	r3, [pc, #188]	; (80161d0 <USBD_SetConfig+0x150>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d112      	bne.n	801613e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2202      	movs	r2, #2
 801611c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016120:	4b2b      	ldr	r3, [pc, #172]	; (80161d0 <USBD_SetConfig+0x150>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	461a      	mov	r2, r3
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801612a:	4b29      	ldr	r3, [pc, #164]	; (80161d0 <USBD_SetConfig+0x150>)
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7fe ffd0 	bl	80150d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 fa06 	bl	8016548 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801613c:	e042      	b.n	80161c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801613e:	4b24      	ldr	r3, [pc, #144]	; (80161d0 <USBD_SetConfig+0x150>)
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	461a      	mov	r2, r3
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	429a      	cmp	r2, r3
 801614a:	d02a      	beq.n	80161a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	b2db      	uxtb	r3, r3
 8016152:	4619      	mov	r1, r3
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f7fe ffbe 	bl	80150d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801615a:	4b1d      	ldr	r3, [pc, #116]	; (80161d0 <USBD_SetConfig+0x150>)
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	461a      	mov	r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016164:	4b1a      	ldr	r3, [pc, #104]	; (80161d0 <USBD_SetConfig+0x150>)
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	4619      	mov	r1, r3
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7fe ff97 	bl	801509e <USBD_SetClassConfig>
 8016170:	4603      	mov	r3, r0
 8016172:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016174:	7bfb      	ldrb	r3, [r7, #15]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00f      	beq.n	801619a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f000 f918 	bl	80163b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	b2db      	uxtb	r3, r3
 8016188:	4619      	mov	r1, r3
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7fe ffa3 	bl	80150d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2202      	movs	r2, #2
 8016194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016198:	e014      	b.n	80161c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f9d4 	bl	8016548 <USBD_CtlSendStatus>
      break;
 80161a0:	e010      	b.n	80161c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 f9d0 	bl	8016548 <USBD_CtlSendStatus>
      break;
 80161a8:	e00c      	b.n	80161c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80161aa:	6839      	ldr	r1, [r7, #0]
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 f900 	bl	80163b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161b2:	4b07      	ldr	r3, [pc, #28]	; (80161d0 <USBD_SetConfig+0x150>)
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	4619      	mov	r1, r3
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f7fe ff8c 	bl	80150d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161be:	2303      	movs	r3, #3
 80161c0:	73fb      	strb	r3, [r7, #15]
      break;
 80161c2:	bf00      	nop
  }

  return ret;
 80161c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3710      	adds	r7, #16
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	24000d80 	.word	0x24000d80

080161d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b082      	sub	sp, #8
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	88db      	ldrh	r3, [r3, #6]
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d004      	beq.n	80161f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f8e2 	bl	80163b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161ee:	e023      	b.n	8016238 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b02      	cmp	r3, #2
 80161fa:	dc02      	bgt.n	8016202 <USBD_GetConfig+0x2e>
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	dc03      	bgt.n	8016208 <USBD_GetConfig+0x34>
 8016200:	e015      	b.n	801622e <USBD_GetConfig+0x5a>
 8016202:	2b03      	cmp	r3, #3
 8016204:	d00b      	beq.n	801621e <USBD_GetConfig+0x4a>
 8016206:	e012      	b.n	801622e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2200      	movs	r2, #0
 801620c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	3308      	adds	r3, #8
 8016212:	2201      	movs	r2, #1
 8016214:	4619      	mov	r1, r3
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 f93c 	bl	8016494 <USBD_CtlSendData>
        break;
 801621c:	e00c      	b.n	8016238 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	3304      	adds	r3, #4
 8016222:	2201      	movs	r2, #1
 8016224:	4619      	mov	r1, r3
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 f934 	bl	8016494 <USBD_CtlSendData>
        break;
 801622c:	e004      	b.n	8016238 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 f8be 	bl	80163b2 <USBD_CtlError>
        break;
 8016236:	bf00      	nop
}
 8016238:	bf00      	nop
 801623a:	3708      	adds	r7, #8
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016250:	b2db      	uxtb	r3, r3
 8016252:	3b01      	subs	r3, #1
 8016254:	2b02      	cmp	r3, #2
 8016256:	d81e      	bhi.n	8016296 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	88db      	ldrh	r3, [r3, #6]
 801625c:	2b02      	cmp	r3, #2
 801625e:	d004      	beq.n	801626a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016260:	6839      	ldr	r1, [r7, #0]
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f000 f8a5 	bl	80163b2 <USBD_CtlError>
        break;
 8016268:	e01a      	b.n	80162a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	2201      	movs	r2, #1
 801626e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016276:	2b00      	cmp	r3, #0
 8016278:	d005      	beq.n	8016286 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	f043 0202 	orr.w	r2, r3, #2
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	330c      	adds	r3, #12
 801628a:	2202      	movs	r2, #2
 801628c:	4619      	mov	r1, r3
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f000 f900 	bl	8016494 <USBD_CtlSendData>
      break;
 8016294:	e004      	b.n	80162a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016296:	6839      	ldr	r1, [r7, #0]
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f000 f88a 	bl	80163b2 <USBD_CtlError>
      break;
 801629e:	bf00      	nop
  }
}
 80162a0:	bf00      	nop
 80162a2:	3708      	adds	r7, #8
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	885b      	ldrh	r3, [r3, #2]
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d107      	bne.n	80162ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2201      	movs	r2, #1
 80162be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 f940 	bl	8016548 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162c8:	e013      	b.n	80162f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	885b      	ldrh	r3, [r3, #2]
 80162ce:	2b02      	cmp	r3, #2
 80162d0:	d10b      	bne.n	80162ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	889b      	ldrh	r3, [r3, #4]
 80162d6:	0a1b      	lsrs	r3, r3, #8
 80162d8:	b29b      	uxth	r3, r3
 80162da:	b2da      	uxtb	r2, r3
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f000 f930 	bl	8016548 <USBD_CtlSendStatus>
}
 80162e8:	e003      	b.n	80162f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162ea:	6839      	ldr	r1, [r7, #0]
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f000 f860 	bl	80163b2 <USBD_CtlError>
}
 80162f2:	bf00      	nop
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162fa:	b580      	push	{r7, lr}
 80162fc:	b082      	sub	sp, #8
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
 8016302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801630a:	b2db      	uxtb	r3, r3
 801630c:	3b01      	subs	r3, #1
 801630e:	2b02      	cmp	r3, #2
 8016310:	d80b      	bhi.n	801632a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	885b      	ldrh	r3, [r3, #2]
 8016316:	2b01      	cmp	r3, #1
 8016318:	d10c      	bne.n	8016334 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2200      	movs	r2, #0
 801631e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f000 f910 	bl	8016548 <USBD_CtlSendStatus>
      }
      break;
 8016328:	e004      	b.n	8016334 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801632a:	6839      	ldr	r1, [r7, #0]
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f000 f840 	bl	80163b2 <USBD_CtlError>
      break;
 8016332:	e000      	b.n	8016336 <USBD_ClrFeature+0x3c>
      break;
 8016334:	bf00      	nop
  }
}
 8016336:	bf00      	nop
 8016338:	3708      	adds	r7, #8
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}

0801633e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801633e:	b580      	push	{r7, lr}
 8016340:	b084      	sub	sp, #16
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
 8016346:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	781a      	ldrb	r2, [r3, #0]
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	3301      	adds	r3, #1
 8016358:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	781a      	ldrb	r2, [r3, #0]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	3301      	adds	r3, #1
 8016366:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	f7ff fa41 	bl	80157f0 <SWAPBYTE>
 801636e:	4603      	mov	r3, r0
 8016370:	461a      	mov	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	3301      	adds	r3, #1
 801637a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	3301      	adds	r3, #1
 8016380:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	f7ff fa34 	bl	80157f0 <SWAPBYTE>
 8016388:	4603      	mov	r3, r0
 801638a:	461a      	mov	r2, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	3301      	adds	r3, #1
 8016394:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	3301      	adds	r3, #1
 801639a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801639c:	68f8      	ldr	r0, [r7, #12]
 801639e:	f7ff fa27 	bl	80157f0 <SWAPBYTE>
 80163a2:	4603      	mov	r3, r0
 80163a4:	461a      	mov	r2, r3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	80da      	strh	r2, [r3, #6]
}
 80163aa:	bf00      	nop
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}

080163b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163b2:	b580      	push	{r7, lr}
 80163b4:	b082      	sub	sp, #8
 80163b6:	af00      	add	r7, sp, #0
 80163b8:	6078      	str	r0, [r7, #4]
 80163ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163bc:	2180      	movs	r1, #128	; 0x80
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fd36 	bl	8016e30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163c4:	2100      	movs	r1, #0
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	f000 fd32 	bl	8016e30 <USBD_LL_StallEP>
}
 80163cc:	bf00      	nop
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b086      	sub	sp, #24
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163e0:	2300      	movs	r3, #0
 80163e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d036      	beq.n	8016458 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163ee:	6938      	ldr	r0, [r7, #16]
 80163f0:	f000 f836 	bl	8016460 <USBD_GetLen>
 80163f4:	4603      	mov	r3, r0
 80163f6:	3301      	adds	r3, #1
 80163f8:	b29b      	uxth	r3, r3
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	b29a      	uxth	r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016402:	7dfb      	ldrb	r3, [r7, #23]
 8016404:	68ba      	ldr	r2, [r7, #8]
 8016406:	4413      	add	r3, r2
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	7812      	ldrb	r2, [r2, #0]
 801640c:	701a      	strb	r2, [r3, #0]
  idx++;
 801640e:	7dfb      	ldrb	r3, [r7, #23]
 8016410:	3301      	adds	r3, #1
 8016412:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016414:	7dfb      	ldrb	r3, [r7, #23]
 8016416:	68ba      	ldr	r2, [r7, #8]
 8016418:	4413      	add	r3, r2
 801641a:	2203      	movs	r2, #3
 801641c:	701a      	strb	r2, [r3, #0]
  idx++;
 801641e:	7dfb      	ldrb	r3, [r7, #23]
 8016420:	3301      	adds	r3, #1
 8016422:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016424:	e013      	b.n	801644e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	4413      	add	r3, r2
 801642c:	693a      	ldr	r2, [r7, #16]
 801642e:	7812      	ldrb	r2, [r2, #0]
 8016430:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	3301      	adds	r3, #1
 8016436:	613b      	str	r3, [r7, #16]
    idx++;
 8016438:	7dfb      	ldrb	r3, [r7, #23]
 801643a:	3301      	adds	r3, #1
 801643c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801643e:	7dfb      	ldrb	r3, [r7, #23]
 8016440:	68ba      	ldr	r2, [r7, #8]
 8016442:	4413      	add	r3, r2
 8016444:	2200      	movs	r2, #0
 8016446:	701a      	strb	r2, [r3, #0]
    idx++;
 8016448:	7dfb      	ldrb	r3, [r7, #23]
 801644a:	3301      	adds	r3, #1
 801644c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801644e:	693b      	ldr	r3, [r7, #16]
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1e7      	bne.n	8016426 <USBD_GetString+0x52>
 8016456:	e000      	b.n	801645a <USBD_GetString+0x86>
    return;
 8016458:	bf00      	nop
  }
}
 801645a:	3718      	adds	r7, #24
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}

08016460 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016460:	b480      	push	{r7}
 8016462:	b085      	sub	sp, #20
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016468:	2300      	movs	r3, #0
 801646a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016470:	e005      	b.n	801647e <USBD_GetLen+0x1e>
  {
    len++;
 8016472:	7bfb      	ldrb	r3, [r7, #15]
 8016474:	3301      	adds	r3, #1
 8016476:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	3301      	adds	r3, #1
 801647c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d1f5      	bne.n	8016472 <USBD_GetLen+0x12>
  }

  return len;
 8016486:	7bfb      	ldrb	r3, [r7, #15]
}
 8016488:	4618      	mov	r0, r3
 801648a:	3714      	adds	r7, #20
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr

08016494 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2202      	movs	r2, #2
 80164a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	687a      	ldr	r2, [r7, #4]
 80164b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	2100      	movs	r1, #0
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	f000 fd41 	bl	8016f42 <USBD_LL_Transmit>

  return USBD_OK;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3710      	adds	r7, #16
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}

080164ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b084      	sub	sp, #16
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	60f8      	str	r0, [r7, #12]
 80164d2:	60b9      	str	r1, [r7, #8]
 80164d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	68ba      	ldr	r2, [r7, #8]
 80164da:	2100      	movs	r1, #0
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f000 fd30 	bl	8016f42 <USBD_LL_Transmit>

  return USBD_OK;
 80164e2:	2300      	movs	r3, #0
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}

080164ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2203      	movs	r2, #3
 80164fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68ba      	ldr	r2, [r7, #8]
 8016514:	2100      	movs	r1, #0
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f000 fd34 	bl	8016f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801651c:	2300      	movs	r3, #0
}
 801651e:	4618      	mov	r0, r3
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b084      	sub	sp, #16
 801652a:	af00      	add	r7, sp, #0
 801652c:	60f8      	str	r0, [r7, #12]
 801652e:	60b9      	str	r1, [r7, #8]
 8016530:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	68ba      	ldr	r2, [r7, #8]
 8016536:	2100      	movs	r1, #0
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f000 fd23 	bl	8016f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801653e:	2300      	movs	r3, #0
}
 8016540:	4618      	mov	r0, r3
 8016542:	3710      	adds	r7, #16
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	2204      	movs	r2, #4
 8016554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016558:	2300      	movs	r3, #0
 801655a:	2200      	movs	r2, #0
 801655c:	2100      	movs	r1, #0
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 fcef 	bl	8016f42 <USBD_LL_Transmit>

  return USBD_OK;
 8016564:	2300      	movs	r3, #0
}
 8016566:	4618      	mov	r0, r3
 8016568:	3708      	adds	r7, #8
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}

0801656e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801656e:	b580      	push	{r7, lr}
 8016570:	b082      	sub	sp, #8
 8016572:	af00      	add	r7, sp, #0
 8016574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2205      	movs	r2, #5
 801657a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801657e:	2300      	movs	r3, #0
 8016580:	2200      	movs	r2, #0
 8016582:	2100      	movs	r1, #0
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f000 fcfd 	bl	8016f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801658a:	2300      	movs	r3, #0
}
 801658c:	4618      	mov	r0, r3
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016594:	b480      	push	{r7}
 8016596:	b087      	sub	sp, #28
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	4613      	mov	r3, r2
 80165a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80165a2:	2301      	movs	r3, #1
 80165a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80165a6:	2300      	movs	r3, #0
 80165a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80165aa:	4b1f      	ldr	r3, [pc, #124]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165ac:	7a5b      	ldrb	r3, [r3, #9]
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d131      	bne.n	8016618 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80165b4:	4b1c      	ldr	r3, [pc, #112]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165b6:	7a5b      	ldrb	r3, [r3, #9]
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	461a      	mov	r2, r3
 80165bc:	4b1a      	ldr	r3, [pc, #104]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165be:	2100      	movs	r1, #0
 80165c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80165c2:	4b19      	ldr	r3, [pc, #100]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165c4:	7a5b      	ldrb	r3, [r3, #9]
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	4a17      	ldr	r2, [pc, #92]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	4413      	add	r3, r2
 80165ce:	68fa      	ldr	r2, [r7, #12]
 80165d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80165d2:	4b15      	ldr	r3, [pc, #84]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165d4:	7a5b      	ldrb	r3, [r3, #9]
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	461a      	mov	r2, r3
 80165da:	4b13      	ldr	r3, [pc, #76]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165dc:	4413      	add	r3, r2
 80165de:	79fa      	ldrb	r2, [r7, #7]
 80165e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80165e2:	4b11      	ldr	r3, [pc, #68]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165e4:	7a5b      	ldrb	r3, [r3, #9]
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	1c5a      	adds	r2, r3, #1
 80165ea:	b2d1      	uxtb	r1, r2
 80165ec:	4a0e      	ldr	r2, [pc, #56]	; (8016628 <FATFS_LinkDriverEx+0x94>)
 80165ee:	7251      	strb	r1, [r2, #9]
 80165f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165f2:	7dbb      	ldrb	r3, [r7, #22]
 80165f4:	3330      	adds	r3, #48	; 0x30
 80165f6:	b2da      	uxtb	r2, r3
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3301      	adds	r3, #1
 8016600:	223a      	movs	r2, #58	; 0x3a
 8016602:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	3302      	adds	r3, #2
 8016608:	222f      	movs	r2, #47	; 0x2f
 801660a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	3303      	adds	r3, #3
 8016610:	2200      	movs	r2, #0
 8016612:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016614:	2300      	movs	r3, #0
 8016616:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016618:	7dfb      	ldrb	r3, [r7, #23]
}
 801661a:	4618      	mov	r0, r3
 801661c:	371c      	adds	r7, #28
 801661e:	46bd      	mov	sp, r7
 8016620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016624:	4770      	bx	lr
 8016626:	bf00      	nop
 8016628:	24000d84 	.word	0x24000d84

0801662c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b082      	sub	sp, #8
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016636:	2200      	movs	r2, #0
 8016638:	6839      	ldr	r1, [r7, #0]
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7ff ffaa 	bl	8016594 <FATFS_LinkDriverEx>
 8016640:	4603      	mov	r3, r0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
	...

0801664c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016650:	2201      	movs	r2, #1
 8016652:	4913      	ldr	r1, [pc, #76]	; (80166a0 <MX_USB_DEVICE_Init+0x54>)
 8016654:	4813      	ldr	r0, [pc, #76]	; (80166a4 <MX_USB_DEVICE_Init+0x58>)
 8016656:	f7fe fca5 	bl	8014fa4 <USBD_Init>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016660:	f7ec ff90 	bl	8003584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016664:	4910      	ldr	r1, [pc, #64]	; (80166a8 <MX_USB_DEVICE_Init+0x5c>)
 8016666:	480f      	ldr	r0, [pc, #60]	; (80166a4 <MX_USB_DEVICE_Init+0x58>)
 8016668:	f7fe fccc 	bl	8015004 <USBD_RegisterClass>
 801666c:	4603      	mov	r3, r0
 801666e:	2b00      	cmp	r3, #0
 8016670:	d001      	beq.n	8016676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016672:	f7ec ff87 	bl	8003584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016676:	490d      	ldr	r1, [pc, #52]	; (80166ac <MX_USB_DEVICE_Init+0x60>)
 8016678:	480a      	ldr	r0, [pc, #40]	; (80166a4 <MX_USB_DEVICE_Init+0x58>)
 801667a:	f7fe fbc3 	bl	8014e04 <USBD_CDC_RegisterInterface>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d001      	beq.n	8016688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016684:	f7ec ff7e 	bl	8003584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016688:	4806      	ldr	r0, [pc, #24]	; (80166a4 <MX_USB_DEVICE_Init+0x58>)
 801668a:	f7fe fcf1 	bl	8015070 <USBD_Start>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d001      	beq.n	8016698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016694:	f7ec ff76 	bl	8003584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016698:	f7f3 fba4 	bl	8009de4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801669c:	bf00      	nop
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	240000b0 	.word	0x240000b0
 80166a4:	24000d90 	.word	0x24000d90
 80166a8:	2400001c 	.word	0x2400001c
 80166ac:	2400009c 	.word	0x2400009c

080166b0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80166b4:	2200      	movs	r2, #0
 80166b6:	4905      	ldr	r1, [pc, #20]	; (80166cc <CDC_Init_HS+0x1c>)
 80166b8:	4805      	ldr	r0, [pc, #20]	; (80166d0 <CDC_Init_HS+0x20>)
 80166ba:	f7fe fbbd 	bl	8014e38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80166be:	4905      	ldr	r1, [pc, #20]	; (80166d4 <CDC_Init_HS+0x24>)
 80166c0:	4803      	ldr	r0, [pc, #12]	; (80166d0 <CDC_Init_HS+0x20>)
 80166c2:	f7fe fbdb 	bl	8014e7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	2400186c 	.word	0x2400186c
 80166d0:	24000d90 	.word	0x24000d90
 80166d4:	2400106c 	.word	0x2400106c

080166d8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80166d8:	b480      	push	{r7}
 80166da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80166dc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80166de:	4618      	mov	r0, r3
 80166e0:	46bd      	mov	sp, r7
 80166e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e6:	4770      	bx	lr

080166e8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b083      	sub	sp, #12
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	4603      	mov	r3, r0
 80166f0:	6039      	str	r1, [r7, #0]
 80166f2:	71fb      	strb	r3, [r7, #7]
 80166f4:	4613      	mov	r3, r2
 80166f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166f8:	79fb      	ldrb	r3, [r7, #7]
 80166fa:	2b23      	cmp	r3, #35	; 0x23
 80166fc:	d84a      	bhi.n	8016794 <CDC_Control_HS+0xac>
 80166fe:	a201      	add	r2, pc, #4	; (adr r2, 8016704 <CDC_Control_HS+0x1c>)
 8016700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016704:	08016795 	.word	0x08016795
 8016708:	08016795 	.word	0x08016795
 801670c:	08016795 	.word	0x08016795
 8016710:	08016795 	.word	0x08016795
 8016714:	08016795 	.word	0x08016795
 8016718:	08016795 	.word	0x08016795
 801671c:	08016795 	.word	0x08016795
 8016720:	08016795 	.word	0x08016795
 8016724:	08016795 	.word	0x08016795
 8016728:	08016795 	.word	0x08016795
 801672c:	08016795 	.word	0x08016795
 8016730:	08016795 	.word	0x08016795
 8016734:	08016795 	.word	0x08016795
 8016738:	08016795 	.word	0x08016795
 801673c:	08016795 	.word	0x08016795
 8016740:	08016795 	.word	0x08016795
 8016744:	08016795 	.word	0x08016795
 8016748:	08016795 	.word	0x08016795
 801674c:	08016795 	.word	0x08016795
 8016750:	08016795 	.word	0x08016795
 8016754:	08016795 	.word	0x08016795
 8016758:	08016795 	.word	0x08016795
 801675c:	08016795 	.word	0x08016795
 8016760:	08016795 	.word	0x08016795
 8016764:	08016795 	.word	0x08016795
 8016768:	08016795 	.word	0x08016795
 801676c:	08016795 	.word	0x08016795
 8016770:	08016795 	.word	0x08016795
 8016774:	08016795 	.word	0x08016795
 8016778:	08016795 	.word	0x08016795
 801677c:	08016795 	.word	0x08016795
 8016780:	08016795 	.word	0x08016795
 8016784:	08016795 	.word	0x08016795
 8016788:	08016795 	.word	0x08016795
 801678c:	08016795 	.word	0x08016795
 8016790:	08016795 	.word	0x08016795
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016794:	bf00      	nop
  }

  return (USBD_OK);
 8016796:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016798:	4618      	mov	r0, r3
 801679a:	370c      	adds	r7, #12
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr

080167a4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80167ae:	6879      	ldr	r1, [r7, #4]
 80167b0:	4805      	ldr	r0, [pc, #20]	; (80167c8 <CDC_Receive_HS+0x24>)
 80167b2:	f7fe fb63 	bl	8014e7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80167b6:	4804      	ldr	r0, [pc, #16]	; (80167c8 <CDC_Receive_HS+0x24>)
 80167b8:	f7fe fbbe 	bl	8014f38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80167bc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	24000d90 	.word	0x24000d90

080167cc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	460b      	mov	r3, r1
 80167d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167d8:	2300      	movs	r3, #0
 80167da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80167dc:	4b0d      	ldr	r3, [pc, #52]	; (8016814 <CDC_Transmit_HS+0x48>)
 80167de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d001      	beq.n	80167f2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80167ee:	2301      	movs	r3, #1
 80167f0:	e00b      	b.n	801680a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80167f2:	887b      	ldrh	r3, [r7, #2]
 80167f4:	461a      	mov	r2, r3
 80167f6:	6879      	ldr	r1, [r7, #4]
 80167f8:	4806      	ldr	r0, [pc, #24]	; (8016814 <CDC_Transmit_HS+0x48>)
 80167fa:	f7fe fb1d 	bl	8014e38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80167fe:	4805      	ldr	r0, [pc, #20]	; (8016814 <CDC_Transmit_HS+0x48>)
 8016800:	f7fe fb5a 	bl	8014eb8 <USBD_CDC_TransmitPacket>
 8016804:	4603      	mov	r3, r0
 8016806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016808:	7bfb      	ldrb	r3, [r7, #15]
}
 801680a:	4618      	mov	r0, r3
 801680c:	3710      	adds	r7, #16
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	24000d90 	.word	0x24000d90

08016818 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016818:	b480      	push	{r7}
 801681a:	b087      	sub	sp, #28
 801681c:	af00      	add	r7, sp, #0
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	4613      	mov	r3, r2
 8016824:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016826:	2300      	movs	r3, #0
 8016828:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801682a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801682e:	4618      	mov	r0, r3
 8016830:	371c      	adds	r7, #28
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr
	...

0801683c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	4603      	mov	r3, r0
 8016844:	6039      	str	r1, [r7, #0]
 8016846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	2212      	movs	r2, #18
 801684c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801684e:	4b03      	ldr	r3, [pc, #12]	; (801685c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016850:	4618      	mov	r0, r3
 8016852:	370c      	adds	r7, #12
 8016854:	46bd      	mov	sp, r7
 8016856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685a:	4770      	bx	lr
 801685c:	240000cc 	.word	0x240000cc

08016860 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	4603      	mov	r3, r0
 8016868:	6039      	str	r1, [r7, #0]
 801686a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	2204      	movs	r2, #4
 8016870:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016872:	4b03      	ldr	r3, [pc, #12]	; (8016880 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016874:	4618      	mov	r0, r3
 8016876:	370c      	adds	r7, #12
 8016878:	46bd      	mov	sp, r7
 801687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687e:	4770      	bx	lr
 8016880:	240000e0 	.word	0x240000e0

08016884 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	6039      	str	r1, [r7, #0]
 801688e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016890:	79fb      	ldrb	r3, [r7, #7]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d105      	bne.n	80168a2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016896:	683a      	ldr	r2, [r7, #0]
 8016898:	4907      	ldr	r1, [pc, #28]	; (80168b8 <USBD_HS_ProductStrDescriptor+0x34>)
 801689a:	4808      	ldr	r0, [pc, #32]	; (80168bc <USBD_HS_ProductStrDescriptor+0x38>)
 801689c:	f7ff fd9a 	bl	80163d4 <USBD_GetString>
 80168a0:	e004      	b.n	80168ac <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168a2:	683a      	ldr	r2, [r7, #0]
 80168a4:	4904      	ldr	r1, [pc, #16]	; (80168b8 <USBD_HS_ProductStrDescriptor+0x34>)
 80168a6:	4805      	ldr	r0, [pc, #20]	; (80168bc <USBD_HS_ProductStrDescriptor+0x38>)
 80168a8:	f7ff fd94 	bl	80163d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168ac:	4b02      	ldr	r3, [pc, #8]	; (80168b8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3708      	adds	r7, #8
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}
 80168b6:	bf00      	nop
 80168b8:	2400206c 	.word	0x2400206c
 80168bc:	0801c8e0 	.word	0x0801c8e0

080168c0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	4603      	mov	r3, r0
 80168c8:	6039      	str	r1, [r7, #0]
 80168ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168cc:	683a      	ldr	r2, [r7, #0]
 80168ce:	4904      	ldr	r1, [pc, #16]	; (80168e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168d0:	4804      	ldr	r0, [pc, #16]	; (80168e4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168d2:	f7ff fd7f 	bl	80163d4 <USBD_GetString>
  return USBD_StrDesc;
 80168d6:	4b02      	ldr	r3, [pc, #8]	; (80168e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3708      	adds	r7, #8
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}
 80168e0:	2400206c 	.word	0x2400206c
 80168e4:	0801c8fc 	.word	0x0801c8fc

080168e8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	4603      	mov	r3, r0
 80168f0:	6039      	str	r1, [r7, #0]
 80168f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	221a      	movs	r2, #26
 80168f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80168fa:	f000 f843 	bl	8016984 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80168fe:	4b02      	ldr	r3, [pc, #8]	; (8016908 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016900:	4618      	mov	r0, r3
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	240000e4 	.word	0x240000e4

0801690c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	4603      	mov	r3, r0
 8016914:	6039      	str	r1, [r7, #0]
 8016916:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016918:	79fb      	ldrb	r3, [r7, #7]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d105      	bne.n	801692a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801691e:	683a      	ldr	r2, [r7, #0]
 8016920:	4907      	ldr	r1, [pc, #28]	; (8016940 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016922:	4808      	ldr	r0, [pc, #32]	; (8016944 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016924:	f7ff fd56 	bl	80163d4 <USBD_GetString>
 8016928:	e004      	b.n	8016934 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801692a:	683a      	ldr	r2, [r7, #0]
 801692c:	4904      	ldr	r1, [pc, #16]	; (8016940 <USBD_HS_ConfigStrDescriptor+0x34>)
 801692e:	4805      	ldr	r0, [pc, #20]	; (8016944 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016930:	f7ff fd50 	bl	80163d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016934:	4b02      	ldr	r3, [pc, #8]	; (8016940 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016936:	4618      	mov	r0, r3
 8016938:	3708      	adds	r7, #8
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop
 8016940:	2400206c 	.word	0x2400206c
 8016944:	0801c900 	.word	0x0801c900

08016948 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	4603      	mov	r3, r0
 8016950:	6039      	str	r1, [r7, #0]
 8016952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016954:	79fb      	ldrb	r3, [r7, #7]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d105      	bne.n	8016966 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	4907      	ldr	r1, [pc, #28]	; (801697c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801695e:	4808      	ldr	r0, [pc, #32]	; (8016980 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016960:	f7ff fd38 	bl	80163d4 <USBD_GetString>
 8016964:	e004      	b.n	8016970 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016966:	683a      	ldr	r2, [r7, #0]
 8016968:	4904      	ldr	r1, [pc, #16]	; (801697c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801696a:	4805      	ldr	r0, [pc, #20]	; (8016980 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801696c:	f7ff fd32 	bl	80163d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016970:	4b02      	ldr	r3, [pc, #8]	; (801697c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016972:	4618      	mov	r0, r3
 8016974:	3708      	adds	r7, #8
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	2400206c 	.word	0x2400206c
 8016980:	0801c90c 	.word	0x0801c90c

08016984 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801698a:	4b0f      	ldr	r3, [pc, #60]	; (80169c8 <Get_SerialNum+0x44>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016990:	4b0e      	ldr	r3, [pc, #56]	; (80169cc <Get_SerialNum+0x48>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016996:	4b0e      	ldr	r3, [pc, #56]	; (80169d0 <Get_SerialNum+0x4c>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	4413      	add	r3, r2
 80169a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d009      	beq.n	80169be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169aa:	2208      	movs	r2, #8
 80169ac:	4909      	ldr	r1, [pc, #36]	; (80169d4 <Get_SerialNum+0x50>)
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f000 f814 	bl	80169dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80169b4:	2204      	movs	r2, #4
 80169b6:	4908      	ldr	r1, [pc, #32]	; (80169d8 <Get_SerialNum+0x54>)
 80169b8:	68b8      	ldr	r0, [r7, #8]
 80169ba:	f000 f80f 	bl	80169dc <IntToUnicode>
  }
}
 80169be:	bf00      	nop
 80169c0:	3710      	adds	r7, #16
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	1ff1e800 	.word	0x1ff1e800
 80169cc:	1ff1e804 	.word	0x1ff1e804
 80169d0:	1ff1e808 	.word	0x1ff1e808
 80169d4:	240000e6 	.word	0x240000e6
 80169d8:	240000f6 	.word	0x240000f6

080169dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169dc:	b480      	push	{r7}
 80169de:	b087      	sub	sp, #28
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	4613      	mov	r3, r2
 80169e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169ee:	2300      	movs	r3, #0
 80169f0:	75fb      	strb	r3, [r7, #23]
 80169f2:	e027      	b.n	8016a44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	0f1b      	lsrs	r3, r3, #28
 80169f8:	2b09      	cmp	r3, #9
 80169fa:	d80b      	bhi.n	8016a14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	0f1b      	lsrs	r3, r3, #28
 8016a00:	b2da      	uxtb	r2, r3
 8016a02:	7dfb      	ldrb	r3, [r7, #23]
 8016a04:	005b      	lsls	r3, r3, #1
 8016a06:	4619      	mov	r1, r3
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	440b      	add	r3, r1
 8016a0c:	3230      	adds	r2, #48	; 0x30
 8016a0e:	b2d2      	uxtb	r2, r2
 8016a10:	701a      	strb	r2, [r3, #0]
 8016a12:	e00a      	b.n	8016a2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	0f1b      	lsrs	r3, r3, #28
 8016a18:	b2da      	uxtb	r2, r3
 8016a1a:	7dfb      	ldrb	r3, [r7, #23]
 8016a1c:	005b      	lsls	r3, r3, #1
 8016a1e:	4619      	mov	r1, r3
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	440b      	add	r3, r1
 8016a24:	3237      	adds	r2, #55	; 0x37
 8016a26:	b2d2      	uxtb	r2, r2
 8016a28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	011b      	lsls	r3, r3, #4
 8016a2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a30:	7dfb      	ldrb	r3, [r7, #23]
 8016a32:	005b      	lsls	r3, r3, #1
 8016a34:	3301      	adds	r3, #1
 8016a36:	68ba      	ldr	r2, [r7, #8]
 8016a38:	4413      	add	r3, r2
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a3e:	7dfb      	ldrb	r3, [r7, #23]
 8016a40:	3301      	adds	r3, #1
 8016a42:	75fb      	strb	r3, [r7, #23]
 8016a44:	7dfa      	ldrb	r2, [r7, #23]
 8016a46:	79fb      	ldrb	r3, [r7, #7]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d3d3      	bcc.n	80169f4 <IntToUnicode+0x18>
  }
}
 8016a4c:	bf00      	nop
 8016a4e:	bf00      	nop
 8016a50:	371c      	adds	r7, #28
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr
	...

08016a5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b0b2      	sub	sp, #200	; 0xc8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a64:	f107 0310 	add.w	r3, r7, #16
 8016a68:	22b8      	movs	r2, #184	; 0xb8
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f001 fa66 	bl	8017f3e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4a1a      	ldr	r2, [pc, #104]	; (8016ae0 <HAL_PCD_MspInit+0x84>)
 8016a78:	4293      	cmp	r3, r2
 8016a7a:	d12c      	bne.n	8016ad6 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a80:	f04f 0300 	mov.w	r3, #0
 8016a84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a88:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a90:	f107 0310 	add.w	r3, r7, #16
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7f4 f985 	bl	800ada4 <HAL_RCCEx_PeriphCLKConfig>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d001      	beq.n	8016aa4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016aa0:	f7ec fd70 	bl	8003584 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016aa4:	f7f3 f99e 	bl	8009de4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016aa8:	4b0e      	ldr	r3, [pc, #56]	; (8016ae4 <HAL_PCD_MspInit+0x88>)
 8016aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016aae:	4a0d      	ldr	r2, [pc, #52]	; (8016ae4 <HAL_PCD_MspInit+0x88>)
 8016ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016ab8:	4b0a      	ldr	r3, [pc, #40]	; (8016ae4 <HAL_PCD_MspInit+0x88>)
 8016aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ac2:	60fb      	str	r3, [r7, #12]
 8016ac4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	2100      	movs	r1, #0
 8016aca:	204d      	movs	r0, #77	; 0x4d
 8016acc:	f7ef fb25 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016ad0:	204d      	movs	r0, #77	; 0x4d
 8016ad2:	f7ef fb3c 	bl	800614e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016ad6:	bf00      	nop
 8016ad8:	37c8      	adds	r7, #200	; 0xc8
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	40040000 	.word	0x40040000
 8016ae4:	58024400 	.word	0x58024400

08016ae8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016afc:	4619      	mov	r1, r3
 8016afe:	4610      	mov	r0, r2
 8016b00:	f7fe fb03 	bl	801510a <USBD_LL_SetupStage>
}
 8016b04:	bf00      	nop
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	460b      	mov	r3, r1
 8016b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b1e:	78fa      	ldrb	r2, [r7, #3]
 8016b20:	6879      	ldr	r1, [r7, #4]
 8016b22:	4613      	mov	r3, r2
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	4413      	add	r3, r2
 8016b28:	009b      	lsls	r3, r3, #2
 8016b2a:	440b      	add	r3, r1
 8016b2c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	78fb      	ldrb	r3, [r7, #3]
 8016b34:	4619      	mov	r1, r3
 8016b36:	f7fe fb3d 	bl	80151b4 <USBD_LL_DataOutStage>
}
 8016b3a:	bf00      	nop
 8016b3c:	3708      	adds	r7, #8
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b082      	sub	sp, #8
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b54:	78fa      	ldrb	r2, [r7, #3]
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	4413      	add	r3, r2
 8016b5e:	009b      	lsls	r3, r3, #2
 8016b60:	440b      	add	r3, r1
 8016b62:	3348      	adds	r3, #72	; 0x48
 8016b64:	681a      	ldr	r2, [r3, #0]
 8016b66:	78fb      	ldrb	r3, [r7, #3]
 8016b68:	4619      	mov	r1, r3
 8016b6a:	f7fe fbd6 	bl	801531a <USBD_LL_DataInStage>
}
 8016b6e:	bf00      	nop
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b082      	sub	sp, #8
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7fe fd10 	bl	80155aa <USBD_LL_SOF>
}
 8016b8a:	bf00      	nop
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b084      	sub	sp, #16
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	691b      	ldr	r3, [r3, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d102      	bne.n	8016bac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	73fb      	strb	r3, [r7, #15]
 8016baa:	e008      	b.n	8016bbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	691b      	ldr	r3, [r3, #16]
 8016bb0:	2b02      	cmp	r3, #2
 8016bb2:	d102      	bne.n	8016bba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	73fb      	strb	r3, [r7, #15]
 8016bb8:	e001      	b.n	8016bbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016bba:	f7ec fce3 	bl	8003584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bc4:	7bfa      	ldrb	r2, [r7, #15]
 8016bc6:	4611      	mov	r1, r2
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7fe fcaa 	bl	8015522 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7fe fc52 	bl	801547e <USBD_LL_Reset>
}
 8016bda:	bf00      	nop
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
	...

08016be4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7fe fca5 	bl	8015542 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	6812      	ldr	r2, [r2, #0]
 8016c06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c0a:	f043 0301 	orr.w	r3, r3, #1
 8016c0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6a1b      	ldr	r3, [r3, #32]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d005      	beq.n	8016c24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c18:	4b04      	ldr	r3, [pc, #16]	; (8016c2c <HAL_PCD_SuspendCallback+0x48>)
 8016c1a:	691b      	ldr	r3, [r3, #16]
 8016c1c:	4a03      	ldr	r2, [pc, #12]	; (8016c2c <HAL_PCD_SuspendCallback+0x48>)
 8016c1e:	f043 0306 	orr.w	r3, r3, #6
 8016c22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c24:	bf00      	nop
 8016c26:	3708      	adds	r7, #8
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	bd80      	pop	{r7, pc}
 8016c2c:	e000ed00 	.word	0xe000ed00

08016c30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7fe fc9b 	bl	801557a <USBD_LL_Resume>
}
 8016c44:	bf00      	nop
 8016c46:	3708      	adds	r7, #8
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c5e:	78fa      	ldrb	r2, [r7, #3]
 8016c60:	4611      	mov	r1, r2
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7fe fcf3 	bl	801564e <USBD_LL_IsoOUTIncomplete>
}
 8016c68:	bf00      	nop
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	460b      	mov	r3, r1
 8016c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c82:	78fa      	ldrb	r2, [r7, #3]
 8016c84:	4611      	mov	r1, r2
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7fe fcaf 	bl	80155ea <USBD_LL_IsoINIncomplete>
}
 8016c8c:	bf00      	nop
 8016c8e:	3708      	adds	r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fe fd05 	bl	80156b2 <USBD_LL_DevConnected>
}
 8016ca8:	bf00      	nop
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7fe fd02 	bl	80156c8 <USBD_LL_DevDisconnected>
}
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	d140      	bne.n	8016d5e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016cdc:	4a22      	ldr	r2, [pc, #136]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	4a20      	ldr	r2, [pc, #128]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016ce8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016cec:	4b1e      	ldr	r3, [pc, #120]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016cee:	4a1f      	ldr	r2, [pc, #124]	; (8016d6c <USBD_LL_Init+0xa0>)
 8016cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016cf2:	4b1d      	ldr	r3, [pc, #116]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016cf4:	2209      	movs	r2, #9
 8016cf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016cf8:	4b1b      	ldr	r3, [pc, #108]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016cfa:	2202      	movs	r2, #2
 8016cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016cfe:	4b1a      	ldr	r3, [pc, #104]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d00:	2200      	movs	r2, #0
 8016d02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d04:	4b18      	ldr	r3, [pc, #96]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d06:	2202      	movs	r2, #2
 8016d08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d0a:	4b17      	ldr	r3, [pc, #92]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d10:	4b15      	ldr	r3, [pc, #84]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d12:	2200      	movs	r2, #0
 8016d14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d16:	4b14      	ldr	r3, [pc, #80]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d18:	2200      	movs	r2, #0
 8016d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d1c:	4b12      	ldr	r3, [pc, #72]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d1e:	2200      	movs	r2, #0
 8016d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d22:	4b11      	ldr	r3, [pc, #68]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d24:	2200      	movs	r2, #0
 8016d26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d28:	4b0f      	ldr	r3, [pc, #60]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d2e:	480e      	ldr	r0, [pc, #56]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d30:	f7f1 fd65 	bl	80087fe <HAL_PCD_Init>
 8016d34:	4603      	mov	r3, r0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d001      	beq.n	8016d3e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d3a:	f7ec fc23 	bl	8003584 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d42:	4809      	ldr	r0, [pc, #36]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d44:	f7f2 ffd3 	bl	8009cee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d48:	2280      	movs	r2, #128	; 0x80
 8016d4a:	2100      	movs	r1, #0
 8016d4c:	4806      	ldr	r0, [pc, #24]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d4e:	f7f2 ff87 	bl	8009c60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d52:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d56:	2101      	movs	r1, #1
 8016d58:	4803      	ldr	r0, [pc, #12]	; (8016d68 <USBD_LL_Init+0x9c>)
 8016d5a:	f7f2 ff81 	bl	8009c60 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d5e:	2300      	movs	r3, #0
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	2400226c 	.word	0x2400226c
 8016d6c:	40040000 	.word	0x40040000

08016d70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7f1 fe5d 	bl	8008a46 <HAL_PCD_Start>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d90:	7bfb      	ldrb	r3, [r7, #15]
 8016d92:	4618      	mov	r0, r3
 8016d94:	f000 f942 	bl	801701c <USBD_Get_USB_Status>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3710      	adds	r7, #16
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b084      	sub	sp, #16
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	6078      	str	r0, [r7, #4]
 8016dae:	4608      	mov	r0, r1
 8016db0:	4611      	mov	r1, r2
 8016db2:	461a      	mov	r2, r3
 8016db4:	4603      	mov	r3, r0
 8016db6:	70fb      	strb	r3, [r7, #3]
 8016db8:	460b      	mov	r3, r1
 8016dba:	70bb      	strb	r3, [r7, #2]
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dce:	78bb      	ldrb	r3, [r7, #2]
 8016dd0:	883a      	ldrh	r2, [r7, #0]
 8016dd2:	78f9      	ldrb	r1, [r7, #3]
 8016dd4:	f7f2 fb5d 	bl	8009492 <HAL_PCD_EP_Open>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ddc:	7bfb      	ldrb	r3, [r7, #15]
 8016dde:	4618      	mov	r0, r3
 8016de0:	f000 f91c 	bl	801701c <USBD_Get_USB_Status>
 8016de4:	4603      	mov	r3, r0
 8016de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3710      	adds	r7, #16
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016df2:	b580      	push	{r7, lr}
 8016df4:	b084      	sub	sp, #16
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
 8016dfa:	460b      	mov	r3, r1
 8016dfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e02:	2300      	movs	r3, #0
 8016e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e0c:	78fa      	ldrb	r2, [r7, #3]
 8016e0e:	4611      	mov	r1, r2
 8016e10:	4618      	mov	r0, r3
 8016e12:	f7f2 fba6 	bl	8009562 <HAL_PCD_EP_Close>
 8016e16:	4603      	mov	r3, r0
 8016e18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e1a:	7bfb      	ldrb	r3, [r7, #15]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f000 f8fd 	bl	801701c <USBD_Get_USB_Status>
 8016e22:	4603      	mov	r3, r0
 8016e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3710      	adds	r7, #16
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	460b      	mov	r3, r1
 8016e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e40:	2300      	movs	r3, #0
 8016e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e4a:	78fa      	ldrb	r2, [r7, #3]
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7f2 fc60 	bl	8009714 <HAL_PCD_EP_SetStall>
 8016e54:	4603      	mov	r3, r0
 8016e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e58:	7bfb      	ldrb	r3, [r7, #15]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f000 f8de 	bl	801701c <USBD_Get_USB_Status>
 8016e60:	4603      	mov	r3, r0
 8016e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3710      	adds	r7, #16
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}

08016e6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e6e:	b580      	push	{r7, lr}
 8016e70:	b084      	sub	sp, #16
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	460b      	mov	r3, r1
 8016e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e88:	78fa      	ldrb	r2, [r7, #3]
 8016e8a:	4611      	mov	r1, r2
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f2 fca5 	bl	80097dc <HAL_PCD_EP_ClrStall>
 8016e92:	4603      	mov	r3, r0
 8016e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e96:	7bfb      	ldrb	r3, [r7, #15]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f000 f8bf 	bl	801701c <USBD_Get_USB_Status>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3710      	adds	r7, #16
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b085      	sub	sp, #20
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	460b      	mov	r3, r1
 8016eb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ebe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	da0b      	bge.n	8016ee0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016ec8:	78fb      	ldrb	r3, [r7, #3]
 8016eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ece:	68f9      	ldr	r1, [r7, #12]
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	4413      	add	r3, r2
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	440b      	add	r3, r1
 8016eda:	333e      	adds	r3, #62	; 0x3e
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	e00b      	b.n	8016ef8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ee0:	78fb      	ldrb	r3, [r7, #3]
 8016ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ee6:	68f9      	ldr	r1, [r7, #12]
 8016ee8:	4613      	mov	r3, r2
 8016eea:	00db      	lsls	r3, r3, #3
 8016eec:	4413      	add	r3, r2
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	440b      	add	r3, r1
 8016ef2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016ef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3714      	adds	r7, #20
 8016efc:	46bd      	mov	sp, r7
 8016efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f02:	4770      	bx	lr

08016f04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b084      	sub	sp, #16
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f10:	2300      	movs	r3, #0
 8016f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f14:	2300      	movs	r3, #0
 8016f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f1e:	78fa      	ldrb	r2, [r7, #3]
 8016f20:	4611      	mov	r1, r2
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7f2 fa90 	bl	8009448 <HAL_PCD_SetAddress>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f2c:	7bfb      	ldrb	r3, [r7, #15]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f000 f874 	bl	801701c <USBD_Get_USB_Status>
 8016f34:	4603      	mov	r3, r0
 8016f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}

08016f42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f42:	b580      	push	{r7, lr}
 8016f44:	b086      	sub	sp, #24
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	60f8      	str	r0, [r7, #12]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	603b      	str	r3, [r7, #0]
 8016f4e:	460b      	mov	r3, r1
 8016f50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f52:	2300      	movs	r3, #0
 8016f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f56:	2300      	movs	r3, #0
 8016f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f60:	7af9      	ldrb	r1, [r7, #11]
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	f7f2 fb9a 	bl	800969e <HAL_PCD_EP_Transmit>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f6e:	7dfb      	ldrb	r3, [r7, #23]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f000 f853 	bl	801701c <USBD_Get_USB_Status>
 8016f76:	4603      	mov	r3, r0
 8016f78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	3718      	adds	r7, #24
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}

08016f84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	60f8      	str	r0, [r7, #12]
 8016f8c:	607a      	str	r2, [r7, #4]
 8016f8e:	603b      	str	r3, [r7, #0]
 8016f90:	460b      	mov	r3, r1
 8016f92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f94:	2300      	movs	r3, #0
 8016f96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016fa2:	7af9      	ldrb	r1, [r7, #11]
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	f7f2 fb25 	bl	80095f6 <HAL_PCD_EP_Receive>
 8016fac:	4603      	mov	r3, r0
 8016fae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fb0:	7dfb      	ldrb	r3, [r7, #23]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f000 f832 	bl	801701c <USBD_Get_USB_Status>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3718      	adds	r7, #24
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}

08016fc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fc6:	b580      	push	{r7, lr}
 8016fc8:	b082      	sub	sp, #8
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
 8016fce:	460b      	mov	r3, r1
 8016fd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fd8:	78fa      	ldrb	r2, [r7, #3]
 8016fda:	4611      	mov	r1, r2
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f7f2 fb46 	bl	800966e <HAL_PCD_EP_GetRxCount>
 8016fe2:	4603      	mov	r3, r0
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3708      	adds	r7, #8
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}

08016fec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016fec:	b480      	push	{r7}
 8016fee:	b083      	sub	sp, #12
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ff4:	4b03      	ldr	r3, [pc, #12]	; (8017004 <USBD_static_malloc+0x18>)
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	370c      	adds	r7, #12
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop
 8017004:	24002778 	.word	0x24002778

08017008 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017010:	bf00      	nop
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr

0801701c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801701c:	b480      	push	{r7}
 801701e:	b085      	sub	sp, #20
 8017020:	af00      	add	r7, sp, #0
 8017022:	4603      	mov	r3, r0
 8017024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017026:	2300      	movs	r3, #0
 8017028:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801702a:	79fb      	ldrb	r3, [r7, #7]
 801702c:	2b03      	cmp	r3, #3
 801702e:	d817      	bhi.n	8017060 <USBD_Get_USB_Status+0x44>
 8017030:	a201      	add	r2, pc, #4	; (adr r2, 8017038 <USBD_Get_USB_Status+0x1c>)
 8017032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017036:	bf00      	nop
 8017038:	08017049 	.word	0x08017049
 801703c:	0801704f 	.word	0x0801704f
 8017040:	08017055 	.word	0x08017055
 8017044:	0801705b 	.word	0x0801705b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017048:	2300      	movs	r3, #0
 801704a:	73fb      	strb	r3, [r7, #15]
    break;
 801704c:	e00b      	b.n	8017066 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801704e:	2303      	movs	r3, #3
 8017050:	73fb      	strb	r3, [r7, #15]
    break;
 8017052:	e008      	b.n	8017066 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017054:	2301      	movs	r3, #1
 8017056:	73fb      	strb	r3, [r7, #15]
    break;
 8017058:	e005      	b.n	8017066 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801705a:	2303      	movs	r3, #3
 801705c:	73fb      	strb	r3, [r7, #15]
    break;
 801705e:	e002      	b.n	8017066 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017060:	2303      	movs	r3, #3
 8017062:	73fb      	strb	r3, [r7, #15]
    break;
 8017064:	bf00      	nop
  }
  return usb_status;
 8017066:	7bfb      	ldrb	r3, [r7, #15]
}
 8017068:	4618      	mov	r0, r3
 801706a:	3714      	adds	r7, #20
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr

08017074 <__cvt>:
 8017074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017076:	ed2d 8b02 	vpush	{d8}
 801707a:	eeb0 8b40 	vmov.f64	d8, d0
 801707e:	b085      	sub	sp, #20
 8017080:	4617      	mov	r7, r2
 8017082:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017084:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017086:	ee18 2a90 	vmov	r2, s17
 801708a:	f025 0520 	bic.w	r5, r5, #32
 801708e:	2a00      	cmp	r2, #0
 8017090:	bfb6      	itet	lt
 8017092:	222d      	movlt	r2, #45	; 0x2d
 8017094:	2200      	movge	r2, #0
 8017096:	eeb1 8b40 	vneglt.f64	d8, d0
 801709a:	2d46      	cmp	r5, #70	; 0x46
 801709c:	460c      	mov	r4, r1
 801709e:	701a      	strb	r2, [r3, #0]
 80170a0:	d004      	beq.n	80170ac <__cvt+0x38>
 80170a2:	2d45      	cmp	r5, #69	; 0x45
 80170a4:	d100      	bne.n	80170a8 <__cvt+0x34>
 80170a6:	3401      	adds	r4, #1
 80170a8:	2102      	movs	r1, #2
 80170aa:	e000      	b.n	80170ae <__cvt+0x3a>
 80170ac:	2103      	movs	r1, #3
 80170ae:	ab03      	add	r3, sp, #12
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	ab02      	add	r3, sp, #8
 80170b4:	9300      	str	r3, [sp, #0]
 80170b6:	4622      	mov	r2, r4
 80170b8:	4633      	mov	r3, r6
 80170ba:	eeb0 0b48 	vmov.f64	d0, d8
 80170be:	f001 f85b 	bl	8018178 <_dtoa_r>
 80170c2:	2d47      	cmp	r5, #71	; 0x47
 80170c4:	d101      	bne.n	80170ca <__cvt+0x56>
 80170c6:	07fb      	lsls	r3, r7, #31
 80170c8:	d51a      	bpl.n	8017100 <__cvt+0x8c>
 80170ca:	2d46      	cmp	r5, #70	; 0x46
 80170cc:	eb00 0204 	add.w	r2, r0, r4
 80170d0:	d10c      	bne.n	80170ec <__cvt+0x78>
 80170d2:	7803      	ldrb	r3, [r0, #0]
 80170d4:	2b30      	cmp	r3, #48	; 0x30
 80170d6:	d107      	bne.n	80170e8 <__cvt+0x74>
 80170d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80170dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e0:	bf1c      	itt	ne
 80170e2:	f1c4 0401 	rsbne	r4, r4, #1
 80170e6:	6034      	strne	r4, [r6, #0]
 80170e8:	6833      	ldr	r3, [r6, #0]
 80170ea:	441a      	add	r2, r3
 80170ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80170f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170f4:	bf08      	it	eq
 80170f6:	9203      	streq	r2, [sp, #12]
 80170f8:	2130      	movs	r1, #48	; 0x30
 80170fa:	9b03      	ldr	r3, [sp, #12]
 80170fc:	4293      	cmp	r3, r2
 80170fe:	d307      	bcc.n	8017110 <__cvt+0x9c>
 8017100:	9b03      	ldr	r3, [sp, #12]
 8017102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017104:	1a1b      	subs	r3, r3, r0
 8017106:	6013      	str	r3, [r2, #0]
 8017108:	b005      	add	sp, #20
 801710a:	ecbd 8b02 	vpop	{d8}
 801710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017110:	1c5c      	adds	r4, r3, #1
 8017112:	9403      	str	r4, [sp, #12]
 8017114:	7019      	strb	r1, [r3, #0]
 8017116:	e7f0      	b.n	80170fa <__cvt+0x86>

08017118 <__exponent>:
 8017118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801711a:	4603      	mov	r3, r0
 801711c:	2900      	cmp	r1, #0
 801711e:	bfb8      	it	lt
 8017120:	4249      	neglt	r1, r1
 8017122:	f803 2b02 	strb.w	r2, [r3], #2
 8017126:	bfb4      	ite	lt
 8017128:	222d      	movlt	r2, #45	; 0x2d
 801712a:	222b      	movge	r2, #43	; 0x2b
 801712c:	2909      	cmp	r1, #9
 801712e:	7042      	strb	r2, [r0, #1]
 8017130:	dd2a      	ble.n	8017188 <__exponent+0x70>
 8017132:	f10d 0207 	add.w	r2, sp, #7
 8017136:	4617      	mov	r7, r2
 8017138:	260a      	movs	r6, #10
 801713a:	4694      	mov	ip, r2
 801713c:	fb91 f5f6 	sdiv	r5, r1, r6
 8017140:	fb06 1415 	mls	r4, r6, r5, r1
 8017144:	3430      	adds	r4, #48	; 0x30
 8017146:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801714a:	460c      	mov	r4, r1
 801714c:	2c63      	cmp	r4, #99	; 0x63
 801714e:	f102 32ff 	add.w	r2, r2, #4294967295
 8017152:	4629      	mov	r1, r5
 8017154:	dcf1      	bgt.n	801713a <__exponent+0x22>
 8017156:	3130      	adds	r1, #48	; 0x30
 8017158:	f1ac 0402 	sub.w	r4, ip, #2
 801715c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017160:	1c41      	adds	r1, r0, #1
 8017162:	4622      	mov	r2, r4
 8017164:	42ba      	cmp	r2, r7
 8017166:	d30a      	bcc.n	801717e <__exponent+0x66>
 8017168:	f10d 0209 	add.w	r2, sp, #9
 801716c:	eba2 020c 	sub.w	r2, r2, ip
 8017170:	42bc      	cmp	r4, r7
 8017172:	bf88      	it	hi
 8017174:	2200      	movhi	r2, #0
 8017176:	4413      	add	r3, r2
 8017178:	1a18      	subs	r0, r3, r0
 801717a:	b003      	add	sp, #12
 801717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801717e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017182:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017186:	e7ed      	b.n	8017164 <__exponent+0x4c>
 8017188:	2330      	movs	r3, #48	; 0x30
 801718a:	3130      	adds	r1, #48	; 0x30
 801718c:	7083      	strb	r3, [r0, #2]
 801718e:	70c1      	strb	r1, [r0, #3]
 8017190:	1d03      	adds	r3, r0, #4
 8017192:	e7f1      	b.n	8017178 <__exponent+0x60>
 8017194:	0000      	movs	r0, r0
	...

08017198 <_printf_float>:
 8017198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801719c:	b08b      	sub	sp, #44	; 0x2c
 801719e:	460c      	mov	r4, r1
 80171a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80171a4:	4616      	mov	r6, r2
 80171a6:	461f      	mov	r7, r3
 80171a8:	4605      	mov	r5, r0
 80171aa:	f000 fed1 	bl	8017f50 <_localeconv_r>
 80171ae:	f8d0 b000 	ldr.w	fp, [r0]
 80171b2:	4658      	mov	r0, fp
 80171b4:	f7e9 f8fc 	bl	80003b0 <strlen>
 80171b8:	2300      	movs	r3, #0
 80171ba:	9308      	str	r3, [sp, #32]
 80171bc:	f8d8 3000 	ldr.w	r3, [r8]
 80171c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80171c4:	6822      	ldr	r2, [r4, #0]
 80171c6:	3307      	adds	r3, #7
 80171c8:	f023 0307 	bic.w	r3, r3, #7
 80171cc:	f103 0108 	add.w	r1, r3, #8
 80171d0:	f8c8 1000 	str.w	r1, [r8]
 80171d4:	ed93 0b00 	vldr	d0, [r3]
 80171d8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017438 <_printf_float+0x2a0>
 80171dc:	eeb0 7bc0 	vabs.f64	d7, d0
 80171e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80171e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80171ec:	4682      	mov	sl, r0
 80171ee:	dd24      	ble.n	801723a <_printf_float+0xa2>
 80171f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80171f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171f8:	d502      	bpl.n	8017200 <_printf_float+0x68>
 80171fa:	232d      	movs	r3, #45	; 0x2d
 80171fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017200:	498f      	ldr	r1, [pc, #572]	; (8017440 <_printf_float+0x2a8>)
 8017202:	4b90      	ldr	r3, [pc, #576]	; (8017444 <_printf_float+0x2ac>)
 8017204:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017208:	bf94      	ite	ls
 801720a:	4688      	movls	r8, r1
 801720c:	4698      	movhi	r8, r3
 801720e:	2303      	movs	r3, #3
 8017210:	6123      	str	r3, [r4, #16]
 8017212:	f022 0204 	bic.w	r2, r2, #4
 8017216:	2300      	movs	r3, #0
 8017218:	6022      	str	r2, [r4, #0]
 801721a:	9304      	str	r3, [sp, #16]
 801721c:	9700      	str	r7, [sp, #0]
 801721e:	4633      	mov	r3, r6
 8017220:	aa09      	add	r2, sp, #36	; 0x24
 8017222:	4621      	mov	r1, r4
 8017224:	4628      	mov	r0, r5
 8017226:	f000 f9d1 	bl	80175cc <_printf_common>
 801722a:	3001      	adds	r0, #1
 801722c:	f040 808a 	bne.w	8017344 <_printf_float+0x1ac>
 8017230:	f04f 30ff 	mov.w	r0, #4294967295
 8017234:	b00b      	add	sp, #44	; 0x2c
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723a:	eeb4 0b40 	vcmp.f64	d0, d0
 801723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017242:	d709      	bvc.n	8017258 <_printf_float+0xc0>
 8017244:	ee10 3a90 	vmov	r3, s1
 8017248:	2b00      	cmp	r3, #0
 801724a:	bfbc      	itt	lt
 801724c:	232d      	movlt	r3, #45	; 0x2d
 801724e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017252:	497d      	ldr	r1, [pc, #500]	; (8017448 <_printf_float+0x2b0>)
 8017254:	4b7d      	ldr	r3, [pc, #500]	; (801744c <_printf_float+0x2b4>)
 8017256:	e7d5      	b.n	8017204 <_printf_float+0x6c>
 8017258:	6863      	ldr	r3, [r4, #4]
 801725a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801725e:	9104      	str	r1, [sp, #16]
 8017260:	1c59      	adds	r1, r3, #1
 8017262:	d13c      	bne.n	80172de <_printf_float+0x146>
 8017264:	2306      	movs	r3, #6
 8017266:	6063      	str	r3, [r4, #4]
 8017268:	2300      	movs	r3, #0
 801726a:	9303      	str	r3, [sp, #12]
 801726c:	ab08      	add	r3, sp, #32
 801726e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017272:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017276:	ab07      	add	r3, sp, #28
 8017278:	6861      	ldr	r1, [r4, #4]
 801727a:	9300      	str	r3, [sp, #0]
 801727c:	6022      	str	r2, [r4, #0]
 801727e:	f10d 031b 	add.w	r3, sp, #27
 8017282:	4628      	mov	r0, r5
 8017284:	f7ff fef6 	bl	8017074 <__cvt>
 8017288:	9b04      	ldr	r3, [sp, #16]
 801728a:	9907      	ldr	r1, [sp, #28]
 801728c:	2b47      	cmp	r3, #71	; 0x47
 801728e:	4680      	mov	r8, r0
 8017290:	d108      	bne.n	80172a4 <_printf_float+0x10c>
 8017292:	1cc8      	adds	r0, r1, #3
 8017294:	db02      	blt.n	801729c <_printf_float+0x104>
 8017296:	6863      	ldr	r3, [r4, #4]
 8017298:	4299      	cmp	r1, r3
 801729a:	dd41      	ble.n	8017320 <_printf_float+0x188>
 801729c:	f1a9 0902 	sub.w	r9, r9, #2
 80172a0:	fa5f f989 	uxtb.w	r9, r9
 80172a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80172a8:	d820      	bhi.n	80172ec <_printf_float+0x154>
 80172aa:	3901      	subs	r1, #1
 80172ac:	464a      	mov	r2, r9
 80172ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80172b2:	9107      	str	r1, [sp, #28]
 80172b4:	f7ff ff30 	bl	8017118 <__exponent>
 80172b8:	9a08      	ldr	r2, [sp, #32]
 80172ba:	9004      	str	r0, [sp, #16]
 80172bc:	1813      	adds	r3, r2, r0
 80172be:	2a01      	cmp	r2, #1
 80172c0:	6123      	str	r3, [r4, #16]
 80172c2:	dc02      	bgt.n	80172ca <_printf_float+0x132>
 80172c4:	6822      	ldr	r2, [r4, #0]
 80172c6:	07d2      	lsls	r2, r2, #31
 80172c8:	d501      	bpl.n	80172ce <_printf_float+0x136>
 80172ca:	3301      	adds	r3, #1
 80172cc:	6123      	str	r3, [r4, #16]
 80172ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d0a2      	beq.n	801721c <_printf_float+0x84>
 80172d6:	232d      	movs	r3, #45	; 0x2d
 80172d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172dc:	e79e      	b.n	801721c <_printf_float+0x84>
 80172de:	9904      	ldr	r1, [sp, #16]
 80172e0:	2947      	cmp	r1, #71	; 0x47
 80172e2:	d1c1      	bne.n	8017268 <_printf_float+0xd0>
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d1bf      	bne.n	8017268 <_printf_float+0xd0>
 80172e8:	2301      	movs	r3, #1
 80172ea:	e7bc      	b.n	8017266 <_printf_float+0xce>
 80172ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80172f0:	d118      	bne.n	8017324 <_printf_float+0x18c>
 80172f2:	2900      	cmp	r1, #0
 80172f4:	6863      	ldr	r3, [r4, #4]
 80172f6:	dd0b      	ble.n	8017310 <_printf_float+0x178>
 80172f8:	6121      	str	r1, [r4, #16]
 80172fa:	b913      	cbnz	r3, 8017302 <_printf_float+0x16a>
 80172fc:	6822      	ldr	r2, [r4, #0]
 80172fe:	07d0      	lsls	r0, r2, #31
 8017300:	d502      	bpl.n	8017308 <_printf_float+0x170>
 8017302:	3301      	adds	r3, #1
 8017304:	440b      	add	r3, r1
 8017306:	6123      	str	r3, [r4, #16]
 8017308:	2300      	movs	r3, #0
 801730a:	65a1      	str	r1, [r4, #88]	; 0x58
 801730c:	9304      	str	r3, [sp, #16]
 801730e:	e7de      	b.n	80172ce <_printf_float+0x136>
 8017310:	b913      	cbnz	r3, 8017318 <_printf_float+0x180>
 8017312:	6822      	ldr	r2, [r4, #0]
 8017314:	07d2      	lsls	r2, r2, #31
 8017316:	d501      	bpl.n	801731c <_printf_float+0x184>
 8017318:	3302      	adds	r3, #2
 801731a:	e7f4      	b.n	8017306 <_printf_float+0x16e>
 801731c:	2301      	movs	r3, #1
 801731e:	e7f2      	b.n	8017306 <_printf_float+0x16e>
 8017320:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017324:	9b08      	ldr	r3, [sp, #32]
 8017326:	4299      	cmp	r1, r3
 8017328:	db05      	blt.n	8017336 <_printf_float+0x19e>
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	6121      	str	r1, [r4, #16]
 801732e:	07d8      	lsls	r0, r3, #31
 8017330:	d5ea      	bpl.n	8017308 <_printf_float+0x170>
 8017332:	1c4b      	adds	r3, r1, #1
 8017334:	e7e7      	b.n	8017306 <_printf_float+0x16e>
 8017336:	2900      	cmp	r1, #0
 8017338:	bfd4      	ite	le
 801733a:	f1c1 0202 	rsble	r2, r1, #2
 801733e:	2201      	movgt	r2, #1
 8017340:	4413      	add	r3, r2
 8017342:	e7e0      	b.n	8017306 <_printf_float+0x16e>
 8017344:	6823      	ldr	r3, [r4, #0]
 8017346:	055a      	lsls	r2, r3, #21
 8017348:	d407      	bmi.n	801735a <_printf_float+0x1c2>
 801734a:	6923      	ldr	r3, [r4, #16]
 801734c:	4642      	mov	r2, r8
 801734e:	4631      	mov	r1, r6
 8017350:	4628      	mov	r0, r5
 8017352:	47b8      	blx	r7
 8017354:	3001      	adds	r0, #1
 8017356:	d12a      	bne.n	80173ae <_printf_float+0x216>
 8017358:	e76a      	b.n	8017230 <_printf_float+0x98>
 801735a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801735e:	f240 80e0 	bls.w	8017522 <_printf_float+0x38a>
 8017362:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801736e:	d133      	bne.n	80173d8 <_printf_float+0x240>
 8017370:	4a37      	ldr	r2, [pc, #220]	; (8017450 <_printf_float+0x2b8>)
 8017372:	2301      	movs	r3, #1
 8017374:	4631      	mov	r1, r6
 8017376:	4628      	mov	r0, r5
 8017378:	47b8      	blx	r7
 801737a:	3001      	adds	r0, #1
 801737c:	f43f af58 	beq.w	8017230 <_printf_float+0x98>
 8017380:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017384:	429a      	cmp	r2, r3
 8017386:	db02      	blt.n	801738e <_printf_float+0x1f6>
 8017388:	6823      	ldr	r3, [r4, #0]
 801738a:	07d8      	lsls	r0, r3, #31
 801738c:	d50f      	bpl.n	80173ae <_printf_float+0x216>
 801738e:	4653      	mov	r3, sl
 8017390:	465a      	mov	r2, fp
 8017392:	4631      	mov	r1, r6
 8017394:	4628      	mov	r0, r5
 8017396:	47b8      	blx	r7
 8017398:	3001      	adds	r0, #1
 801739a:	f43f af49 	beq.w	8017230 <_printf_float+0x98>
 801739e:	f04f 0800 	mov.w	r8, #0
 80173a2:	f104 091a 	add.w	r9, r4, #26
 80173a6:	9b08      	ldr	r3, [sp, #32]
 80173a8:	3b01      	subs	r3, #1
 80173aa:	4543      	cmp	r3, r8
 80173ac:	dc09      	bgt.n	80173c2 <_printf_float+0x22a>
 80173ae:	6823      	ldr	r3, [r4, #0]
 80173b0:	079b      	lsls	r3, r3, #30
 80173b2:	f100 8106 	bmi.w	80175c2 <_printf_float+0x42a>
 80173b6:	68e0      	ldr	r0, [r4, #12]
 80173b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ba:	4298      	cmp	r0, r3
 80173bc:	bfb8      	it	lt
 80173be:	4618      	movlt	r0, r3
 80173c0:	e738      	b.n	8017234 <_printf_float+0x9c>
 80173c2:	2301      	movs	r3, #1
 80173c4:	464a      	mov	r2, r9
 80173c6:	4631      	mov	r1, r6
 80173c8:	4628      	mov	r0, r5
 80173ca:	47b8      	blx	r7
 80173cc:	3001      	adds	r0, #1
 80173ce:	f43f af2f 	beq.w	8017230 <_printf_float+0x98>
 80173d2:	f108 0801 	add.w	r8, r8, #1
 80173d6:	e7e6      	b.n	80173a6 <_printf_float+0x20e>
 80173d8:	9b07      	ldr	r3, [sp, #28]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	dc3a      	bgt.n	8017454 <_printf_float+0x2bc>
 80173de:	4a1c      	ldr	r2, [pc, #112]	; (8017450 <_printf_float+0x2b8>)
 80173e0:	2301      	movs	r3, #1
 80173e2:	4631      	mov	r1, r6
 80173e4:	4628      	mov	r0, r5
 80173e6:	47b8      	blx	r7
 80173e8:	3001      	adds	r0, #1
 80173ea:	f43f af21 	beq.w	8017230 <_printf_float+0x98>
 80173ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80173f2:	4313      	orrs	r3, r2
 80173f4:	d102      	bne.n	80173fc <_printf_float+0x264>
 80173f6:	6823      	ldr	r3, [r4, #0]
 80173f8:	07d9      	lsls	r1, r3, #31
 80173fa:	d5d8      	bpl.n	80173ae <_printf_float+0x216>
 80173fc:	4653      	mov	r3, sl
 80173fe:	465a      	mov	r2, fp
 8017400:	4631      	mov	r1, r6
 8017402:	4628      	mov	r0, r5
 8017404:	47b8      	blx	r7
 8017406:	3001      	adds	r0, #1
 8017408:	f43f af12 	beq.w	8017230 <_printf_float+0x98>
 801740c:	f04f 0900 	mov.w	r9, #0
 8017410:	f104 0a1a 	add.w	sl, r4, #26
 8017414:	9b07      	ldr	r3, [sp, #28]
 8017416:	425b      	negs	r3, r3
 8017418:	454b      	cmp	r3, r9
 801741a:	dc01      	bgt.n	8017420 <_printf_float+0x288>
 801741c:	9b08      	ldr	r3, [sp, #32]
 801741e:	e795      	b.n	801734c <_printf_float+0x1b4>
 8017420:	2301      	movs	r3, #1
 8017422:	4652      	mov	r2, sl
 8017424:	4631      	mov	r1, r6
 8017426:	4628      	mov	r0, r5
 8017428:	47b8      	blx	r7
 801742a:	3001      	adds	r0, #1
 801742c:	f43f af00 	beq.w	8017230 <_printf_float+0x98>
 8017430:	f109 0901 	add.w	r9, r9, #1
 8017434:	e7ee      	b.n	8017414 <_printf_float+0x27c>
 8017436:	bf00      	nop
 8017438:	ffffffff 	.word	0xffffffff
 801743c:	7fefffff 	.word	0x7fefffff
 8017440:	0801c970 	.word	0x0801c970
 8017444:	0801c974 	.word	0x0801c974
 8017448:	0801c978 	.word	0x0801c978
 801744c:	0801c97c 	.word	0x0801c97c
 8017450:	0801c980 	.word	0x0801c980
 8017454:	9a08      	ldr	r2, [sp, #32]
 8017456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017458:	429a      	cmp	r2, r3
 801745a:	bfa8      	it	ge
 801745c:	461a      	movge	r2, r3
 801745e:	2a00      	cmp	r2, #0
 8017460:	4691      	mov	r9, r2
 8017462:	dc38      	bgt.n	80174d6 <_printf_float+0x33e>
 8017464:	2300      	movs	r3, #0
 8017466:	9305      	str	r3, [sp, #20]
 8017468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801746c:	f104 021a 	add.w	r2, r4, #26
 8017470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017472:	9905      	ldr	r1, [sp, #20]
 8017474:	9304      	str	r3, [sp, #16]
 8017476:	eba3 0309 	sub.w	r3, r3, r9
 801747a:	428b      	cmp	r3, r1
 801747c:	dc33      	bgt.n	80174e6 <_printf_float+0x34e>
 801747e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017482:	429a      	cmp	r2, r3
 8017484:	db3c      	blt.n	8017500 <_printf_float+0x368>
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	07da      	lsls	r2, r3, #31
 801748a:	d439      	bmi.n	8017500 <_printf_float+0x368>
 801748c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017490:	eba2 0903 	sub.w	r9, r2, r3
 8017494:	9b04      	ldr	r3, [sp, #16]
 8017496:	1ad2      	subs	r2, r2, r3
 8017498:	4591      	cmp	r9, r2
 801749a:	bfa8      	it	ge
 801749c:	4691      	movge	r9, r2
 801749e:	f1b9 0f00 	cmp.w	r9, #0
 80174a2:	dc35      	bgt.n	8017510 <_printf_float+0x378>
 80174a4:	f04f 0800 	mov.w	r8, #0
 80174a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80174ac:	f104 0a1a 	add.w	sl, r4, #26
 80174b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80174b4:	1a9b      	subs	r3, r3, r2
 80174b6:	eba3 0309 	sub.w	r3, r3, r9
 80174ba:	4543      	cmp	r3, r8
 80174bc:	f77f af77 	ble.w	80173ae <_printf_float+0x216>
 80174c0:	2301      	movs	r3, #1
 80174c2:	4652      	mov	r2, sl
 80174c4:	4631      	mov	r1, r6
 80174c6:	4628      	mov	r0, r5
 80174c8:	47b8      	blx	r7
 80174ca:	3001      	adds	r0, #1
 80174cc:	f43f aeb0 	beq.w	8017230 <_printf_float+0x98>
 80174d0:	f108 0801 	add.w	r8, r8, #1
 80174d4:	e7ec      	b.n	80174b0 <_printf_float+0x318>
 80174d6:	4613      	mov	r3, r2
 80174d8:	4631      	mov	r1, r6
 80174da:	4642      	mov	r2, r8
 80174dc:	4628      	mov	r0, r5
 80174de:	47b8      	blx	r7
 80174e0:	3001      	adds	r0, #1
 80174e2:	d1bf      	bne.n	8017464 <_printf_float+0x2cc>
 80174e4:	e6a4      	b.n	8017230 <_printf_float+0x98>
 80174e6:	2301      	movs	r3, #1
 80174e8:	4631      	mov	r1, r6
 80174ea:	4628      	mov	r0, r5
 80174ec:	9204      	str	r2, [sp, #16]
 80174ee:	47b8      	blx	r7
 80174f0:	3001      	adds	r0, #1
 80174f2:	f43f ae9d 	beq.w	8017230 <_printf_float+0x98>
 80174f6:	9b05      	ldr	r3, [sp, #20]
 80174f8:	9a04      	ldr	r2, [sp, #16]
 80174fa:	3301      	adds	r3, #1
 80174fc:	9305      	str	r3, [sp, #20]
 80174fe:	e7b7      	b.n	8017470 <_printf_float+0x2d8>
 8017500:	4653      	mov	r3, sl
 8017502:	465a      	mov	r2, fp
 8017504:	4631      	mov	r1, r6
 8017506:	4628      	mov	r0, r5
 8017508:	47b8      	blx	r7
 801750a:	3001      	adds	r0, #1
 801750c:	d1be      	bne.n	801748c <_printf_float+0x2f4>
 801750e:	e68f      	b.n	8017230 <_printf_float+0x98>
 8017510:	9a04      	ldr	r2, [sp, #16]
 8017512:	464b      	mov	r3, r9
 8017514:	4442      	add	r2, r8
 8017516:	4631      	mov	r1, r6
 8017518:	4628      	mov	r0, r5
 801751a:	47b8      	blx	r7
 801751c:	3001      	adds	r0, #1
 801751e:	d1c1      	bne.n	80174a4 <_printf_float+0x30c>
 8017520:	e686      	b.n	8017230 <_printf_float+0x98>
 8017522:	9a08      	ldr	r2, [sp, #32]
 8017524:	2a01      	cmp	r2, #1
 8017526:	dc01      	bgt.n	801752c <_printf_float+0x394>
 8017528:	07db      	lsls	r3, r3, #31
 801752a:	d537      	bpl.n	801759c <_printf_float+0x404>
 801752c:	2301      	movs	r3, #1
 801752e:	4642      	mov	r2, r8
 8017530:	4631      	mov	r1, r6
 8017532:	4628      	mov	r0, r5
 8017534:	47b8      	blx	r7
 8017536:	3001      	adds	r0, #1
 8017538:	f43f ae7a 	beq.w	8017230 <_printf_float+0x98>
 801753c:	4653      	mov	r3, sl
 801753e:	465a      	mov	r2, fp
 8017540:	4631      	mov	r1, r6
 8017542:	4628      	mov	r0, r5
 8017544:	47b8      	blx	r7
 8017546:	3001      	adds	r0, #1
 8017548:	f43f ae72 	beq.w	8017230 <_printf_float+0x98>
 801754c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017550:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017558:	9b08      	ldr	r3, [sp, #32]
 801755a:	d01a      	beq.n	8017592 <_printf_float+0x3fa>
 801755c:	3b01      	subs	r3, #1
 801755e:	f108 0201 	add.w	r2, r8, #1
 8017562:	4631      	mov	r1, r6
 8017564:	4628      	mov	r0, r5
 8017566:	47b8      	blx	r7
 8017568:	3001      	adds	r0, #1
 801756a:	d10e      	bne.n	801758a <_printf_float+0x3f2>
 801756c:	e660      	b.n	8017230 <_printf_float+0x98>
 801756e:	2301      	movs	r3, #1
 8017570:	464a      	mov	r2, r9
 8017572:	4631      	mov	r1, r6
 8017574:	4628      	mov	r0, r5
 8017576:	47b8      	blx	r7
 8017578:	3001      	adds	r0, #1
 801757a:	f43f ae59 	beq.w	8017230 <_printf_float+0x98>
 801757e:	f108 0801 	add.w	r8, r8, #1
 8017582:	9b08      	ldr	r3, [sp, #32]
 8017584:	3b01      	subs	r3, #1
 8017586:	4543      	cmp	r3, r8
 8017588:	dcf1      	bgt.n	801756e <_printf_float+0x3d6>
 801758a:	9b04      	ldr	r3, [sp, #16]
 801758c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017590:	e6dd      	b.n	801734e <_printf_float+0x1b6>
 8017592:	f04f 0800 	mov.w	r8, #0
 8017596:	f104 091a 	add.w	r9, r4, #26
 801759a:	e7f2      	b.n	8017582 <_printf_float+0x3ea>
 801759c:	2301      	movs	r3, #1
 801759e:	4642      	mov	r2, r8
 80175a0:	e7df      	b.n	8017562 <_printf_float+0x3ca>
 80175a2:	2301      	movs	r3, #1
 80175a4:	464a      	mov	r2, r9
 80175a6:	4631      	mov	r1, r6
 80175a8:	4628      	mov	r0, r5
 80175aa:	47b8      	blx	r7
 80175ac:	3001      	adds	r0, #1
 80175ae:	f43f ae3f 	beq.w	8017230 <_printf_float+0x98>
 80175b2:	f108 0801 	add.w	r8, r8, #1
 80175b6:	68e3      	ldr	r3, [r4, #12]
 80175b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175ba:	1a5b      	subs	r3, r3, r1
 80175bc:	4543      	cmp	r3, r8
 80175be:	dcf0      	bgt.n	80175a2 <_printf_float+0x40a>
 80175c0:	e6f9      	b.n	80173b6 <_printf_float+0x21e>
 80175c2:	f04f 0800 	mov.w	r8, #0
 80175c6:	f104 0919 	add.w	r9, r4, #25
 80175ca:	e7f4      	b.n	80175b6 <_printf_float+0x41e>

080175cc <_printf_common>:
 80175cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d0:	4616      	mov	r6, r2
 80175d2:	4699      	mov	r9, r3
 80175d4:	688a      	ldr	r2, [r1, #8]
 80175d6:	690b      	ldr	r3, [r1, #16]
 80175d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175dc:	4293      	cmp	r3, r2
 80175de:	bfb8      	it	lt
 80175e0:	4613      	movlt	r3, r2
 80175e2:	6033      	str	r3, [r6, #0]
 80175e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175e8:	4607      	mov	r7, r0
 80175ea:	460c      	mov	r4, r1
 80175ec:	b10a      	cbz	r2, 80175f2 <_printf_common+0x26>
 80175ee:	3301      	adds	r3, #1
 80175f0:	6033      	str	r3, [r6, #0]
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	0699      	lsls	r1, r3, #26
 80175f6:	bf42      	ittt	mi
 80175f8:	6833      	ldrmi	r3, [r6, #0]
 80175fa:	3302      	addmi	r3, #2
 80175fc:	6033      	strmi	r3, [r6, #0]
 80175fe:	6825      	ldr	r5, [r4, #0]
 8017600:	f015 0506 	ands.w	r5, r5, #6
 8017604:	d106      	bne.n	8017614 <_printf_common+0x48>
 8017606:	f104 0a19 	add.w	sl, r4, #25
 801760a:	68e3      	ldr	r3, [r4, #12]
 801760c:	6832      	ldr	r2, [r6, #0]
 801760e:	1a9b      	subs	r3, r3, r2
 8017610:	42ab      	cmp	r3, r5
 8017612:	dc26      	bgt.n	8017662 <_printf_common+0x96>
 8017614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017618:	1e13      	subs	r3, r2, #0
 801761a:	6822      	ldr	r2, [r4, #0]
 801761c:	bf18      	it	ne
 801761e:	2301      	movne	r3, #1
 8017620:	0692      	lsls	r2, r2, #26
 8017622:	d42b      	bmi.n	801767c <_printf_common+0xb0>
 8017624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017628:	4649      	mov	r1, r9
 801762a:	4638      	mov	r0, r7
 801762c:	47c0      	blx	r8
 801762e:	3001      	adds	r0, #1
 8017630:	d01e      	beq.n	8017670 <_printf_common+0xa4>
 8017632:	6823      	ldr	r3, [r4, #0]
 8017634:	6922      	ldr	r2, [r4, #16]
 8017636:	f003 0306 	and.w	r3, r3, #6
 801763a:	2b04      	cmp	r3, #4
 801763c:	bf02      	ittt	eq
 801763e:	68e5      	ldreq	r5, [r4, #12]
 8017640:	6833      	ldreq	r3, [r6, #0]
 8017642:	1aed      	subeq	r5, r5, r3
 8017644:	68a3      	ldr	r3, [r4, #8]
 8017646:	bf0c      	ite	eq
 8017648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801764c:	2500      	movne	r5, #0
 801764e:	4293      	cmp	r3, r2
 8017650:	bfc4      	itt	gt
 8017652:	1a9b      	subgt	r3, r3, r2
 8017654:	18ed      	addgt	r5, r5, r3
 8017656:	2600      	movs	r6, #0
 8017658:	341a      	adds	r4, #26
 801765a:	42b5      	cmp	r5, r6
 801765c:	d11a      	bne.n	8017694 <_printf_common+0xc8>
 801765e:	2000      	movs	r0, #0
 8017660:	e008      	b.n	8017674 <_printf_common+0xa8>
 8017662:	2301      	movs	r3, #1
 8017664:	4652      	mov	r2, sl
 8017666:	4649      	mov	r1, r9
 8017668:	4638      	mov	r0, r7
 801766a:	47c0      	blx	r8
 801766c:	3001      	adds	r0, #1
 801766e:	d103      	bne.n	8017678 <_printf_common+0xac>
 8017670:	f04f 30ff 	mov.w	r0, #4294967295
 8017674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017678:	3501      	adds	r5, #1
 801767a:	e7c6      	b.n	801760a <_printf_common+0x3e>
 801767c:	18e1      	adds	r1, r4, r3
 801767e:	1c5a      	adds	r2, r3, #1
 8017680:	2030      	movs	r0, #48	; 0x30
 8017682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017686:	4422      	add	r2, r4
 8017688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801768c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017690:	3302      	adds	r3, #2
 8017692:	e7c7      	b.n	8017624 <_printf_common+0x58>
 8017694:	2301      	movs	r3, #1
 8017696:	4622      	mov	r2, r4
 8017698:	4649      	mov	r1, r9
 801769a:	4638      	mov	r0, r7
 801769c:	47c0      	blx	r8
 801769e:	3001      	adds	r0, #1
 80176a0:	d0e6      	beq.n	8017670 <_printf_common+0xa4>
 80176a2:	3601      	adds	r6, #1
 80176a4:	e7d9      	b.n	801765a <_printf_common+0x8e>
	...

080176a8 <_printf_i>:
 80176a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80176ac:	7e0f      	ldrb	r7, [r1, #24]
 80176ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80176b0:	2f78      	cmp	r7, #120	; 0x78
 80176b2:	4691      	mov	r9, r2
 80176b4:	4680      	mov	r8, r0
 80176b6:	460c      	mov	r4, r1
 80176b8:	469a      	mov	sl, r3
 80176ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80176be:	d807      	bhi.n	80176d0 <_printf_i+0x28>
 80176c0:	2f62      	cmp	r7, #98	; 0x62
 80176c2:	d80a      	bhi.n	80176da <_printf_i+0x32>
 80176c4:	2f00      	cmp	r7, #0
 80176c6:	f000 80d4 	beq.w	8017872 <_printf_i+0x1ca>
 80176ca:	2f58      	cmp	r7, #88	; 0x58
 80176cc:	f000 80c0 	beq.w	8017850 <_printf_i+0x1a8>
 80176d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176d8:	e03a      	b.n	8017750 <_printf_i+0xa8>
 80176da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176de:	2b15      	cmp	r3, #21
 80176e0:	d8f6      	bhi.n	80176d0 <_printf_i+0x28>
 80176e2:	a101      	add	r1, pc, #4	; (adr r1, 80176e8 <_printf_i+0x40>)
 80176e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80176e8:	08017741 	.word	0x08017741
 80176ec:	08017755 	.word	0x08017755
 80176f0:	080176d1 	.word	0x080176d1
 80176f4:	080176d1 	.word	0x080176d1
 80176f8:	080176d1 	.word	0x080176d1
 80176fc:	080176d1 	.word	0x080176d1
 8017700:	08017755 	.word	0x08017755
 8017704:	080176d1 	.word	0x080176d1
 8017708:	080176d1 	.word	0x080176d1
 801770c:	080176d1 	.word	0x080176d1
 8017710:	080176d1 	.word	0x080176d1
 8017714:	08017859 	.word	0x08017859
 8017718:	08017781 	.word	0x08017781
 801771c:	08017813 	.word	0x08017813
 8017720:	080176d1 	.word	0x080176d1
 8017724:	080176d1 	.word	0x080176d1
 8017728:	0801787b 	.word	0x0801787b
 801772c:	080176d1 	.word	0x080176d1
 8017730:	08017781 	.word	0x08017781
 8017734:	080176d1 	.word	0x080176d1
 8017738:	080176d1 	.word	0x080176d1
 801773c:	0801781b 	.word	0x0801781b
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	1d1a      	adds	r2, r3, #4
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	602a      	str	r2, [r5, #0]
 8017748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801774c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017750:	2301      	movs	r3, #1
 8017752:	e09f      	b.n	8017894 <_printf_i+0x1ec>
 8017754:	6820      	ldr	r0, [r4, #0]
 8017756:	682b      	ldr	r3, [r5, #0]
 8017758:	0607      	lsls	r7, r0, #24
 801775a:	f103 0104 	add.w	r1, r3, #4
 801775e:	6029      	str	r1, [r5, #0]
 8017760:	d501      	bpl.n	8017766 <_printf_i+0xbe>
 8017762:	681e      	ldr	r6, [r3, #0]
 8017764:	e003      	b.n	801776e <_printf_i+0xc6>
 8017766:	0646      	lsls	r6, r0, #25
 8017768:	d5fb      	bpl.n	8017762 <_printf_i+0xba>
 801776a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801776e:	2e00      	cmp	r6, #0
 8017770:	da03      	bge.n	801777a <_printf_i+0xd2>
 8017772:	232d      	movs	r3, #45	; 0x2d
 8017774:	4276      	negs	r6, r6
 8017776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801777a:	485a      	ldr	r0, [pc, #360]	; (80178e4 <_printf_i+0x23c>)
 801777c:	230a      	movs	r3, #10
 801777e:	e012      	b.n	80177a6 <_printf_i+0xfe>
 8017780:	682b      	ldr	r3, [r5, #0]
 8017782:	6820      	ldr	r0, [r4, #0]
 8017784:	1d19      	adds	r1, r3, #4
 8017786:	6029      	str	r1, [r5, #0]
 8017788:	0605      	lsls	r5, r0, #24
 801778a:	d501      	bpl.n	8017790 <_printf_i+0xe8>
 801778c:	681e      	ldr	r6, [r3, #0]
 801778e:	e002      	b.n	8017796 <_printf_i+0xee>
 8017790:	0641      	lsls	r1, r0, #25
 8017792:	d5fb      	bpl.n	801778c <_printf_i+0xe4>
 8017794:	881e      	ldrh	r6, [r3, #0]
 8017796:	4853      	ldr	r0, [pc, #332]	; (80178e4 <_printf_i+0x23c>)
 8017798:	2f6f      	cmp	r7, #111	; 0x6f
 801779a:	bf0c      	ite	eq
 801779c:	2308      	moveq	r3, #8
 801779e:	230a      	movne	r3, #10
 80177a0:	2100      	movs	r1, #0
 80177a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80177a6:	6865      	ldr	r5, [r4, #4]
 80177a8:	60a5      	str	r5, [r4, #8]
 80177aa:	2d00      	cmp	r5, #0
 80177ac:	bfa2      	ittt	ge
 80177ae:	6821      	ldrge	r1, [r4, #0]
 80177b0:	f021 0104 	bicge.w	r1, r1, #4
 80177b4:	6021      	strge	r1, [r4, #0]
 80177b6:	b90e      	cbnz	r6, 80177bc <_printf_i+0x114>
 80177b8:	2d00      	cmp	r5, #0
 80177ba:	d04b      	beq.n	8017854 <_printf_i+0x1ac>
 80177bc:	4615      	mov	r5, r2
 80177be:	fbb6 f1f3 	udiv	r1, r6, r3
 80177c2:	fb03 6711 	mls	r7, r3, r1, r6
 80177c6:	5dc7      	ldrb	r7, [r0, r7]
 80177c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80177cc:	4637      	mov	r7, r6
 80177ce:	42bb      	cmp	r3, r7
 80177d0:	460e      	mov	r6, r1
 80177d2:	d9f4      	bls.n	80177be <_printf_i+0x116>
 80177d4:	2b08      	cmp	r3, #8
 80177d6:	d10b      	bne.n	80177f0 <_printf_i+0x148>
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	07de      	lsls	r6, r3, #31
 80177dc:	d508      	bpl.n	80177f0 <_printf_i+0x148>
 80177de:	6923      	ldr	r3, [r4, #16]
 80177e0:	6861      	ldr	r1, [r4, #4]
 80177e2:	4299      	cmp	r1, r3
 80177e4:	bfde      	ittt	le
 80177e6:	2330      	movle	r3, #48	; 0x30
 80177e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80177ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80177f0:	1b52      	subs	r2, r2, r5
 80177f2:	6122      	str	r2, [r4, #16]
 80177f4:	f8cd a000 	str.w	sl, [sp]
 80177f8:	464b      	mov	r3, r9
 80177fa:	aa03      	add	r2, sp, #12
 80177fc:	4621      	mov	r1, r4
 80177fe:	4640      	mov	r0, r8
 8017800:	f7ff fee4 	bl	80175cc <_printf_common>
 8017804:	3001      	adds	r0, #1
 8017806:	d14a      	bne.n	801789e <_printf_i+0x1f6>
 8017808:	f04f 30ff 	mov.w	r0, #4294967295
 801780c:	b004      	add	sp, #16
 801780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	f043 0320 	orr.w	r3, r3, #32
 8017818:	6023      	str	r3, [r4, #0]
 801781a:	4833      	ldr	r0, [pc, #204]	; (80178e8 <_printf_i+0x240>)
 801781c:	2778      	movs	r7, #120	; 0x78
 801781e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017822:	6823      	ldr	r3, [r4, #0]
 8017824:	6829      	ldr	r1, [r5, #0]
 8017826:	061f      	lsls	r7, r3, #24
 8017828:	f851 6b04 	ldr.w	r6, [r1], #4
 801782c:	d402      	bmi.n	8017834 <_printf_i+0x18c>
 801782e:	065f      	lsls	r7, r3, #25
 8017830:	bf48      	it	mi
 8017832:	b2b6      	uxthmi	r6, r6
 8017834:	07df      	lsls	r7, r3, #31
 8017836:	bf48      	it	mi
 8017838:	f043 0320 	orrmi.w	r3, r3, #32
 801783c:	6029      	str	r1, [r5, #0]
 801783e:	bf48      	it	mi
 8017840:	6023      	strmi	r3, [r4, #0]
 8017842:	b91e      	cbnz	r6, 801784c <_printf_i+0x1a4>
 8017844:	6823      	ldr	r3, [r4, #0]
 8017846:	f023 0320 	bic.w	r3, r3, #32
 801784a:	6023      	str	r3, [r4, #0]
 801784c:	2310      	movs	r3, #16
 801784e:	e7a7      	b.n	80177a0 <_printf_i+0xf8>
 8017850:	4824      	ldr	r0, [pc, #144]	; (80178e4 <_printf_i+0x23c>)
 8017852:	e7e4      	b.n	801781e <_printf_i+0x176>
 8017854:	4615      	mov	r5, r2
 8017856:	e7bd      	b.n	80177d4 <_printf_i+0x12c>
 8017858:	682b      	ldr	r3, [r5, #0]
 801785a:	6826      	ldr	r6, [r4, #0]
 801785c:	6961      	ldr	r1, [r4, #20]
 801785e:	1d18      	adds	r0, r3, #4
 8017860:	6028      	str	r0, [r5, #0]
 8017862:	0635      	lsls	r5, r6, #24
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	d501      	bpl.n	801786c <_printf_i+0x1c4>
 8017868:	6019      	str	r1, [r3, #0]
 801786a:	e002      	b.n	8017872 <_printf_i+0x1ca>
 801786c:	0670      	lsls	r0, r6, #25
 801786e:	d5fb      	bpl.n	8017868 <_printf_i+0x1c0>
 8017870:	8019      	strh	r1, [r3, #0]
 8017872:	2300      	movs	r3, #0
 8017874:	6123      	str	r3, [r4, #16]
 8017876:	4615      	mov	r5, r2
 8017878:	e7bc      	b.n	80177f4 <_printf_i+0x14c>
 801787a:	682b      	ldr	r3, [r5, #0]
 801787c:	1d1a      	adds	r2, r3, #4
 801787e:	602a      	str	r2, [r5, #0]
 8017880:	681d      	ldr	r5, [r3, #0]
 8017882:	6862      	ldr	r2, [r4, #4]
 8017884:	2100      	movs	r1, #0
 8017886:	4628      	mov	r0, r5
 8017888:	f7e8 fd42 	bl	8000310 <memchr>
 801788c:	b108      	cbz	r0, 8017892 <_printf_i+0x1ea>
 801788e:	1b40      	subs	r0, r0, r5
 8017890:	6060      	str	r0, [r4, #4]
 8017892:	6863      	ldr	r3, [r4, #4]
 8017894:	6123      	str	r3, [r4, #16]
 8017896:	2300      	movs	r3, #0
 8017898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801789c:	e7aa      	b.n	80177f4 <_printf_i+0x14c>
 801789e:	6923      	ldr	r3, [r4, #16]
 80178a0:	462a      	mov	r2, r5
 80178a2:	4649      	mov	r1, r9
 80178a4:	4640      	mov	r0, r8
 80178a6:	47d0      	blx	sl
 80178a8:	3001      	adds	r0, #1
 80178aa:	d0ad      	beq.n	8017808 <_printf_i+0x160>
 80178ac:	6823      	ldr	r3, [r4, #0]
 80178ae:	079b      	lsls	r3, r3, #30
 80178b0:	d413      	bmi.n	80178da <_printf_i+0x232>
 80178b2:	68e0      	ldr	r0, [r4, #12]
 80178b4:	9b03      	ldr	r3, [sp, #12]
 80178b6:	4298      	cmp	r0, r3
 80178b8:	bfb8      	it	lt
 80178ba:	4618      	movlt	r0, r3
 80178bc:	e7a6      	b.n	801780c <_printf_i+0x164>
 80178be:	2301      	movs	r3, #1
 80178c0:	4632      	mov	r2, r6
 80178c2:	4649      	mov	r1, r9
 80178c4:	4640      	mov	r0, r8
 80178c6:	47d0      	blx	sl
 80178c8:	3001      	adds	r0, #1
 80178ca:	d09d      	beq.n	8017808 <_printf_i+0x160>
 80178cc:	3501      	adds	r5, #1
 80178ce:	68e3      	ldr	r3, [r4, #12]
 80178d0:	9903      	ldr	r1, [sp, #12]
 80178d2:	1a5b      	subs	r3, r3, r1
 80178d4:	42ab      	cmp	r3, r5
 80178d6:	dcf2      	bgt.n	80178be <_printf_i+0x216>
 80178d8:	e7eb      	b.n	80178b2 <_printf_i+0x20a>
 80178da:	2500      	movs	r5, #0
 80178dc:	f104 0619 	add.w	r6, r4, #25
 80178e0:	e7f5      	b.n	80178ce <_printf_i+0x226>
 80178e2:	bf00      	nop
 80178e4:	0801c982 	.word	0x0801c982
 80178e8:	0801c993 	.word	0x0801c993

080178ec <_scanf_float>:
 80178ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f0:	b087      	sub	sp, #28
 80178f2:	4617      	mov	r7, r2
 80178f4:	9303      	str	r3, [sp, #12]
 80178f6:	688b      	ldr	r3, [r1, #8]
 80178f8:	1e5a      	subs	r2, r3, #1
 80178fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80178fe:	bf83      	ittte	hi
 8017900:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017904:	195b      	addhi	r3, r3, r5
 8017906:	9302      	strhi	r3, [sp, #8]
 8017908:	2300      	movls	r3, #0
 801790a:	bf86      	itte	hi
 801790c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017910:	608b      	strhi	r3, [r1, #8]
 8017912:	9302      	strls	r3, [sp, #8]
 8017914:	680b      	ldr	r3, [r1, #0]
 8017916:	468b      	mov	fp, r1
 8017918:	2500      	movs	r5, #0
 801791a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801791e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017922:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017926:	4680      	mov	r8, r0
 8017928:	460c      	mov	r4, r1
 801792a:	465e      	mov	r6, fp
 801792c:	46aa      	mov	sl, r5
 801792e:	46a9      	mov	r9, r5
 8017930:	9501      	str	r5, [sp, #4]
 8017932:	68a2      	ldr	r2, [r4, #8]
 8017934:	b152      	cbz	r2, 801794c <_scanf_float+0x60>
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	2b4e      	cmp	r3, #78	; 0x4e
 801793c:	d864      	bhi.n	8017a08 <_scanf_float+0x11c>
 801793e:	2b40      	cmp	r3, #64	; 0x40
 8017940:	d83c      	bhi.n	80179bc <_scanf_float+0xd0>
 8017942:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017946:	b2c8      	uxtb	r0, r1
 8017948:	280e      	cmp	r0, #14
 801794a:	d93a      	bls.n	80179c2 <_scanf_float+0xd6>
 801794c:	f1b9 0f00 	cmp.w	r9, #0
 8017950:	d003      	beq.n	801795a <_scanf_float+0x6e>
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017958:	6023      	str	r3, [r4, #0]
 801795a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801795e:	f1ba 0f01 	cmp.w	sl, #1
 8017962:	f200 8113 	bhi.w	8017b8c <_scanf_float+0x2a0>
 8017966:	455e      	cmp	r6, fp
 8017968:	f200 8105 	bhi.w	8017b76 <_scanf_float+0x28a>
 801796c:	2501      	movs	r5, #1
 801796e:	4628      	mov	r0, r5
 8017970:	b007      	add	sp, #28
 8017972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017976:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801797a:	2a0d      	cmp	r2, #13
 801797c:	d8e6      	bhi.n	801794c <_scanf_float+0x60>
 801797e:	a101      	add	r1, pc, #4	; (adr r1, 8017984 <_scanf_float+0x98>)
 8017980:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017984:	08017ac3 	.word	0x08017ac3
 8017988:	0801794d 	.word	0x0801794d
 801798c:	0801794d 	.word	0x0801794d
 8017990:	0801794d 	.word	0x0801794d
 8017994:	08017b23 	.word	0x08017b23
 8017998:	08017afb 	.word	0x08017afb
 801799c:	0801794d 	.word	0x0801794d
 80179a0:	0801794d 	.word	0x0801794d
 80179a4:	08017ad1 	.word	0x08017ad1
 80179a8:	0801794d 	.word	0x0801794d
 80179ac:	0801794d 	.word	0x0801794d
 80179b0:	0801794d 	.word	0x0801794d
 80179b4:	0801794d 	.word	0x0801794d
 80179b8:	08017a89 	.word	0x08017a89
 80179bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80179c0:	e7db      	b.n	801797a <_scanf_float+0x8e>
 80179c2:	290e      	cmp	r1, #14
 80179c4:	d8c2      	bhi.n	801794c <_scanf_float+0x60>
 80179c6:	a001      	add	r0, pc, #4	; (adr r0, 80179cc <_scanf_float+0xe0>)
 80179c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80179cc:	08017a7b 	.word	0x08017a7b
 80179d0:	0801794d 	.word	0x0801794d
 80179d4:	08017a7b 	.word	0x08017a7b
 80179d8:	08017b0f 	.word	0x08017b0f
 80179dc:	0801794d 	.word	0x0801794d
 80179e0:	08017a29 	.word	0x08017a29
 80179e4:	08017a65 	.word	0x08017a65
 80179e8:	08017a65 	.word	0x08017a65
 80179ec:	08017a65 	.word	0x08017a65
 80179f0:	08017a65 	.word	0x08017a65
 80179f4:	08017a65 	.word	0x08017a65
 80179f8:	08017a65 	.word	0x08017a65
 80179fc:	08017a65 	.word	0x08017a65
 8017a00:	08017a65 	.word	0x08017a65
 8017a04:	08017a65 	.word	0x08017a65
 8017a08:	2b6e      	cmp	r3, #110	; 0x6e
 8017a0a:	d809      	bhi.n	8017a20 <_scanf_float+0x134>
 8017a0c:	2b60      	cmp	r3, #96	; 0x60
 8017a0e:	d8b2      	bhi.n	8017976 <_scanf_float+0x8a>
 8017a10:	2b54      	cmp	r3, #84	; 0x54
 8017a12:	d077      	beq.n	8017b04 <_scanf_float+0x218>
 8017a14:	2b59      	cmp	r3, #89	; 0x59
 8017a16:	d199      	bne.n	801794c <_scanf_float+0x60>
 8017a18:	2d07      	cmp	r5, #7
 8017a1a:	d197      	bne.n	801794c <_scanf_float+0x60>
 8017a1c:	2508      	movs	r5, #8
 8017a1e:	e029      	b.n	8017a74 <_scanf_float+0x188>
 8017a20:	2b74      	cmp	r3, #116	; 0x74
 8017a22:	d06f      	beq.n	8017b04 <_scanf_float+0x218>
 8017a24:	2b79      	cmp	r3, #121	; 0x79
 8017a26:	e7f6      	b.n	8017a16 <_scanf_float+0x12a>
 8017a28:	6821      	ldr	r1, [r4, #0]
 8017a2a:	05c8      	lsls	r0, r1, #23
 8017a2c:	d51a      	bpl.n	8017a64 <_scanf_float+0x178>
 8017a2e:	9b02      	ldr	r3, [sp, #8]
 8017a30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017a34:	6021      	str	r1, [r4, #0]
 8017a36:	f109 0901 	add.w	r9, r9, #1
 8017a3a:	b11b      	cbz	r3, 8017a44 <_scanf_float+0x158>
 8017a3c:	3b01      	subs	r3, #1
 8017a3e:	3201      	adds	r2, #1
 8017a40:	9302      	str	r3, [sp, #8]
 8017a42:	60a2      	str	r2, [r4, #8]
 8017a44:	68a3      	ldr	r3, [r4, #8]
 8017a46:	3b01      	subs	r3, #1
 8017a48:	60a3      	str	r3, [r4, #8]
 8017a4a:	6923      	ldr	r3, [r4, #16]
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	6123      	str	r3, [r4, #16]
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	3b01      	subs	r3, #1
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	607b      	str	r3, [r7, #4]
 8017a58:	f340 8084 	ble.w	8017b64 <_scanf_float+0x278>
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	3301      	adds	r3, #1
 8017a60:	603b      	str	r3, [r7, #0]
 8017a62:	e766      	b.n	8017932 <_scanf_float+0x46>
 8017a64:	eb1a 0f05 	cmn.w	sl, r5
 8017a68:	f47f af70 	bne.w	801794c <_scanf_float+0x60>
 8017a6c:	6822      	ldr	r2, [r4, #0]
 8017a6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017a72:	6022      	str	r2, [r4, #0]
 8017a74:	f806 3b01 	strb.w	r3, [r6], #1
 8017a78:	e7e4      	b.n	8017a44 <_scanf_float+0x158>
 8017a7a:	6822      	ldr	r2, [r4, #0]
 8017a7c:	0610      	lsls	r0, r2, #24
 8017a7e:	f57f af65 	bpl.w	801794c <_scanf_float+0x60>
 8017a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017a86:	e7f4      	b.n	8017a72 <_scanf_float+0x186>
 8017a88:	f1ba 0f00 	cmp.w	sl, #0
 8017a8c:	d10e      	bne.n	8017aac <_scanf_float+0x1c0>
 8017a8e:	f1b9 0f00 	cmp.w	r9, #0
 8017a92:	d10e      	bne.n	8017ab2 <_scanf_float+0x1c6>
 8017a94:	6822      	ldr	r2, [r4, #0]
 8017a96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017a9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017a9e:	d108      	bne.n	8017ab2 <_scanf_float+0x1c6>
 8017aa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017aa4:	6022      	str	r2, [r4, #0]
 8017aa6:	f04f 0a01 	mov.w	sl, #1
 8017aaa:	e7e3      	b.n	8017a74 <_scanf_float+0x188>
 8017aac:	f1ba 0f02 	cmp.w	sl, #2
 8017ab0:	d055      	beq.n	8017b5e <_scanf_float+0x272>
 8017ab2:	2d01      	cmp	r5, #1
 8017ab4:	d002      	beq.n	8017abc <_scanf_float+0x1d0>
 8017ab6:	2d04      	cmp	r5, #4
 8017ab8:	f47f af48 	bne.w	801794c <_scanf_float+0x60>
 8017abc:	3501      	adds	r5, #1
 8017abe:	b2ed      	uxtb	r5, r5
 8017ac0:	e7d8      	b.n	8017a74 <_scanf_float+0x188>
 8017ac2:	f1ba 0f01 	cmp.w	sl, #1
 8017ac6:	f47f af41 	bne.w	801794c <_scanf_float+0x60>
 8017aca:	f04f 0a02 	mov.w	sl, #2
 8017ace:	e7d1      	b.n	8017a74 <_scanf_float+0x188>
 8017ad0:	b97d      	cbnz	r5, 8017af2 <_scanf_float+0x206>
 8017ad2:	f1b9 0f00 	cmp.w	r9, #0
 8017ad6:	f47f af3c 	bne.w	8017952 <_scanf_float+0x66>
 8017ada:	6822      	ldr	r2, [r4, #0]
 8017adc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017ae0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017ae4:	f47f af39 	bne.w	801795a <_scanf_float+0x6e>
 8017ae8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017aec:	6022      	str	r2, [r4, #0]
 8017aee:	2501      	movs	r5, #1
 8017af0:	e7c0      	b.n	8017a74 <_scanf_float+0x188>
 8017af2:	2d03      	cmp	r5, #3
 8017af4:	d0e2      	beq.n	8017abc <_scanf_float+0x1d0>
 8017af6:	2d05      	cmp	r5, #5
 8017af8:	e7de      	b.n	8017ab8 <_scanf_float+0x1cc>
 8017afa:	2d02      	cmp	r5, #2
 8017afc:	f47f af26 	bne.w	801794c <_scanf_float+0x60>
 8017b00:	2503      	movs	r5, #3
 8017b02:	e7b7      	b.n	8017a74 <_scanf_float+0x188>
 8017b04:	2d06      	cmp	r5, #6
 8017b06:	f47f af21 	bne.w	801794c <_scanf_float+0x60>
 8017b0a:	2507      	movs	r5, #7
 8017b0c:	e7b2      	b.n	8017a74 <_scanf_float+0x188>
 8017b0e:	6822      	ldr	r2, [r4, #0]
 8017b10:	0591      	lsls	r1, r2, #22
 8017b12:	f57f af1b 	bpl.w	801794c <_scanf_float+0x60>
 8017b16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017b1a:	6022      	str	r2, [r4, #0]
 8017b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017b20:	e7a8      	b.n	8017a74 <_scanf_float+0x188>
 8017b22:	6822      	ldr	r2, [r4, #0]
 8017b24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017b28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017b2c:	d006      	beq.n	8017b3c <_scanf_float+0x250>
 8017b2e:	0550      	lsls	r0, r2, #21
 8017b30:	f57f af0c 	bpl.w	801794c <_scanf_float+0x60>
 8017b34:	f1b9 0f00 	cmp.w	r9, #0
 8017b38:	f43f af0f 	beq.w	801795a <_scanf_float+0x6e>
 8017b3c:	0591      	lsls	r1, r2, #22
 8017b3e:	bf58      	it	pl
 8017b40:	9901      	ldrpl	r1, [sp, #4]
 8017b42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017b46:	bf58      	it	pl
 8017b48:	eba9 0101 	subpl.w	r1, r9, r1
 8017b4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017b50:	bf58      	it	pl
 8017b52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017b56:	6022      	str	r2, [r4, #0]
 8017b58:	f04f 0900 	mov.w	r9, #0
 8017b5c:	e78a      	b.n	8017a74 <_scanf_float+0x188>
 8017b5e:	f04f 0a03 	mov.w	sl, #3
 8017b62:	e787      	b.n	8017a74 <_scanf_float+0x188>
 8017b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b68:	4639      	mov	r1, r7
 8017b6a:	4640      	mov	r0, r8
 8017b6c:	4798      	blx	r3
 8017b6e:	2800      	cmp	r0, #0
 8017b70:	f43f aedf 	beq.w	8017932 <_scanf_float+0x46>
 8017b74:	e6ea      	b.n	801794c <_scanf_float+0x60>
 8017b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b7e:	463a      	mov	r2, r7
 8017b80:	4640      	mov	r0, r8
 8017b82:	4798      	blx	r3
 8017b84:	6923      	ldr	r3, [r4, #16]
 8017b86:	3b01      	subs	r3, #1
 8017b88:	6123      	str	r3, [r4, #16]
 8017b8a:	e6ec      	b.n	8017966 <_scanf_float+0x7a>
 8017b8c:	1e6b      	subs	r3, r5, #1
 8017b8e:	2b06      	cmp	r3, #6
 8017b90:	d825      	bhi.n	8017bde <_scanf_float+0x2f2>
 8017b92:	2d02      	cmp	r5, #2
 8017b94:	d836      	bhi.n	8017c04 <_scanf_float+0x318>
 8017b96:	455e      	cmp	r6, fp
 8017b98:	f67f aee8 	bls.w	801796c <_scanf_float+0x80>
 8017b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ba0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017ba4:	463a      	mov	r2, r7
 8017ba6:	4640      	mov	r0, r8
 8017ba8:	4798      	blx	r3
 8017baa:	6923      	ldr	r3, [r4, #16]
 8017bac:	3b01      	subs	r3, #1
 8017bae:	6123      	str	r3, [r4, #16]
 8017bb0:	e7f1      	b.n	8017b96 <_scanf_float+0x2aa>
 8017bb2:	9802      	ldr	r0, [sp, #8]
 8017bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bb8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017bbc:	9002      	str	r0, [sp, #8]
 8017bbe:	463a      	mov	r2, r7
 8017bc0:	4640      	mov	r0, r8
 8017bc2:	4798      	blx	r3
 8017bc4:	6923      	ldr	r3, [r4, #16]
 8017bc6:	3b01      	subs	r3, #1
 8017bc8:	6123      	str	r3, [r4, #16]
 8017bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017bce:	fa5f fa8a 	uxtb.w	sl, sl
 8017bd2:	f1ba 0f02 	cmp.w	sl, #2
 8017bd6:	d1ec      	bne.n	8017bb2 <_scanf_float+0x2c6>
 8017bd8:	3d03      	subs	r5, #3
 8017bda:	b2ed      	uxtb	r5, r5
 8017bdc:	1b76      	subs	r6, r6, r5
 8017bde:	6823      	ldr	r3, [r4, #0]
 8017be0:	05da      	lsls	r2, r3, #23
 8017be2:	d52f      	bpl.n	8017c44 <_scanf_float+0x358>
 8017be4:	055b      	lsls	r3, r3, #21
 8017be6:	d510      	bpl.n	8017c0a <_scanf_float+0x31e>
 8017be8:	455e      	cmp	r6, fp
 8017bea:	f67f aebf 	bls.w	801796c <_scanf_float+0x80>
 8017bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017bf6:	463a      	mov	r2, r7
 8017bf8:	4640      	mov	r0, r8
 8017bfa:	4798      	blx	r3
 8017bfc:	6923      	ldr	r3, [r4, #16]
 8017bfe:	3b01      	subs	r3, #1
 8017c00:	6123      	str	r3, [r4, #16]
 8017c02:	e7f1      	b.n	8017be8 <_scanf_float+0x2fc>
 8017c04:	46aa      	mov	sl, r5
 8017c06:	9602      	str	r6, [sp, #8]
 8017c08:	e7df      	b.n	8017bca <_scanf_float+0x2de>
 8017c0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017c0e:	6923      	ldr	r3, [r4, #16]
 8017c10:	2965      	cmp	r1, #101	; 0x65
 8017c12:	f103 33ff 	add.w	r3, r3, #4294967295
 8017c16:	f106 35ff 	add.w	r5, r6, #4294967295
 8017c1a:	6123      	str	r3, [r4, #16]
 8017c1c:	d00c      	beq.n	8017c38 <_scanf_float+0x34c>
 8017c1e:	2945      	cmp	r1, #69	; 0x45
 8017c20:	d00a      	beq.n	8017c38 <_scanf_float+0x34c>
 8017c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c26:	463a      	mov	r2, r7
 8017c28:	4640      	mov	r0, r8
 8017c2a:	4798      	blx	r3
 8017c2c:	6923      	ldr	r3, [r4, #16]
 8017c2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017c32:	3b01      	subs	r3, #1
 8017c34:	1eb5      	subs	r5, r6, #2
 8017c36:	6123      	str	r3, [r4, #16]
 8017c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c3c:	463a      	mov	r2, r7
 8017c3e:	4640      	mov	r0, r8
 8017c40:	4798      	blx	r3
 8017c42:	462e      	mov	r6, r5
 8017c44:	6825      	ldr	r5, [r4, #0]
 8017c46:	f015 0510 	ands.w	r5, r5, #16
 8017c4a:	d14d      	bne.n	8017ce8 <_scanf_float+0x3fc>
 8017c4c:	7035      	strb	r5, [r6, #0]
 8017c4e:	6823      	ldr	r3, [r4, #0]
 8017c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017c58:	d11a      	bne.n	8017c90 <_scanf_float+0x3a4>
 8017c5a:	9b01      	ldr	r3, [sp, #4]
 8017c5c:	454b      	cmp	r3, r9
 8017c5e:	eba3 0209 	sub.w	r2, r3, r9
 8017c62:	d122      	bne.n	8017caa <_scanf_float+0x3be>
 8017c64:	2200      	movs	r2, #0
 8017c66:	4659      	mov	r1, fp
 8017c68:	4640      	mov	r0, r8
 8017c6a:	f002 fb67 	bl	801a33c <_strtod_r>
 8017c6e:	9b03      	ldr	r3, [sp, #12]
 8017c70:	6821      	ldr	r1, [r4, #0]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	f011 0f02 	tst.w	r1, #2
 8017c78:	f103 0204 	add.w	r2, r3, #4
 8017c7c:	d020      	beq.n	8017cc0 <_scanf_float+0x3d4>
 8017c7e:	9903      	ldr	r1, [sp, #12]
 8017c80:	600a      	str	r2, [r1, #0]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	ed83 0b00 	vstr	d0, [r3]
 8017c88:	68e3      	ldr	r3, [r4, #12]
 8017c8a:	3301      	adds	r3, #1
 8017c8c:	60e3      	str	r3, [r4, #12]
 8017c8e:	e66e      	b.n	801796e <_scanf_float+0x82>
 8017c90:	9b04      	ldr	r3, [sp, #16]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d0e6      	beq.n	8017c64 <_scanf_float+0x378>
 8017c96:	9905      	ldr	r1, [sp, #20]
 8017c98:	230a      	movs	r3, #10
 8017c9a:	462a      	mov	r2, r5
 8017c9c:	3101      	adds	r1, #1
 8017c9e:	4640      	mov	r0, r8
 8017ca0:	f002 fbd4 	bl	801a44c <_strtol_r>
 8017ca4:	9b04      	ldr	r3, [sp, #16]
 8017ca6:	9e05      	ldr	r6, [sp, #20]
 8017ca8:	1ac2      	subs	r2, r0, r3
 8017caa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017cae:	429e      	cmp	r6, r3
 8017cb0:	bf28      	it	cs
 8017cb2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017cb6:	490d      	ldr	r1, [pc, #52]	; (8017cec <_scanf_float+0x400>)
 8017cb8:	4630      	mov	r0, r6
 8017cba:	f000 f8dd 	bl	8017e78 <siprintf>
 8017cbe:	e7d1      	b.n	8017c64 <_scanf_float+0x378>
 8017cc0:	f011 0f04 	tst.w	r1, #4
 8017cc4:	9903      	ldr	r1, [sp, #12]
 8017cc6:	600a      	str	r2, [r1, #0]
 8017cc8:	d1db      	bne.n	8017c82 <_scanf_float+0x396>
 8017cca:	eeb4 0b40 	vcmp.f64	d0, d0
 8017cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd2:	681e      	ldr	r6, [r3, #0]
 8017cd4:	d705      	bvc.n	8017ce2 <_scanf_float+0x3f6>
 8017cd6:	4806      	ldr	r0, [pc, #24]	; (8017cf0 <_scanf_float+0x404>)
 8017cd8:	f000 f9c0 	bl	801805c <nanf>
 8017cdc:	ed86 0a00 	vstr	s0, [r6]
 8017ce0:	e7d2      	b.n	8017c88 <_scanf_float+0x39c>
 8017ce2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017ce6:	e7f9      	b.n	8017cdc <_scanf_float+0x3f0>
 8017ce8:	2500      	movs	r5, #0
 8017cea:	e640      	b.n	801796e <_scanf_float+0x82>
 8017cec:	0801c9a4 	.word	0x0801c9a4
 8017cf0:	0801cd35 	.word	0x0801cd35

08017cf4 <std>:
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	b510      	push	{r4, lr}
 8017cf8:	4604      	mov	r4, r0
 8017cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8017cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017d02:	6083      	str	r3, [r0, #8]
 8017d04:	8181      	strh	r1, [r0, #12]
 8017d06:	6643      	str	r3, [r0, #100]	; 0x64
 8017d08:	81c2      	strh	r2, [r0, #14]
 8017d0a:	6183      	str	r3, [r0, #24]
 8017d0c:	4619      	mov	r1, r3
 8017d0e:	2208      	movs	r2, #8
 8017d10:	305c      	adds	r0, #92	; 0x5c
 8017d12:	f000 f914 	bl	8017f3e <memset>
 8017d16:	4b0d      	ldr	r3, [pc, #52]	; (8017d4c <std+0x58>)
 8017d18:	6263      	str	r3, [r4, #36]	; 0x24
 8017d1a:	4b0d      	ldr	r3, [pc, #52]	; (8017d50 <std+0x5c>)
 8017d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d1e:	4b0d      	ldr	r3, [pc, #52]	; (8017d54 <std+0x60>)
 8017d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d22:	4b0d      	ldr	r3, [pc, #52]	; (8017d58 <std+0x64>)
 8017d24:	6323      	str	r3, [r4, #48]	; 0x30
 8017d26:	4b0d      	ldr	r3, [pc, #52]	; (8017d5c <std+0x68>)
 8017d28:	6224      	str	r4, [r4, #32]
 8017d2a:	429c      	cmp	r4, r3
 8017d2c:	d006      	beq.n	8017d3c <std+0x48>
 8017d2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017d32:	4294      	cmp	r4, r2
 8017d34:	d002      	beq.n	8017d3c <std+0x48>
 8017d36:	33d0      	adds	r3, #208	; 0xd0
 8017d38:	429c      	cmp	r4, r3
 8017d3a:	d105      	bne.n	8017d48 <std+0x54>
 8017d3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d44:	f000 b978 	b.w	8018038 <__retarget_lock_init_recursive>
 8017d48:	bd10      	pop	{r4, pc}
 8017d4a:	bf00      	nop
 8017d4c:	08017eb9 	.word	0x08017eb9
 8017d50:	08017edb 	.word	0x08017edb
 8017d54:	08017f13 	.word	0x08017f13
 8017d58:	08017f37 	.word	0x08017f37
 8017d5c:	24002998 	.word	0x24002998

08017d60 <stdio_exit_handler>:
 8017d60:	4a02      	ldr	r2, [pc, #8]	; (8017d6c <stdio_exit_handler+0xc>)
 8017d62:	4903      	ldr	r1, [pc, #12]	; (8017d70 <stdio_exit_handler+0x10>)
 8017d64:	4803      	ldr	r0, [pc, #12]	; (8017d74 <stdio_exit_handler+0x14>)
 8017d66:	f000 b869 	b.w	8017e3c <_fwalk_sglue>
 8017d6a:	bf00      	nop
 8017d6c:	24000100 	.word	0x24000100
 8017d70:	0801a80d 	.word	0x0801a80d
 8017d74:	2400010c 	.word	0x2400010c

08017d78 <cleanup_stdio>:
 8017d78:	6841      	ldr	r1, [r0, #4]
 8017d7a:	4b0c      	ldr	r3, [pc, #48]	; (8017dac <cleanup_stdio+0x34>)
 8017d7c:	4299      	cmp	r1, r3
 8017d7e:	b510      	push	{r4, lr}
 8017d80:	4604      	mov	r4, r0
 8017d82:	d001      	beq.n	8017d88 <cleanup_stdio+0x10>
 8017d84:	f002 fd42 	bl	801a80c <_fflush_r>
 8017d88:	68a1      	ldr	r1, [r4, #8]
 8017d8a:	4b09      	ldr	r3, [pc, #36]	; (8017db0 <cleanup_stdio+0x38>)
 8017d8c:	4299      	cmp	r1, r3
 8017d8e:	d002      	beq.n	8017d96 <cleanup_stdio+0x1e>
 8017d90:	4620      	mov	r0, r4
 8017d92:	f002 fd3b 	bl	801a80c <_fflush_r>
 8017d96:	68e1      	ldr	r1, [r4, #12]
 8017d98:	4b06      	ldr	r3, [pc, #24]	; (8017db4 <cleanup_stdio+0x3c>)
 8017d9a:	4299      	cmp	r1, r3
 8017d9c:	d004      	beq.n	8017da8 <cleanup_stdio+0x30>
 8017d9e:	4620      	mov	r0, r4
 8017da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017da4:	f002 bd32 	b.w	801a80c <_fflush_r>
 8017da8:	bd10      	pop	{r4, pc}
 8017daa:	bf00      	nop
 8017dac:	24002998 	.word	0x24002998
 8017db0:	24002a00 	.word	0x24002a00
 8017db4:	24002a68 	.word	0x24002a68

08017db8 <global_stdio_init.part.0>:
 8017db8:	b510      	push	{r4, lr}
 8017dba:	4b0b      	ldr	r3, [pc, #44]	; (8017de8 <global_stdio_init.part.0+0x30>)
 8017dbc:	4c0b      	ldr	r4, [pc, #44]	; (8017dec <global_stdio_init.part.0+0x34>)
 8017dbe:	4a0c      	ldr	r2, [pc, #48]	; (8017df0 <global_stdio_init.part.0+0x38>)
 8017dc0:	601a      	str	r2, [r3, #0]
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	2104      	movs	r1, #4
 8017dc8:	f7ff ff94 	bl	8017cf4 <std>
 8017dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017dd0:	2201      	movs	r2, #1
 8017dd2:	2109      	movs	r1, #9
 8017dd4:	f7ff ff8e 	bl	8017cf4 <std>
 8017dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017ddc:	2202      	movs	r2, #2
 8017dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017de2:	2112      	movs	r1, #18
 8017de4:	f7ff bf86 	b.w	8017cf4 <std>
 8017de8:	24002ad0 	.word	0x24002ad0
 8017dec:	24002998 	.word	0x24002998
 8017df0:	08017d61 	.word	0x08017d61

08017df4 <__sfp_lock_acquire>:
 8017df4:	4801      	ldr	r0, [pc, #4]	; (8017dfc <__sfp_lock_acquire+0x8>)
 8017df6:	f000 b920 	b.w	801803a <__retarget_lock_acquire_recursive>
 8017dfa:	bf00      	nop
 8017dfc:	24002ad9 	.word	0x24002ad9

08017e00 <__sfp_lock_release>:
 8017e00:	4801      	ldr	r0, [pc, #4]	; (8017e08 <__sfp_lock_release+0x8>)
 8017e02:	f000 b91b 	b.w	801803c <__retarget_lock_release_recursive>
 8017e06:	bf00      	nop
 8017e08:	24002ad9 	.word	0x24002ad9

08017e0c <__sinit>:
 8017e0c:	b510      	push	{r4, lr}
 8017e0e:	4604      	mov	r4, r0
 8017e10:	f7ff fff0 	bl	8017df4 <__sfp_lock_acquire>
 8017e14:	6a23      	ldr	r3, [r4, #32]
 8017e16:	b11b      	cbz	r3, 8017e20 <__sinit+0x14>
 8017e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e1c:	f7ff bff0 	b.w	8017e00 <__sfp_lock_release>
 8017e20:	4b04      	ldr	r3, [pc, #16]	; (8017e34 <__sinit+0x28>)
 8017e22:	6223      	str	r3, [r4, #32]
 8017e24:	4b04      	ldr	r3, [pc, #16]	; (8017e38 <__sinit+0x2c>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d1f5      	bne.n	8017e18 <__sinit+0xc>
 8017e2c:	f7ff ffc4 	bl	8017db8 <global_stdio_init.part.0>
 8017e30:	e7f2      	b.n	8017e18 <__sinit+0xc>
 8017e32:	bf00      	nop
 8017e34:	08017d79 	.word	0x08017d79
 8017e38:	24002ad0 	.word	0x24002ad0

08017e3c <_fwalk_sglue>:
 8017e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e40:	4607      	mov	r7, r0
 8017e42:	4688      	mov	r8, r1
 8017e44:	4614      	mov	r4, r2
 8017e46:	2600      	movs	r6, #0
 8017e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8017e50:	d505      	bpl.n	8017e5e <_fwalk_sglue+0x22>
 8017e52:	6824      	ldr	r4, [r4, #0]
 8017e54:	2c00      	cmp	r4, #0
 8017e56:	d1f7      	bne.n	8017e48 <_fwalk_sglue+0xc>
 8017e58:	4630      	mov	r0, r6
 8017e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e5e:	89ab      	ldrh	r3, [r5, #12]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d907      	bls.n	8017e74 <_fwalk_sglue+0x38>
 8017e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	d003      	beq.n	8017e74 <_fwalk_sglue+0x38>
 8017e6c:	4629      	mov	r1, r5
 8017e6e:	4638      	mov	r0, r7
 8017e70:	47c0      	blx	r8
 8017e72:	4306      	orrs	r6, r0
 8017e74:	3568      	adds	r5, #104	; 0x68
 8017e76:	e7e9      	b.n	8017e4c <_fwalk_sglue+0x10>

08017e78 <siprintf>:
 8017e78:	b40e      	push	{r1, r2, r3}
 8017e7a:	b500      	push	{lr}
 8017e7c:	b09c      	sub	sp, #112	; 0x70
 8017e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8017e80:	9002      	str	r0, [sp, #8]
 8017e82:	9006      	str	r0, [sp, #24]
 8017e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e88:	4809      	ldr	r0, [pc, #36]	; (8017eb0 <siprintf+0x38>)
 8017e8a:	9107      	str	r1, [sp, #28]
 8017e8c:	9104      	str	r1, [sp, #16]
 8017e8e:	4909      	ldr	r1, [pc, #36]	; (8017eb4 <siprintf+0x3c>)
 8017e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e94:	9105      	str	r1, [sp, #20]
 8017e96:	6800      	ldr	r0, [r0, #0]
 8017e98:	9301      	str	r3, [sp, #4]
 8017e9a:	a902      	add	r1, sp, #8
 8017e9c:	f002 fb32 	bl	801a504 <_svfiprintf_r>
 8017ea0:	9b02      	ldr	r3, [sp, #8]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	701a      	strb	r2, [r3, #0]
 8017ea6:	b01c      	add	sp, #112	; 0x70
 8017ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017eac:	b003      	add	sp, #12
 8017eae:	4770      	bx	lr
 8017eb0:	24000158 	.word	0x24000158
 8017eb4:	ffff0208 	.word	0xffff0208

08017eb8 <__sread>:
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	460c      	mov	r4, r1
 8017ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ec0:	f000 f86c 	bl	8017f9c <_read_r>
 8017ec4:	2800      	cmp	r0, #0
 8017ec6:	bfab      	itete	ge
 8017ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017eca:	89a3      	ldrhlt	r3, [r4, #12]
 8017ecc:	181b      	addge	r3, r3, r0
 8017ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ed2:	bfac      	ite	ge
 8017ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017ed6:	81a3      	strhlt	r3, [r4, #12]
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <__swrite>:
 8017eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ede:	461f      	mov	r7, r3
 8017ee0:	898b      	ldrh	r3, [r1, #12]
 8017ee2:	05db      	lsls	r3, r3, #23
 8017ee4:	4605      	mov	r5, r0
 8017ee6:	460c      	mov	r4, r1
 8017ee8:	4616      	mov	r6, r2
 8017eea:	d505      	bpl.n	8017ef8 <__swrite+0x1e>
 8017eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ef0:	2302      	movs	r3, #2
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f000 f840 	bl	8017f78 <_lseek_r>
 8017ef8:	89a3      	ldrh	r3, [r4, #12]
 8017efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f02:	81a3      	strh	r3, [r4, #12]
 8017f04:	4632      	mov	r2, r6
 8017f06:	463b      	mov	r3, r7
 8017f08:	4628      	mov	r0, r5
 8017f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0e:	f000 b857 	b.w	8017fc0 <_write_r>

08017f12 <__sseek>:
 8017f12:	b510      	push	{r4, lr}
 8017f14:	460c      	mov	r4, r1
 8017f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f1a:	f000 f82d 	bl	8017f78 <_lseek_r>
 8017f1e:	1c43      	adds	r3, r0, #1
 8017f20:	89a3      	ldrh	r3, [r4, #12]
 8017f22:	bf15      	itete	ne
 8017f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f2e:	81a3      	strheq	r3, [r4, #12]
 8017f30:	bf18      	it	ne
 8017f32:	81a3      	strhne	r3, [r4, #12]
 8017f34:	bd10      	pop	{r4, pc}

08017f36 <__sclose>:
 8017f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f3a:	f000 b80d 	b.w	8017f58 <_close_r>

08017f3e <memset>:
 8017f3e:	4402      	add	r2, r0
 8017f40:	4603      	mov	r3, r0
 8017f42:	4293      	cmp	r3, r2
 8017f44:	d100      	bne.n	8017f48 <memset+0xa>
 8017f46:	4770      	bx	lr
 8017f48:	f803 1b01 	strb.w	r1, [r3], #1
 8017f4c:	e7f9      	b.n	8017f42 <memset+0x4>
	...

08017f50 <_localeconv_r>:
 8017f50:	4800      	ldr	r0, [pc, #0]	; (8017f54 <_localeconv_r+0x4>)
 8017f52:	4770      	bx	lr
 8017f54:	2400024c 	.word	0x2400024c

08017f58 <_close_r>:
 8017f58:	b538      	push	{r3, r4, r5, lr}
 8017f5a:	4d06      	ldr	r5, [pc, #24]	; (8017f74 <_close_r+0x1c>)
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	4604      	mov	r4, r0
 8017f60:	4608      	mov	r0, r1
 8017f62:	602b      	str	r3, [r5, #0]
 8017f64:	f7ec fab5 	bl	80044d2 <_close>
 8017f68:	1c43      	adds	r3, r0, #1
 8017f6a:	d102      	bne.n	8017f72 <_close_r+0x1a>
 8017f6c:	682b      	ldr	r3, [r5, #0]
 8017f6e:	b103      	cbz	r3, 8017f72 <_close_r+0x1a>
 8017f70:	6023      	str	r3, [r4, #0]
 8017f72:	bd38      	pop	{r3, r4, r5, pc}
 8017f74:	24002ad4 	.word	0x24002ad4

08017f78 <_lseek_r>:
 8017f78:	b538      	push	{r3, r4, r5, lr}
 8017f7a:	4d07      	ldr	r5, [pc, #28]	; (8017f98 <_lseek_r+0x20>)
 8017f7c:	4604      	mov	r4, r0
 8017f7e:	4608      	mov	r0, r1
 8017f80:	4611      	mov	r1, r2
 8017f82:	2200      	movs	r2, #0
 8017f84:	602a      	str	r2, [r5, #0]
 8017f86:	461a      	mov	r2, r3
 8017f88:	f7ec faca 	bl	8004520 <_lseek>
 8017f8c:	1c43      	adds	r3, r0, #1
 8017f8e:	d102      	bne.n	8017f96 <_lseek_r+0x1e>
 8017f90:	682b      	ldr	r3, [r5, #0]
 8017f92:	b103      	cbz	r3, 8017f96 <_lseek_r+0x1e>
 8017f94:	6023      	str	r3, [r4, #0]
 8017f96:	bd38      	pop	{r3, r4, r5, pc}
 8017f98:	24002ad4 	.word	0x24002ad4

08017f9c <_read_r>:
 8017f9c:	b538      	push	{r3, r4, r5, lr}
 8017f9e:	4d07      	ldr	r5, [pc, #28]	; (8017fbc <_read_r+0x20>)
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	4608      	mov	r0, r1
 8017fa4:	4611      	mov	r1, r2
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	602a      	str	r2, [r5, #0]
 8017faa:	461a      	mov	r2, r3
 8017fac:	f7ec fa58 	bl	8004460 <_read>
 8017fb0:	1c43      	adds	r3, r0, #1
 8017fb2:	d102      	bne.n	8017fba <_read_r+0x1e>
 8017fb4:	682b      	ldr	r3, [r5, #0]
 8017fb6:	b103      	cbz	r3, 8017fba <_read_r+0x1e>
 8017fb8:	6023      	str	r3, [r4, #0]
 8017fba:	bd38      	pop	{r3, r4, r5, pc}
 8017fbc:	24002ad4 	.word	0x24002ad4

08017fc0 <_write_r>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	4d07      	ldr	r5, [pc, #28]	; (8017fe0 <_write_r+0x20>)
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	4608      	mov	r0, r1
 8017fc8:	4611      	mov	r1, r2
 8017fca:	2200      	movs	r2, #0
 8017fcc:	602a      	str	r2, [r5, #0]
 8017fce:	461a      	mov	r2, r3
 8017fd0:	f7ec fa63 	bl	800449a <_write>
 8017fd4:	1c43      	adds	r3, r0, #1
 8017fd6:	d102      	bne.n	8017fde <_write_r+0x1e>
 8017fd8:	682b      	ldr	r3, [r5, #0]
 8017fda:	b103      	cbz	r3, 8017fde <_write_r+0x1e>
 8017fdc:	6023      	str	r3, [r4, #0]
 8017fde:	bd38      	pop	{r3, r4, r5, pc}
 8017fe0:	24002ad4 	.word	0x24002ad4

08017fe4 <__errno>:
 8017fe4:	4b01      	ldr	r3, [pc, #4]	; (8017fec <__errno+0x8>)
 8017fe6:	6818      	ldr	r0, [r3, #0]
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	24000158 	.word	0x24000158

08017ff0 <__libc_init_array>:
 8017ff0:	b570      	push	{r4, r5, r6, lr}
 8017ff2:	4d0d      	ldr	r5, [pc, #52]	; (8018028 <__libc_init_array+0x38>)
 8017ff4:	4c0d      	ldr	r4, [pc, #52]	; (801802c <__libc_init_array+0x3c>)
 8017ff6:	1b64      	subs	r4, r4, r5
 8017ff8:	10a4      	asrs	r4, r4, #2
 8017ffa:	2600      	movs	r6, #0
 8017ffc:	42a6      	cmp	r6, r4
 8017ffe:	d109      	bne.n	8018014 <__libc_init_array+0x24>
 8018000:	4d0b      	ldr	r5, [pc, #44]	; (8018030 <__libc_init_array+0x40>)
 8018002:	4c0c      	ldr	r4, [pc, #48]	; (8018034 <__libc_init_array+0x44>)
 8018004:	f004 fac4 	bl	801c590 <_init>
 8018008:	1b64      	subs	r4, r4, r5
 801800a:	10a4      	asrs	r4, r4, #2
 801800c:	2600      	movs	r6, #0
 801800e:	42a6      	cmp	r6, r4
 8018010:	d105      	bne.n	801801e <__libc_init_array+0x2e>
 8018012:	bd70      	pop	{r4, r5, r6, pc}
 8018014:	f855 3b04 	ldr.w	r3, [r5], #4
 8018018:	4798      	blx	r3
 801801a:	3601      	adds	r6, #1
 801801c:	e7ee      	b.n	8017ffc <__libc_init_array+0xc>
 801801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018022:	4798      	blx	r3
 8018024:	3601      	adds	r6, #1
 8018026:	e7f2      	b.n	801800e <__libc_init_array+0x1e>
 8018028:	0801cf78 	.word	0x0801cf78
 801802c:	0801cf78 	.word	0x0801cf78
 8018030:	0801cf78 	.word	0x0801cf78
 8018034:	0801cf7c 	.word	0x0801cf7c

08018038 <__retarget_lock_init_recursive>:
 8018038:	4770      	bx	lr

0801803a <__retarget_lock_acquire_recursive>:
 801803a:	4770      	bx	lr

0801803c <__retarget_lock_release_recursive>:
 801803c:	4770      	bx	lr

0801803e <memcpy>:
 801803e:	440a      	add	r2, r1
 8018040:	4291      	cmp	r1, r2
 8018042:	f100 33ff 	add.w	r3, r0, #4294967295
 8018046:	d100      	bne.n	801804a <memcpy+0xc>
 8018048:	4770      	bx	lr
 801804a:	b510      	push	{r4, lr}
 801804c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018054:	4291      	cmp	r1, r2
 8018056:	d1f9      	bne.n	801804c <memcpy+0xe>
 8018058:	bd10      	pop	{r4, pc}
	...

0801805c <nanf>:
 801805c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018064 <nanf+0x8>
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop
 8018064:	7fc00000 	.word	0x7fc00000

08018068 <quorem>:
 8018068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806c:	6903      	ldr	r3, [r0, #16]
 801806e:	690c      	ldr	r4, [r1, #16]
 8018070:	42a3      	cmp	r3, r4
 8018072:	4607      	mov	r7, r0
 8018074:	db7e      	blt.n	8018174 <quorem+0x10c>
 8018076:	3c01      	subs	r4, #1
 8018078:	f101 0814 	add.w	r8, r1, #20
 801807c:	f100 0514 	add.w	r5, r0, #20
 8018080:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018084:	9301      	str	r3, [sp, #4]
 8018086:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801808a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801808e:	3301      	adds	r3, #1
 8018090:	429a      	cmp	r2, r3
 8018092:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018096:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801809a:	fbb2 f6f3 	udiv	r6, r2, r3
 801809e:	d331      	bcc.n	8018104 <quorem+0x9c>
 80180a0:	f04f 0e00 	mov.w	lr, #0
 80180a4:	4640      	mov	r0, r8
 80180a6:	46ac      	mov	ip, r5
 80180a8:	46f2      	mov	sl, lr
 80180aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80180ae:	b293      	uxth	r3, r2
 80180b0:	fb06 e303 	mla	r3, r6, r3, lr
 80180b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80180b8:	0c1a      	lsrs	r2, r3, #16
 80180ba:	b29b      	uxth	r3, r3
 80180bc:	ebaa 0303 	sub.w	r3, sl, r3
 80180c0:	f8dc a000 	ldr.w	sl, [ip]
 80180c4:	fa13 f38a 	uxtah	r3, r3, sl
 80180c8:	fb06 220e 	mla	r2, r6, lr, r2
 80180cc:	9300      	str	r3, [sp, #0]
 80180ce:	9b00      	ldr	r3, [sp, #0]
 80180d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80180d4:	b292      	uxth	r2, r2
 80180d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80180da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180de:	f8bd 3000 	ldrh.w	r3, [sp]
 80180e2:	4581      	cmp	r9, r0
 80180e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180e8:	f84c 3b04 	str.w	r3, [ip], #4
 80180ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80180f0:	d2db      	bcs.n	80180aa <quorem+0x42>
 80180f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80180f6:	b92b      	cbnz	r3, 8018104 <quorem+0x9c>
 80180f8:	9b01      	ldr	r3, [sp, #4]
 80180fa:	3b04      	subs	r3, #4
 80180fc:	429d      	cmp	r5, r3
 80180fe:	461a      	mov	r2, r3
 8018100:	d32c      	bcc.n	801815c <quorem+0xf4>
 8018102:	613c      	str	r4, [r7, #16]
 8018104:	4638      	mov	r0, r7
 8018106:	f001 f969 	bl	80193dc <__mcmp>
 801810a:	2800      	cmp	r0, #0
 801810c:	db22      	blt.n	8018154 <quorem+0xec>
 801810e:	3601      	adds	r6, #1
 8018110:	4629      	mov	r1, r5
 8018112:	2000      	movs	r0, #0
 8018114:	f858 2b04 	ldr.w	r2, [r8], #4
 8018118:	f8d1 c000 	ldr.w	ip, [r1]
 801811c:	b293      	uxth	r3, r2
 801811e:	1ac3      	subs	r3, r0, r3
 8018120:	0c12      	lsrs	r2, r2, #16
 8018122:	fa13 f38c 	uxtah	r3, r3, ip
 8018126:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801812a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801812e:	b29b      	uxth	r3, r3
 8018130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018134:	45c1      	cmp	r9, r8
 8018136:	f841 3b04 	str.w	r3, [r1], #4
 801813a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801813e:	d2e9      	bcs.n	8018114 <quorem+0xac>
 8018140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018148:	b922      	cbnz	r2, 8018154 <quorem+0xec>
 801814a:	3b04      	subs	r3, #4
 801814c:	429d      	cmp	r5, r3
 801814e:	461a      	mov	r2, r3
 8018150:	d30a      	bcc.n	8018168 <quorem+0x100>
 8018152:	613c      	str	r4, [r7, #16]
 8018154:	4630      	mov	r0, r6
 8018156:	b003      	add	sp, #12
 8018158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815c:	6812      	ldr	r2, [r2, #0]
 801815e:	3b04      	subs	r3, #4
 8018160:	2a00      	cmp	r2, #0
 8018162:	d1ce      	bne.n	8018102 <quorem+0x9a>
 8018164:	3c01      	subs	r4, #1
 8018166:	e7c9      	b.n	80180fc <quorem+0x94>
 8018168:	6812      	ldr	r2, [r2, #0]
 801816a:	3b04      	subs	r3, #4
 801816c:	2a00      	cmp	r2, #0
 801816e:	d1f0      	bne.n	8018152 <quorem+0xea>
 8018170:	3c01      	subs	r4, #1
 8018172:	e7eb      	b.n	801814c <quorem+0xe4>
 8018174:	2000      	movs	r0, #0
 8018176:	e7ee      	b.n	8018156 <quorem+0xee>

08018178 <_dtoa_r>:
 8018178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801817c:	ed2d 8b02 	vpush	{d8}
 8018180:	69c5      	ldr	r5, [r0, #28]
 8018182:	b091      	sub	sp, #68	; 0x44
 8018184:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018188:	ec59 8b10 	vmov	r8, r9, d0
 801818c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801818e:	9106      	str	r1, [sp, #24]
 8018190:	4606      	mov	r6, r0
 8018192:	9208      	str	r2, [sp, #32]
 8018194:	930c      	str	r3, [sp, #48]	; 0x30
 8018196:	b975      	cbnz	r5, 80181b6 <_dtoa_r+0x3e>
 8018198:	2010      	movs	r0, #16
 801819a:	f000 fda5 	bl	8018ce8 <malloc>
 801819e:	4602      	mov	r2, r0
 80181a0:	61f0      	str	r0, [r6, #28]
 80181a2:	b920      	cbnz	r0, 80181ae <_dtoa_r+0x36>
 80181a4:	4ba6      	ldr	r3, [pc, #664]	; (8018440 <_dtoa_r+0x2c8>)
 80181a6:	21ef      	movs	r1, #239	; 0xef
 80181a8:	48a6      	ldr	r0, [pc, #664]	; (8018444 <_dtoa_r+0x2cc>)
 80181aa:	f002 fb9d 	bl	801a8e8 <__assert_func>
 80181ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80181b2:	6005      	str	r5, [r0, #0]
 80181b4:	60c5      	str	r5, [r0, #12]
 80181b6:	69f3      	ldr	r3, [r6, #28]
 80181b8:	6819      	ldr	r1, [r3, #0]
 80181ba:	b151      	cbz	r1, 80181d2 <_dtoa_r+0x5a>
 80181bc:	685a      	ldr	r2, [r3, #4]
 80181be:	604a      	str	r2, [r1, #4]
 80181c0:	2301      	movs	r3, #1
 80181c2:	4093      	lsls	r3, r2
 80181c4:	608b      	str	r3, [r1, #8]
 80181c6:	4630      	mov	r0, r6
 80181c8:	f000 fe82 	bl	8018ed0 <_Bfree>
 80181cc:	69f3      	ldr	r3, [r6, #28]
 80181ce:	2200      	movs	r2, #0
 80181d0:	601a      	str	r2, [r3, #0]
 80181d2:	f1b9 0300 	subs.w	r3, r9, #0
 80181d6:	bfbb      	ittet	lt
 80181d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80181dc:	9303      	strlt	r3, [sp, #12]
 80181de:	2300      	movge	r3, #0
 80181e0:	2201      	movlt	r2, #1
 80181e2:	bfac      	ite	ge
 80181e4:	6023      	strge	r3, [r4, #0]
 80181e6:	6022      	strlt	r2, [r4, #0]
 80181e8:	4b97      	ldr	r3, [pc, #604]	; (8018448 <_dtoa_r+0x2d0>)
 80181ea:	9c03      	ldr	r4, [sp, #12]
 80181ec:	43a3      	bics	r3, r4
 80181ee:	d11c      	bne.n	801822a <_dtoa_r+0xb2>
 80181f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80181f6:	6013      	str	r3, [r2, #0]
 80181f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80181fc:	ea53 0308 	orrs.w	r3, r3, r8
 8018200:	f000 84fb 	beq.w	8018bfa <_dtoa_r+0xa82>
 8018204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018206:	b963      	cbnz	r3, 8018222 <_dtoa_r+0xaa>
 8018208:	4b90      	ldr	r3, [pc, #576]	; (801844c <_dtoa_r+0x2d4>)
 801820a:	e020      	b.n	801824e <_dtoa_r+0xd6>
 801820c:	4b90      	ldr	r3, [pc, #576]	; (8018450 <_dtoa_r+0x2d8>)
 801820e:	9301      	str	r3, [sp, #4]
 8018210:	3308      	adds	r3, #8
 8018212:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018214:	6013      	str	r3, [r2, #0]
 8018216:	9801      	ldr	r0, [sp, #4]
 8018218:	b011      	add	sp, #68	; 0x44
 801821a:	ecbd 8b02 	vpop	{d8}
 801821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018222:	4b8a      	ldr	r3, [pc, #552]	; (801844c <_dtoa_r+0x2d4>)
 8018224:	9301      	str	r3, [sp, #4]
 8018226:	3303      	adds	r3, #3
 8018228:	e7f3      	b.n	8018212 <_dtoa_r+0x9a>
 801822a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801822e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018236:	d10c      	bne.n	8018252 <_dtoa_r+0xda>
 8018238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801823a:	2301      	movs	r3, #1
 801823c:	6013      	str	r3, [r2, #0]
 801823e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018240:	2b00      	cmp	r3, #0
 8018242:	f000 84d7 	beq.w	8018bf4 <_dtoa_r+0xa7c>
 8018246:	4b83      	ldr	r3, [pc, #524]	; (8018454 <_dtoa_r+0x2dc>)
 8018248:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801824a:	6013      	str	r3, [r2, #0]
 801824c:	3b01      	subs	r3, #1
 801824e:	9301      	str	r3, [sp, #4]
 8018250:	e7e1      	b.n	8018216 <_dtoa_r+0x9e>
 8018252:	aa0e      	add	r2, sp, #56	; 0x38
 8018254:	a90f      	add	r1, sp, #60	; 0x3c
 8018256:	4630      	mov	r0, r6
 8018258:	eeb0 0b48 	vmov.f64	d0, d8
 801825c:	f001 f9d4 	bl	8019608 <__d2b>
 8018260:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018266:	4605      	mov	r5, r0
 8018268:	2b00      	cmp	r3, #0
 801826a:	d046      	beq.n	80182fa <_dtoa_r+0x182>
 801826c:	eeb0 7b48 	vmov.f64	d7, d8
 8018270:	ee18 1a90 	vmov	r1, s17
 8018274:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018278:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801827c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018280:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018284:	2000      	movs	r0, #0
 8018286:	ee07 1a90 	vmov	s15, r1
 801828a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801828e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018428 <_dtoa_r+0x2b0>
 8018292:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018296:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018430 <_dtoa_r+0x2b8>
 801829a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801829e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018438 <_dtoa_r+0x2c0>
 80182a2:	ee07 3a90 	vmov	s15, r3
 80182a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80182aa:	eeb0 7b46 	vmov.f64	d7, d6
 80182ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80182b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80182b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80182ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182be:	ee16 ba90 	vmov	fp, s13
 80182c2:	9009      	str	r0, [sp, #36]	; 0x24
 80182c4:	d508      	bpl.n	80182d8 <_dtoa_r+0x160>
 80182c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80182ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80182ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d2:	bf18      	it	ne
 80182d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80182d8:	f1bb 0f16 	cmp.w	fp, #22
 80182dc:	d82b      	bhi.n	8018336 <_dtoa_r+0x1be>
 80182de:	495e      	ldr	r1, [pc, #376]	; (8018458 <_dtoa_r+0x2e0>)
 80182e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80182e4:	ed91 7b00 	vldr	d7, [r1]
 80182e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80182ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182f0:	d501      	bpl.n	80182f6 <_dtoa_r+0x17e>
 80182f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80182f6:	2100      	movs	r1, #0
 80182f8:	e01e      	b.n	8018338 <_dtoa_r+0x1c0>
 80182fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182fc:	4413      	add	r3, r2
 80182fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8018302:	2920      	cmp	r1, #32
 8018304:	bfc1      	itttt	gt
 8018306:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801830a:	408c      	lslgt	r4, r1
 801830c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8018310:	fa28 f101 	lsrgt.w	r1, r8, r1
 8018314:	bfd6      	itet	le
 8018316:	f1c1 0120 	rsble	r1, r1, #32
 801831a:	4321      	orrgt	r1, r4
 801831c:	fa08 f101 	lslle.w	r1, r8, r1
 8018320:	ee07 1a90 	vmov	s15, r1
 8018324:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018328:	3b01      	subs	r3, #1
 801832a:	ee17 1a90 	vmov	r1, s15
 801832e:	2001      	movs	r0, #1
 8018330:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018334:	e7a7      	b.n	8018286 <_dtoa_r+0x10e>
 8018336:	2101      	movs	r1, #1
 8018338:	1ad2      	subs	r2, r2, r3
 801833a:	1e53      	subs	r3, r2, #1
 801833c:	9305      	str	r3, [sp, #20]
 801833e:	bf45      	ittet	mi
 8018340:	f1c2 0301 	rsbmi	r3, r2, #1
 8018344:	9304      	strmi	r3, [sp, #16]
 8018346:	2300      	movpl	r3, #0
 8018348:	2300      	movmi	r3, #0
 801834a:	bf4c      	ite	mi
 801834c:	9305      	strmi	r3, [sp, #20]
 801834e:	9304      	strpl	r3, [sp, #16]
 8018350:	f1bb 0f00 	cmp.w	fp, #0
 8018354:	910b      	str	r1, [sp, #44]	; 0x2c
 8018356:	db18      	blt.n	801838a <_dtoa_r+0x212>
 8018358:	9b05      	ldr	r3, [sp, #20]
 801835a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801835e:	445b      	add	r3, fp
 8018360:	9305      	str	r3, [sp, #20]
 8018362:	2300      	movs	r3, #0
 8018364:	9a06      	ldr	r2, [sp, #24]
 8018366:	2a09      	cmp	r2, #9
 8018368:	d848      	bhi.n	80183fc <_dtoa_r+0x284>
 801836a:	2a05      	cmp	r2, #5
 801836c:	bfc4      	itt	gt
 801836e:	3a04      	subgt	r2, #4
 8018370:	9206      	strgt	r2, [sp, #24]
 8018372:	9a06      	ldr	r2, [sp, #24]
 8018374:	f1a2 0202 	sub.w	r2, r2, #2
 8018378:	bfcc      	ite	gt
 801837a:	2400      	movgt	r4, #0
 801837c:	2401      	movle	r4, #1
 801837e:	2a03      	cmp	r2, #3
 8018380:	d847      	bhi.n	8018412 <_dtoa_r+0x29a>
 8018382:	e8df f002 	tbb	[pc, r2]
 8018386:	2d0b      	.short	0x2d0b
 8018388:	392b      	.short	0x392b
 801838a:	9b04      	ldr	r3, [sp, #16]
 801838c:	2200      	movs	r2, #0
 801838e:	eba3 030b 	sub.w	r3, r3, fp
 8018392:	9304      	str	r3, [sp, #16]
 8018394:	920a      	str	r2, [sp, #40]	; 0x28
 8018396:	f1cb 0300 	rsb	r3, fp, #0
 801839a:	e7e3      	b.n	8018364 <_dtoa_r+0x1ec>
 801839c:	2200      	movs	r2, #0
 801839e:	9207      	str	r2, [sp, #28]
 80183a0:	9a08      	ldr	r2, [sp, #32]
 80183a2:	2a00      	cmp	r2, #0
 80183a4:	dc38      	bgt.n	8018418 <_dtoa_r+0x2a0>
 80183a6:	f04f 0a01 	mov.w	sl, #1
 80183aa:	46d1      	mov	r9, sl
 80183ac:	4652      	mov	r2, sl
 80183ae:	f8cd a020 	str.w	sl, [sp, #32]
 80183b2:	69f7      	ldr	r7, [r6, #28]
 80183b4:	2100      	movs	r1, #0
 80183b6:	2004      	movs	r0, #4
 80183b8:	f100 0c14 	add.w	ip, r0, #20
 80183bc:	4594      	cmp	ip, r2
 80183be:	d930      	bls.n	8018422 <_dtoa_r+0x2aa>
 80183c0:	6079      	str	r1, [r7, #4]
 80183c2:	4630      	mov	r0, r6
 80183c4:	930d      	str	r3, [sp, #52]	; 0x34
 80183c6:	f000 fd43 	bl	8018e50 <_Balloc>
 80183ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183cc:	9001      	str	r0, [sp, #4]
 80183ce:	4602      	mov	r2, r0
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d145      	bne.n	8018460 <_dtoa_r+0x2e8>
 80183d4:	4b21      	ldr	r3, [pc, #132]	; (801845c <_dtoa_r+0x2e4>)
 80183d6:	f240 11af 	movw	r1, #431	; 0x1af
 80183da:	e6e5      	b.n	80181a8 <_dtoa_r+0x30>
 80183dc:	2201      	movs	r2, #1
 80183de:	e7de      	b.n	801839e <_dtoa_r+0x226>
 80183e0:	2200      	movs	r2, #0
 80183e2:	9207      	str	r2, [sp, #28]
 80183e4:	9a08      	ldr	r2, [sp, #32]
 80183e6:	eb0b 0a02 	add.w	sl, fp, r2
 80183ea:	f10a 0901 	add.w	r9, sl, #1
 80183ee:	464a      	mov	r2, r9
 80183f0:	2a01      	cmp	r2, #1
 80183f2:	bfb8      	it	lt
 80183f4:	2201      	movlt	r2, #1
 80183f6:	e7dc      	b.n	80183b2 <_dtoa_r+0x23a>
 80183f8:	2201      	movs	r2, #1
 80183fa:	e7f2      	b.n	80183e2 <_dtoa_r+0x26a>
 80183fc:	2401      	movs	r4, #1
 80183fe:	2200      	movs	r2, #0
 8018400:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8018404:	f04f 3aff 	mov.w	sl, #4294967295
 8018408:	2100      	movs	r1, #0
 801840a:	46d1      	mov	r9, sl
 801840c:	2212      	movs	r2, #18
 801840e:	9108      	str	r1, [sp, #32]
 8018410:	e7cf      	b.n	80183b2 <_dtoa_r+0x23a>
 8018412:	2201      	movs	r2, #1
 8018414:	9207      	str	r2, [sp, #28]
 8018416:	e7f5      	b.n	8018404 <_dtoa_r+0x28c>
 8018418:	f8dd a020 	ldr.w	sl, [sp, #32]
 801841c:	46d1      	mov	r9, sl
 801841e:	4652      	mov	r2, sl
 8018420:	e7c7      	b.n	80183b2 <_dtoa_r+0x23a>
 8018422:	3101      	adds	r1, #1
 8018424:	0040      	lsls	r0, r0, #1
 8018426:	e7c7      	b.n	80183b8 <_dtoa_r+0x240>
 8018428:	636f4361 	.word	0x636f4361
 801842c:	3fd287a7 	.word	0x3fd287a7
 8018430:	8b60c8b3 	.word	0x8b60c8b3
 8018434:	3fc68a28 	.word	0x3fc68a28
 8018438:	509f79fb 	.word	0x509f79fb
 801843c:	3fd34413 	.word	0x3fd34413
 8018440:	0801c9b6 	.word	0x0801c9b6
 8018444:	0801c9cd 	.word	0x0801c9cd
 8018448:	7ff00000 	.word	0x7ff00000
 801844c:	0801c9b2 	.word	0x0801c9b2
 8018450:	0801c9a9 	.word	0x0801c9a9
 8018454:	0801c981 	.word	0x0801c981
 8018458:	0801cab8 	.word	0x0801cab8
 801845c:	0801ca25 	.word	0x0801ca25
 8018460:	69f2      	ldr	r2, [r6, #28]
 8018462:	9901      	ldr	r1, [sp, #4]
 8018464:	6011      	str	r1, [r2, #0]
 8018466:	f1b9 0f0e 	cmp.w	r9, #14
 801846a:	d86c      	bhi.n	8018546 <_dtoa_r+0x3ce>
 801846c:	2c00      	cmp	r4, #0
 801846e:	d06a      	beq.n	8018546 <_dtoa_r+0x3ce>
 8018470:	f1bb 0f00 	cmp.w	fp, #0
 8018474:	f340 80a0 	ble.w	80185b8 <_dtoa_r+0x440>
 8018478:	4ac1      	ldr	r2, [pc, #772]	; (8018780 <_dtoa_r+0x608>)
 801847a:	f00b 010f 	and.w	r1, fp, #15
 801847e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018482:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018486:	ed92 7b00 	vldr	d7, [r2]
 801848a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801848e:	f000 8087 	beq.w	80185a0 <_dtoa_r+0x428>
 8018492:	49bc      	ldr	r1, [pc, #752]	; (8018784 <_dtoa_r+0x60c>)
 8018494:	ed91 6b08 	vldr	d6, [r1, #32]
 8018498:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801849c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80184a0:	f002 020f 	and.w	r2, r2, #15
 80184a4:	2103      	movs	r1, #3
 80184a6:	48b7      	ldr	r0, [pc, #732]	; (8018784 <_dtoa_r+0x60c>)
 80184a8:	2a00      	cmp	r2, #0
 80184aa:	d17b      	bne.n	80185a4 <_dtoa_r+0x42c>
 80184ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80184b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80184b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80184ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80184be:	2a00      	cmp	r2, #0
 80184c0:	f000 80a0 	beq.w	8018604 <_dtoa_r+0x48c>
 80184c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80184c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80184cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d0:	f140 8098 	bpl.w	8018604 <_dtoa_r+0x48c>
 80184d4:	f1b9 0f00 	cmp.w	r9, #0
 80184d8:	f000 8094 	beq.w	8018604 <_dtoa_r+0x48c>
 80184dc:	f1ba 0f00 	cmp.w	sl, #0
 80184e0:	dd2f      	ble.n	8018542 <_dtoa_r+0x3ca>
 80184e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80184e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184ee:	f10b 32ff 	add.w	r2, fp, #4294967295
 80184f2:	3101      	adds	r1, #1
 80184f4:	4654      	mov	r4, sl
 80184f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80184fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80184fe:	ee07 1a90 	vmov	s15, r1
 8018502:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018506:	eea7 5b06 	vfma.f64	d5, d7, d6
 801850a:	ee15 7a90 	vmov	r7, s11
 801850e:	ec51 0b15 	vmov	r0, r1, d5
 8018512:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8018516:	2c00      	cmp	r4, #0
 8018518:	d177      	bne.n	801860a <_dtoa_r+0x492>
 801851a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801851e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018522:	ec41 0b17 	vmov	d7, r0, r1
 8018526:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801852e:	f300 826a 	bgt.w	8018a06 <_dtoa_r+0x88e>
 8018532:	eeb1 7b47 	vneg.f64	d7, d7
 8018536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801853e:	f100 8260 	bmi.w	8018a02 <_dtoa_r+0x88a>
 8018542:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018548:	2a00      	cmp	r2, #0
 801854a:	f2c0 811d 	blt.w	8018788 <_dtoa_r+0x610>
 801854e:	f1bb 0f0e 	cmp.w	fp, #14
 8018552:	f300 8119 	bgt.w	8018788 <_dtoa_r+0x610>
 8018556:	4b8a      	ldr	r3, [pc, #552]	; (8018780 <_dtoa_r+0x608>)
 8018558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801855c:	ed93 6b00 	vldr	d6, [r3]
 8018560:	9b08      	ldr	r3, [sp, #32]
 8018562:	2b00      	cmp	r3, #0
 8018564:	f280 80b7 	bge.w	80186d6 <_dtoa_r+0x55e>
 8018568:	f1b9 0f00 	cmp.w	r9, #0
 801856c:	f300 80b3 	bgt.w	80186d6 <_dtoa_r+0x55e>
 8018570:	f040 8246 	bne.w	8018a00 <_dtoa_r+0x888>
 8018574:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018578:	ee26 6b07 	vmul.f64	d6, d6, d7
 801857c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018580:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018588:	464c      	mov	r4, r9
 801858a:	464f      	mov	r7, r9
 801858c:	f280 821c 	bge.w	80189c8 <_dtoa_r+0x850>
 8018590:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018594:	2331      	movs	r3, #49	; 0x31
 8018596:	f808 3b01 	strb.w	r3, [r8], #1
 801859a:	f10b 0b01 	add.w	fp, fp, #1
 801859e:	e218      	b.n	80189d2 <_dtoa_r+0x85a>
 80185a0:	2102      	movs	r1, #2
 80185a2:	e780      	b.n	80184a6 <_dtoa_r+0x32e>
 80185a4:	07d4      	lsls	r4, r2, #31
 80185a6:	d504      	bpl.n	80185b2 <_dtoa_r+0x43a>
 80185a8:	ed90 6b00 	vldr	d6, [r0]
 80185ac:	3101      	adds	r1, #1
 80185ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80185b2:	1052      	asrs	r2, r2, #1
 80185b4:	3008      	adds	r0, #8
 80185b6:	e777      	b.n	80184a8 <_dtoa_r+0x330>
 80185b8:	d022      	beq.n	8018600 <_dtoa_r+0x488>
 80185ba:	f1cb 0200 	rsb	r2, fp, #0
 80185be:	4970      	ldr	r1, [pc, #448]	; (8018780 <_dtoa_r+0x608>)
 80185c0:	f002 000f 	and.w	r0, r2, #15
 80185c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80185c8:	ed91 7b00 	vldr	d7, [r1]
 80185cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80185d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80185d4:	486b      	ldr	r0, [pc, #428]	; (8018784 <_dtoa_r+0x60c>)
 80185d6:	1112      	asrs	r2, r2, #4
 80185d8:	2400      	movs	r4, #0
 80185da:	2102      	movs	r1, #2
 80185dc:	b92a      	cbnz	r2, 80185ea <_dtoa_r+0x472>
 80185de:	2c00      	cmp	r4, #0
 80185e0:	f43f af6a 	beq.w	80184b8 <_dtoa_r+0x340>
 80185e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80185e8:	e766      	b.n	80184b8 <_dtoa_r+0x340>
 80185ea:	07d7      	lsls	r7, r2, #31
 80185ec:	d505      	bpl.n	80185fa <_dtoa_r+0x482>
 80185ee:	ed90 6b00 	vldr	d6, [r0]
 80185f2:	3101      	adds	r1, #1
 80185f4:	2401      	movs	r4, #1
 80185f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80185fa:	1052      	asrs	r2, r2, #1
 80185fc:	3008      	adds	r0, #8
 80185fe:	e7ed      	b.n	80185dc <_dtoa_r+0x464>
 8018600:	2102      	movs	r1, #2
 8018602:	e759      	b.n	80184b8 <_dtoa_r+0x340>
 8018604:	465a      	mov	r2, fp
 8018606:	464c      	mov	r4, r9
 8018608:	e775      	b.n	80184f6 <_dtoa_r+0x37e>
 801860a:	ec41 0b17 	vmov	d7, r0, r1
 801860e:	495c      	ldr	r1, [pc, #368]	; (8018780 <_dtoa_r+0x608>)
 8018610:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8018614:	ed11 4b02 	vldr	d4, [r1, #-8]
 8018618:	9901      	ldr	r1, [sp, #4]
 801861a:	440c      	add	r4, r1
 801861c:	9907      	ldr	r1, [sp, #28]
 801861e:	b351      	cbz	r1, 8018676 <_dtoa_r+0x4fe>
 8018620:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018624:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018628:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801862c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018630:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018634:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018638:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801863c:	ee14 1a90 	vmov	r1, s9
 8018640:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018644:	3130      	adds	r1, #48	; 0x30
 8018646:	ee36 6b45 	vsub.f64	d6, d6, d5
 801864a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018652:	f808 1b01 	strb.w	r1, [r8], #1
 8018656:	d439      	bmi.n	80186cc <_dtoa_r+0x554>
 8018658:	ee32 5b46 	vsub.f64	d5, d2, d6
 801865c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018664:	d472      	bmi.n	801874c <_dtoa_r+0x5d4>
 8018666:	45a0      	cmp	r8, r4
 8018668:	f43f af6b 	beq.w	8018542 <_dtoa_r+0x3ca>
 801866c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018670:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018674:	e7e0      	b.n	8018638 <_dtoa_r+0x4c0>
 8018676:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801867a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801867e:	4620      	mov	r0, r4
 8018680:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018684:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018688:	ee14 1a90 	vmov	r1, s9
 801868c:	3130      	adds	r1, #48	; 0x30
 801868e:	f808 1b01 	strb.w	r1, [r8], #1
 8018692:	45a0      	cmp	r8, r4
 8018694:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018698:	ee36 6b45 	vsub.f64	d6, d6, d5
 801869c:	d118      	bne.n	80186d0 <_dtoa_r+0x558>
 801869e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80186a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80186a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80186aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ae:	dc4d      	bgt.n	801874c <_dtoa_r+0x5d4>
 80186b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80186b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80186b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186bc:	f57f af41 	bpl.w	8018542 <_dtoa_r+0x3ca>
 80186c0:	4680      	mov	r8, r0
 80186c2:	3801      	subs	r0, #1
 80186c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80186c8:	2b30      	cmp	r3, #48	; 0x30
 80186ca:	d0f9      	beq.n	80186c0 <_dtoa_r+0x548>
 80186cc:	4693      	mov	fp, r2
 80186ce:	e02a      	b.n	8018726 <_dtoa_r+0x5ae>
 80186d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80186d4:	e7d6      	b.n	8018684 <_dtoa_r+0x50c>
 80186d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80186da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80186de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80186e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80186e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80186ea:	ee15 3a10 	vmov	r3, s10
 80186ee:	3330      	adds	r3, #48	; 0x30
 80186f0:	f808 3b01 	strb.w	r3, [r8], #1
 80186f4:	9b01      	ldr	r3, [sp, #4]
 80186f6:	eba8 0303 	sub.w	r3, r8, r3
 80186fa:	4599      	cmp	r9, r3
 80186fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018700:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018704:	d133      	bne.n	801876e <_dtoa_r+0x5f6>
 8018706:	ee37 7b07 	vadd.f64	d7, d7, d7
 801870a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018712:	dc1a      	bgt.n	801874a <_dtoa_r+0x5d2>
 8018714:	eeb4 7b46 	vcmp.f64	d7, d6
 8018718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801871c:	d103      	bne.n	8018726 <_dtoa_r+0x5ae>
 801871e:	ee15 3a10 	vmov	r3, s10
 8018722:	07d9      	lsls	r1, r3, #31
 8018724:	d411      	bmi.n	801874a <_dtoa_r+0x5d2>
 8018726:	4629      	mov	r1, r5
 8018728:	4630      	mov	r0, r6
 801872a:	f000 fbd1 	bl	8018ed0 <_Bfree>
 801872e:	2300      	movs	r3, #0
 8018730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018732:	f888 3000 	strb.w	r3, [r8]
 8018736:	f10b 0301 	add.w	r3, fp, #1
 801873a:	6013      	str	r3, [r2, #0]
 801873c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801873e:	2b00      	cmp	r3, #0
 8018740:	f43f ad69 	beq.w	8018216 <_dtoa_r+0x9e>
 8018744:	f8c3 8000 	str.w	r8, [r3]
 8018748:	e565      	b.n	8018216 <_dtoa_r+0x9e>
 801874a:	465a      	mov	r2, fp
 801874c:	4643      	mov	r3, r8
 801874e:	4698      	mov	r8, r3
 8018750:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8018754:	2939      	cmp	r1, #57	; 0x39
 8018756:	d106      	bne.n	8018766 <_dtoa_r+0x5ee>
 8018758:	9901      	ldr	r1, [sp, #4]
 801875a:	4299      	cmp	r1, r3
 801875c:	d1f7      	bne.n	801874e <_dtoa_r+0x5d6>
 801875e:	9801      	ldr	r0, [sp, #4]
 8018760:	2130      	movs	r1, #48	; 0x30
 8018762:	3201      	adds	r2, #1
 8018764:	7001      	strb	r1, [r0, #0]
 8018766:	7819      	ldrb	r1, [r3, #0]
 8018768:	3101      	adds	r1, #1
 801876a:	7019      	strb	r1, [r3, #0]
 801876c:	e7ae      	b.n	80186cc <_dtoa_r+0x554>
 801876e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018772:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801877a:	d1b2      	bne.n	80186e2 <_dtoa_r+0x56a>
 801877c:	e7d3      	b.n	8018726 <_dtoa_r+0x5ae>
 801877e:	bf00      	nop
 8018780:	0801cab8 	.word	0x0801cab8
 8018784:	0801ca90 	.word	0x0801ca90
 8018788:	9907      	ldr	r1, [sp, #28]
 801878a:	2900      	cmp	r1, #0
 801878c:	f000 80d0 	beq.w	8018930 <_dtoa_r+0x7b8>
 8018790:	9906      	ldr	r1, [sp, #24]
 8018792:	2901      	cmp	r1, #1
 8018794:	f300 80b4 	bgt.w	8018900 <_dtoa_r+0x788>
 8018798:	9909      	ldr	r1, [sp, #36]	; 0x24
 801879a:	2900      	cmp	r1, #0
 801879c:	f000 80ac 	beq.w	80188f8 <_dtoa_r+0x780>
 80187a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80187a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80187a8:	461c      	mov	r4, r3
 80187aa:	9309      	str	r3, [sp, #36]	; 0x24
 80187ac:	9b04      	ldr	r3, [sp, #16]
 80187ae:	4413      	add	r3, r2
 80187b0:	9304      	str	r3, [sp, #16]
 80187b2:	9b05      	ldr	r3, [sp, #20]
 80187b4:	2101      	movs	r1, #1
 80187b6:	4413      	add	r3, r2
 80187b8:	4630      	mov	r0, r6
 80187ba:	9305      	str	r3, [sp, #20]
 80187bc:	f000 fc88 	bl	80190d0 <__i2b>
 80187c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187c2:	4607      	mov	r7, r0
 80187c4:	f1b8 0f00 	cmp.w	r8, #0
 80187c8:	d00d      	beq.n	80187e6 <_dtoa_r+0x66e>
 80187ca:	9a05      	ldr	r2, [sp, #20]
 80187cc:	2a00      	cmp	r2, #0
 80187ce:	dd0a      	ble.n	80187e6 <_dtoa_r+0x66e>
 80187d0:	4542      	cmp	r2, r8
 80187d2:	9904      	ldr	r1, [sp, #16]
 80187d4:	bfa8      	it	ge
 80187d6:	4642      	movge	r2, r8
 80187d8:	1a89      	subs	r1, r1, r2
 80187da:	9104      	str	r1, [sp, #16]
 80187dc:	9905      	ldr	r1, [sp, #20]
 80187de:	eba8 0802 	sub.w	r8, r8, r2
 80187e2:	1a8a      	subs	r2, r1, r2
 80187e4:	9205      	str	r2, [sp, #20]
 80187e6:	b303      	cbz	r3, 801882a <_dtoa_r+0x6b2>
 80187e8:	9a07      	ldr	r2, [sp, #28]
 80187ea:	2a00      	cmp	r2, #0
 80187ec:	f000 80a5 	beq.w	801893a <_dtoa_r+0x7c2>
 80187f0:	2c00      	cmp	r4, #0
 80187f2:	dd13      	ble.n	801881c <_dtoa_r+0x6a4>
 80187f4:	4639      	mov	r1, r7
 80187f6:	4622      	mov	r2, r4
 80187f8:	4630      	mov	r0, r6
 80187fa:	930d      	str	r3, [sp, #52]	; 0x34
 80187fc:	f000 fd28 	bl	8019250 <__pow5mult>
 8018800:	462a      	mov	r2, r5
 8018802:	4601      	mov	r1, r0
 8018804:	4607      	mov	r7, r0
 8018806:	4630      	mov	r0, r6
 8018808:	f000 fc78 	bl	80190fc <__multiply>
 801880c:	4629      	mov	r1, r5
 801880e:	9009      	str	r0, [sp, #36]	; 0x24
 8018810:	4630      	mov	r0, r6
 8018812:	f000 fb5d 	bl	8018ed0 <_Bfree>
 8018816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801881a:	4615      	mov	r5, r2
 801881c:	1b1a      	subs	r2, r3, r4
 801881e:	d004      	beq.n	801882a <_dtoa_r+0x6b2>
 8018820:	4629      	mov	r1, r5
 8018822:	4630      	mov	r0, r6
 8018824:	f000 fd14 	bl	8019250 <__pow5mult>
 8018828:	4605      	mov	r5, r0
 801882a:	2101      	movs	r1, #1
 801882c:	4630      	mov	r0, r6
 801882e:	f000 fc4f 	bl	80190d0 <__i2b>
 8018832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018834:	2b00      	cmp	r3, #0
 8018836:	4604      	mov	r4, r0
 8018838:	f340 8081 	ble.w	801893e <_dtoa_r+0x7c6>
 801883c:	461a      	mov	r2, r3
 801883e:	4601      	mov	r1, r0
 8018840:	4630      	mov	r0, r6
 8018842:	f000 fd05 	bl	8019250 <__pow5mult>
 8018846:	9b06      	ldr	r3, [sp, #24]
 8018848:	2b01      	cmp	r3, #1
 801884a:	4604      	mov	r4, r0
 801884c:	dd7a      	ble.n	8018944 <_dtoa_r+0x7cc>
 801884e:	2300      	movs	r3, #0
 8018850:	9309      	str	r3, [sp, #36]	; 0x24
 8018852:	6922      	ldr	r2, [r4, #16]
 8018854:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018858:	6910      	ldr	r0, [r2, #16]
 801885a:	f000 fbeb 	bl	8019034 <__hi0bits>
 801885e:	f1c0 0020 	rsb	r0, r0, #32
 8018862:	9b05      	ldr	r3, [sp, #20]
 8018864:	4418      	add	r0, r3
 8018866:	f010 001f 	ands.w	r0, r0, #31
 801886a:	f000 8093 	beq.w	8018994 <_dtoa_r+0x81c>
 801886e:	f1c0 0220 	rsb	r2, r0, #32
 8018872:	2a04      	cmp	r2, #4
 8018874:	f340 8085 	ble.w	8018982 <_dtoa_r+0x80a>
 8018878:	9b04      	ldr	r3, [sp, #16]
 801887a:	f1c0 001c 	rsb	r0, r0, #28
 801887e:	4403      	add	r3, r0
 8018880:	9304      	str	r3, [sp, #16]
 8018882:	9b05      	ldr	r3, [sp, #20]
 8018884:	4480      	add	r8, r0
 8018886:	4403      	add	r3, r0
 8018888:	9305      	str	r3, [sp, #20]
 801888a:	9b04      	ldr	r3, [sp, #16]
 801888c:	2b00      	cmp	r3, #0
 801888e:	dd05      	ble.n	801889c <_dtoa_r+0x724>
 8018890:	4629      	mov	r1, r5
 8018892:	461a      	mov	r2, r3
 8018894:	4630      	mov	r0, r6
 8018896:	f000 fd35 	bl	8019304 <__lshift>
 801889a:	4605      	mov	r5, r0
 801889c:	9b05      	ldr	r3, [sp, #20]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	dd05      	ble.n	80188ae <_dtoa_r+0x736>
 80188a2:	4621      	mov	r1, r4
 80188a4:	461a      	mov	r2, r3
 80188a6:	4630      	mov	r0, r6
 80188a8:	f000 fd2c 	bl	8019304 <__lshift>
 80188ac:	4604      	mov	r4, r0
 80188ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d071      	beq.n	8018998 <_dtoa_r+0x820>
 80188b4:	4621      	mov	r1, r4
 80188b6:	4628      	mov	r0, r5
 80188b8:	f000 fd90 	bl	80193dc <__mcmp>
 80188bc:	2800      	cmp	r0, #0
 80188be:	da6b      	bge.n	8018998 <_dtoa_r+0x820>
 80188c0:	2300      	movs	r3, #0
 80188c2:	4629      	mov	r1, r5
 80188c4:	220a      	movs	r2, #10
 80188c6:	4630      	mov	r0, r6
 80188c8:	f000 fb24 	bl	8018f14 <__multadd>
 80188cc:	9b07      	ldr	r3, [sp, #28]
 80188ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80188d2:	4605      	mov	r5, r0
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	f000 8197 	beq.w	8018c08 <_dtoa_r+0xa90>
 80188da:	4639      	mov	r1, r7
 80188dc:	2300      	movs	r3, #0
 80188de:	220a      	movs	r2, #10
 80188e0:	4630      	mov	r0, r6
 80188e2:	f000 fb17 	bl	8018f14 <__multadd>
 80188e6:	f1ba 0f00 	cmp.w	sl, #0
 80188ea:	4607      	mov	r7, r0
 80188ec:	f300 8093 	bgt.w	8018a16 <_dtoa_r+0x89e>
 80188f0:	9b06      	ldr	r3, [sp, #24]
 80188f2:	2b02      	cmp	r3, #2
 80188f4:	dc57      	bgt.n	80189a6 <_dtoa_r+0x82e>
 80188f6:	e08e      	b.n	8018a16 <_dtoa_r+0x89e>
 80188f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80188fe:	e751      	b.n	80187a4 <_dtoa_r+0x62c>
 8018900:	f109 34ff 	add.w	r4, r9, #4294967295
 8018904:	42a3      	cmp	r3, r4
 8018906:	bfbf      	itttt	lt
 8018908:	1ae2      	sublt	r2, r4, r3
 801890a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801890c:	189b      	addlt	r3, r3, r2
 801890e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018910:	bfae      	itee	ge
 8018912:	1b1c      	subge	r4, r3, r4
 8018914:	4623      	movlt	r3, r4
 8018916:	2400      	movlt	r4, #0
 8018918:	f1b9 0f00 	cmp.w	r9, #0
 801891c:	bfb5      	itete	lt
 801891e:	9a04      	ldrlt	r2, [sp, #16]
 8018920:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018924:	eba2 0809 	sublt.w	r8, r2, r9
 8018928:	464a      	movge	r2, r9
 801892a:	bfb8      	it	lt
 801892c:	2200      	movlt	r2, #0
 801892e:	e73c      	b.n	80187aa <_dtoa_r+0x632>
 8018930:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018934:	9f07      	ldr	r7, [sp, #28]
 8018936:	461c      	mov	r4, r3
 8018938:	e744      	b.n	80187c4 <_dtoa_r+0x64c>
 801893a:	461a      	mov	r2, r3
 801893c:	e770      	b.n	8018820 <_dtoa_r+0x6a8>
 801893e:	9b06      	ldr	r3, [sp, #24]
 8018940:	2b01      	cmp	r3, #1
 8018942:	dc18      	bgt.n	8018976 <_dtoa_r+0x7fe>
 8018944:	9b02      	ldr	r3, [sp, #8]
 8018946:	b9b3      	cbnz	r3, 8018976 <_dtoa_r+0x7fe>
 8018948:	9b03      	ldr	r3, [sp, #12]
 801894a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801894e:	b9a2      	cbnz	r2, 801897a <_dtoa_r+0x802>
 8018950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018954:	0d12      	lsrs	r2, r2, #20
 8018956:	0512      	lsls	r2, r2, #20
 8018958:	b18a      	cbz	r2, 801897e <_dtoa_r+0x806>
 801895a:	9b04      	ldr	r3, [sp, #16]
 801895c:	3301      	adds	r3, #1
 801895e:	9304      	str	r3, [sp, #16]
 8018960:	9b05      	ldr	r3, [sp, #20]
 8018962:	3301      	adds	r3, #1
 8018964:	9305      	str	r3, [sp, #20]
 8018966:	2301      	movs	r3, #1
 8018968:	9309      	str	r3, [sp, #36]	; 0x24
 801896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801896c:	2b00      	cmp	r3, #0
 801896e:	f47f af70 	bne.w	8018852 <_dtoa_r+0x6da>
 8018972:	2001      	movs	r0, #1
 8018974:	e775      	b.n	8018862 <_dtoa_r+0x6ea>
 8018976:	2300      	movs	r3, #0
 8018978:	e7f6      	b.n	8018968 <_dtoa_r+0x7f0>
 801897a:	9b02      	ldr	r3, [sp, #8]
 801897c:	e7f4      	b.n	8018968 <_dtoa_r+0x7f0>
 801897e:	9209      	str	r2, [sp, #36]	; 0x24
 8018980:	e7f3      	b.n	801896a <_dtoa_r+0x7f2>
 8018982:	d082      	beq.n	801888a <_dtoa_r+0x712>
 8018984:	9b04      	ldr	r3, [sp, #16]
 8018986:	321c      	adds	r2, #28
 8018988:	4413      	add	r3, r2
 801898a:	9304      	str	r3, [sp, #16]
 801898c:	9b05      	ldr	r3, [sp, #20]
 801898e:	4490      	add	r8, r2
 8018990:	4413      	add	r3, r2
 8018992:	e779      	b.n	8018888 <_dtoa_r+0x710>
 8018994:	4602      	mov	r2, r0
 8018996:	e7f5      	b.n	8018984 <_dtoa_r+0x80c>
 8018998:	f1b9 0f00 	cmp.w	r9, #0
 801899c:	dc36      	bgt.n	8018a0c <_dtoa_r+0x894>
 801899e:	9b06      	ldr	r3, [sp, #24]
 80189a0:	2b02      	cmp	r3, #2
 80189a2:	dd33      	ble.n	8018a0c <_dtoa_r+0x894>
 80189a4:	46ca      	mov	sl, r9
 80189a6:	f1ba 0f00 	cmp.w	sl, #0
 80189aa:	d10d      	bne.n	80189c8 <_dtoa_r+0x850>
 80189ac:	4621      	mov	r1, r4
 80189ae:	4653      	mov	r3, sl
 80189b0:	2205      	movs	r2, #5
 80189b2:	4630      	mov	r0, r6
 80189b4:	f000 faae 	bl	8018f14 <__multadd>
 80189b8:	4601      	mov	r1, r0
 80189ba:	4604      	mov	r4, r0
 80189bc:	4628      	mov	r0, r5
 80189be:	f000 fd0d 	bl	80193dc <__mcmp>
 80189c2:	2800      	cmp	r0, #0
 80189c4:	f73f ade4 	bgt.w	8018590 <_dtoa_r+0x418>
 80189c8:	9b08      	ldr	r3, [sp, #32]
 80189ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80189ce:	ea6f 0b03 	mvn.w	fp, r3
 80189d2:	f04f 0900 	mov.w	r9, #0
 80189d6:	4621      	mov	r1, r4
 80189d8:	4630      	mov	r0, r6
 80189da:	f000 fa79 	bl	8018ed0 <_Bfree>
 80189de:	2f00      	cmp	r7, #0
 80189e0:	f43f aea1 	beq.w	8018726 <_dtoa_r+0x5ae>
 80189e4:	f1b9 0f00 	cmp.w	r9, #0
 80189e8:	d005      	beq.n	80189f6 <_dtoa_r+0x87e>
 80189ea:	45b9      	cmp	r9, r7
 80189ec:	d003      	beq.n	80189f6 <_dtoa_r+0x87e>
 80189ee:	4649      	mov	r1, r9
 80189f0:	4630      	mov	r0, r6
 80189f2:	f000 fa6d 	bl	8018ed0 <_Bfree>
 80189f6:	4639      	mov	r1, r7
 80189f8:	4630      	mov	r0, r6
 80189fa:	f000 fa69 	bl	8018ed0 <_Bfree>
 80189fe:	e692      	b.n	8018726 <_dtoa_r+0x5ae>
 8018a00:	2400      	movs	r4, #0
 8018a02:	4627      	mov	r7, r4
 8018a04:	e7e0      	b.n	80189c8 <_dtoa_r+0x850>
 8018a06:	4693      	mov	fp, r2
 8018a08:	4627      	mov	r7, r4
 8018a0a:	e5c1      	b.n	8018590 <_dtoa_r+0x418>
 8018a0c:	9b07      	ldr	r3, [sp, #28]
 8018a0e:	46ca      	mov	sl, r9
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	f000 8100 	beq.w	8018c16 <_dtoa_r+0xa9e>
 8018a16:	f1b8 0f00 	cmp.w	r8, #0
 8018a1a:	dd05      	ble.n	8018a28 <_dtoa_r+0x8b0>
 8018a1c:	4639      	mov	r1, r7
 8018a1e:	4642      	mov	r2, r8
 8018a20:	4630      	mov	r0, r6
 8018a22:	f000 fc6f 	bl	8019304 <__lshift>
 8018a26:	4607      	mov	r7, r0
 8018a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d05d      	beq.n	8018aea <_dtoa_r+0x972>
 8018a2e:	6879      	ldr	r1, [r7, #4]
 8018a30:	4630      	mov	r0, r6
 8018a32:	f000 fa0d 	bl	8018e50 <_Balloc>
 8018a36:	4680      	mov	r8, r0
 8018a38:	b928      	cbnz	r0, 8018a46 <_dtoa_r+0x8ce>
 8018a3a:	4b82      	ldr	r3, [pc, #520]	; (8018c44 <_dtoa_r+0xacc>)
 8018a3c:	4602      	mov	r2, r0
 8018a3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018a42:	f7ff bbb1 	b.w	80181a8 <_dtoa_r+0x30>
 8018a46:	693a      	ldr	r2, [r7, #16]
 8018a48:	3202      	adds	r2, #2
 8018a4a:	0092      	lsls	r2, r2, #2
 8018a4c:	f107 010c 	add.w	r1, r7, #12
 8018a50:	300c      	adds	r0, #12
 8018a52:	f7ff faf4 	bl	801803e <memcpy>
 8018a56:	2201      	movs	r2, #1
 8018a58:	4641      	mov	r1, r8
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	f000 fc52 	bl	8019304 <__lshift>
 8018a60:	9b01      	ldr	r3, [sp, #4]
 8018a62:	3301      	adds	r3, #1
 8018a64:	9304      	str	r3, [sp, #16]
 8018a66:	9b01      	ldr	r3, [sp, #4]
 8018a68:	4453      	add	r3, sl
 8018a6a:	9308      	str	r3, [sp, #32]
 8018a6c:	9b02      	ldr	r3, [sp, #8]
 8018a6e:	f003 0301 	and.w	r3, r3, #1
 8018a72:	46b9      	mov	r9, r7
 8018a74:	9307      	str	r3, [sp, #28]
 8018a76:	4607      	mov	r7, r0
 8018a78:	9b04      	ldr	r3, [sp, #16]
 8018a7a:	4621      	mov	r1, r4
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	4628      	mov	r0, r5
 8018a80:	9302      	str	r3, [sp, #8]
 8018a82:	f7ff faf1 	bl	8018068 <quorem>
 8018a86:	4603      	mov	r3, r0
 8018a88:	3330      	adds	r3, #48	; 0x30
 8018a8a:	9005      	str	r0, [sp, #20]
 8018a8c:	4649      	mov	r1, r9
 8018a8e:	4628      	mov	r0, r5
 8018a90:	9309      	str	r3, [sp, #36]	; 0x24
 8018a92:	f000 fca3 	bl	80193dc <__mcmp>
 8018a96:	463a      	mov	r2, r7
 8018a98:	4682      	mov	sl, r0
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	f000 fcb9 	bl	8019414 <__mdiff>
 8018aa2:	68c2      	ldr	r2, [r0, #12]
 8018aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018aa6:	4680      	mov	r8, r0
 8018aa8:	bb0a      	cbnz	r2, 8018aee <_dtoa_r+0x976>
 8018aaa:	4601      	mov	r1, r0
 8018aac:	4628      	mov	r0, r5
 8018aae:	f000 fc95 	bl	80193dc <__mcmp>
 8018ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	4641      	mov	r1, r8
 8018ab8:	4630      	mov	r0, r6
 8018aba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018abe:	f000 fa07 	bl	8018ed0 <_Bfree>
 8018ac2:	9b06      	ldr	r3, [sp, #24]
 8018ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ac6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018aca:	ea43 0102 	orr.w	r1, r3, r2
 8018ace:	9b07      	ldr	r3, [sp, #28]
 8018ad0:	4319      	orrs	r1, r3
 8018ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ad4:	d10d      	bne.n	8018af2 <_dtoa_r+0x97a>
 8018ad6:	2b39      	cmp	r3, #57	; 0x39
 8018ad8:	d029      	beq.n	8018b2e <_dtoa_r+0x9b6>
 8018ada:	f1ba 0f00 	cmp.w	sl, #0
 8018ade:	dd01      	ble.n	8018ae4 <_dtoa_r+0x96c>
 8018ae0:	9b05      	ldr	r3, [sp, #20]
 8018ae2:	3331      	adds	r3, #49	; 0x31
 8018ae4:	9a02      	ldr	r2, [sp, #8]
 8018ae6:	7013      	strb	r3, [r2, #0]
 8018ae8:	e775      	b.n	80189d6 <_dtoa_r+0x85e>
 8018aea:	4638      	mov	r0, r7
 8018aec:	e7b8      	b.n	8018a60 <_dtoa_r+0x8e8>
 8018aee:	2201      	movs	r2, #1
 8018af0:	e7e1      	b.n	8018ab6 <_dtoa_r+0x93e>
 8018af2:	f1ba 0f00 	cmp.w	sl, #0
 8018af6:	db06      	blt.n	8018b06 <_dtoa_r+0x98e>
 8018af8:	9906      	ldr	r1, [sp, #24]
 8018afa:	ea41 0a0a 	orr.w	sl, r1, sl
 8018afe:	9907      	ldr	r1, [sp, #28]
 8018b00:	ea5a 0a01 	orrs.w	sl, sl, r1
 8018b04:	d120      	bne.n	8018b48 <_dtoa_r+0x9d0>
 8018b06:	2a00      	cmp	r2, #0
 8018b08:	ddec      	ble.n	8018ae4 <_dtoa_r+0x96c>
 8018b0a:	4629      	mov	r1, r5
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	4630      	mov	r0, r6
 8018b10:	9304      	str	r3, [sp, #16]
 8018b12:	f000 fbf7 	bl	8019304 <__lshift>
 8018b16:	4621      	mov	r1, r4
 8018b18:	4605      	mov	r5, r0
 8018b1a:	f000 fc5f 	bl	80193dc <__mcmp>
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	9b04      	ldr	r3, [sp, #16]
 8018b22:	dc02      	bgt.n	8018b2a <_dtoa_r+0x9b2>
 8018b24:	d1de      	bne.n	8018ae4 <_dtoa_r+0x96c>
 8018b26:	07da      	lsls	r2, r3, #31
 8018b28:	d5dc      	bpl.n	8018ae4 <_dtoa_r+0x96c>
 8018b2a:	2b39      	cmp	r3, #57	; 0x39
 8018b2c:	d1d8      	bne.n	8018ae0 <_dtoa_r+0x968>
 8018b2e:	9a02      	ldr	r2, [sp, #8]
 8018b30:	2339      	movs	r3, #57	; 0x39
 8018b32:	7013      	strb	r3, [r2, #0]
 8018b34:	4643      	mov	r3, r8
 8018b36:	4698      	mov	r8, r3
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018b3e:	2a39      	cmp	r2, #57	; 0x39
 8018b40:	d051      	beq.n	8018be6 <_dtoa_r+0xa6e>
 8018b42:	3201      	adds	r2, #1
 8018b44:	701a      	strb	r2, [r3, #0]
 8018b46:	e746      	b.n	80189d6 <_dtoa_r+0x85e>
 8018b48:	2a00      	cmp	r2, #0
 8018b4a:	dd03      	ble.n	8018b54 <_dtoa_r+0x9dc>
 8018b4c:	2b39      	cmp	r3, #57	; 0x39
 8018b4e:	d0ee      	beq.n	8018b2e <_dtoa_r+0x9b6>
 8018b50:	3301      	adds	r3, #1
 8018b52:	e7c7      	b.n	8018ae4 <_dtoa_r+0x96c>
 8018b54:	9a04      	ldr	r2, [sp, #16]
 8018b56:	9908      	ldr	r1, [sp, #32]
 8018b58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018b5c:	428a      	cmp	r2, r1
 8018b5e:	d02b      	beq.n	8018bb8 <_dtoa_r+0xa40>
 8018b60:	4629      	mov	r1, r5
 8018b62:	2300      	movs	r3, #0
 8018b64:	220a      	movs	r2, #10
 8018b66:	4630      	mov	r0, r6
 8018b68:	f000 f9d4 	bl	8018f14 <__multadd>
 8018b6c:	45b9      	cmp	r9, r7
 8018b6e:	4605      	mov	r5, r0
 8018b70:	f04f 0300 	mov.w	r3, #0
 8018b74:	f04f 020a 	mov.w	r2, #10
 8018b78:	4649      	mov	r1, r9
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	d107      	bne.n	8018b8e <_dtoa_r+0xa16>
 8018b7e:	f000 f9c9 	bl	8018f14 <__multadd>
 8018b82:	4681      	mov	r9, r0
 8018b84:	4607      	mov	r7, r0
 8018b86:	9b04      	ldr	r3, [sp, #16]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	9304      	str	r3, [sp, #16]
 8018b8c:	e774      	b.n	8018a78 <_dtoa_r+0x900>
 8018b8e:	f000 f9c1 	bl	8018f14 <__multadd>
 8018b92:	4639      	mov	r1, r7
 8018b94:	4681      	mov	r9, r0
 8018b96:	2300      	movs	r3, #0
 8018b98:	220a      	movs	r2, #10
 8018b9a:	4630      	mov	r0, r6
 8018b9c:	f000 f9ba 	bl	8018f14 <__multadd>
 8018ba0:	4607      	mov	r7, r0
 8018ba2:	e7f0      	b.n	8018b86 <_dtoa_r+0xa0e>
 8018ba4:	f1ba 0f00 	cmp.w	sl, #0
 8018ba8:	9a01      	ldr	r2, [sp, #4]
 8018baa:	bfcc      	ite	gt
 8018bac:	46d0      	movgt	r8, sl
 8018bae:	f04f 0801 	movle.w	r8, #1
 8018bb2:	4490      	add	r8, r2
 8018bb4:	f04f 0900 	mov.w	r9, #0
 8018bb8:	4629      	mov	r1, r5
 8018bba:	2201      	movs	r2, #1
 8018bbc:	4630      	mov	r0, r6
 8018bbe:	9302      	str	r3, [sp, #8]
 8018bc0:	f000 fba0 	bl	8019304 <__lshift>
 8018bc4:	4621      	mov	r1, r4
 8018bc6:	4605      	mov	r5, r0
 8018bc8:	f000 fc08 	bl	80193dc <__mcmp>
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	dcb1      	bgt.n	8018b34 <_dtoa_r+0x9bc>
 8018bd0:	d102      	bne.n	8018bd8 <_dtoa_r+0xa60>
 8018bd2:	9b02      	ldr	r3, [sp, #8]
 8018bd4:	07db      	lsls	r3, r3, #31
 8018bd6:	d4ad      	bmi.n	8018b34 <_dtoa_r+0x9bc>
 8018bd8:	4643      	mov	r3, r8
 8018bda:	4698      	mov	r8, r3
 8018bdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018be0:	2a30      	cmp	r2, #48	; 0x30
 8018be2:	d0fa      	beq.n	8018bda <_dtoa_r+0xa62>
 8018be4:	e6f7      	b.n	80189d6 <_dtoa_r+0x85e>
 8018be6:	9a01      	ldr	r2, [sp, #4]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d1a4      	bne.n	8018b36 <_dtoa_r+0x9be>
 8018bec:	f10b 0b01 	add.w	fp, fp, #1
 8018bf0:	2331      	movs	r3, #49	; 0x31
 8018bf2:	e778      	b.n	8018ae6 <_dtoa_r+0x96e>
 8018bf4:	4b14      	ldr	r3, [pc, #80]	; (8018c48 <_dtoa_r+0xad0>)
 8018bf6:	f7ff bb2a 	b.w	801824e <_dtoa_r+0xd6>
 8018bfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	f47f ab05 	bne.w	801820c <_dtoa_r+0x94>
 8018c02:	4b12      	ldr	r3, [pc, #72]	; (8018c4c <_dtoa_r+0xad4>)
 8018c04:	f7ff bb23 	b.w	801824e <_dtoa_r+0xd6>
 8018c08:	f1ba 0f00 	cmp.w	sl, #0
 8018c0c:	dc03      	bgt.n	8018c16 <_dtoa_r+0xa9e>
 8018c0e:	9b06      	ldr	r3, [sp, #24]
 8018c10:	2b02      	cmp	r3, #2
 8018c12:	f73f aec8 	bgt.w	80189a6 <_dtoa_r+0x82e>
 8018c16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018c1a:	4621      	mov	r1, r4
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	f7ff fa23 	bl	8018068 <quorem>
 8018c22:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018c26:	f808 3b01 	strb.w	r3, [r8], #1
 8018c2a:	9a01      	ldr	r2, [sp, #4]
 8018c2c:	eba8 0202 	sub.w	r2, r8, r2
 8018c30:	4592      	cmp	sl, r2
 8018c32:	ddb7      	ble.n	8018ba4 <_dtoa_r+0xa2c>
 8018c34:	4629      	mov	r1, r5
 8018c36:	2300      	movs	r3, #0
 8018c38:	220a      	movs	r2, #10
 8018c3a:	4630      	mov	r0, r6
 8018c3c:	f000 f96a 	bl	8018f14 <__multadd>
 8018c40:	4605      	mov	r5, r0
 8018c42:	e7ea      	b.n	8018c1a <_dtoa_r+0xaa2>
 8018c44:	0801ca25 	.word	0x0801ca25
 8018c48:	0801c980 	.word	0x0801c980
 8018c4c:	0801c9a9 	.word	0x0801c9a9

08018c50 <_free_r>:
 8018c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c52:	2900      	cmp	r1, #0
 8018c54:	d044      	beq.n	8018ce0 <_free_r+0x90>
 8018c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c5a:	9001      	str	r0, [sp, #4]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8018c62:	bfb8      	it	lt
 8018c64:	18e4      	addlt	r4, r4, r3
 8018c66:	f000 f8e7 	bl	8018e38 <__malloc_lock>
 8018c6a:	4a1e      	ldr	r2, [pc, #120]	; (8018ce4 <_free_r+0x94>)
 8018c6c:	9801      	ldr	r0, [sp, #4]
 8018c6e:	6813      	ldr	r3, [r2, #0]
 8018c70:	b933      	cbnz	r3, 8018c80 <_free_r+0x30>
 8018c72:	6063      	str	r3, [r4, #4]
 8018c74:	6014      	str	r4, [r2, #0]
 8018c76:	b003      	add	sp, #12
 8018c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c7c:	f000 b8e2 	b.w	8018e44 <__malloc_unlock>
 8018c80:	42a3      	cmp	r3, r4
 8018c82:	d908      	bls.n	8018c96 <_free_r+0x46>
 8018c84:	6825      	ldr	r5, [r4, #0]
 8018c86:	1961      	adds	r1, r4, r5
 8018c88:	428b      	cmp	r3, r1
 8018c8a:	bf01      	itttt	eq
 8018c8c:	6819      	ldreq	r1, [r3, #0]
 8018c8e:	685b      	ldreq	r3, [r3, #4]
 8018c90:	1949      	addeq	r1, r1, r5
 8018c92:	6021      	streq	r1, [r4, #0]
 8018c94:	e7ed      	b.n	8018c72 <_free_r+0x22>
 8018c96:	461a      	mov	r2, r3
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	b10b      	cbz	r3, 8018ca0 <_free_r+0x50>
 8018c9c:	42a3      	cmp	r3, r4
 8018c9e:	d9fa      	bls.n	8018c96 <_free_r+0x46>
 8018ca0:	6811      	ldr	r1, [r2, #0]
 8018ca2:	1855      	adds	r5, r2, r1
 8018ca4:	42a5      	cmp	r5, r4
 8018ca6:	d10b      	bne.n	8018cc0 <_free_r+0x70>
 8018ca8:	6824      	ldr	r4, [r4, #0]
 8018caa:	4421      	add	r1, r4
 8018cac:	1854      	adds	r4, r2, r1
 8018cae:	42a3      	cmp	r3, r4
 8018cb0:	6011      	str	r1, [r2, #0]
 8018cb2:	d1e0      	bne.n	8018c76 <_free_r+0x26>
 8018cb4:	681c      	ldr	r4, [r3, #0]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	6053      	str	r3, [r2, #4]
 8018cba:	440c      	add	r4, r1
 8018cbc:	6014      	str	r4, [r2, #0]
 8018cbe:	e7da      	b.n	8018c76 <_free_r+0x26>
 8018cc0:	d902      	bls.n	8018cc8 <_free_r+0x78>
 8018cc2:	230c      	movs	r3, #12
 8018cc4:	6003      	str	r3, [r0, #0]
 8018cc6:	e7d6      	b.n	8018c76 <_free_r+0x26>
 8018cc8:	6825      	ldr	r5, [r4, #0]
 8018cca:	1961      	adds	r1, r4, r5
 8018ccc:	428b      	cmp	r3, r1
 8018cce:	bf04      	itt	eq
 8018cd0:	6819      	ldreq	r1, [r3, #0]
 8018cd2:	685b      	ldreq	r3, [r3, #4]
 8018cd4:	6063      	str	r3, [r4, #4]
 8018cd6:	bf04      	itt	eq
 8018cd8:	1949      	addeq	r1, r1, r5
 8018cda:	6021      	streq	r1, [r4, #0]
 8018cdc:	6054      	str	r4, [r2, #4]
 8018cde:	e7ca      	b.n	8018c76 <_free_r+0x26>
 8018ce0:	b003      	add	sp, #12
 8018ce2:	bd30      	pop	{r4, r5, pc}
 8018ce4:	24002adc 	.word	0x24002adc

08018ce8 <malloc>:
 8018ce8:	4b02      	ldr	r3, [pc, #8]	; (8018cf4 <malloc+0xc>)
 8018cea:	4601      	mov	r1, r0
 8018cec:	6818      	ldr	r0, [r3, #0]
 8018cee:	f000 b823 	b.w	8018d38 <_malloc_r>
 8018cf2:	bf00      	nop
 8018cf4:	24000158 	.word	0x24000158

08018cf8 <sbrk_aligned>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	4e0e      	ldr	r6, [pc, #56]	; (8018d34 <sbrk_aligned+0x3c>)
 8018cfc:	460c      	mov	r4, r1
 8018cfe:	6831      	ldr	r1, [r6, #0]
 8018d00:	4605      	mov	r5, r0
 8018d02:	b911      	cbnz	r1, 8018d0a <sbrk_aligned+0x12>
 8018d04:	f001 fdd6 	bl	801a8b4 <_sbrk_r>
 8018d08:	6030      	str	r0, [r6, #0]
 8018d0a:	4621      	mov	r1, r4
 8018d0c:	4628      	mov	r0, r5
 8018d0e:	f001 fdd1 	bl	801a8b4 <_sbrk_r>
 8018d12:	1c43      	adds	r3, r0, #1
 8018d14:	d00a      	beq.n	8018d2c <sbrk_aligned+0x34>
 8018d16:	1cc4      	adds	r4, r0, #3
 8018d18:	f024 0403 	bic.w	r4, r4, #3
 8018d1c:	42a0      	cmp	r0, r4
 8018d1e:	d007      	beq.n	8018d30 <sbrk_aligned+0x38>
 8018d20:	1a21      	subs	r1, r4, r0
 8018d22:	4628      	mov	r0, r5
 8018d24:	f001 fdc6 	bl	801a8b4 <_sbrk_r>
 8018d28:	3001      	adds	r0, #1
 8018d2a:	d101      	bne.n	8018d30 <sbrk_aligned+0x38>
 8018d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8018d30:	4620      	mov	r0, r4
 8018d32:	bd70      	pop	{r4, r5, r6, pc}
 8018d34:	24002ae0 	.word	0x24002ae0

08018d38 <_malloc_r>:
 8018d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d3c:	1ccd      	adds	r5, r1, #3
 8018d3e:	f025 0503 	bic.w	r5, r5, #3
 8018d42:	3508      	adds	r5, #8
 8018d44:	2d0c      	cmp	r5, #12
 8018d46:	bf38      	it	cc
 8018d48:	250c      	movcc	r5, #12
 8018d4a:	2d00      	cmp	r5, #0
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	db01      	blt.n	8018d54 <_malloc_r+0x1c>
 8018d50:	42a9      	cmp	r1, r5
 8018d52:	d905      	bls.n	8018d60 <_malloc_r+0x28>
 8018d54:	230c      	movs	r3, #12
 8018d56:	603b      	str	r3, [r7, #0]
 8018d58:	2600      	movs	r6, #0
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018e34 <_malloc_r+0xfc>
 8018d64:	f000 f868 	bl	8018e38 <__malloc_lock>
 8018d68:	f8d8 3000 	ldr.w	r3, [r8]
 8018d6c:	461c      	mov	r4, r3
 8018d6e:	bb5c      	cbnz	r4, 8018dc8 <_malloc_r+0x90>
 8018d70:	4629      	mov	r1, r5
 8018d72:	4638      	mov	r0, r7
 8018d74:	f7ff ffc0 	bl	8018cf8 <sbrk_aligned>
 8018d78:	1c43      	adds	r3, r0, #1
 8018d7a:	4604      	mov	r4, r0
 8018d7c:	d155      	bne.n	8018e2a <_malloc_r+0xf2>
 8018d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8018d82:	4626      	mov	r6, r4
 8018d84:	2e00      	cmp	r6, #0
 8018d86:	d145      	bne.n	8018e14 <_malloc_r+0xdc>
 8018d88:	2c00      	cmp	r4, #0
 8018d8a:	d048      	beq.n	8018e1e <_malloc_r+0xe6>
 8018d8c:	6823      	ldr	r3, [r4, #0]
 8018d8e:	4631      	mov	r1, r6
 8018d90:	4638      	mov	r0, r7
 8018d92:	eb04 0903 	add.w	r9, r4, r3
 8018d96:	f001 fd8d 	bl	801a8b4 <_sbrk_r>
 8018d9a:	4581      	cmp	r9, r0
 8018d9c:	d13f      	bne.n	8018e1e <_malloc_r+0xe6>
 8018d9e:	6821      	ldr	r1, [r4, #0]
 8018da0:	1a6d      	subs	r5, r5, r1
 8018da2:	4629      	mov	r1, r5
 8018da4:	4638      	mov	r0, r7
 8018da6:	f7ff ffa7 	bl	8018cf8 <sbrk_aligned>
 8018daa:	3001      	adds	r0, #1
 8018dac:	d037      	beq.n	8018e1e <_malloc_r+0xe6>
 8018dae:	6823      	ldr	r3, [r4, #0]
 8018db0:	442b      	add	r3, r5
 8018db2:	6023      	str	r3, [r4, #0]
 8018db4:	f8d8 3000 	ldr.w	r3, [r8]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d038      	beq.n	8018e2e <_malloc_r+0xf6>
 8018dbc:	685a      	ldr	r2, [r3, #4]
 8018dbe:	42a2      	cmp	r2, r4
 8018dc0:	d12b      	bne.n	8018e1a <_malloc_r+0xe2>
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	605a      	str	r2, [r3, #4]
 8018dc6:	e00f      	b.n	8018de8 <_malloc_r+0xb0>
 8018dc8:	6822      	ldr	r2, [r4, #0]
 8018dca:	1b52      	subs	r2, r2, r5
 8018dcc:	d41f      	bmi.n	8018e0e <_malloc_r+0xd6>
 8018dce:	2a0b      	cmp	r2, #11
 8018dd0:	d917      	bls.n	8018e02 <_malloc_r+0xca>
 8018dd2:	1961      	adds	r1, r4, r5
 8018dd4:	42a3      	cmp	r3, r4
 8018dd6:	6025      	str	r5, [r4, #0]
 8018dd8:	bf18      	it	ne
 8018dda:	6059      	strne	r1, [r3, #4]
 8018ddc:	6863      	ldr	r3, [r4, #4]
 8018dde:	bf08      	it	eq
 8018de0:	f8c8 1000 	streq.w	r1, [r8]
 8018de4:	5162      	str	r2, [r4, r5]
 8018de6:	604b      	str	r3, [r1, #4]
 8018de8:	4638      	mov	r0, r7
 8018dea:	f104 060b 	add.w	r6, r4, #11
 8018dee:	f000 f829 	bl	8018e44 <__malloc_unlock>
 8018df2:	f026 0607 	bic.w	r6, r6, #7
 8018df6:	1d23      	adds	r3, r4, #4
 8018df8:	1af2      	subs	r2, r6, r3
 8018dfa:	d0ae      	beq.n	8018d5a <_malloc_r+0x22>
 8018dfc:	1b9b      	subs	r3, r3, r6
 8018dfe:	50a3      	str	r3, [r4, r2]
 8018e00:	e7ab      	b.n	8018d5a <_malloc_r+0x22>
 8018e02:	42a3      	cmp	r3, r4
 8018e04:	6862      	ldr	r2, [r4, #4]
 8018e06:	d1dd      	bne.n	8018dc4 <_malloc_r+0x8c>
 8018e08:	f8c8 2000 	str.w	r2, [r8]
 8018e0c:	e7ec      	b.n	8018de8 <_malloc_r+0xb0>
 8018e0e:	4623      	mov	r3, r4
 8018e10:	6864      	ldr	r4, [r4, #4]
 8018e12:	e7ac      	b.n	8018d6e <_malloc_r+0x36>
 8018e14:	4634      	mov	r4, r6
 8018e16:	6876      	ldr	r6, [r6, #4]
 8018e18:	e7b4      	b.n	8018d84 <_malloc_r+0x4c>
 8018e1a:	4613      	mov	r3, r2
 8018e1c:	e7cc      	b.n	8018db8 <_malloc_r+0x80>
 8018e1e:	230c      	movs	r3, #12
 8018e20:	603b      	str	r3, [r7, #0]
 8018e22:	4638      	mov	r0, r7
 8018e24:	f000 f80e 	bl	8018e44 <__malloc_unlock>
 8018e28:	e797      	b.n	8018d5a <_malloc_r+0x22>
 8018e2a:	6025      	str	r5, [r4, #0]
 8018e2c:	e7dc      	b.n	8018de8 <_malloc_r+0xb0>
 8018e2e:	605b      	str	r3, [r3, #4]
 8018e30:	deff      	udf	#255	; 0xff
 8018e32:	bf00      	nop
 8018e34:	24002adc 	.word	0x24002adc

08018e38 <__malloc_lock>:
 8018e38:	4801      	ldr	r0, [pc, #4]	; (8018e40 <__malloc_lock+0x8>)
 8018e3a:	f7ff b8fe 	b.w	801803a <__retarget_lock_acquire_recursive>
 8018e3e:	bf00      	nop
 8018e40:	24002ad8 	.word	0x24002ad8

08018e44 <__malloc_unlock>:
 8018e44:	4801      	ldr	r0, [pc, #4]	; (8018e4c <__malloc_unlock+0x8>)
 8018e46:	f7ff b8f9 	b.w	801803c <__retarget_lock_release_recursive>
 8018e4a:	bf00      	nop
 8018e4c:	24002ad8 	.word	0x24002ad8

08018e50 <_Balloc>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	69c6      	ldr	r6, [r0, #28]
 8018e54:	4604      	mov	r4, r0
 8018e56:	460d      	mov	r5, r1
 8018e58:	b976      	cbnz	r6, 8018e78 <_Balloc+0x28>
 8018e5a:	2010      	movs	r0, #16
 8018e5c:	f7ff ff44 	bl	8018ce8 <malloc>
 8018e60:	4602      	mov	r2, r0
 8018e62:	61e0      	str	r0, [r4, #28]
 8018e64:	b920      	cbnz	r0, 8018e70 <_Balloc+0x20>
 8018e66:	4b18      	ldr	r3, [pc, #96]	; (8018ec8 <_Balloc+0x78>)
 8018e68:	4818      	ldr	r0, [pc, #96]	; (8018ecc <_Balloc+0x7c>)
 8018e6a:	216b      	movs	r1, #107	; 0x6b
 8018e6c:	f001 fd3c 	bl	801a8e8 <__assert_func>
 8018e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e74:	6006      	str	r6, [r0, #0]
 8018e76:	60c6      	str	r6, [r0, #12]
 8018e78:	69e6      	ldr	r6, [r4, #28]
 8018e7a:	68f3      	ldr	r3, [r6, #12]
 8018e7c:	b183      	cbz	r3, 8018ea0 <_Balloc+0x50>
 8018e7e:	69e3      	ldr	r3, [r4, #28]
 8018e80:	68db      	ldr	r3, [r3, #12]
 8018e82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e86:	b9b8      	cbnz	r0, 8018eb8 <_Balloc+0x68>
 8018e88:	2101      	movs	r1, #1
 8018e8a:	fa01 f605 	lsl.w	r6, r1, r5
 8018e8e:	1d72      	adds	r2, r6, #5
 8018e90:	0092      	lsls	r2, r2, #2
 8018e92:	4620      	mov	r0, r4
 8018e94:	f001 fd46 	bl	801a924 <_calloc_r>
 8018e98:	b160      	cbz	r0, 8018eb4 <_Balloc+0x64>
 8018e9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e9e:	e00e      	b.n	8018ebe <_Balloc+0x6e>
 8018ea0:	2221      	movs	r2, #33	; 0x21
 8018ea2:	2104      	movs	r1, #4
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	f001 fd3d 	bl	801a924 <_calloc_r>
 8018eaa:	69e3      	ldr	r3, [r4, #28]
 8018eac:	60f0      	str	r0, [r6, #12]
 8018eae:	68db      	ldr	r3, [r3, #12]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d1e4      	bne.n	8018e7e <_Balloc+0x2e>
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	bd70      	pop	{r4, r5, r6, pc}
 8018eb8:	6802      	ldr	r2, [r0, #0]
 8018eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ec4:	e7f7      	b.n	8018eb6 <_Balloc+0x66>
 8018ec6:	bf00      	nop
 8018ec8:	0801c9b6 	.word	0x0801c9b6
 8018ecc:	0801ca36 	.word	0x0801ca36

08018ed0 <_Bfree>:
 8018ed0:	b570      	push	{r4, r5, r6, lr}
 8018ed2:	69c6      	ldr	r6, [r0, #28]
 8018ed4:	4605      	mov	r5, r0
 8018ed6:	460c      	mov	r4, r1
 8018ed8:	b976      	cbnz	r6, 8018ef8 <_Bfree+0x28>
 8018eda:	2010      	movs	r0, #16
 8018edc:	f7ff ff04 	bl	8018ce8 <malloc>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	61e8      	str	r0, [r5, #28]
 8018ee4:	b920      	cbnz	r0, 8018ef0 <_Bfree+0x20>
 8018ee6:	4b09      	ldr	r3, [pc, #36]	; (8018f0c <_Bfree+0x3c>)
 8018ee8:	4809      	ldr	r0, [pc, #36]	; (8018f10 <_Bfree+0x40>)
 8018eea:	218f      	movs	r1, #143	; 0x8f
 8018eec:	f001 fcfc 	bl	801a8e8 <__assert_func>
 8018ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ef4:	6006      	str	r6, [r0, #0]
 8018ef6:	60c6      	str	r6, [r0, #12]
 8018ef8:	b13c      	cbz	r4, 8018f0a <_Bfree+0x3a>
 8018efa:	69eb      	ldr	r3, [r5, #28]
 8018efc:	6862      	ldr	r2, [r4, #4]
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f04:	6021      	str	r1, [r4, #0]
 8018f06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f0a:	bd70      	pop	{r4, r5, r6, pc}
 8018f0c:	0801c9b6 	.word	0x0801c9b6
 8018f10:	0801ca36 	.word	0x0801ca36

08018f14 <__multadd>:
 8018f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f18:	690d      	ldr	r5, [r1, #16]
 8018f1a:	4607      	mov	r7, r0
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	461e      	mov	r6, r3
 8018f20:	f101 0c14 	add.w	ip, r1, #20
 8018f24:	2000      	movs	r0, #0
 8018f26:	f8dc 3000 	ldr.w	r3, [ip]
 8018f2a:	b299      	uxth	r1, r3
 8018f2c:	fb02 6101 	mla	r1, r2, r1, r6
 8018f30:	0c1e      	lsrs	r6, r3, #16
 8018f32:	0c0b      	lsrs	r3, r1, #16
 8018f34:	fb02 3306 	mla	r3, r2, r6, r3
 8018f38:	b289      	uxth	r1, r1
 8018f3a:	3001      	adds	r0, #1
 8018f3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018f40:	4285      	cmp	r5, r0
 8018f42:	f84c 1b04 	str.w	r1, [ip], #4
 8018f46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f4a:	dcec      	bgt.n	8018f26 <__multadd+0x12>
 8018f4c:	b30e      	cbz	r6, 8018f92 <__multadd+0x7e>
 8018f4e:	68a3      	ldr	r3, [r4, #8]
 8018f50:	42ab      	cmp	r3, r5
 8018f52:	dc19      	bgt.n	8018f88 <__multadd+0x74>
 8018f54:	6861      	ldr	r1, [r4, #4]
 8018f56:	4638      	mov	r0, r7
 8018f58:	3101      	adds	r1, #1
 8018f5a:	f7ff ff79 	bl	8018e50 <_Balloc>
 8018f5e:	4680      	mov	r8, r0
 8018f60:	b928      	cbnz	r0, 8018f6e <__multadd+0x5a>
 8018f62:	4602      	mov	r2, r0
 8018f64:	4b0c      	ldr	r3, [pc, #48]	; (8018f98 <__multadd+0x84>)
 8018f66:	480d      	ldr	r0, [pc, #52]	; (8018f9c <__multadd+0x88>)
 8018f68:	21ba      	movs	r1, #186	; 0xba
 8018f6a:	f001 fcbd 	bl	801a8e8 <__assert_func>
 8018f6e:	6922      	ldr	r2, [r4, #16]
 8018f70:	3202      	adds	r2, #2
 8018f72:	f104 010c 	add.w	r1, r4, #12
 8018f76:	0092      	lsls	r2, r2, #2
 8018f78:	300c      	adds	r0, #12
 8018f7a:	f7ff f860 	bl	801803e <memcpy>
 8018f7e:	4621      	mov	r1, r4
 8018f80:	4638      	mov	r0, r7
 8018f82:	f7ff ffa5 	bl	8018ed0 <_Bfree>
 8018f86:	4644      	mov	r4, r8
 8018f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f8c:	3501      	adds	r5, #1
 8018f8e:	615e      	str	r6, [r3, #20]
 8018f90:	6125      	str	r5, [r4, #16]
 8018f92:	4620      	mov	r0, r4
 8018f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f98:	0801ca25 	.word	0x0801ca25
 8018f9c:	0801ca36 	.word	0x0801ca36

08018fa0 <__s2b>:
 8018fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fa4:	460c      	mov	r4, r1
 8018fa6:	4615      	mov	r5, r2
 8018fa8:	461f      	mov	r7, r3
 8018faa:	2209      	movs	r2, #9
 8018fac:	3308      	adds	r3, #8
 8018fae:	4606      	mov	r6, r0
 8018fb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fb4:	2100      	movs	r1, #0
 8018fb6:	2201      	movs	r2, #1
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	db09      	blt.n	8018fd0 <__s2b+0x30>
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	f7ff ff47 	bl	8018e50 <_Balloc>
 8018fc2:	b940      	cbnz	r0, 8018fd6 <__s2b+0x36>
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	4b19      	ldr	r3, [pc, #100]	; (801902c <__s2b+0x8c>)
 8018fc8:	4819      	ldr	r0, [pc, #100]	; (8019030 <__s2b+0x90>)
 8018fca:	21d3      	movs	r1, #211	; 0xd3
 8018fcc:	f001 fc8c 	bl	801a8e8 <__assert_func>
 8018fd0:	0052      	lsls	r2, r2, #1
 8018fd2:	3101      	adds	r1, #1
 8018fd4:	e7f0      	b.n	8018fb8 <__s2b+0x18>
 8018fd6:	9b08      	ldr	r3, [sp, #32]
 8018fd8:	6143      	str	r3, [r0, #20]
 8018fda:	2d09      	cmp	r5, #9
 8018fdc:	f04f 0301 	mov.w	r3, #1
 8018fe0:	6103      	str	r3, [r0, #16]
 8018fe2:	dd16      	ble.n	8019012 <__s2b+0x72>
 8018fe4:	f104 0909 	add.w	r9, r4, #9
 8018fe8:	46c8      	mov	r8, r9
 8018fea:	442c      	add	r4, r5
 8018fec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018ff0:	4601      	mov	r1, r0
 8018ff2:	3b30      	subs	r3, #48	; 0x30
 8018ff4:	220a      	movs	r2, #10
 8018ff6:	4630      	mov	r0, r6
 8018ff8:	f7ff ff8c 	bl	8018f14 <__multadd>
 8018ffc:	45a0      	cmp	r8, r4
 8018ffe:	d1f5      	bne.n	8018fec <__s2b+0x4c>
 8019000:	f1a5 0408 	sub.w	r4, r5, #8
 8019004:	444c      	add	r4, r9
 8019006:	1b2d      	subs	r5, r5, r4
 8019008:	1963      	adds	r3, r4, r5
 801900a:	42bb      	cmp	r3, r7
 801900c:	db04      	blt.n	8019018 <__s2b+0x78>
 801900e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019012:	340a      	adds	r4, #10
 8019014:	2509      	movs	r5, #9
 8019016:	e7f6      	b.n	8019006 <__s2b+0x66>
 8019018:	f814 3b01 	ldrb.w	r3, [r4], #1
 801901c:	4601      	mov	r1, r0
 801901e:	3b30      	subs	r3, #48	; 0x30
 8019020:	220a      	movs	r2, #10
 8019022:	4630      	mov	r0, r6
 8019024:	f7ff ff76 	bl	8018f14 <__multadd>
 8019028:	e7ee      	b.n	8019008 <__s2b+0x68>
 801902a:	bf00      	nop
 801902c:	0801ca25 	.word	0x0801ca25
 8019030:	0801ca36 	.word	0x0801ca36

08019034 <__hi0bits>:
 8019034:	0c03      	lsrs	r3, r0, #16
 8019036:	041b      	lsls	r3, r3, #16
 8019038:	b9d3      	cbnz	r3, 8019070 <__hi0bits+0x3c>
 801903a:	0400      	lsls	r0, r0, #16
 801903c:	2310      	movs	r3, #16
 801903e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019042:	bf04      	itt	eq
 8019044:	0200      	lsleq	r0, r0, #8
 8019046:	3308      	addeq	r3, #8
 8019048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801904c:	bf04      	itt	eq
 801904e:	0100      	lsleq	r0, r0, #4
 8019050:	3304      	addeq	r3, #4
 8019052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019056:	bf04      	itt	eq
 8019058:	0080      	lsleq	r0, r0, #2
 801905a:	3302      	addeq	r3, #2
 801905c:	2800      	cmp	r0, #0
 801905e:	db05      	blt.n	801906c <__hi0bits+0x38>
 8019060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019064:	f103 0301 	add.w	r3, r3, #1
 8019068:	bf08      	it	eq
 801906a:	2320      	moveq	r3, #32
 801906c:	4618      	mov	r0, r3
 801906e:	4770      	bx	lr
 8019070:	2300      	movs	r3, #0
 8019072:	e7e4      	b.n	801903e <__hi0bits+0xa>

08019074 <__lo0bits>:
 8019074:	6803      	ldr	r3, [r0, #0]
 8019076:	f013 0207 	ands.w	r2, r3, #7
 801907a:	d00c      	beq.n	8019096 <__lo0bits+0x22>
 801907c:	07d9      	lsls	r1, r3, #31
 801907e:	d422      	bmi.n	80190c6 <__lo0bits+0x52>
 8019080:	079a      	lsls	r2, r3, #30
 8019082:	bf49      	itett	mi
 8019084:	085b      	lsrmi	r3, r3, #1
 8019086:	089b      	lsrpl	r3, r3, #2
 8019088:	6003      	strmi	r3, [r0, #0]
 801908a:	2201      	movmi	r2, #1
 801908c:	bf5c      	itt	pl
 801908e:	6003      	strpl	r3, [r0, #0]
 8019090:	2202      	movpl	r2, #2
 8019092:	4610      	mov	r0, r2
 8019094:	4770      	bx	lr
 8019096:	b299      	uxth	r1, r3
 8019098:	b909      	cbnz	r1, 801909e <__lo0bits+0x2a>
 801909a:	0c1b      	lsrs	r3, r3, #16
 801909c:	2210      	movs	r2, #16
 801909e:	b2d9      	uxtb	r1, r3
 80190a0:	b909      	cbnz	r1, 80190a6 <__lo0bits+0x32>
 80190a2:	3208      	adds	r2, #8
 80190a4:	0a1b      	lsrs	r3, r3, #8
 80190a6:	0719      	lsls	r1, r3, #28
 80190a8:	bf04      	itt	eq
 80190aa:	091b      	lsreq	r3, r3, #4
 80190ac:	3204      	addeq	r2, #4
 80190ae:	0799      	lsls	r1, r3, #30
 80190b0:	bf04      	itt	eq
 80190b2:	089b      	lsreq	r3, r3, #2
 80190b4:	3202      	addeq	r2, #2
 80190b6:	07d9      	lsls	r1, r3, #31
 80190b8:	d403      	bmi.n	80190c2 <__lo0bits+0x4e>
 80190ba:	085b      	lsrs	r3, r3, #1
 80190bc:	f102 0201 	add.w	r2, r2, #1
 80190c0:	d003      	beq.n	80190ca <__lo0bits+0x56>
 80190c2:	6003      	str	r3, [r0, #0]
 80190c4:	e7e5      	b.n	8019092 <__lo0bits+0x1e>
 80190c6:	2200      	movs	r2, #0
 80190c8:	e7e3      	b.n	8019092 <__lo0bits+0x1e>
 80190ca:	2220      	movs	r2, #32
 80190cc:	e7e1      	b.n	8019092 <__lo0bits+0x1e>
	...

080190d0 <__i2b>:
 80190d0:	b510      	push	{r4, lr}
 80190d2:	460c      	mov	r4, r1
 80190d4:	2101      	movs	r1, #1
 80190d6:	f7ff febb 	bl	8018e50 <_Balloc>
 80190da:	4602      	mov	r2, r0
 80190dc:	b928      	cbnz	r0, 80190ea <__i2b+0x1a>
 80190de:	4b05      	ldr	r3, [pc, #20]	; (80190f4 <__i2b+0x24>)
 80190e0:	4805      	ldr	r0, [pc, #20]	; (80190f8 <__i2b+0x28>)
 80190e2:	f240 1145 	movw	r1, #325	; 0x145
 80190e6:	f001 fbff 	bl	801a8e8 <__assert_func>
 80190ea:	2301      	movs	r3, #1
 80190ec:	6144      	str	r4, [r0, #20]
 80190ee:	6103      	str	r3, [r0, #16]
 80190f0:	bd10      	pop	{r4, pc}
 80190f2:	bf00      	nop
 80190f4:	0801ca25 	.word	0x0801ca25
 80190f8:	0801ca36 	.word	0x0801ca36

080190fc <__multiply>:
 80190fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019100:	4691      	mov	r9, r2
 8019102:	690a      	ldr	r2, [r1, #16]
 8019104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019108:	429a      	cmp	r2, r3
 801910a:	bfb8      	it	lt
 801910c:	460b      	movlt	r3, r1
 801910e:	460c      	mov	r4, r1
 8019110:	bfbc      	itt	lt
 8019112:	464c      	movlt	r4, r9
 8019114:	4699      	movlt	r9, r3
 8019116:	6927      	ldr	r7, [r4, #16]
 8019118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801911c:	68a3      	ldr	r3, [r4, #8]
 801911e:	6861      	ldr	r1, [r4, #4]
 8019120:	eb07 060a 	add.w	r6, r7, sl
 8019124:	42b3      	cmp	r3, r6
 8019126:	b085      	sub	sp, #20
 8019128:	bfb8      	it	lt
 801912a:	3101      	addlt	r1, #1
 801912c:	f7ff fe90 	bl	8018e50 <_Balloc>
 8019130:	b930      	cbnz	r0, 8019140 <__multiply+0x44>
 8019132:	4602      	mov	r2, r0
 8019134:	4b44      	ldr	r3, [pc, #272]	; (8019248 <__multiply+0x14c>)
 8019136:	4845      	ldr	r0, [pc, #276]	; (801924c <__multiply+0x150>)
 8019138:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801913c:	f001 fbd4 	bl	801a8e8 <__assert_func>
 8019140:	f100 0514 	add.w	r5, r0, #20
 8019144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019148:	462b      	mov	r3, r5
 801914a:	2200      	movs	r2, #0
 801914c:	4543      	cmp	r3, r8
 801914e:	d321      	bcc.n	8019194 <__multiply+0x98>
 8019150:	f104 0314 	add.w	r3, r4, #20
 8019154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019158:	f109 0314 	add.w	r3, r9, #20
 801915c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019160:	9202      	str	r2, [sp, #8]
 8019162:	1b3a      	subs	r2, r7, r4
 8019164:	3a15      	subs	r2, #21
 8019166:	f022 0203 	bic.w	r2, r2, #3
 801916a:	3204      	adds	r2, #4
 801916c:	f104 0115 	add.w	r1, r4, #21
 8019170:	428f      	cmp	r7, r1
 8019172:	bf38      	it	cc
 8019174:	2204      	movcc	r2, #4
 8019176:	9201      	str	r2, [sp, #4]
 8019178:	9a02      	ldr	r2, [sp, #8]
 801917a:	9303      	str	r3, [sp, #12]
 801917c:	429a      	cmp	r2, r3
 801917e:	d80c      	bhi.n	801919a <__multiply+0x9e>
 8019180:	2e00      	cmp	r6, #0
 8019182:	dd03      	ble.n	801918c <__multiply+0x90>
 8019184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019188:	2b00      	cmp	r3, #0
 801918a:	d05b      	beq.n	8019244 <__multiply+0x148>
 801918c:	6106      	str	r6, [r0, #16]
 801918e:	b005      	add	sp, #20
 8019190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019194:	f843 2b04 	str.w	r2, [r3], #4
 8019198:	e7d8      	b.n	801914c <__multiply+0x50>
 801919a:	f8b3 a000 	ldrh.w	sl, [r3]
 801919e:	f1ba 0f00 	cmp.w	sl, #0
 80191a2:	d024      	beq.n	80191ee <__multiply+0xf2>
 80191a4:	f104 0e14 	add.w	lr, r4, #20
 80191a8:	46a9      	mov	r9, r5
 80191aa:	f04f 0c00 	mov.w	ip, #0
 80191ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80191b2:	f8d9 1000 	ldr.w	r1, [r9]
 80191b6:	fa1f fb82 	uxth.w	fp, r2
 80191ba:	b289      	uxth	r1, r1
 80191bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80191c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80191c4:	f8d9 2000 	ldr.w	r2, [r9]
 80191c8:	4461      	add	r1, ip
 80191ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80191d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80191d6:	b289      	uxth	r1, r1
 80191d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80191dc:	4577      	cmp	r7, lr
 80191de:	f849 1b04 	str.w	r1, [r9], #4
 80191e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191e6:	d8e2      	bhi.n	80191ae <__multiply+0xb2>
 80191e8:	9a01      	ldr	r2, [sp, #4]
 80191ea:	f845 c002 	str.w	ip, [r5, r2]
 80191ee:	9a03      	ldr	r2, [sp, #12]
 80191f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80191f4:	3304      	adds	r3, #4
 80191f6:	f1b9 0f00 	cmp.w	r9, #0
 80191fa:	d021      	beq.n	8019240 <__multiply+0x144>
 80191fc:	6829      	ldr	r1, [r5, #0]
 80191fe:	f104 0c14 	add.w	ip, r4, #20
 8019202:	46ae      	mov	lr, r5
 8019204:	f04f 0a00 	mov.w	sl, #0
 8019208:	f8bc b000 	ldrh.w	fp, [ip]
 801920c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019210:	fb09 220b 	mla	r2, r9, fp, r2
 8019214:	4452      	add	r2, sl
 8019216:	b289      	uxth	r1, r1
 8019218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801921c:	f84e 1b04 	str.w	r1, [lr], #4
 8019220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019228:	f8be 1000 	ldrh.w	r1, [lr]
 801922c:	fb09 110a 	mla	r1, r9, sl, r1
 8019230:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019234:	4567      	cmp	r7, ip
 8019236:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801923a:	d8e5      	bhi.n	8019208 <__multiply+0x10c>
 801923c:	9a01      	ldr	r2, [sp, #4]
 801923e:	50a9      	str	r1, [r5, r2]
 8019240:	3504      	adds	r5, #4
 8019242:	e799      	b.n	8019178 <__multiply+0x7c>
 8019244:	3e01      	subs	r6, #1
 8019246:	e79b      	b.n	8019180 <__multiply+0x84>
 8019248:	0801ca25 	.word	0x0801ca25
 801924c:	0801ca36 	.word	0x0801ca36

08019250 <__pow5mult>:
 8019250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019254:	4615      	mov	r5, r2
 8019256:	f012 0203 	ands.w	r2, r2, #3
 801925a:	4606      	mov	r6, r0
 801925c:	460f      	mov	r7, r1
 801925e:	d007      	beq.n	8019270 <__pow5mult+0x20>
 8019260:	4c25      	ldr	r4, [pc, #148]	; (80192f8 <__pow5mult+0xa8>)
 8019262:	3a01      	subs	r2, #1
 8019264:	2300      	movs	r3, #0
 8019266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801926a:	f7ff fe53 	bl	8018f14 <__multadd>
 801926e:	4607      	mov	r7, r0
 8019270:	10ad      	asrs	r5, r5, #2
 8019272:	d03d      	beq.n	80192f0 <__pow5mult+0xa0>
 8019274:	69f4      	ldr	r4, [r6, #28]
 8019276:	b97c      	cbnz	r4, 8019298 <__pow5mult+0x48>
 8019278:	2010      	movs	r0, #16
 801927a:	f7ff fd35 	bl	8018ce8 <malloc>
 801927e:	4602      	mov	r2, r0
 8019280:	61f0      	str	r0, [r6, #28]
 8019282:	b928      	cbnz	r0, 8019290 <__pow5mult+0x40>
 8019284:	4b1d      	ldr	r3, [pc, #116]	; (80192fc <__pow5mult+0xac>)
 8019286:	481e      	ldr	r0, [pc, #120]	; (8019300 <__pow5mult+0xb0>)
 8019288:	f240 11b3 	movw	r1, #435	; 0x1b3
 801928c:	f001 fb2c 	bl	801a8e8 <__assert_func>
 8019290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019294:	6004      	str	r4, [r0, #0]
 8019296:	60c4      	str	r4, [r0, #12]
 8019298:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801929c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80192a0:	b94c      	cbnz	r4, 80192b6 <__pow5mult+0x66>
 80192a2:	f240 2171 	movw	r1, #625	; 0x271
 80192a6:	4630      	mov	r0, r6
 80192a8:	f7ff ff12 	bl	80190d0 <__i2b>
 80192ac:	2300      	movs	r3, #0
 80192ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80192b2:	4604      	mov	r4, r0
 80192b4:	6003      	str	r3, [r0, #0]
 80192b6:	f04f 0900 	mov.w	r9, #0
 80192ba:	07eb      	lsls	r3, r5, #31
 80192bc:	d50a      	bpl.n	80192d4 <__pow5mult+0x84>
 80192be:	4639      	mov	r1, r7
 80192c0:	4622      	mov	r2, r4
 80192c2:	4630      	mov	r0, r6
 80192c4:	f7ff ff1a 	bl	80190fc <__multiply>
 80192c8:	4639      	mov	r1, r7
 80192ca:	4680      	mov	r8, r0
 80192cc:	4630      	mov	r0, r6
 80192ce:	f7ff fdff 	bl	8018ed0 <_Bfree>
 80192d2:	4647      	mov	r7, r8
 80192d4:	106d      	asrs	r5, r5, #1
 80192d6:	d00b      	beq.n	80192f0 <__pow5mult+0xa0>
 80192d8:	6820      	ldr	r0, [r4, #0]
 80192da:	b938      	cbnz	r0, 80192ec <__pow5mult+0x9c>
 80192dc:	4622      	mov	r2, r4
 80192de:	4621      	mov	r1, r4
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff ff0b 	bl	80190fc <__multiply>
 80192e6:	6020      	str	r0, [r4, #0]
 80192e8:	f8c0 9000 	str.w	r9, [r0]
 80192ec:	4604      	mov	r4, r0
 80192ee:	e7e4      	b.n	80192ba <__pow5mult+0x6a>
 80192f0:	4638      	mov	r0, r7
 80192f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192f6:	bf00      	nop
 80192f8:	0801cb80 	.word	0x0801cb80
 80192fc:	0801c9b6 	.word	0x0801c9b6
 8019300:	0801ca36 	.word	0x0801ca36

08019304 <__lshift>:
 8019304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019308:	460c      	mov	r4, r1
 801930a:	6849      	ldr	r1, [r1, #4]
 801930c:	6923      	ldr	r3, [r4, #16]
 801930e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019312:	68a3      	ldr	r3, [r4, #8]
 8019314:	4607      	mov	r7, r0
 8019316:	4691      	mov	r9, r2
 8019318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801931c:	f108 0601 	add.w	r6, r8, #1
 8019320:	42b3      	cmp	r3, r6
 8019322:	db0b      	blt.n	801933c <__lshift+0x38>
 8019324:	4638      	mov	r0, r7
 8019326:	f7ff fd93 	bl	8018e50 <_Balloc>
 801932a:	4605      	mov	r5, r0
 801932c:	b948      	cbnz	r0, 8019342 <__lshift+0x3e>
 801932e:	4602      	mov	r2, r0
 8019330:	4b28      	ldr	r3, [pc, #160]	; (80193d4 <__lshift+0xd0>)
 8019332:	4829      	ldr	r0, [pc, #164]	; (80193d8 <__lshift+0xd4>)
 8019334:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019338:	f001 fad6 	bl	801a8e8 <__assert_func>
 801933c:	3101      	adds	r1, #1
 801933e:	005b      	lsls	r3, r3, #1
 8019340:	e7ee      	b.n	8019320 <__lshift+0x1c>
 8019342:	2300      	movs	r3, #0
 8019344:	f100 0114 	add.w	r1, r0, #20
 8019348:	f100 0210 	add.w	r2, r0, #16
 801934c:	4618      	mov	r0, r3
 801934e:	4553      	cmp	r3, sl
 8019350:	db33      	blt.n	80193ba <__lshift+0xb6>
 8019352:	6920      	ldr	r0, [r4, #16]
 8019354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019358:	f104 0314 	add.w	r3, r4, #20
 801935c:	f019 091f 	ands.w	r9, r9, #31
 8019360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019368:	d02b      	beq.n	80193c2 <__lshift+0xbe>
 801936a:	f1c9 0e20 	rsb	lr, r9, #32
 801936e:	468a      	mov	sl, r1
 8019370:	2200      	movs	r2, #0
 8019372:	6818      	ldr	r0, [r3, #0]
 8019374:	fa00 f009 	lsl.w	r0, r0, r9
 8019378:	4310      	orrs	r0, r2
 801937a:	f84a 0b04 	str.w	r0, [sl], #4
 801937e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019382:	459c      	cmp	ip, r3
 8019384:	fa22 f20e 	lsr.w	r2, r2, lr
 8019388:	d8f3      	bhi.n	8019372 <__lshift+0x6e>
 801938a:	ebac 0304 	sub.w	r3, ip, r4
 801938e:	3b15      	subs	r3, #21
 8019390:	f023 0303 	bic.w	r3, r3, #3
 8019394:	3304      	adds	r3, #4
 8019396:	f104 0015 	add.w	r0, r4, #21
 801939a:	4584      	cmp	ip, r0
 801939c:	bf38      	it	cc
 801939e:	2304      	movcc	r3, #4
 80193a0:	50ca      	str	r2, [r1, r3]
 80193a2:	b10a      	cbz	r2, 80193a8 <__lshift+0xa4>
 80193a4:	f108 0602 	add.w	r6, r8, #2
 80193a8:	3e01      	subs	r6, #1
 80193aa:	4638      	mov	r0, r7
 80193ac:	612e      	str	r6, [r5, #16]
 80193ae:	4621      	mov	r1, r4
 80193b0:	f7ff fd8e 	bl	8018ed0 <_Bfree>
 80193b4:	4628      	mov	r0, r5
 80193b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80193be:	3301      	adds	r3, #1
 80193c0:	e7c5      	b.n	801934e <__lshift+0x4a>
 80193c2:	3904      	subs	r1, #4
 80193c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80193c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80193cc:	459c      	cmp	ip, r3
 80193ce:	d8f9      	bhi.n	80193c4 <__lshift+0xc0>
 80193d0:	e7ea      	b.n	80193a8 <__lshift+0xa4>
 80193d2:	bf00      	nop
 80193d4:	0801ca25 	.word	0x0801ca25
 80193d8:	0801ca36 	.word	0x0801ca36

080193dc <__mcmp>:
 80193dc:	b530      	push	{r4, r5, lr}
 80193de:	6902      	ldr	r2, [r0, #16]
 80193e0:	690c      	ldr	r4, [r1, #16]
 80193e2:	1b12      	subs	r2, r2, r4
 80193e4:	d10e      	bne.n	8019404 <__mcmp+0x28>
 80193e6:	f100 0314 	add.w	r3, r0, #20
 80193ea:	3114      	adds	r1, #20
 80193ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80193f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80193f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80193fc:	42a5      	cmp	r5, r4
 80193fe:	d003      	beq.n	8019408 <__mcmp+0x2c>
 8019400:	d305      	bcc.n	801940e <__mcmp+0x32>
 8019402:	2201      	movs	r2, #1
 8019404:	4610      	mov	r0, r2
 8019406:	bd30      	pop	{r4, r5, pc}
 8019408:	4283      	cmp	r3, r0
 801940a:	d3f3      	bcc.n	80193f4 <__mcmp+0x18>
 801940c:	e7fa      	b.n	8019404 <__mcmp+0x28>
 801940e:	f04f 32ff 	mov.w	r2, #4294967295
 8019412:	e7f7      	b.n	8019404 <__mcmp+0x28>

08019414 <__mdiff>:
 8019414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019418:	460c      	mov	r4, r1
 801941a:	4606      	mov	r6, r0
 801941c:	4611      	mov	r1, r2
 801941e:	4620      	mov	r0, r4
 8019420:	4690      	mov	r8, r2
 8019422:	f7ff ffdb 	bl	80193dc <__mcmp>
 8019426:	1e05      	subs	r5, r0, #0
 8019428:	d110      	bne.n	801944c <__mdiff+0x38>
 801942a:	4629      	mov	r1, r5
 801942c:	4630      	mov	r0, r6
 801942e:	f7ff fd0f 	bl	8018e50 <_Balloc>
 8019432:	b930      	cbnz	r0, 8019442 <__mdiff+0x2e>
 8019434:	4b3a      	ldr	r3, [pc, #232]	; (8019520 <__mdiff+0x10c>)
 8019436:	4602      	mov	r2, r0
 8019438:	f240 2137 	movw	r1, #567	; 0x237
 801943c:	4839      	ldr	r0, [pc, #228]	; (8019524 <__mdiff+0x110>)
 801943e:	f001 fa53 	bl	801a8e8 <__assert_func>
 8019442:	2301      	movs	r3, #1
 8019444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801944c:	bfa4      	itt	ge
 801944e:	4643      	movge	r3, r8
 8019450:	46a0      	movge	r8, r4
 8019452:	4630      	mov	r0, r6
 8019454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019458:	bfa6      	itte	ge
 801945a:	461c      	movge	r4, r3
 801945c:	2500      	movge	r5, #0
 801945e:	2501      	movlt	r5, #1
 8019460:	f7ff fcf6 	bl	8018e50 <_Balloc>
 8019464:	b920      	cbnz	r0, 8019470 <__mdiff+0x5c>
 8019466:	4b2e      	ldr	r3, [pc, #184]	; (8019520 <__mdiff+0x10c>)
 8019468:	4602      	mov	r2, r0
 801946a:	f240 2145 	movw	r1, #581	; 0x245
 801946e:	e7e5      	b.n	801943c <__mdiff+0x28>
 8019470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019474:	6926      	ldr	r6, [r4, #16]
 8019476:	60c5      	str	r5, [r0, #12]
 8019478:	f104 0914 	add.w	r9, r4, #20
 801947c:	f108 0514 	add.w	r5, r8, #20
 8019480:	f100 0e14 	add.w	lr, r0, #20
 8019484:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801948c:	f108 0210 	add.w	r2, r8, #16
 8019490:	46f2      	mov	sl, lr
 8019492:	2100      	movs	r1, #0
 8019494:	f859 3b04 	ldr.w	r3, [r9], #4
 8019498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801949c:	fa11 f88b 	uxtah	r8, r1, fp
 80194a0:	b299      	uxth	r1, r3
 80194a2:	0c1b      	lsrs	r3, r3, #16
 80194a4:	eba8 0801 	sub.w	r8, r8, r1
 80194a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80194ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80194b0:	fa1f f888 	uxth.w	r8, r8
 80194b4:	1419      	asrs	r1, r3, #16
 80194b6:	454e      	cmp	r6, r9
 80194b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80194bc:	f84a 3b04 	str.w	r3, [sl], #4
 80194c0:	d8e8      	bhi.n	8019494 <__mdiff+0x80>
 80194c2:	1b33      	subs	r3, r6, r4
 80194c4:	3b15      	subs	r3, #21
 80194c6:	f023 0303 	bic.w	r3, r3, #3
 80194ca:	3304      	adds	r3, #4
 80194cc:	3415      	adds	r4, #21
 80194ce:	42a6      	cmp	r6, r4
 80194d0:	bf38      	it	cc
 80194d2:	2304      	movcc	r3, #4
 80194d4:	441d      	add	r5, r3
 80194d6:	4473      	add	r3, lr
 80194d8:	469e      	mov	lr, r3
 80194da:	462e      	mov	r6, r5
 80194dc:	4566      	cmp	r6, ip
 80194de:	d30e      	bcc.n	80194fe <__mdiff+0xea>
 80194e0:	f10c 0203 	add.w	r2, ip, #3
 80194e4:	1b52      	subs	r2, r2, r5
 80194e6:	f022 0203 	bic.w	r2, r2, #3
 80194ea:	3d03      	subs	r5, #3
 80194ec:	45ac      	cmp	ip, r5
 80194ee:	bf38      	it	cc
 80194f0:	2200      	movcc	r2, #0
 80194f2:	4413      	add	r3, r2
 80194f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80194f8:	b17a      	cbz	r2, 801951a <__mdiff+0x106>
 80194fa:	6107      	str	r7, [r0, #16]
 80194fc:	e7a4      	b.n	8019448 <__mdiff+0x34>
 80194fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8019502:	fa11 f288 	uxtah	r2, r1, r8
 8019506:	1414      	asrs	r4, r2, #16
 8019508:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801950c:	b292      	uxth	r2, r2
 801950e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019512:	f84e 2b04 	str.w	r2, [lr], #4
 8019516:	1421      	asrs	r1, r4, #16
 8019518:	e7e0      	b.n	80194dc <__mdiff+0xc8>
 801951a:	3f01      	subs	r7, #1
 801951c:	e7ea      	b.n	80194f4 <__mdiff+0xe0>
 801951e:	bf00      	nop
 8019520:	0801ca25 	.word	0x0801ca25
 8019524:	0801ca36 	.word	0x0801ca36

08019528 <__ulp>:
 8019528:	b082      	sub	sp, #8
 801952a:	ed8d 0b00 	vstr	d0, [sp]
 801952e:	9a01      	ldr	r2, [sp, #4]
 8019530:	4b0f      	ldr	r3, [pc, #60]	; (8019570 <__ulp+0x48>)
 8019532:	4013      	ands	r3, r2
 8019534:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019538:	2b00      	cmp	r3, #0
 801953a:	dc08      	bgt.n	801954e <__ulp+0x26>
 801953c:	425b      	negs	r3, r3
 801953e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019542:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019546:	da04      	bge.n	8019552 <__ulp+0x2a>
 8019548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801954c:	4113      	asrs	r3, r2
 801954e:	2200      	movs	r2, #0
 8019550:	e008      	b.n	8019564 <__ulp+0x3c>
 8019552:	f1a2 0314 	sub.w	r3, r2, #20
 8019556:	2b1e      	cmp	r3, #30
 8019558:	bfda      	itte	le
 801955a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801955e:	40da      	lsrle	r2, r3
 8019560:	2201      	movgt	r2, #1
 8019562:	2300      	movs	r3, #0
 8019564:	4619      	mov	r1, r3
 8019566:	4610      	mov	r0, r2
 8019568:	ec41 0b10 	vmov	d0, r0, r1
 801956c:	b002      	add	sp, #8
 801956e:	4770      	bx	lr
 8019570:	7ff00000 	.word	0x7ff00000

08019574 <__b2d>:
 8019574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019578:	6906      	ldr	r6, [r0, #16]
 801957a:	f100 0814 	add.w	r8, r0, #20
 801957e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019582:	1f37      	subs	r7, r6, #4
 8019584:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019588:	4610      	mov	r0, r2
 801958a:	f7ff fd53 	bl	8019034 <__hi0bits>
 801958e:	f1c0 0320 	rsb	r3, r0, #32
 8019592:	280a      	cmp	r0, #10
 8019594:	600b      	str	r3, [r1, #0]
 8019596:	491b      	ldr	r1, [pc, #108]	; (8019604 <__b2d+0x90>)
 8019598:	dc15      	bgt.n	80195c6 <__b2d+0x52>
 801959a:	f1c0 0c0b 	rsb	ip, r0, #11
 801959e:	fa22 f30c 	lsr.w	r3, r2, ip
 80195a2:	45b8      	cmp	r8, r7
 80195a4:	ea43 0501 	orr.w	r5, r3, r1
 80195a8:	bf34      	ite	cc
 80195aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195ae:	2300      	movcs	r3, #0
 80195b0:	3015      	adds	r0, #21
 80195b2:	fa02 f000 	lsl.w	r0, r2, r0
 80195b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80195ba:	4303      	orrs	r3, r0
 80195bc:	461c      	mov	r4, r3
 80195be:	ec45 4b10 	vmov	d0, r4, r5
 80195c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195c6:	45b8      	cmp	r8, r7
 80195c8:	bf3a      	itte	cc
 80195ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80195d2:	2300      	movcs	r3, #0
 80195d4:	380b      	subs	r0, #11
 80195d6:	d012      	beq.n	80195fe <__b2d+0x8a>
 80195d8:	f1c0 0120 	rsb	r1, r0, #32
 80195dc:	fa23 f401 	lsr.w	r4, r3, r1
 80195e0:	4082      	lsls	r2, r0
 80195e2:	4322      	orrs	r2, r4
 80195e4:	4547      	cmp	r7, r8
 80195e6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80195ea:	bf8c      	ite	hi
 80195ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80195f0:	2200      	movls	r2, #0
 80195f2:	4083      	lsls	r3, r0
 80195f4:	40ca      	lsrs	r2, r1
 80195f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80195fa:	4313      	orrs	r3, r2
 80195fc:	e7de      	b.n	80195bc <__b2d+0x48>
 80195fe:	ea42 0501 	orr.w	r5, r2, r1
 8019602:	e7db      	b.n	80195bc <__b2d+0x48>
 8019604:	3ff00000 	.word	0x3ff00000

08019608 <__d2b>:
 8019608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801960c:	460f      	mov	r7, r1
 801960e:	2101      	movs	r1, #1
 8019610:	ec59 8b10 	vmov	r8, r9, d0
 8019614:	4616      	mov	r6, r2
 8019616:	f7ff fc1b 	bl	8018e50 <_Balloc>
 801961a:	4604      	mov	r4, r0
 801961c:	b930      	cbnz	r0, 801962c <__d2b+0x24>
 801961e:	4602      	mov	r2, r0
 8019620:	4b24      	ldr	r3, [pc, #144]	; (80196b4 <__d2b+0xac>)
 8019622:	4825      	ldr	r0, [pc, #148]	; (80196b8 <__d2b+0xb0>)
 8019624:	f240 310f 	movw	r1, #783	; 0x30f
 8019628:	f001 f95e 	bl	801a8e8 <__assert_func>
 801962c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019634:	bb2d      	cbnz	r5, 8019682 <__d2b+0x7a>
 8019636:	9301      	str	r3, [sp, #4]
 8019638:	f1b8 0300 	subs.w	r3, r8, #0
 801963c:	d026      	beq.n	801968c <__d2b+0x84>
 801963e:	4668      	mov	r0, sp
 8019640:	9300      	str	r3, [sp, #0]
 8019642:	f7ff fd17 	bl	8019074 <__lo0bits>
 8019646:	e9dd 1200 	ldrd	r1, r2, [sp]
 801964a:	b1e8      	cbz	r0, 8019688 <__d2b+0x80>
 801964c:	f1c0 0320 	rsb	r3, r0, #32
 8019650:	fa02 f303 	lsl.w	r3, r2, r3
 8019654:	430b      	orrs	r3, r1
 8019656:	40c2      	lsrs	r2, r0
 8019658:	6163      	str	r3, [r4, #20]
 801965a:	9201      	str	r2, [sp, #4]
 801965c:	9b01      	ldr	r3, [sp, #4]
 801965e:	61a3      	str	r3, [r4, #24]
 8019660:	2b00      	cmp	r3, #0
 8019662:	bf14      	ite	ne
 8019664:	2202      	movne	r2, #2
 8019666:	2201      	moveq	r2, #1
 8019668:	6122      	str	r2, [r4, #16]
 801966a:	b1bd      	cbz	r5, 801969c <__d2b+0x94>
 801966c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019670:	4405      	add	r5, r0
 8019672:	603d      	str	r5, [r7, #0]
 8019674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019678:	6030      	str	r0, [r6, #0]
 801967a:	4620      	mov	r0, r4
 801967c:	b003      	add	sp, #12
 801967e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019686:	e7d6      	b.n	8019636 <__d2b+0x2e>
 8019688:	6161      	str	r1, [r4, #20]
 801968a:	e7e7      	b.n	801965c <__d2b+0x54>
 801968c:	a801      	add	r0, sp, #4
 801968e:	f7ff fcf1 	bl	8019074 <__lo0bits>
 8019692:	9b01      	ldr	r3, [sp, #4]
 8019694:	6163      	str	r3, [r4, #20]
 8019696:	3020      	adds	r0, #32
 8019698:	2201      	movs	r2, #1
 801969a:	e7e5      	b.n	8019668 <__d2b+0x60>
 801969c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80196a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80196a4:	6038      	str	r0, [r7, #0]
 80196a6:	6918      	ldr	r0, [r3, #16]
 80196a8:	f7ff fcc4 	bl	8019034 <__hi0bits>
 80196ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80196b0:	e7e2      	b.n	8019678 <__d2b+0x70>
 80196b2:	bf00      	nop
 80196b4:	0801ca25 	.word	0x0801ca25
 80196b8:	0801ca36 	.word	0x0801ca36

080196bc <__ratio>:
 80196bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c0:	4688      	mov	r8, r1
 80196c2:	4669      	mov	r1, sp
 80196c4:	4681      	mov	r9, r0
 80196c6:	f7ff ff55 	bl	8019574 <__b2d>
 80196ca:	a901      	add	r1, sp, #4
 80196cc:	4640      	mov	r0, r8
 80196ce:	ec55 4b10 	vmov	r4, r5, d0
 80196d2:	ee10 aa10 	vmov	sl, s0
 80196d6:	f7ff ff4d 	bl	8019574 <__b2d>
 80196da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80196de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80196e2:	1ad2      	subs	r2, r2, r3
 80196e4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80196e8:	1a5b      	subs	r3, r3, r1
 80196ea:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80196ee:	ec57 6b10 	vmov	r6, r7, d0
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	bfd6      	itet	le
 80196f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80196fa:	462a      	movgt	r2, r5
 80196fc:	463a      	movle	r2, r7
 80196fe:	46ab      	mov	fp, r5
 8019700:	bfd6      	itet	le
 8019702:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019706:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801970a:	ee00 3a90 	vmovle	s1, r3
 801970e:	ec4b ab17 	vmov	d7, sl, fp
 8019712:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019716:	b003      	add	sp, #12
 8019718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801971c <__copybits>:
 801971c:	3901      	subs	r1, #1
 801971e:	b570      	push	{r4, r5, r6, lr}
 8019720:	1149      	asrs	r1, r1, #5
 8019722:	6914      	ldr	r4, [r2, #16]
 8019724:	3101      	adds	r1, #1
 8019726:	f102 0314 	add.w	r3, r2, #20
 801972a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801972e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019732:	1f05      	subs	r5, r0, #4
 8019734:	42a3      	cmp	r3, r4
 8019736:	d30c      	bcc.n	8019752 <__copybits+0x36>
 8019738:	1aa3      	subs	r3, r4, r2
 801973a:	3b11      	subs	r3, #17
 801973c:	f023 0303 	bic.w	r3, r3, #3
 8019740:	3211      	adds	r2, #17
 8019742:	42a2      	cmp	r2, r4
 8019744:	bf88      	it	hi
 8019746:	2300      	movhi	r3, #0
 8019748:	4418      	add	r0, r3
 801974a:	2300      	movs	r3, #0
 801974c:	4288      	cmp	r0, r1
 801974e:	d305      	bcc.n	801975c <__copybits+0x40>
 8019750:	bd70      	pop	{r4, r5, r6, pc}
 8019752:	f853 6b04 	ldr.w	r6, [r3], #4
 8019756:	f845 6f04 	str.w	r6, [r5, #4]!
 801975a:	e7eb      	b.n	8019734 <__copybits+0x18>
 801975c:	f840 3b04 	str.w	r3, [r0], #4
 8019760:	e7f4      	b.n	801974c <__copybits+0x30>

08019762 <__any_on>:
 8019762:	f100 0214 	add.w	r2, r0, #20
 8019766:	6900      	ldr	r0, [r0, #16]
 8019768:	114b      	asrs	r3, r1, #5
 801976a:	4298      	cmp	r0, r3
 801976c:	b510      	push	{r4, lr}
 801976e:	db11      	blt.n	8019794 <__any_on+0x32>
 8019770:	dd0a      	ble.n	8019788 <__any_on+0x26>
 8019772:	f011 011f 	ands.w	r1, r1, #31
 8019776:	d007      	beq.n	8019788 <__any_on+0x26>
 8019778:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801977c:	fa24 f001 	lsr.w	r0, r4, r1
 8019780:	fa00 f101 	lsl.w	r1, r0, r1
 8019784:	428c      	cmp	r4, r1
 8019786:	d10b      	bne.n	80197a0 <__any_on+0x3e>
 8019788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801978c:	4293      	cmp	r3, r2
 801978e:	d803      	bhi.n	8019798 <__any_on+0x36>
 8019790:	2000      	movs	r0, #0
 8019792:	bd10      	pop	{r4, pc}
 8019794:	4603      	mov	r3, r0
 8019796:	e7f7      	b.n	8019788 <__any_on+0x26>
 8019798:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801979c:	2900      	cmp	r1, #0
 801979e:	d0f5      	beq.n	801978c <__any_on+0x2a>
 80197a0:	2001      	movs	r0, #1
 80197a2:	e7f6      	b.n	8019792 <__any_on+0x30>

080197a4 <sulp>:
 80197a4:	b570      	push	{r4, r5, r6, lr}
 80197a6:	4604      	mov	r4, r0
 80197a8:	460d      	mov	r5, r1
 80197aa:	4616      	mov	r6, r2
 80197ac:	ec45 4b10 	vmov	d0, r4, r5
 80197b0:	f7ff feba 	bl	8019528 <__ulp>
 80197b4:	b17e      	cbz	r6, 80197d6 <sulp+0x32>
 80197b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80197ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80197be:	2b00      	cmp	r3, #0
 80197c0:	dd09      	ble.n	80197d6 <sulp+0x32>
 80197c2:	051b      	lsls	r3, r3, #20
 80197c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80197c8:	2000      	movs	r0, #0
 80197ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80197ce:	ec41 0b17 	vmov	d7, r0, r1
 80197d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80197d6:	bd70      	pop	{r4, r5, r6, pc}

080197d8 <_strtod_l>:
 80197d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197dc:	ed2d 8b0e 	vpush	{d8-d14}
 80197e0:	b097      	sub	sp, #92	; 0x5c
 80197e2:	4604      	mov	r4, r0
 80197e4:	920d      	str	r2, [sp, #52]	; 0x34
 80197e6:	2200      	movs	r2, #0
 80197e8:	9212      	str	r2, [sp, #72]	; 0x48
 80197ea:	468a      	mov	sl, r1
 80197ec:	f04f 0800 	mov.w	r8, #0
 80197f0:	f04f 0900 	mov.w	r9, #0
 80197f4:	460a      	mov	r2, r1
 80197f6:	9211      	str	r2, [sp, #68]	; 0x44
 80197f8:	7811      	ldrb	r1, [r2, #0]
 80197fa:	292b      	cmp	r1, #43	; 0x2b
 80197fc:	d04c      	beq.n	8019898 <_strtod_l+0xc0>
 80197fe:	d839      	bhi.n	8019874 <_strtod_l+0x9c>
 8019800:	290d      	cmp	r1, #13
 8019802:	d833      	bhi.n	801986c <_strtod_l+0x94>
 8019804:	2908      	cmp	r1, #8
 8019806:	d833      	bhi.n	8019870 <_strtod_l+0x98>
 8019808:	2900      	cmp	r1, #0
 801980a:	d03c      	beq.n	8019886 <_strtod_l+0xae>
 801980c:	2200      	movs	r2, #0
 801980e:	9208      	str	r2, [sp, #32]
 8019810:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019812:	7832      	ldrb	r2, [r6, #0]
 8019814:	2a30      	cmp	r2, #48	; 0x30
 8019816:	f040 80b8 	bne.w	801998a <_strtod_l+0x1b2>
 801981a:	7872      	ldrb	r2, [r6, #1]
 801981c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019820:	2a58      	cmp	r2, #88	; 0x58
 8019822:	d170      	bne.n	8019906 <_strtod_l+0x12e>
 8019824:	9302      	str	r3, [sp, #8]
 8019826:	9b08      	ldr	r3, [sp, #32]
 8019828:	9301      	str	r3, [sp, #4]
 801982a:	ab12      	add	r3, sp, #72	; 0x48
 801982c:	9300      	str	r3, [sp, #0]
 801982e:	4a91      	ldr	r2, [pc, #580]	; (8019a74 <_strtod_l+0x29c>)
 8019830:	ab13      	add	r3, sp, #76	; 0x4c
 8019832:	a911      	add	r1, sp, #68	; 0x44
 8019834:	4620      	mov	r0, r4
 8019836:	f001 f8f3 	bl	801aa20 <__gethex>
 801983a:	f010 070f 	ands.w	r7, r0, #15
 801983e:	4605      	mov	r5, r0
 8019840:	d005      	beq.n	801984e <_strtod_l+0x76>
 8019842:	2f06      	cmp	r7, #6
 8019844:	d12a      	bne.n	801989c <_strtod_l+0xc4>
 8019846:	3601      	adds	r6, #1
 8019848:	2300      	movs	r3, #0
 801984a:	9611      	str	r6, [sp, #68]	; 0x44
 801984c:	9308      	str	r3, [sp, #32]
 801984e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019850:	2b00      	cmp	r3, #0
 8019852:	f040 8555 	bne.w	801a300 <_strtod_l+0xb28>
 8019856:	9b08      	ldr	r3, [sp, #32]
 8019858:	ec49 8b10 	vmov	d0, r8, r9
 801985c:	b1cb      	cbz	r3, 8019892 <_strtod_l+0xba>
 801985e:	eeb1 0b40 	vneg.f64	d0, d0
 8019862:	b017      	add	sp, #92	; 0x5c
 8019864:	ecbd 8b0e 	vpop	{d8-d14}
 8019868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986c:	2920      	cmp	r1, #32
 801986e:	d1cd      	bne.n	801980c <_strtod_l+0x34>
 8019870:	3201      	adds	r2, #1
 8019872:	e7c0      	b.n	80197f6 <_strtod_l+0x1e>
 8019874:	292d      	cmp	r1, #45	; 0x2d
 8019876:	d1c9      	bne.n	801980c <_strtod_l+0x34>
 8019878:	2101      	movs	r1, #1
 801987a:	9108      	str	r1, [sp, #32]
 801987c:	1c51      	adds	r1, r2, #1
 801987e:	9111      	str	r1, [sp, #68]	; 0x44
 8019880:	7852      	ldrb	r2, [r2, #1]
 8019882:	2a00      	cmp	r2, #0
 8019884:	d1c4      	bne.n	8019810 <_strtod_l+0x38>
 8019886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019888:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801988c:	2b00      	cmp	r3, #0
 801988e:	f040 8535 	bne.w	801a2fc <_strtod_l+0xb24>
 8019892:	ec49 8b10 	vmov	d0, r8, r9
 8019896:	e7e4      	b.n	8019862 <_strtod_l+0x8a>
 8019898:	2100      	movs	r1, #0
 801989a:	e7ee      	b.n	801987a <_strtod_l+0xa2>
 801989c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801989e:	b13a      	cbz	r2, 80198b0 <_strtod_l+0xd8>
 80198a0:	2135      	movs	r1, #53	; 0x35
 80198a2:	a814      	add	r0, sp, #80	; 0x50
 80198a4:	f7ff ff3a 	bl	801971c <__copybits>
 80198a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80198aa:	4620      	mov	r0, r4
 80198ac:	f7ff fb10 	bl	8018ed0 <_Bfree>
 80198b0:	1e7b      	subs	r3, r7, #1
 80198b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80198b4:	2b04      	cmp	r3, #4
 80198b6:	d806      	bhi.n	80198c6 <_strtod_l+0xee>
 80198b8:	e8df f003 	tbb	[pc, r3]
 80198bc:	201d0314 	.word	0x201d0314
 80198c0:	14          	.byte	0x14
 80198c1:	00          	.byte	0x00
 80198c2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80198c6:	05eb      	lsls	r3, r5, #23
 80198c8:	bf48      	it	mi
 80198ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80198ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80198d2:	0d1b      	lsrs	r3, r3, #20
 80198d4:	051b      	lsls	r3, r3, #20
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d1b9      	bne.n	801984e <_strtod_l+0x76>
 80198da:	f7fe fb83 	bl	8017fe4 <__errno>
 80198de:	2322      	movs	r3, #34	; 0x22
 80198e0:	6003      	str	r3, [r0, #0]
 80198e2:	e7b4      	b.n	801984e <_strtod_l+0x76>
 80198e4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80198e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80198ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80198f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80198f4:	e7e7      	b.n	80198c6 <_strtod_l+0xee>
 80198f6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8019a7c <_strtod_l+0x2a4>
 80198fa:	e7e4      	b.n	80198c6 <_strtod_l+0xee>
 80198fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019900:	f04f 38ff 	mov.w	r8, #4294967295
 8019904:	e7df      	b.n	80198c6 <_strtod_l+0xee>
 8019906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019908:	1c5a      	adds	r2, r3, #1
 801990a:	9211      	str	r2, [sp, #68]	; 0x44
 801990c:	785b      	ldrb	r3, [r3, #1]
 801990e:	2b30      	cmp	r3, #48	; 0x30
 8019910:	d0f9      	beq.n	8019906 <_strtod_l+0x12e>
 8019912:	2b00      	cmp	r3, #0
 8019914:	d09b      	beq.n	801984e <_strtod_l+0x76>
 8019916:	2301      	movs	r3, #1
 8019918:	9306      	str	r3, [sp, #24]
 801991a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801991c:	9309      	str	r3, [sp, #36]	; 0x24
 801991e:	2300      	movs	r3, #0
 8019920:	9305      	str	r3, [sp, #20]
 8019922:	9307      	str	r3, [sp, #28]
 8019924:	461e      	mov	r6, r3
 8019926:	220a      	movs	r2, #10
 8019928:	9811      	ldr	r0, [sp, #68]	; 0x44
 801992a:	7805      	ldrb	r5, [r0, #0]
 801992c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8019930:	b2d9      	uxtb	r1, r3
 8019932:	2909      	cmp	r1, #9
 8019934:	d92b      	bls.n	801998e <_strtod_l+0x1b6>
 8019936:	4950      	ldr	r1, [pc, #320]	; (8019a78 <_strtod_l+0x2a0>)
 8019938:	2201      	movs	r2, #1
 801993a:	f000 ffa9 	bl	801a890 <strncmp>
 801993e:	2800      	cmp	r0, #0
 8019940:	d035      	beq.n	80199ae <_strtod_l+0x1d6>
 8019942:	2000      	movs	r0, #0
 8019944:	462a      	mov	r2, r5
 8019946:	4633      	mov	r3, r6
 8019948:	4683      	mov	fp, r0
 801994a:	4601      	mov	r1, r0
 801994c:	2a65      	cmp	r2, #101	; 0x65
 801994e:	d001      	beq.n	8019954 <_strtod_l+0x17c>
 8019950:	2a45      	cmp	r2, #69	; 0x45
 8019952:	d118      	bne.n	8019986 <_strtod_l+0x1ae>
 8019954:	b91b      	cbnz	r3, 801995e <_strtod_l+0x186>
 8019956:	9b06      	ldr	r3, [sp, #24]
 8019958:	4303      	orrs	r3, r0
 801995a:	d094      	beq.n	8019886 <_strtod_l+0xae>
 801995c:	2300      	movs	r3, #0
 801995e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8019962:	f10a 0201 	add.w	r2, sl, #1
 8019966:	9211      	str	r2, [sp, #68]	; 0x44
 8019968:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801996c:	2a2b      	cmp	r2, #43	; 0x2b
 801996e:	d075      	beq.n	8019a5c <_strtod_l+0x284>
 8019970:	2a2d      	cmp	r2, #45	; 0x2d
 8019972:	d07b      	beq.n	8019a6c <_strtod_l+0x294>
 8019974:	f04f 0e00 	mov.w	lr, #0
 8019978:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801997c:	2d09      	cmp	r5, #9
 801997e:	f240 8083 	bls.w	8019a88 <_strtod_l+0x2b0>
 8019982:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019986:	2500      	movs	r5, #0
 8019988:	e09e      	b.n	8019ac8 <_strtod_l+0x2f0>
 801998a:	2300      	movs	r3, #0
 801998c:	e7c4      	b.n	8019918 <_strtod_l+0x140>
 801998e:	2e08      	cmp	r6, #8
 8019990:	bfd5      	itete	le
 8019992:	9907      	ldrle	r1, [sp, #28]
 8019994:	9905      	ldrgt	r1, [sp, #20]
 8019996:	fb02 3301 	mlale	r3, r2, r1, r3
 801999a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801999e:	f100 0001 	add.w	r0, r0, #1
 80199a2:	bfd4      	ite	le
 80199a4:	9307      	strle	r3, [sp, #28]
 80199a6:	9305      	strgt	r3, [sp, #20]
 80199a8:	3601      	adds	r6, #1
 80199aa:	9011      	str	r0, [sp, #68]	; 0x44
 80199ac:	e7bc      	b.n	8019928 <_strtod_l+0x150>
 80199ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199b0:	1c5a      	adds	r2, r3, #1
 80199b2:	9211      	str	r2, [sp, #68]	; 0x44
 80199b4:	785a      	ldrb	r2, [r3, #1]
 80199b6:	b3ae      	cbz	r6, 8019a24 <_strtod_l+0x24c>
 80199b8:	4683      	mov	fp, r0
 80199ba:	4633      	mov	r3, r6
 80199bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80199c0:	2909      	cmp	r1, #9
 80199c2:	d912      	bls.n	80199ea <_strtod_l+0x212>
 80199c4:	2101      	movs	r1, #1
 80199c6:	e7c1      	b.n	801994c <_strtod_l+0x174>
 80199c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199ca:	1c5a      	adds	r2, r3, #1
 80199cc:	9211      	str	r2, [sp, #68]	; 0x44
 80199ce:	785a      	ldrb	r2, [r3, #1]
 80199d0:	3001      	adds	r0, #1
 80199d2:	2a30      	cmp	r2, #48	; 0x30
 80199d4:	d0f8      	beq.n	80199c8 <_strtod_l+0x1f0>
 80199d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80199da:	2b08      	cmp	r3, #8
 80199dc:	f200 8495 	bhi.w	801a30a <_strtod_l+0xb32>
 80199e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199e2:	9309      	str	r3, [sp, #36]	; 0x24
 80199e4:	4683      	mov	fp, r0
 80199e6:	2000      	movs	r0, #0
 80199e8:	4603      	mov	r3, r0
 80199ea:	3a30      	subs	r2, #48	; 0x30
 80199ec:	f100 0101 	add.w	r1, r0, #1
 80199f0:	d012      	beq.n	8019a18 <_strtod_l+0x240>
 80199f2:	448b      	add	fp, r1
 80199f4:	eb00 0c03 	add.w	ip, r0, r3
 80199f8:	4619      	mov	r1, r3
 80199fa:	250a      	movs	r5, #10
 80199fc:	4561      	cmp	r1, ip
 80199fe:	d113      	bne.n	8019a28 <_strtod_l+0x250>
 8019a00:	1819      	adds	r1, r3, r0
 8019a02:	2908      	cmp	r1, #8
 8019a04:	f103 0301 	add.w	r3, r3, #1
 8019a08:	4403      	add	r3, r0
 8019a0a:	dc1b      	bgt.n	8019a44 <_strtod_l+0x26c>
 8019a0c:	9807      	ldr	r0, [sp, #28]
 8019a0e:	210a      	movs	r1, #10
 8019a10:	fb01 2200 	mla	r2, r1, r0, r2
 8019a14:	9207      	str	r2, [sp, #28]
 8019a16:	2100      	movs	r1, #0
 8019a18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a1a:	1c50      	adds	r0, r2, #1
 8019a1c:	9011      	str	r0, [sp, #68]	; 0x44
 8019a1e:	7852      	ldrb	r2, [r2, #1]
 8019a20:	4608      	mov	r0, r1
 8019a22:	e7cb      	b.n	80199bc <_strtod_l+0x1e4>
 8019a24:	4630      	mov	r0, r6
 8019a26:	e7d4      	b.n	80199d2 <_strtod_l+0x1fa>
 8019a28:	2908      	cmp	r1, #8
 8019a2a:	f101 0101 	add.w	r1, r1, #1
 8019a2e:	dc03      	bgt.n	8019a38 <_strtod_l+0x260>
 8019a30:	9f07      	ldr	r7, [sp, #28]
 8019a32:	436f      	muls	r7, r5
 8019a34:	9707      	str	r7, [sp, #28]
 8019a36:	e7e1      	b.n	80199fc <_strtod_l+0x224>
 8019a38:	2910      	cmp	r1, #16
 8019a3a:	bfde      	ittt	le
 8019a3c:	9f05      	ldrle	r7, [sp, #20]
 8019a3e:	436f      	mulle	r7, r5
 8019a40:	9705      	strle	r7, [sp, #20]
 8019a42:	e7db      	b.n	80199fc <_strtod_l+0x224>
 8019a44:	2b10      	cmp	r3, #16
 8019a46:	bfdf      	itttt	le
 8019a48:	9805      	ldrle	r0, [sp, #20]
 8019a4a:	210a      	movle	r1, #10
 8019a4c:	fb01 2200 	mlale	r2, r1, r0, r2
 8019a50:	9205      	strle	r2, [sp, #20]
 8019a52:	e7e0      	b.n	8019a16 <_strtod_l+0x23e>
 8019a54:	f04f 0b00 	mov.w	fp, #0
 8019a58:	2101      	movs	r1, #1
 8019a5a:	e77c      	b.n	8019956 <_strtod_l+0x17e>
 8019a5c:	f04f 0e00 	mov.w	lr, #0
 8019a60:	f10a 0202 	add.w	r2, sl, #2
 8019a64:	9211      	str	r2, [sp, #68]	; 0x44
 8019a66:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8019a6a:	e785      	b.n	8019978 <_strtod_l+0x1a0>
 8019a6c:	f04f 0e01 	mov.w	lr, #1
 8019a70:	e7f6      	b.n	8019a60 <_strtod_l+0x288>
 8019a72:	bf00      	nop
 8019a74:	0801cb90 	.word	0x0801cb90
 8019a78:	0801cb8c 	.word	0x0801cb8c
 8019a7c:	7ff00000 	.word	0x7ff00000
 8019a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a82:	1c55      	adds	r5, r2, #1
 8019a84:	9511      	str	r5, [sp, #68]	; 0x44
 8019a86:	7852      	ldrb	r2, [r2, #1]
 8019a88:	2a30      	cmp	r2, #48	; 0x30
 8019a8a:	d0f9      	beq.n	8019a80 <_strtod_l+0x2a8>
 8019a8c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019a90:	2d08      	cmp	r5, #8
 8019a92:	f63f af78 	bhi.w	8019986 <_strtod_l+0x1ae>
 8019a96:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8019a9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8019a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019aa0:	1c55      	adds	r5, r2, #1
 8019aa2:	9511      	str	r5, [sp, #68]	; 0x44
 8019aa4:	7852      	ldrb	r2, [r2, #1]
 8019aa6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8019aaa:	2f09      	cmp	r7, #9
 8019aac:	d937      	bls.n	8019b1e <_strtod_l+0x346>
 8019aae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019ab0:	1bed      	subs	r5, r5, r7
 8019ab2:	2d08      	cmp	r5, #8
 8019ab4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8019ab8:	dc02      	bgt.n	8019ac0 <_strtod_l+0x2e8>
 8019aba:	4565      	cmp	r5, ip
 8019abc:	bfa8      	it	ge
 8019abe:	4665      	movge	r5, ip
 8019ac0:	f1be 0f00 	cmp.w	lr, #0
 8019ac4:	d000      	beq.n	8019ac8 <_strtod_l+0x2f0>
 8019ac6:	426d      	negs	r5, r5
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d14d      	bne.n	8019b68 <_strtod_l+0x390>
 8019acc:	9b06      	ldr	r3, [sp, #24]
 8019ace:	4303      	orrs	r3, r0
 8019ad0:	f47f aebd 	bne.w	801984e <_strtod_l+0x76>
 8019ad4:	2900      	cmp	r1, #0
 8019ad6:	f47f aed6 	bne.w	8019886 <_strtod_l+0xae>
 8019ada:	2a69      	cmp	r2, #105	; 0x69
 8019adc:	d027      	beq.n	8019b2e <_strtod_l+0x356>
 8019ade:	dc24      	bgt.n	8019b2a <_strtod_l+0x352>
 8019ae0:	2a49      	cmp	r2, #73	; 0x49
 8019ae2:	d024      	beq.n	8019b2e <_strtod_l+0x356>
 8019ae4:	2a4e      	cmp	r2, #78	; 0x4e
 8019ae6:	f47f aece 	bne.w	8019886 <_strtod_l+0xae>
 8019aea:	4995      	ldr	r1, [pc, #596]	; (8019d40 <_strtod_l+0x568>)
 8019aec:	a811      	add	r0, sp, #68	; 0x44
 8019aee:	f001 f9d7 	bl	801aea0 <__match>
 8019af2:	2800      	cmp	r0, #0
 8019af4:	f43f aec7 	beq.w	8019886 <_strtod_l+0xae>
 8019af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019afa:	781b      	ldrb	r3, [r3, #0]
 8019afc:	2b28      	cmp	r3, #40	; 0x28
 8019afe:	d12d      	bne.n	8019b5c <_strtod_l+0x384>
 8019b00:	4990      	ldr	r1, [pc, #576]	; (8019d44 <_strtod_l+0x56c>)
 8019b02:	aa14      	add	r2, sp, #80	; 0x50
 8019b04:	a811      	add	r0, sp, #68	; 0x44
 8019b06:	f001 f9df 	bl	801aec8 <__hexnan>
 8019b0a:	2805      	cmp	r0, #5
 8019b0c:	d126      	bne.n	8019b5c <_strtod_l+0x384>
 8019b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019b14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019b18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019b1c:	e697      	b.n	801984e <_strtod_l+0x76>
 8019b1e:	250a      	movs	r5, #10
 8019b20:	fb05 2c0c 	mla	ip, r5, ip, r2
 8019b24:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8019b28:	e7b9      	b.n	8019a9e <_strtod_l+0x2c6>
 8019b2a:	2a6e      	cmp	r2, #110	; 0x6e
 8019b2c:	e7db      	b.n	8019ae6 <_strtod_l+0x30e>
 8019b2e:	4986      	ldr	r1, [pc, #536]	; (8019d48 <_strtod_l+0x570>)
 8019b30:	a811      	add	r0, sp, #68	; 0x44
 8019b32:	f001 f9b5 	bl	801aea0 <__match>
 8019b36:	2800      	cmp	r0, #0
 8019b38:	f43f aea5 	beq.w	8019886 <_strtod_l+0xae>
 8019b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b3e:	4983      	ldr	r1, [pc, #524]	; (8019d4c <_strtod_l+0x574>)
 8019b40:	3b01      	subs	r3, #1
 8019b42:	a811      	add	r0, sp, #68	; 0x44
 8019b44:	9311      	str	r3, [sp, #68]	; 0x44
 8019b46:	f001 f9ab 	bl	801aea0 <__match>
 8019b4a:	b910      	cbnz	r0, 8019b52 <_strtod_l+0x37a>
 8019b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b4e:	3301      	adds	r3, #1
 8019b50:	9311      	str	r3, [sp, #68]	; 0x44
 8019b52:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8019d60 <_strtod_l+0x588>
 8019b56:	f04f 0800 	mov.w	r8, #0
 8019b5a:	e678      	b.n	801984e <_strtod_l+0x76>
 8019b5c:	487c      	ldr	r0, [pc, #496]	; (8019d50 <_strtod_l+0x578>)
 8019b5e:	f000 febb 	bl	801a8d8 <nan>
 8019b62:	ec59 8b10 	vmov	r8, r9, d0
 8019b66:	e672      	b.n	801984e <_strtod_l+0x76>
 8019b68:	eddd 7a07 	vldr	s15, [sp, #28]
 8019b6c:	eba5 020b 	sub.w	r2, r5, fp
 8019b70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019b74:	2e00      	cmp	r6, #0
 8019b76:	bf08      	it	eq
 8019b78:	461e      	moveq	r6, r3
 8019b7a:	2b10      	cmp	r3, #16
 8019b7c:	9206      	str	r2, [sp, #24]
 8019b7e:	461a      	mov	r2, r3
 8019b80:	bfa8      	it	ge
 8019b82:	2210      	movge	r2, #16
 8019b84:	2b09      	cmp	r3, #9
 8019b86:	ec59 8b17 	vmov	r8, r9, d7
 8019b8a:	dd0c      	ble.n	8019ba6 <_strtod_l+0x3ce>
 8019b8c:	4971      	ldr	r1, [pc, #452]	; (8019d54 <_strtod_l+0x57c>)
 8019b8e:	eddd 6a05 	vldr	s13, [sp, #20]
 8019b92:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019b96:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8019b9a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019b9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019ba2:	ec59 8b16 	vmov	r8, r9, d6
 8019ba6:	2b0f      	cmp	r3, #15
 8019ba8:	dc37      	bgt.n	8019c1a <_strtod_l+0x442>
 8019baa:	9906      	ldr	r1, [sp, #24]
 8019bac:	2900      	cmp	r1, #0
 8019bae:	f43f ae4e 	beq.w	801984e <_strtod_l+0x76>
 8019bb2:	dd23      	ble.n	8019bfc <_strtod_l+0x424>
 8019bb4:	2916      	cmp	r1, #22
 8019bb6:	dc0b      	bgt.n	8019bd0 <_strtod_l+0x3f8>
 8019bb8:	4b66      	ldr	r3, [pc, #408]	; (8019d54 <_strtod_l+0x57c>)
 8019bba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019bbe:	ed93 7b00 	vldr	d7, [r3]
 8019bc2:	ec49 8b16 	vmov	d6, r8, r9
 8019bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019bca:	ec59 8b17 	vmov	r8, r9, d7
 8019bce:	e63e      	b.n	801984e <_strtod_l+0x76>
 8019bd0:	9806      	ldr	r0, [sp, #24]
 8019bd2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8019bd6:	4281      	cmp	r1, r0
 8019bd8:	db1f      	blt.n	8019c1a <_strtod_l+0x442>
 8019bda:	4a5e      	ldr	r2, [pc, #376]	; (8019d54 <_strtod_l+0x57c>)
 8019bdc:	f1c3 030f 	rsb	r3, r3, #15
 8019be0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019be4:	ed91 7b00 	vldr	d7, [r1]
 8019be8:	ec49 8b16 	vmov	d6, r8, r9
 8019bec:	1ac3      	subs	r3, r0, r3
 8019bee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019bf6:	ed92 6b00 	vldr	d6, [r2]
 8019bfa:	e7e4      	b.n	8019bc6 <_strtod_l+0x3ee>
 8019bfc:	9906      	ldr	r1, [sp, #24]
 8019bfe:	3116      	adds	r1, #22
 8019c00:	db0b      	blt.n	8019c1a <_strtod_l+0x442>
 8019c02:	4b54      	ldr	r3, [pc, #336]	; (8019d54 <_strtod_l+0x57c>)
 8019c04:	ebab 0505 	sub.w	r5, fp, r5
 8019c08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019c0c:	ed95 7b00 	vldr	d7, [r5]
 8019c10:	ec49 8b16 	vmov	d6, r8, r9
 8019c14:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019c18:	e7d7      	b.n	8019bca <_strtod_l+0x3f2>
 8019c1a:	9906      	ldr	r1, [sp, #24]
 8019c1c:	1a9a      	subs	r2, r3, r2
 8019c1e:	440a      	add	r2, r1
 8019c20:	2a00      	cmp	r2, #0
 8019c22:	dd6e      	ble.n	8019d02 <_strtod_l+0x52a>
 8019c24:	f012 000f 	ands.w	r0, r2, #15
 8019c28:	d00a      	beq.n	8019c40 <_strtod_l+0x468>
 8019c2a:	494a      	ldr	r1, [pc, #296]	; (8019d54 <_strtod_l+0x57c>)
 8019c2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019c30:	ed91 7b00 	vldr	d7, [r1]
 8019c34:	ec49 8b16 	vmov	d6, r8, r9
 8019c38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c3c:	ec59 8b17 	vmov	r8, r9, d7
 8019c40:	f032 020f 	bics.w	r2, r2, #15
 8019c44:	d04e      	beq.n	8019ce4 <_strtod_l+0x50c>
 8019c46:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8019c4a:	dd22      	ble.n	8019c92 <_strtod_l+0x4ba>
 8019c4c:	2500      	movs	r5, #0
 8019c4e:	462e      	mov	r6, r5
 8019c50:	9507      	str	r5, [sp, #28]
 8019c52:	462f      	mov	r7, r5
 8019c54:	2322      	movs	r3, #34	; 0x22
 8019c56:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019d60 <_strtod_l+0x588>
 8019c5a:	6023      	str	r3, [r4, #0]
 8019c5c:	f04f 0800 	mov.w	r8, #0
 8019c60:	9b07      	ldr	r3, [sp, #28]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f43f adf3 	beq.w	801984e <_strtod_l+0x76>
 8019c68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	f7ff f930 	bl	8018ed0 <_Bfree>
 8019c70:	4639      	mov	r1, r7
 8019c72:	4620      	mov	r0, r4
 8019c74:	f7ff f92c 	bl	8018ed0 <_Bfree>
 8019c78:	4631      	mov	r1, r6
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f7ff f928 	bl	8018ed0 <_Bfree>
 8019c80:	9907      	ldr	r1, [sp, #28]
 8019c82:	4620      	mov	r0, r4
 8019c84:	f7ff f924 	bl	8018ed0 <_Bfree>
 8019c88:	4629      	mov	r1, r5
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	f7ff f920 	bl	8018ed0 <_Bfree>
 8019c90:	e5dd      	b.n	801984e <_strtod_l+0x76>
 8019c92:	2000      	movs	r0, #0
 8019c94:	ec49 8b17 	vmov	d7, r8, r9
 8019c98:	4f2f      	ldr	r7, [pc, #188]	; (8019d58 <_strtod_l+0x580>)
 8019c9a:	1112      	asrs	r2, r2, #4
 8019c9c:	4601      	mov	r1, r0
 8019c9e:	2a01      	cmp	r2, #1
 8019ca0:	dc23      	bgt.n	8019cea <_strtod_l+0x512>
 8019ca2:	b108      	cbz	r0, 8019ca8 <_strtod_l+0x4d0>
 8019ca4:	ec59 8b17 	vmov	r8, r9, d7
 8019ca8:	4a2b      	ldr	r2, [pc, #172]	; (8019d58 <_strtod_l+0x580>)
 8019caa:	482c      	ldr	r0, [pc, #176]	; (8019d5c <_strtod_l+0x584>)
 8019cac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019cb0:	ed92 7b00 	vldr	d7, [r2]
 8019cb4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019cb8:	ec49 8b16 	vmov	d6, r8, r9
 8019cbc:	4a28      	ldr	r2, [pc, #160]	; (8019d60 <_strtod_l+0x588>)
 8019cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019cc2:	ee17 1a90 	vmov	r1, s15
 8019cc6:	400a      	ands	r2, r1
 8019cc8:	4282      	cmp	r2, r0
 8019cca:	ec59 8b17 	vmov	r8, r9, d7
 8019cce:	d8bd      	bhi.n	8019c4c <_strtod_l+0x474>
 8019cd0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8019cd4:	4282      	cmp	r2, r0
 8019cd6:	bf86      	itte	hi
 8019cd8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8019d64 <_strtod_l+0x58c>
 8019cdc:	f04f 38ff 	movhi.w	r8, #4294967295
 8019ce0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	9205      	str	r2, [sp, #20]
 8019ce8:	e076      	b.n	8019dd8 <_strtod_l+0x600>
 8019cea:	f012 0f01 	tst.w	r2, #1
 8019cee:	d004      	beq.n	8019cfa <_strtod_l+0x522>
 8019cf0:	ed97 6b00 	vldr	d6, [r7]
 8019cf4:	2001      	movs	r0, #1
 8019cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019cfa:	3101      	adds	r1, #1
 8019cfc:	1052      	asrs	r2, r2, #1
 8019cfe:	3708      	adds	r7, #8
 8019d00:	e7cd      	b.n	8019c9e <_strtod_l+0x4c6>
 8019d02:	d0ef      	beq.n	8019ce4 <_strtod_l+0x50c>
 8019d04:	4252      	negs	r2, r2
 8019d06:	f012 000f 	ands.w	r0, r2, #15
 8019d0a:	d00a      	beq.n	8019d22 <_strtod_l+0x54a>
 8019d0c:	4911      	ldr	r1, [pc, #68]	; (8019d54 <_strtod_l+0x57c>)
 8019d0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019d12:	ed91 7b00 	vldr	d7, [r1]
 8019d16:	ec49 8b16 	vmov	d6, r8, r9
 8019d1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019d1e:	ec59 8b17 	vmov	r8, r9, d7
 8019d22:	1112      	asrs	r2, r2, #4
 8019d24:	d0de      	beq.n	8019ce4 <_strtod_l+0x50c>
 8019d26:	2a1f      	cmp	r2, #31
 8019d28:	dd1e      	ble.n	8019d68 <_strtod_l+0x590>
 8019d2a:	2500      	movs	r5, #0
 8019d2c:	462e      	mov	r6, r5
 8019d2e:	9507      	str	r5, [sp, #28]
 8019d30:	462f      	mov	r7, r5
 8019d32:	2322      	movs	r3, #34	; 0x22
 8019d34:	f04f 0800 	mov.w	r8, #0
 8019d38:	f04f 0900 	mov.w	r9, #0
 8019d3c:	6023      	str	r3, [r4, #0]
 8019d3e:	e78f      	b.n	8019c60 <_strtod_l+0x488>
 8019d40:	0801c97d 	.word	0x0801c97d
 8019d44:	0801cba4 	.word	0x0801cba4
 8019d48:	0801c975 	.word	0x0801c975
 8019d4c:	0801c9ac 	.word	0x0801c9ac
 8019d50:	0801cd35 	.word	0x0801cd35
 8019d54:	0801cab8 	.word	0x0801cab8
 8019d58:	0801ca90 	.word	0x0801ca90
 8019d5c:	7ca00000 	.word	0x7ca00000
 8019d60:	7ff00000 	.word	0x7ff00000
 8019d64:	7fefffff 	.word	0x7fefffff
 8019d68:	f012 0110 	ands.w	r1, r2, #16
 8019d6c:	bf18      	it	ne
 8019d6e:	216a      	movne	r1, #106	; 0x6a
 8019d70:	9105      	str	r1, [sp, #20]
 8019d72:	ec49 8b17 	vmov	d7, r8, r9
 8019d76:	49be      	ldr	r1, [pc, #760]	; (801a070 <_strtod_l+0x898>)
 8019d78:	2000      	movs	r0, #0
 8019d7a:	07d7      	lsls	r7, r2, #31
 8019d7c:	d504      	bpl.n	8019d88 <_strtod_l+0x5b0>
 8019d7e:	ed91 6b00 	vldr	d6, [r1]
 8019d82:	2001      	movs	r0, #1
 8019d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019d88:	1052      	asrs	r2, r2, #1
 8019d8a:	f101 0108 	add.w	r1, r1, #8
 8019d8e:	d1f4      	bne.n	8019d7a <_strtod_l+0x5a2>
 8019d90:	b108      	cbz	r0, 8019d96 <_strtod_l+0x5be>
 8019d92:	ec59 8b17 	vmov	r8, r9, d7
 8019d96:	9a05      	ldr	r2, [sp, #20]
 8019d98:	b1ba      	cbz	r2, 8019dca <_strtod_l+0x5f2>
 8019d9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019d9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8019da2:	2a00      	cmp	r2, #0
 8019da4:	4648      	mov	r0, r9
 8019da6:	dd10      	ble.n	8019dca <_strtod_l+0x5f2>
 8019da8:	2a1f      	cmp	r2, #31
 8019daa:	f340 812c 	ble.w	801a006 <_strtod_l+0x82e>
 8019dae:	2a34      	cmp	r2, #52	; 0x34
 8019db0:	bfde      	ittt	le
 8019db2:	f04f 32ff 	movle.w	r2, #4294967295
 8019db6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8019dba:	408a      	lslle	r2, r1
 8019dbc:	f04f 0800 	mov.w	r8, #0
 8019dc0:	bfcc      	ite	gt
 8019dc2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019dc6:	ea02 0900 	andle.w	r9, r2, r0
 8019dca:	ec49 8b17 	vmov	d7, r8, r9
 8019dce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd6:	d0a8      	beq.n	8019d2a <_strtod_l+0x552>
 8019dd8:	9a07      	ldr	r2, [sp, #28]
 8019dda:	9200      	str	r2, [sp, #0]
 8019ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019dde:	4632      	mov	r2, r6
 8019de0:	4620      	mov	r0, r4
 8019de2:	f7ff f8dd 	bl	8018fa0 <__s2b>
 8019de6:	9007      	str	r0, [sp, #28]
 8019de8:	2800      	cmp	r0, #0
 8019dea:	f43f af2f 	beq.w	8019c4c <_strtod_l+0x474>
 8019dee:	9a06      	ldr	r2, [sp, #24]
 8019df0:	2a00      	cmp	r2, #0
 8019df2:	ebab 0305 	sub.w	r3, fp, r5
 8019df6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801a050 <_strtod_l+0x878>
 8019dfa:	bfa8      	it	ge
 8019dfc:	2300      	movge	r3, #0
 8019dfe:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a058 <_strtod_l+0x880>
 8019e02:	ed9f bb97 	vldr	d11, [pc, #604]	; 801a060 <_strtod_l+0x888>
 8019e06:	9309      	str	r3, [sp, #36]	; 0x24
 8019e08:	2500      	movs	r5, #0
 8019e0a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019e0e:	930c      	str	r3, [sp, #48]	; 0x30
 8019e10:	462e      	mov	r6, r5
 8019e12:	9b07      	ldr	r3, [sp, #28]
 8019e14:	4620      	mov	r0, r4
 8019e16:	6859      	ldr	r1, [r3, #4]
 8019e18:	f7ff f81a 	bl	8018e50 <_Balloc>
 8019e1c:	4607      	mov	r7, r0
 8019e1e:	2800      	cmp	r0, #0
 8019e20:	f43f af18 	beq.w	8019c54 <_strtod_l+0x47c>
 8019e24:	9b07      	ldr	r3, [sp, #28]
 8019e26:	691a      	ldr	r2, [r3, #16]
 8019e28:	3202      	adds	r2, #2
 8019e2a:	f103 010c 	add.w	r1, r3, #12
 8019e2e:	0092      	lsls	r2, r2, #2
 8019e30:	300c      	adds	r0, #12
 8019e32:	f7fe f904 	bl	801803e <memcpy>
 8019e36:	ec49 8b10 	vmov	d0, r8, r9
 8019e3a:	aa14      	add	r2, sp, #80	; 0x50
 8019e3c:	a913      	add	r1, sp, #76	; 0x4c
 8019e3e:	4620      	mov	r0, r4
 8019e40:	f7ff fbe2 	bl	8019608 <__d2b>
 8019e44:	ec49 8b18 	vmov	d8, r8, r9
 8019e48:	9012      	str	r0, [sp, #72]	; 0x48
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	f43f af02 	beq.w	8019c54 <_strtod_l+0x47c>
 8019e50:	2101      	movs	r1, #1
 8019e52:	4620      	mov	r0, r4
 8019e54:	f7ff f93c 	bl	80190d0 <__i2b>
 8019e58:	4606      	mov	r6, r0
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	f43f aefa 	beq.w	8019c54 <_strtod_l+0x47c>
 8019e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e62:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	bfab      	itete	ge
 8019e68:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8019e6a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8019e6c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8019e70:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019e74:	bfac      	ite	ge
 8019e76:	eb03 0b02 	addge.w	fp, r3, r2
 8019e7a:	eba2 0a03 	sublt.w	sl, r2, r3
 8019e7e:	9a05      	ldr	r2, [sp, #20]
 8019e80:	1a9b      	subs	r3, r3, r2
 8019e82:	440b      	add	r3, r1
 8019e84:	4a7b      	ldr	r2, [pc, #492]	; (801a074 <_strtod_l+0x89c>)
 8019e86:	3b01      	subs	r3, #1
 8019e88:	4293      	cmp	r3, r2
 8019e8a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8019e8e:	f280 80cd 	bge.w	801a02c <_strtod_l+0x854>
 8019e92:	1ad2      	subs	r2, r2, r3
 8019e94:	2a1f      	cmp	r2, #31
 8019e96:	eba1 0102 	sub.w	r1, r1, r2
 8019e9a:	f04f 0001 	mov.w	r0, #1
 8019e9e:	f300 80b9 	bgt.w	801a014 <_strtod_l+0x83c>
 8019ea2:	fa00 f302 	lsl.w	r3, r0, r2
 8019ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8019eac:	eb0b 0301 	add.w	r3, fp, r1
 8019eb0:	9a05      	ldr	r2, [sp, #20]
 8019eb2:	459b      	cmp	fp, r3
 8019eb4:	448a      	add	sl, r1
 8019eb6:	4492      	add	sl, r2
 8019eb8:	465a      	mov	r2, fp
 8019eba:	bfa8      	it	ge
 8019ebc:	461a      	movge	r2, r3
 8019ebe:	4552      	cmp	r2, sl
 8019ec0:	bfa8      	it	ge
 8019ec2:	4652      	movge	r2, sl
 8019ec4:	2a00      	cmp	r2, #0
 8019ec6:	bfc2      	ittt	gt
 8019ec8:	1a9b      	subgt	r3, r3, r2
 8019eca:	ebaa 0a02 	subgt.w	sl, sl, r2
 8019ece:	ebab 0b02 	subgt.w	fp, fp, r2
 8019ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ed4:	2a00      	cmp	r2, #0
 8019ed6:	dd18      	ble.n	8019f0a <_strtod_l+0x732>
 8019ed8:	4631      	mov	r1, r6
 8019eda:	4620      	mov	r0, r4
 8019edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ede:	f7ff f9b7 	bl	8019250 <__pow5mult>
 8019ee2:	4606      	mov	r6, r0
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	f43f aeb5 	beq.w	8019c54 <_strtod_l+0x47c>
 8019eea:	4601      	mov	r1, r0
 8019eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019eee:	4620      	mov	r0, r4
 8019ef0:	f7ff f904 	bl	80190fc <__multiply>
 8019ef4:	900e      	str	r0, [sp, #56]	; 0x38
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	f43f aeac 	beq.w	8019c54 <_strtod_l+0x47c>
 8019efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019efe:	4620      	mov	r0, r4
 8019f00:	f7fe ffe6 	bl	8018ed0 <_Bfree>
 8019f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f08:	9212      	str	r2, [sp, #72]	; 0x48
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	f300 8093 	bgt.w	801a036 <_strtod_l+0x85e>
 8019f10:	9b06      	ldr	r3, [sp, #24]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	dd08      	ble.n	8019f28 <_strtod_l+0x750>
 8019f16:	4639      	mov	r1, r7
 8019f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	f7ff f998 	bl	8019250 <__pow5mult>
 8019f20:	4607      	mov	r7, r0
 8019f22:	2800      	cmp	r0, #0
 8019f24:	f43f ae96 	beq.w	8019c54 <_strtod_l+0x47c>
 8019f28:	f1ba 0f00 	cmp.w	sl, #0
 8019f2c:	dd08      	ble.n	8019f40 <_strtod_l+0x768>
 8019f2e:	4639      	mov	r1, r7
 8019f30:	4652      	mov	r2, sl
 8019f32:	4620      	mov	r0, r4
 8019f34:	f7ff f9e6 	bl	8019304 <__lshift>
 8019f38:	4607      	mov	r7, r0
 8019f3a:	2800      	cmp	r0, #0
 8019f3c:	f43f ae8a 	beq.w	8019c54 <_strtod_l+0x47c>
 8019f40:	f1bb 0f00 	cmp.w	fp, #0
 8019f44:	dd08      	ble.n	8019f58 <_strtod_l+0x780>
 8019f46:	4631      	mov	r1, r6
 8019f48:	465a      	mov	r2, fp
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	f7ff f9da 	bl	8019304 <__lshift>
 8019f50:	4606      	mov	r6, r0
 8019f52:	2800      	cmp	r0, #0
 8019f54:	f43f ae7e 	beq.w	8019c54 <_strtod_l+0x47c>
 8019f58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019f5a:	463a      	mov	r2, r7
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f7ff fa59 	bl	8019414 <__mdiff>
 8019f62:	4605      	mov	r5, r0
 8019f64:	2800      	cmp	r0, #0
 8019f66:	f43f ae75 	beq.w	8019c54 <_strtod_l+0x47c>
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019f70:	60c3      	str	r3, [r0, #12]
 8019f72:	4631      	mov	r1, r6
 8019f74:	f7ff fa32 	bl	80193dc <__mcmp>
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	da7f      	bge.n	801a07c <_strtod_l+0x8a4>
 8019f7c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8019f80:	f040 80a5 	bne.w	801a0ce <_strtod_l+0x8f6>
 8019f84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	f040 80a0 	bne.w	801a0ce <_strtod_l+0x8f6>
 8019f8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019f92:	0d1b      	lsrs	r3, r3, #20
 8019f94:	051b      	lsls	r3, r3, #20
 8019f96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019f9a:	f240 8098 	bls.w	801a0ce <_strtod_l+0x8f6>
 8019f9e:	696b      	ldr	r3, [r5, #20]
 8019fa0:	b91b      	cbnz	r3, 8019faa <_strtod_l+0x7d2>
 8019fa2:	692b      	ldr	r3, [r5, #16]
 8019fa4:	2b01      	cmp	r3, #1
 8019fa6:	f340 8092 	ble.w	801a0ce <_strtod_l+0x8f6>
 8019faa:	4629      	mov	r1, r5
 8019fac:	2201      	movs	r2, #1
 8019fae:	4620      	mov	r0, r4
 8019fb0:	f7ff f9a8 	bl	8019304 <__lshift>
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	4605      	mov	r5, r0
 8019fb8:	f7ff fa10 	bl	80193dc <__mcmp>
 8019fbc:	2800      	cmp	r0, #0
 8019fbe:	f340 8086 	ble.w	801a0ce <_strtod_l+0x8f6>
 8019fc2:	9905      	ldr	r1, [sp, #20]
 8019fc4:	4a2c      	ldr	r2, [pc, #176]	; (801a078 <_strtod_l+0x8a0>)
 8019fc6:	464b      	mov	r3, r9
 8019fc8:	2900      	cmp	r1, #0
 8019fca:	f000 809f 	beq.w	801a10c <_strtod_l+0x934>
 8019fce:	ea02 0109 	and.w	r1, r2, r9
 8019fd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019fd6:	f300 8099 	bgt.w	801a10c <_strtod_l+0x934>
 8019fda:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019fde:	f77f aea8 	ble.w	8019d32 <_strtod_l+0x55a>
 8019fe2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a068 <_strtod_l+0x890>
 8019fe6:	ec49 8b16 	vmov	d6, r8, r9
 8019fea:	4b23      	ldr	r3, [pc, #140]	; (801a078 <_strtod_l+0x8a0>)
 8019fec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019ff0:	ee17 2a90 	vmov	r2, s15
 8019ff4:	4013      	ands	r3, r2
 8019ff6:	ec59 8b17 	vmov	r8, r9, d7
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	f47f ae34 	bne.w	8019c68 <_strtod_l+0x490>
 801a000:	2322      	movs	r3, #34	; 0x22
 801a002:	6023      	str	r3, [r4, #0]
 801a004:	e630      	b.n	8019c68 <_strtod_l+0x490>
 801a006:	f04f 31ff 	mov.w	r1, #4294967295
 801a00a:	fa01 f202 	lsl.w	r2, r1, r2
 801a00e:	ea02 0808 	and.w	r8, r2, r8
 801a012:	e6da      	b.n	8019dca <_strtod_l+0x5f2>
 801a014:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801a018:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a01c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801a020:	33e2      	adds	r3, #226	; 0xe2
 801a022:	fa00 f303 	lsl.w	r3, r0, r3
 801a026:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801a02a:	e73f      	b.n	8019eac <_strtod_l+0x6d4>
 801a02c:	2200      	movs	r2, #0
 801a02e:	2301      	movs	r3, #1
 801a030:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a034:	e73a      	b.n	8019eac <_strtod_l+0x6d4>
 801a036:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a038:	461a      	mov	r2, r3
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7ff f962 	bl	8019304 <__lshift>
 801a040:	9012      	str	r0, [sp, #72]	; 0x48
 801a042:	2800      	cmp	r0, #0
 801a044:	f47f af64 	bne.w	8019f10 <_strtod_l+0x738>
 801a048:	e604      	b.n	8019c54 <_strtod_l+0x47c>
 801a04a:	bf00      	nop
 801a04c:	f3af 8000 	nop.w
 801a050:	94a03595 	.word	0x94a03595
 801a054:	3fcfffff 	.word	0x3fcfffff
 801a058:	94a03595 	.word	0x94a03595
 801a05c:	3fdfffff 	.word	0x3fdfffff
 801a060:	35afe535 	.word	0x35afe535
 801a064:	3fe00000 	.word	0x3fe00000
 801a068:	00000000 	.word	0x00000000
 801a06c:	39500000 	.word	0x39500000
 801a070:	0801cbb8 	.word	0x0801cbb8
 801a074:	fffffc02 	.word	0xfffffc02
 801a078:	7ff00000 	.word	0x7ff00000
 801a07c:	46cb      	mov	fp, r9
 801a07e:	d15f      	bne.n	801a140 <_strtod_l+0x968>
 801a080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a084:	f1ba 0f00 	cmp.w	sl, #0
 801a088:	d02a      	beq.n	801a0e0 <_strtod_l+0x908>
 801a08a:	4aa7      	ldr	r2, [pc, #668]	; (801a328 <_strtod_l+0xb50>)
 801a08c:	4293      	cmp	r3, r2
 801a08e:	d12b      	bne.n	801a0e8 <_strtod_l+0x910>
 801a090:	9b05      	ldr	r3, [sp, #20]
 801a092:	4642      	mov	r2, r8
 801a094:	b1fb      	cbz	r3, 801a0d6 <_strtod_l+0x8fe>
 801a096:	4ba5      	ldr	r3, [pc, #660]	; (801a32c <_strtod_l+0xb54>)
 801a098:	ea09 0303 	and.w	r3, r9, r3
 801a09c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a0a0:	f04f 31ff 	mov.w	r1, #4294967295
 801a0a4:	d81a      	bhi.n	801a0dc <_strtod_l+0x904>
 801a0a6:	0d1b      	lsrs	r3, r3, #20
 801a0a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a0ac:	fa01 f303 	lsl.w	r3, r1, r3
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	d119      	bne.n	801a0e8 <_strtod_l+0x910>
 801a0b4:	4b9e      	ldr	r3, [pc, #632]	; (801a330 <_strtod_l+0xb58>)
 801a0b6:	459b      	cmp	fp, r3
 801a0b8:	d102      	bne.n	801a0c0 <_strtod_l+0x8e8>
 801a0ba:	3201      	adds	r2, #1
 801a0bc:	f43f adca 	beq.w	8019c54 <_strtod_l+0x47c>
 801a0c0:	4b9a      	ldr	r3, [pc, #616]	; (801a32c <_strtod_l+0xb54>)
 801a0c2:	ea0b 0303 	and.w	r3, fp, r3
 801a0c6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a0ca:	f04f 0800 	mov.w	r8, #0
 801a0ce:	9b05      	ldr	r3, [sp, #20]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d186      	bne.n	8019fe2 <_strtod_l+0x80a>
 801a0d4:	e5c8      	b.n	8019c68 <_strtod_l+0x490>
 801a0d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a0da:	e7e9      	b.n	801a0b0 <_strtod_l+0x8d8>
 801a0dc:	460b      	mov	r3, r1
 801a0de:	e7e7      	b.n	801a0b0 <_strtod_l+0x8d8>
 801a0e0:	ea53 0308 	orrs.w	r3, r3, r8
 801a0e4:	f43f af6d 	beq.w	8019fc2 <_strtod_l+0x7ea>
 801a0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0ea:	b1cb      	cbz	r3, 801a120 <_strtod_l+0x948>
 801a0ec:	ea13 0f0b 	tst.w	r3, fp
 801a0f0:	d0ed      	beq.n	801a0ce <_strtod_l+0x8f6>
 801a0f2:	9a05      	ldr	r2, [sp, #20]
 801a0f4:	4640      	mov	r0, r8
 801a0f6:	4649      	mov	r1, r9
 801a0f8:	f1ba 0f00 	cmp.w	sl, #0
 801a0fc:	d014      	beq.n	801a128 <_strtod_l+0x950>
 801a0fe:	f7ff fb51 	bl	80197a4 <sulp>
 801a102:	ee38 7b00 	vadd.f64	d7, d8, d0
 801a106:	ec59 8b17 	vmov	r8, r9, d7
 801a10a:	e7e0      	b.n	801a0ce <_strtod_l+0x8f6>
 801a10c:	4013      	ands	r3, r2
 801a10e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a112:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a116:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a11a:	f04f 38ff 	mov.w	r8, #4294967295
 801a11e:	e7d6      	b.n	801a0ce <_strtod_l+0x8f6>
 801a120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a122:	ea13 0f08 	tst.w	r3, r8
 801a126:	e7e3      	b.n	801a0f0 <_strtod_l+0x918>
 801a128:	f7ff fb3c 	bl	80197a4 <sulp>
 801a12c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801a130:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a138:	ec59 8b10 	vmov	r8, r9, d0
 801a13c:	d1c7      	bne.n	801a0ce <_strtod_l+0x8f6>
 801a13e:	e5f8      	b.n	8019d32 <_strtod_l+0x55a>
 801a140:	4631      	mov	r1, r6
 801a142:	4628      	mov	r0, r5
 801a144:	f7ff faba 	bl	80196bc <__ratio>
 801a148:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a14c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a154:	d85f      	bhi.n	801a216 <_strtod_l+0xa3e>
 801a156:	f1ba 0f00 	cmp.w	sl, #0
 801a15a:	d166      	bne.n	801a22a <_strtod_l+0xa52>
 801a15c:	f1b8 0f00 	cmp.w	r8, #0
 801a160:	d14d      	bne.n	801a1fe <_strtod_l+0xa26>
 801a162:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a166:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d162      	bne.n	801a234 <_strtod_l+0xa5c>
 801a16e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801a172:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a17a:	d401      	bmi.n	801a180 <_strtod_l+0x9a8>
 801a17c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a180:	eeb1 cb4d 	vneg.f64	d12, d13
 801a184:	4869      	ldr	r0, [pc, #420]	; (801a32c <_strtod_l+0xb54>)
 801a186:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801a338 <_strtod_l+0xb60>
 801a18a:	ea0b 0100 	and.w	r1, fp, r0
 801a18e:	4561      	cmp	r1, ip
 801a190:	ec53 2b1c 	vmov	r2, r3, d12
 801a194:	d17a      	bne.n	801a28c <_strtod_l+0xab4>
 801a196:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801a19a:	ec49 8b10 	vmov	d0, r8, r9
 801a19e:	910a      	str	r1, [sp, #40]	; 0x28
 801a1a0:	f7ff f9c2 	bl	8019528 <__ulp>
 801a1a4:	ec49 8b1e 	vmov	d14, r8, r9
 801a1a8:	4860      	ldr	r0, [pc, #384]	; (801a32c <_strtod_l+0xb54>)
 801a1aa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801a1ae:	ee1e 3a90 	vmov	r3, s29
 801a1b2:	4a60      	ldr	r2, [pc, #384]	; (801a334 <_strtod_l+0xb5c>)
 801a1b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a1b6:	4018      	ands	r0, r3
 801a1b8:	4290      	cmp	r0, r2
 801a1ba:	ec59 8b1e 	vmov	r8, r9, d14
 801a1be:	d93c      	bls.n	801a23a <_strtod_l+0xa62>
 801a1c0:	ee18 2a90 	vmov	r2, s17
 801a1c4:	4b5a      	ldr	r3, [pc, #360]	; (801a330 <_strtod_l+0xb58>)
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d104      	bne.n	801a1d4 <_strtod_l+0x9fc>
 801a1ca:	ee18 3a10 	vmov	r3, s16
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	f43f ad40 	beq.w	8019c54 <_strtod_l+0x47c>
 801a1d4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801a330 <_strtod_l+0xb58>
 801a1d8:	f04f 38ff 	mov.w	r8, #4294967295
 801a1dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a1de:	4620      	mov	r0, r4
 801a1e0:	f7fe fe76 	bl	8018ed0 <_Bfree>
 801a1e4:	4639      	mov	r1, r7
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f7fe fe72 	bl	8018ed0 <_Bfree>
 801a1ec:	4631      	mov	r1, r6
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	f7fe fe6e 	bl	8018ed0 <_Bfree>
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f7fe fe6a 	bl	8018ed0 <_Bfree>
 801a1fc:	e609      	b.n	8019e12 <_strtod_l+0x63a>
 801a1fe:	f1b8 0f01 	cmp.w	r8, #1
 801a202:	d103      	bne.n	801a20c <_strtod_l+0xa34>
 801a204:	f1b9 0f00 	cmp.w	r9, #0
 801a208:	f43f ad93 	beq.w	8019d32 <_strtod_l+0x55a>
 801a20c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a210:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a214:	e7b6      	b.n	801a184 <_strtod_l+0x9ac>
 801a216:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a21a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a21e:	f1ba 0f00 	cmp.w	sl, #0
 801a222:	d0ad      	beq.n	801a180 <_strtod_l+0x9a8>
 801a224:	eeb0 cb4d 	vmov.f64	d12, d13
 801a228:	e7ac      	b.n	801a184 <_strtod_l+0x9ac>
 801a22a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801a22e:	eeb0 db4c 	vmov.f64	d13, d12
 801a232:	e7a7      	b.n	801a184 <_strtod_l+0x9ac>
 801a234:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a238:	e7a4      	b.n	801a184 <_strtod_l+0x9ac>
 801a23a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a23e:	9b05      	ldr	r3, [sp, #20]
 801a240:	46cb      	mov	fp, r9
 801a242:	2b00      	cmp	r3, #0
 801a244:	d1ca      	bne.n	801a1dc <_strtod_l+0xa04>
 801a246:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a24a:	0d1b      	lsrs	r3, r3, #20
 801a24c:	051b      	lsls	r3, r3, #20
 801a24e:	4299      	cmp	r1, r3
 801a250:	d1c4      	bne.n	801a1dc <_strtod_l+0xa04>
 801a252:	ec51 0b1d 	vmov	r0, r1, d13
 801a256:	f7e6 fa87 	bl	8000768 <__aeabi_d2lz>
 801a25a:	f7e6 fa3f 	bl	80006dc <__aeabi_l2d>
 801a25e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801a262:	ec41 0b17 	vmov	d7, r0, r1
 801a266:	ea4b 0b08 	orr.w	fp, fp, r8
 801a26a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801a26e:	ee3d db47 	vsub.f64	d13, d13, d7
 801a272:	d03c      	beq.n	801a2ee <_strtod_l+0xb16>
 801a274:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a27c:	f53f acf4 	bmi.w	8019c68 <_strtod_l+0x490>
 801a280:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a288:	dda8      	ble.n	801a1dc <_strtod_l+0xa04>
 801a28a:	e4ed      	b.n	8019c68 <_strtod_l+0x490>
 801a28c:	9805      	ldr	r0, [sp, #20]
 801a28e:	b1f0      	cbz	r0, 801a2ce <_strtod_l+0xaf6>
 801a290:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a294:	d81b      	bhi.n	801a2ce <_strtod_l+0xaf6>
 801a296:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a320 <_strtod_l+0xb48>
 801a29a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2a2:	d811      	bhi.n	801a2c8 <_strtod_l+0xaf0>
 801a2a4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a2a8:	ee1d 3a10 	vmov	r3, s26
 801a2ac:	2b01      	cmp	r3, #1
 801a2ae:	bf38      	it	cc
 801a2b0:	2301      	movcc	r3, #1
 801a2b2:	ee0d 3a10 	vmov	s26, r3
 801a2b6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a2ba:	f1ba 0f00 	cmp.w	sl, #0
 801a2be:	d113      	bne.n	801a2e8 <_strtod_l+0xb10>
 801a2c0:	eeb1 7b4d 	vneg.f64	d7, d13
 801a2c4:	ec53 2b17 	vmov	r2, r3, d7
 801a2c8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a2cc:	1a43      	subs	r3, r0, r1
 801a2ce:	eeb0 0b48 	vmov.f64	d0, d8
 801a2d2:	ec43 2b1c 	vmov	d12, r2, r3
 801a2d6:	910a      	str	r1, [sp, #40]	; 0x28
 801a2d8:	f7ff f926 	bl	8019528 <__ulp>
 801a2dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a2de:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a2e2:	ec59 8b18 	vmov	r8, r9, d8
 801a2e6:	e7aa      	b.n	801a23e <_strtod_l+0xa66>
 801a2e8:	eeb0 7b4d 	vmov.f64	d7, d13
 801a2ec:	e7ea      	b.n	801a2c4 <_strtod_l+0xaec>
 801a2ee:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2f6:	f57f af71 	bpl.w	801a1dc <_strtod_l+0xa04>
 801a2fa:	e4b5      	b.n	8019c68 <_strtod_l+0x490>
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	9308      	str	r3, [sp, #32]
 801a300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a304:	6013      	str	r3, [r2, #0]
 801a306:	f7ff baa6 	b.w	8019856 <_strtod_l+0x7e>
 801a30a:	2a65      	cmp	r2, #101	; 0x65
 801a30c:	f43f aba2 	beq.w	8019a54 <_strtod_l+0x27c>
 801a310:	2a45      	cmp	r2, #69	; 0x45
 801a312:	f43f ab9f 	beq.w	8019a54 <_strtod_l+0x27c>
 801a316:	2101      	movs	r1, #1
 801a318:	f7ff bbd8 	b.w	8019acc <_strtod_l+0x2f4>
 801a31c:	f3af 8000 	nop.w
 801a320:	ffc00000 	.word	0xffc00000
 801a324:	41dfffff 	.word	0x41dfffff
 801a328:	000fffff 	.word	0x000fffff
 801a32c:	7ff00000 	.word	0x7ff00000
 801a330:	7fefffff 	.word	0x7fefffff
 801a334:	7c9fffff 	.word	0x7c9fffff
 801a338:	7fe00000 	.word	0x7fe00000

0801a33c <_strtod_r>:
 801a33c:	4b01      	ldr	r3, [pc, #4]	; (801a344 <_strtod_r+0x8>)
 801a33e:	f7ff ba4b 	b.w	80197d8 <_strtod_l>
 801a342:	bf00      	nop
 801a344:	2400015c 	.word	0x2400015c

0801a348 <_strtol_l.constprop.0>:
 801a348:	2b01      	cmp	r3, #1
 801a34a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a34e:	d001      	beq.n	801a354 <_strtol_l.constprop.0+0xc>
 801a350:	2b24      	cmp	r3, #36	; 0x24
 801a352:	d906      	bls.n	801a362 <_strtol_l.constprop.0+0x1a>
 801a354:	f7fd fe46 	bl	8017fe4 <__errno>
 801a358:	2316      	movs	r3, #22
 801a35a:	6003      	str	r3, [r0, #0]
 801a35c:	2000      	movs	r0, #0
 801a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a362:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a448 <_strtol_l.constprop.0+0x100>
 801a366:	460d      	mov	r5, r1
 801a368:	462e      	mov	r6, r5
 801a36a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a36e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a372:	f017 0708 	ands.w	r7, r7, #8
 801a376:	d1f7      	bne.n	801a368 <_strtol_l.constprop.0+0x20>
 801a378:	2c2d      	cmp	r4, #45	; 0x2d
 801a37a:	d132      	bne.n	801a3e2 <_strtol_l.constprop.0+0x9a>
 801a37c:	782c      	ldrb	r4, [r5, #0]
 801a37e:	2701      	movs	r7, #1
 801a380:	1cb5      	adds	r5, r6, #2
 801a382:	2b00      	cmp	r3, #0
 801a384:	d05b      	beq.n	801a43e <_strtol_l.constprop.0+0xf6>
 801a386:	2b10      	cmp	r3, #16
 801a388:	d109      	bne.n	801a39e <_strtol_l.constprop.0+0x56>
 801a38a:	2c30      	cmp	r4, #48	; 0x30
 801a38c:	d107      	bne.n	801a39e <_strtol_l.constprop.0+0x56>
 801a38e:	782c      	ldrb	r4, [r5, #0]
 801a390:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a394:	2c58      	cmp	r4, #88	; 0x58
 801a396:	d14d      	bne.n	801a434 <_strtol_l.constprop.0+0xec>
 801a398:	786c      	ldrb	r4, [r5, #1]
 801a39a:	2310      	movs	r3, #16
 801a39c:	3502      	adds	r5, #2
 801a39e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a3a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3a6:	f04f 0e00 	mov.w	lr, #0
 801a3aa:	fbb8 f9f3 	udiv	r9, r8, r3
 801a3ae:	4676      	mov	r6, lr
 801a3b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801a3b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a3b8:	f1bc 0f09 	cmp.w	ip, #9
 801a3bc:	d816      	bhi.n	801a3ec <_strtol_l.constprop.0+0xa4>
 801a3be:	4664      	mov	r4, ip
 801a3c0:	42a3      	cmp	r3, r4
 801a3c2:	dd24      	ble.n	801a40e <_strtol_l.constprop.0+0xc6>
 801a3c4:	f1be 3fff 	cmp.w	lr, #4294967295
 801a3c8:	d008      	beq.n	801a3dc <_strtol_l.constprop.0+0x94>
 801a3ca:	45b1      	cmp	r9, r6
 801a3cc:	d31c      	bcc.n	801a408 <_strtol_l.constprop.0+0xc0>
 801a3ce:	d101      	bne.n	801a3d4 <_strtol_l.constprop.0+0x8c>
 801a3d0:	45a2      	cmp	sl, r4
 801a3d2:	db19      	blt.n	801a408 <_strtol_l.constprop.0+0xc0>
 801a3d4:	fb06 4603 	mla	r6, r6, r3, r4
 801a3d8:	f04f 0e01 	mov.w	lr, #1
 801a3dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a3e0:	e7e8      	b.n	801a3b4 <_strtol_l.constprop.0+0x6c>
 801a3e2:	2c2b      	cmp	r4, #43	; 0x2b
 801a3e4:	bf04      	itt	eq
 801a3e6:	782c      	ldrbeq	r4, [r5, #0]
 801a3e8:	1cb5      	addeq	r5, r6, #2
 801a3ea:	e7ca      	b.n	801a382 <_strtol_l.constprop.0+0x3a>
 801a3ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a3f0:	f1bc 0f19 	cmp.w	ip, #25
 801a3f4:	d801      	bhi.n	801a3fa <_strtol_l.constprop.0+0xb2>
 801a3f6:	3c37      	subs	r4, #55	; 0x37
 801a3f8:	e7e2      	b.n	801a3c0 <_strtol_l.constprop.0+0x78>
 801a3fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a3fe:	f1bc 0f19 	cmp.w	ip, #25
 801a402:	d804      	bhi.n	801a40e <_strtol_l.constprop.0+0xc6>
 801a404:	3c57      	subs	r4, #87	; 0x57
 801a406:	e7db      	b.n	801a3c0 <_strtol_l.constprop.0+0x78>
 801a408:	f04f 3eff 	mov.w	lr, #4294967295
 801a40c:	e7e6      	b.n	801a3dc <_strtol_l.constprop.0+0x94>
 801a40e:	f1be 3fff 	cmp.w	lr, #4294967295
 801a412:	d105      	bne.n	801a420 <_strtol_l.constprop.0+0xd8>
 801a414:	2322      	movs	r3, #34	; 0x22
 801a416:	6003      	str	r3, [r0, #0]
 801a418:	4646      	mov	r6, r8
 801a41a:	b942      	cbnz	r2, 801a42e <_strtol_l.constprop.0+0xe6>
 801a41c:	4630      	mov	r0, r6
 801a41e:	e79e      	b.n	801a35e <_strtol_l.constprop.0+0x16>
 801a420:	b107      	cbz	r7, 801a424 <_strtol_l.constprop.0+0xdc>
 801a422:	4276      	negs	r6, r6
 801a424:	2a00      	cmp	r2, #0
 801a426:	d0f9      	beq.n	801a41c <_strtol_l.constprop.0+0xd4>
 801a428:	f1be 0f00 	cmp.w	lr, #0
 801a42c:	d000      	beq.n	801a430 <_strtol_l.constprop.0+0xe8>
 801a42e:	1e69      	subs	r1, r5, #1
 801a430:	6011      	str	r1, [r2, #0]
 801a432:	e7f3      	b.n	801a41c <_strtol_l.constprop.0+0xd4>
 801a434:	2430      	movs	r4, #48	; 0x30
 801a436:	2b00      	cmp	r3, #0
 801a438:	d1b1      	bne.n	801a39e <_strtol_l.constprop.0+0x56>
 801a43a:	2308      	movs	r3, #8
 801a43c:	e7af      	b.n	801a39e <_strtol_l.constprop.0+0x56>
 801a43e:	2c30      	cmp	r4, #48	; 0x30
 801a440:	d0a5      	beq.n	801a38e <_strtol_l.constprop.0+0x46>
 801a442:	230a      	movs	r3, #10
 801a444:	e7ab      	b.n	801a39e <_strtol_l.constprop.0+0x56>
 801a446:	bf00      	nop
 801a448:	0801cbe1 	.word	0x0801cbe1

0801a44c <_strtol_r>:
 801a44c:	f7ff bf7c 	b.w	801a348 <_strtol_l.constprop.0>

0801a450 <__ssputs_r>:
 801a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a454:	688e      	ldr	r6, [r1, #8]
 801a456:	461f      	mov	r7, r3
 801a458:	42be      	cmp	r6, r7
 801a45a:	680b      	ldr	r3, [r1, #0]
 801a45c:	4682      	mov	sl, r0
 801a45e:	460c      	mov	r4, r1
 801a460:	4690      	mov	r8, r2
 801a462:	d82c      	bhi.n	801a4be <__ssputs_r+0x6e>
 801a464:	898a      	ldrh	r2, [r1, #12]
 801a466:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a46a:	d026      	beq.n	801a4ba <__ssputs_r+0x6a>
 801a46c:	6965      	ldr	r5, [r4, #20]
 801a46e:	6909      	ldr	r1, [r1, #16]
 801a470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a474:	eba3 0901 	sub.w	r9, r3, r1
 801a478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a47c:	1c7b      	adds	r3, r7, #1
 801a47e:	444b      	add	r3, r9
 801a480:	106d      	asrs	r5, r5, #1
 801a482:	429d      	cmp	r5, r3
 801a484:	bf38      	it	cc
 801a486:	461d      	movcc	r5, r3
 801a488:	0553      	lsls	r3, r2, #21
 801a48a:	d527      	bpl.n	801a4dc <__ssputs_r+0x8c>
 801a48c:	4629      	mov	r1, r5
 801a48e:	f7fe fc53 	bl	8018d38 <_malloc_r>
 801a492:	4606      	mov	r6, r0
 801a494:	b360      	cbz	r0, 801a4f0 <__ssputs_r+0xa0>
 801a496:	6921      	ldr	r1, [r4, #16]
 801a498:	464a      	mov	r2, r9
 801a49a:	f7fd fdd0 	bl	801803e <memcpy>
 801a49e:	89a3      	ldrh	r3, [r4, #12]
 801a4a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4a8:	81a3      	strh	r3, [r4, #12]
 801a4aa:	6126      	str	r6, [r4, #16]
 801a4ac:	6165      	str	r5, [r4, #20]
 801a4ae:	444e      	add	r6, r9
 801a4b0:	eba5 0509 	sub.w	r5, r5, r9
 801a4b4:	6026      	str	r6, [r4, #0]
 801a4b6:	60a5      	str	r5, [r4, #8]
 801a4b8:	463e      	mov	r6, r7
 801a4ba:	42be      	cmp	r6, r7
 801a4bc:	d900      	bls.n	801a4c0 <__ssputs_r+0x70>
 801a4be:	463e      	mov	r6, r7
 801a4c0:	6820      	ldr	r0, [r4, #0]
 801a4c2:	4632      	mov	r2, r6
 801a4c4:	4641      	mov	r1, r8
 801a4c6:	f000 f9c9 	bl	801a85c <memmove>
 801a4ca:	68a3      	ldr	r3, [r4, #8]
 801a4cc:	1b9b      	subs	r3, r3, r6
 801a4ce:	60a3      	str	r3, [r4, #8]
 801a4d0:	6823      	ldr	r3, [r4, #0]
 801a4d2:	4433      	add	r3, r6
 801a4d4:	6023      	str	r3, [r4, #0]
 801a4d6:	2000      	movs	r0, #0
 801a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4dc:	462a      	mov	r2, r5
 801a4de:	f000 fda0 	bl	801b022 <_realloc_r>
 801a4e2:	4606      	mov	r6, r0
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	d1e0      	bne.n	801a4aa <__ssputs_r+0x5a>
 801a4e8:	6921      	ldr	r1, [r4, #16]
 801a4ea:	4650      	mov	r0, sl
 801a4ec:	f7fe fbb0 	bl	8018c50 <_free_r>
 801a4f0:	230c      	movs	r3, #12
 801a4f2:	f8ca 3000 	str.w	r3, [sl]
 801a4f6:	89a3      	ldrh	r3, [r4, #12]
 801a4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4fc:	81a3      	strh	r3, [r4, #12]
 801a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a502:	e7e9      	b.n	801a4d8 <__ssputs_r+0x88>

0801a504 <_svfiprintf_r>:
 801a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a508:	4698      	mov	r8, r3
 801a50a:	898b      	ldrh	r3, [r1, #12]
 801a50c:	061b      	lsls	r3, r3, #24
 801a50e:	b09d      	sub	sp, #116	; 0x74
 801a510:	4607      	mov	r7, r0
 801a512:	460d      	mov	r5, r1
 801a514:	4614      	mov	r4, r2
 801a516:	d50e      	bpl.n	801a536 <_svfiprintf_r+0x32>
 801a518:	690b      	ldr	r3, [r1, #16]
 801a51a:	b963      	cbnz	r3, 801a536 <_svfiprintf_r+0x32>
 801a51c:	2140      	movs	r1, #64	; 0x40
 801a51e:	f7fe fc0b 	bl	8018d38 <_malloc_r>
 801a522:	6028      	str	r0, [r5, #0]
 801a524:	6128      	str	r0, [r5, #16]
 801a526:	b920      	cbnz	r0, 801a532 <_svfiprintf_r+0x2e>
 801a528:	230c      	movs	r3, #12
 801a52a:	603b      	str	r3, [r7, #0]
 801a52c:	f04f 30ff 	mov.w	r0, #4294967295
 801a530:	e0d0      	b.n	801a6d4 <_svfiprintf_r+0x1d0>
 801a532:	2340      	movs	r3, #64	; 0x40
 801a534:	616b      	str	r3, [r5, #20]
 801a536:	2300      	movs	r3, #0
 801a538:	9309      	str	r3, [sp, #36]	; 0x24
 801a53a:	2320      	movs	r3, #32
 801a53c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a540:	f8cd 800c 	str.w	r8, [sp, #12]
 801a544:	2330      	movs	r3, #48	; 0x30
 801a546:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a6ec <_svfiprintf_r+0x1e8>
 801a54a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a54e:	f04f 0901 	mov.w	r9, #1
 801a552:	4623      	mov	r3, r4
 801a554:	469a      	mov	sl, r3
 801a556:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a55a:	b10a      	cbz	r2, 801a560 <_svfiprintf_r+0x5c>
 801a55c:	2a25      	cmp	r2, #37	; 0x25
 801a55e:	d1f9      	bne.n	801a554 <_svfiprintf_r+0x50>
 801a560:	ebba 0b04 	subs.w	fp, sl, r4
 801a564:	d00b      	beq.n	801a57e <_svfiprintf_r+0x7a>
 801a566:	465b      	mov	r3, fp
 801a568:	4622      	mov	r2, r4
 801a56a:	4629      	mov	r1, r5
 801a56c:	4638      	mov	r0, r7
 801a56e:	f7ff ff6f 	bl	801a450 <__ssputs_r>
 801a572:	3001      	adds	r0, #1
 801a574:	f000 80a9 	beq.w	801a6ca <_svfiprintf_r+0x1c6>
 801a578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a57a:	445a      	add	r2, fp
 801a57c:	9209      	str	r2, [sp, #36]	; 0x24
 801a57e:	f89a 3000 	ldrb.w	r3, [sl]
 801a582:	2b00      	cmp	r3, #0
 801a584:	f000 80a1 	beq.w	801a6ca <_svfiprintf_r+0x1c6>
 801a588:	2300      	movs	r3, #0
 801a58a:	f04f 32ff 	mov.w	r2, #4294967295
 801a58e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a592:	f10a 0a01 	add.w	sl, sl, #1
 801a596:	9304      	str	r3, [sp, #16]
 801a598:	9307      	str	r3, [sp, #28]
 801a59a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a59e:	931a      	str	r3, [sp, #104]	; 0x68
 801a5a0:	4654      	mov	r4, sl
 801a5a2:	2205      	movs	r2, #5
 801a5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5a8:	4850      	ldr	r0, [pc, #320]	; (801a6ec <_svfiprintf_r+0x1e8>)
 801a5aa:	f7e5 feb1 	bl	8000310 <memchr>
 801a5ae:	9a04      	ldr	r2, [sp, #16]
 801a5b0:	b9d8      	cbnz	r0, 801a5ea <_svfiprintf_r+0xe6>
 801a5b2:	06d0      	lsls	r0, r2, #27
 801a5b4:	bf44      	itt	mi
 801a5b6:	2320      	movmi	r3, #32
 801a5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5bc:	0711      	lsls	r1, r2, #28
 801a5be:	bf44      	itt	mi
 801a5c0:	232b      	movmi	r3, #43	; 0x2b
 801a5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5c6:	f89a 3000 	ldrb.w	r3, [sl]
 801a5ca:	2b2a      	cmp	r3, #42	; 0x2a
 801a5cc:	d015      	beq.n	801a5fa <_svfiprintf_r+0xf6>
 801a5ce:	9a07      	ldr	r2, [sp, #28]
 801a5d0:	4654      	mov	r4, sl
 801a5d2:	2000      	movs	r0, #0
 801a5d4:	f04f 0c0a 	mov.w	ip, #10
 801a5d8:	4621      	mov	r1, r4
 801a5da:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5de:	3b30      	subs	r3, #48	; 0x30
 801a5e0:	2b09      	cmp	r3, #9
 801a5e2:	d94d      	bls.n	801a680 <_svfiprintf_r+0x17c>
 801a5e4:	b1b0      	cbz	r0, 801a614 <_svfiprintf_r+0x110>
 801a5e6:	9207      	str	r2, [sp, #28]
 801a5e8:	e014      	b.n	801a614 <_svfiprintf_r+0x110>
 801a5ea:	eba0 0308 	sub.w	r3, r0, r8
 801a5ee:	fa09 f303 	lsl.w	r3, r9, r3
 801a5f2:	4313      	orrs	r3, r2
 801a5f4:	9304      	str	r3, [sp, #16]
 801a5f6:	46a2      	mov	sl, r4
 801a5f8:	e7d2      	b.n	801a5a0 <_svfiprintf_r+0x9c>
 801a5fa:	9b03      	ldr	r3, [sp, #12]
 801a5fc:	1d19      	adds	r1, r3, #4
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	9103      	str	r1, [sp, #12]
 801a602:	2b00      	cmp	r3, #0
 801a604:	bfbb      	ittet	lt
 801a606:	425b      	neglt	r3, r3
 801a608:	f042 0202 	orrlt.w	r2, r2, #2
 801a60c:	9307      	strge	r3, [sp, #28]
 801a60e:	9307      	strlt	r3, [sp, #28]
 801a610:	bfb8      	it	lt
 801a612:	9204      	strlt	r2, [sp, #16]
 801a614:	7823      	ldrb	r3, [r4, #0]
 801a616:	2b2e      	cmp	r3, #46	; 0x2e
 801a618:	d10c      	bne.n	801a634 <_svfiprintf_r+0x130>
 801a61a:	7863      	ldrb	r3, [r4, #1]
 801a61c:	2b2a      	cmp	r3, #42	; 0x2a
 801a61e:	d134      	bne.n	801a68a <_svfiprintf_r+0x186>
 801a620:	9b03      	ldr	r3, [sp, #12]
 801a622:	1d1a      	adds	r2, r3, #4
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	9203      	str	r2, [sp, #12]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	bfb8      	it	lt
 801a62c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a630:	3402      	adds	r4, #2
 801a632:	9305      	str	r3, [sp, #20]
 801a634:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a6fc <_svfiprintf_r+0x1f8>
 801a638:	7821      	ldrb	r1, [r4, #0]
 801a63a:	2203      	movs	r2, #3
 801a63c:	4650      	mov	r0, sl
 801a63e:	f7e5 fe67 	bl	8000310 <memchr>
 801a642:	b138      	cbz	r0, 801a654 <_svfiprintf_r+0x150>
 801a644:	9b04      	ldr	r3, [sp, #16]
 801a646:	eba0 000a 	sub.w	r0, r0, sl
 801a64a:	2240      	movs	r2, #64	; 0x40
 801a64c:	4082      	lsls	r2, r0
 801a64e:	4313      	orrs	r3, r2
 801a650:	3401      	adds	r4, #1
 801a652:	9304      	str	r3, [sp, #16]
 801a654:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a658:	4825      	ldr	r0, [pc, #148]	; (801a6f0 <_svfiprintf_r+0x1ec>)
 801a65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a65e:	2206      	movs	r2, #6
 801a660:	f7e5 fe56 	bl	8000310 <memchr>
 801a664:	2800      	cmp	r0, #0
 801a666:	d038      	beq.n	801a6da <_svfiprintf_r+0x1d6>
 801a668:	4b22      	ldr	r3, [pc, #136]	; (801a6f4 <_svfiprintf_r+0x1f0>)
 801a66a:	bb1b      	cbnz	r3, 801a6b4 <_svfiprintf_r+0x1b0>
 801a66c:	9b03      	ldr	r3, [sp, #12]
 801a66e:	3307      	adds	r3, #7
 801a670:	f023 0307 	bic.w	r3, r3, #7
 801a674:	3308      	adds	r3, #8
 801a676:	9303      	str	r3, [sp, #12]
 801a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a67a:	4433      	add	r3, r6
 801a67c:	9309      	str	r3, [sp, #36]	; 0x24
 801a67e:	e768      	b.n	801a552 <_svfiprintf_r+0x4e>
 801a680:	fb0c 3202 	mla	r2, ip, r2, r3
 801a684:	460c      	mov	r4, r1
 801a686:	2001      	movs	r0, #1
 801a688:	e7a6      	b.n	801a5d8 <_svfiprintf_r+0xd4>
 801a68a:	2300      	movs	r3, #0
 801a68c:	3401      	adds	r4, #1
 801a68e:	9305      	str	r3, [sp, #20]
 801a690:	4619      	mov	r1, r3
 801a692:	f04f 0c0a 	mov.w	ip, #10
 801a696:	4620      	mov	r0, r4
 801a698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a69c:	3a30      	subs	r2, #48	; 0x30
 801a69e:	2a09      	cmp	r2, #9
 801a6a0:	d903      	bls.n	801a6aa <_svfiprintf_r+0x1a6>
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d0c6      	beq.n	801a634 <_svfiprintf_r+0x130>
 801a6a6:	9105      	str	r1, [sp, #20]
 801a6a8:	e7c4      	b.n	801a634 <_svfiprintf_r+0x130>
 801a6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6ae:	4604      	mov	r4, r0
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e7f0      	b.n	801a696 <_svfiprintf_r+0x192>
 801a6b4:	ab03      	add	r3, sp, #12
 801a6b6:	9300      	str	r3, [sp, #0]
 801a6b8:	462a      	mov	r2, r5
 801a6ba:	4b0f      	ldr	r3, [pc, #60]	; (801a6f8 <_svfiprintf_r+0x1f4>)
 801a6bc:	a904      	add	r1, sp, #16
 801a6be:	4638      	mov	r0, r7
 801a6c0:	f7fc fd6a 	bl	8017198 <_printf_float>
 801a6c4:	1c42      	adds	r2, r0, #1
 801a6c6:	4606      	mov	r6, r0
 801a6c8:	d1d6      	bne.n	801a678 <_svfiprintf_r+0x174>
 801a6ca:	89ab      	ldrh	r3, [r5, #12]
 801a6cc:	065b      	lsls	r3, r3, #25
 801a6ce:	f53f af2d 	bmi.w	801a52c <_svfiprintf_r+0x28>
 801a6d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6d4:	b01d      	add	sp, #116	; 0x74
 801a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6da:	ab03      	add	r3, sp, #12
 801a6dc:	9300      	str	r3, [sp, #0]
 801a6de:	462a      	mov	r2, r5
 801a6e0:	4b05      	ldr	r3, [pc, #20]	; (801a6f8 <_svfiprintf_r+0x1f4>)
 801a6e2:	a904      	add	r1, sp, #16
 801a6e4:	4638      	mov	r0, r7
 801a6e6:	f7fc ffdf 	bl	80176a8 <_printf_i>
 801a6ea:	e7eb      	b.n	801a6c4 <_svfiprintf_r+0x1c0>
 801a6ec:	0801cce1 	.word	0x0801cce1
 801a6f0:	0801cceb 	.word	0x0801cceb
 801a6f4:	08017199 	.word	0x08017199
 801a6f8:	0801a451 	.word	0x0801a451
 801a6fc:	0801cce7 	.word	0x0801cce7

0801a700 <__sflush_r>:
 801a700:	898a      	ldrh	r2, [r1, #12]
 801a702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a706:	4605      	mov	r5, r0
 801a708:	0710      	lsls	r0, r2, #28
 801a70a:	460c      	mov	r4, r1
 801a70c:	d458      	bmi.n	801a7c0 <__sflush_r+0xc0>
 801a70e:	684b      	ldr	r3, [r1, #4]
 801a710:	2b00      	cmp	r3, #0
 801a712:	dc05      	bgt.n	801a720 <__sflush_r+0x20>
 801a714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a716:	2b00      	cmp	r3, #0
 801a718:	dc02      	bgt.n	801a720 <__sflush_r+0x20>
 801a71a:	2000      	movs	r0, #0
 801a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a722:	2e00      	cmp	r6, #0
 801a724:	d0f9      	beq.n	801a71a <__sflush_r+0x1a>
 801a726:	2300      	movs	r3, #0
 801a728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a72c:	682f      	ldr	r7, [r5, #0]
 801a72e:	6a21      	ldr	r1, [r4, #32]
 801a730:	602b      	str	r3, [r5, #0]
 801a732:	d032      	beq.n	801a79a <__sflush_r+0x9a>
 801a734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a736:	89a3      	ldrh	r3, [r4, #12]
 801a738:	075a      	lsls	r2, r3, #29
 801a73a:	d505      	bpl.n	801a748 <__sflush_r+0x48>
 801a73c:	6863      	ldr	r3, [r4, #4]
 801a73e:	1ac0      	subs	r0, r0, r3
 801a740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a742:	b10b      	cbz	r3, 801a748 <__sflush_r+0x48>
 801a744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a746:	1ac0      	subs	r0, r0, r3
 801a748:	2300      	movs	r3, #0
 801a74a:	4602      	mov	r2, r0
 801a74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a74e:	6a21      	ldr	r1, [r4, #32]
 801a750:	4628      	mov	r0, r5
 801a752:	47b0      	blx	r6
 801a754:	1c43      	adds	r3, r0, #1
 801a756:	89a3      	ldrh	r3, [r4, #12]
 801a758:	d106      	bne.n	801a768 <__sflush_r+0x68>
 801a75a:	6829      	ldr	r1, [r5, #0]
 801a75c:	291d      	cmp	r1, #29
 801a75e:	d82b      	bhi.n	801a7b8 <__sflush_r+0xb8>
 801a760:	4a29      	ldr	r2, [pc, #164]	; (801a808 <__sflush_r+0x108>)
 801a762:	410a      	asrs	r2, r1
 801a764:	07d6      	lsls	r6, r2, #31
 801a766:	d427      	bmi.n	801a7b8 <__sflush_r+0xb8>
 801a768:	2200      	movs	r2, #0
 801a76a:	6062      	str	r2, [r4, #4]
 801a76c:	04d9      	lsls	r1, r3, #19
 801a76e:	6922      	ldr	r2, [r4, #16]
 801a770:	6022      	str	r2, [r4, #0]
 801a772:	d504      	bpl.n	801a77e <__sflush_r+0x7e>
 801a774:	1c42      	adds	r2, r0, #1
 801a776:	d101      	bne.n	801a77c <__sflush_r+0x7c>
 801a778:	682b      	ldr	r3, [r5, #0]
 801a77a:	b903      	cbnz	r3, 801a77e <__sflush_r+0x7e>
 801a77c:	6560      	str	r0, [r4, #84]	; 0x54
 801a77e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a780:	602f      	str	r7, [r5, #0]
 801a782:	2900      	cmp	r1, #0
 801a784:	d0c9      	beq.n	801a71a <__sflush_r+0x1a>
 801a786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a78a:	4299      	cmp	r1, r3
 801a78c:	d002      	beq.n	801a794 <__sflush_r+0x94>
 801a78e:	4628      	mov	r0, r5
 801a790:	f7fe fa5e 	bl	8018c50 <_free_r>
 801a794:	2000      	movs	r0, #0
 801a796:	6360      	str	r0, [r4, #52]	; 0x34
 801a798:	e7c0      	b.n	801a71c <__sflush_r+0x1c>
 801a79a:	2301      	movs	r3, #1
 801a79c:	4628      	mov	r0, r5
 801a79e:	47b0      	blx	r6
 801a7a0:	1c41      	adds	r1, r0, #1
 801a7a2:	d1c8      	bne.n	801a736 <__sflush_r+0x36>
 801a7a4:	682b      	ldr	r3, [r5, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d0c5      	beq.n	801a736 <__sflush_r+0x36>
 801a7aa:	2b1d      	cmp	r3, #29
 801a7ac:	d001      	beq.n	801a7b2 <__sflush_r+0xb2>
 801a7ae:	2b16      	cmp	r3, #22
 801a7b0:	d101      	bne.n	801a7b6 <__sflush_r+0xb6>
 801a7b2:	602f      	str	r7, [r5, #0]
 801a7b4:	e7b1      	b.n	801a71a <__sflush_r+0x1a>
 801a7b6:	89a3      	ldrh	r3, [r4, #12]
 801a7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7bc:	81a3      	strh	r3, [r4, #12]
 801a7be:	e7ad      	b.n	801a71c <__sflush_r+0x1c>
 801a7c0:	690f      	ldr	r7, [r1, #16]
 801a7c2:	2f00      	cmp	r7, #0
 801a7c4:	d0a9      	beq.n	801a71a <__sflush_r+0x1a>
 801a7c6:	0793      	lsls	r3, r2, #30
 801a7c8:	680e      	ldr	r6, [r1, #0]
 801a7ca:	bf08      	it	eq
 801a7cc:	694b      	ldreq	r3, [r1, #20]
 801a7ce:	600f      	str	r7, [r1, #0]
 801a7d0:	bf18      	it	ne
 801a7d2:	2300      	movne	r3, #0
 801a7d4:	eba6 0807 	sub.w	r8, r6, r7
 801a7d8:	608b      	str	r3, [r1, #8]
 801a7da:	f1b8 0f00 	cmp.w	r8, #0
 801a7de:	dd9c      	ble.n	801a71a <__sflush_r+0x1a>
 801a7e0:	6a21      	ldr	r1, [r4, #32]
 801a7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a7e4:	4643      	mov	r3, r8
 801a7e6:	463a      	mov	r2, r7
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	47b0      	blx	r6
 801a7ec:	2800      	cmp	r0, #0
 801a7ee:	dc06      	bgt.n	801a7fe <__sflush_r+0xfe>
 801a7f0:	89a3      	ldrh	r3, [r4, #12]
 801a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7f6:	81a3      	strh	r3, [r4, #12]
 801a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7fc:	e78e      	b.n	801a71c <__sflush_r+0x1c>
 801a7fe:	4407      	add	r7, r0
 801a800:	eba8 0800 	sub.w	r8, r8, r0
 801a804:	e7e9      	b.n	801a7da <__sflush_r+0xda>
 801a806:	bf00      	nop
 801a808:	dfbffffe 	.word	0xdfbffffe

0801a80c <_fflush_r>:
 801a80c:	b538      	push	{r3, r4, r5, lr}
 801a80e:	690b      	ldr	r3, [r1, #16]
 801a810:	4605      	mov	r5, r0
 801a812:	460c      	mov	r4, r1
 801a814:	b913      	cbnz	r3, 801a81c <_fflush_r+0x10>
 801a816:	2500      	movs	r5, #0
 801a818:	4628      	mov	r0, r5
 801a81a:	bd38      	pop	{r3, r4, r5, pc}
 801a81c:	b118      	cbz	r0, 801a826 <_fflush_r+0x1a>
 801a81e:	6a03      	ldr	r3, [r0, #32]
 801a820:	b90b      	cbnz	r3, 801a826 <_fflush_r+0x1a>
 801a822:	f7fd faf3 	bl	8017e0c <__sinit>
 801a826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d0f3      	beq.n	801a816 <_fflush_r+0xa>
 801a82e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a830:	07d0      	lsls	r0, r2, #31
 801a832:	d404      	bmi.n	801a83e <_fflush_r+0x32>
 801a834:	0599      	lsls	r1, r3, #22
 801a836:	d402      	bmi.n	801a83e <_fflush_r+0x32>
 801a838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a83a:	f7fd fbfe 	bl	801803a <__retarget_lock_acquire_recursive>
 801a83e:	4628      	mov	r0, r5
 801a840:	4621      	mov	r1, r4
 801a842:	f7ff ff5d 	bl	801a700 <__sflush_r>
 801a846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a848:	07da      	lsls	r2, r3, #31
 801a84a:	4605      	mov	r5, r0
 801a84c:	d4e4      	bmi.n	801a818 <_fflush_r+0xc>
 801a84e:	89a3      	ldrh	r3, [r4, #12]
 801a850:	059b      	lsls	r3, r3, #22
 801a852:	d4e1      	bmi.n	801a818 <_fflush_r+0xc>
 801a854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a856:	f7fd fbf1 	bl	801803c <__retarget_lock_release_recursive>
 801a85a:	e7dd      	b.n	801a818 <_fflush_r+0xc>

0801a85c <memmove>:
 801a85c:	4288      	cmp	r0, r1
 801a85e:	b510      	push	{r4, lr}
 801a860:	eb01 0402 	add.w	r4, r1, r2
 801a864:	d902      	bls.n	801a86c <memmove+0x10>
 801a866:	4284      	cmp	r4, r0
 801a868:	4623      	mov	r3, r4
 801a86a:	d807      	bhi.n	801a87c <memmove+0x20>
 801a86c:	1e43      	subs	r3, r0, #1
 801a86e:	42a1      	cmp	r1, r4
 801a870:	d008      	beq.n	801a884 <memmove+0x28>
 801a872:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a876:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a87a:	e7f8      	b.n	801a86e <memmove+0x12>
 801a87c:	4402      	add	r2, r0
 801a87e:	4601      	mov	r1, r0
 801a880:	428a      	cmp	r2, r1
 801a882:	d100      	bne.n	801a886 <memmove+0x2a>
 801a884:	bd10      	pop	{r4, pc}
 801a886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a88e:	e7f7      	b.n	801a880 <memmove+0x24>

0801a890 <strncmp>:
 801a890:	b510      	push	{r4, lr}
 801a892:	b16a      	cbz	r2, 801a8b0 <strncmp+0x20>
 801a894:	3901      	subs	r1, #1
 801a896:	1884      	adds	r4, r0, r2
 801a898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a89c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	d103      	bne.n	801a8ac <strncmp+0x1c>
 801a8a4:	42a0      	cmp	r0, r4
 801a8a6:	d001      	beq.n	801a8ac <strncmp+0x1c>
 801a8a8:	2a00      	cmp	r2, #0
 801a8aa:	d1f5      	bne.n	801a898 <strncmp+0x8>
 801a8ac:	1ad0      	subs	r0, r2, r3
 801a8ae:	bd10      	pop	{r4, pc}
 801a8b0:	4610      	mov	r0, r2
 801a8b2:	e7fc      	b.n	801a8ae <strncmp+0x1e>

0801a8b4 <_sbrk_r>:
 801a8b4:	b538      	push	{r3, r4, r5, lr}
 801a8b6:	4d06      	ldr	r5, [pc, #24]	; (801a8d0 <_sbrk_r+0x1c>)
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	4608      	mov	r0, r1
 801a8be:	602b      	str	r3, [r5, #0]
 801a8c0:	f7e9 fe3c 	bl	800453c <_sbrk>
 801a8c4:	1c43      	adds	r3, r0, #1
 801a8c6:	d102      	bne.n	801a8ce <_sbrk_r+0x1a>
 801a8c8:	682b      	ldr	r3, [r5, #0]
 801a8ca:	b103      	cbz	r3, 801a8ce <_sbrk_r+0x1a>
 801a8cc:	6023      	str	r3, [r4, #0]
 801a8ce:	bd38      	pop	{r3, r4, r5, pc}
 801a8d0:	24002ad4 	.word	0x24002ad4
 801a8d4:	00000000 	.word	0x00000000

0801a8d8 <nan>:
 801a8d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a8e0 <nan+0x8>
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	00000000 	.word	0x00000000
 801a8e4:	7ff80000 	.word	0x7ff80000

0801a8e8 <__assert_func>:
 801a8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a8ea:	4614      	mov	r4, r2
 801a8ec:	461a      	mov	r2, r3
 801a8ee:	4b09      	ldr	r3, [pc, #36]	; (801a914 <__assert_func+0x2c>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4605      	mov	r5, r0
 801a8f4:	68d8      	ldr	r0, [r3, #12]
 801a8f6:	b14c      	cbz	r4, 801a90c <__assert_func+0x24>
 801a8f8:	4b07      	ldr	r3, [pc, #28]	; (801a918 <__assert_func+0x30>)
 801a8fa:	9100      	str	r1, [sp, #0]
 801a8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a900:	4906      	ldr	r1, [pc, #24]	; (801a91c <__assert_func+0x34>)
 801a902:	462b      	mov	r3, r5
 801a904:	f000 fbca 	bl	801b09c <fiprintf>
 801a908:	f000 fbda 	bl	801b0c0 <abort>
 801a90c:	4b04      	ldr	r3, [pc, #16]	; (801a920 <__assert_func+0x38>)
 801a90e:	461c      	mov	r4, r3
 801a910:	e7f3      	b.n	801a8fa <__assert_func+0x12>
 801a912:	bf00      	nop
 801a914:	24000158 	.word	0x24000158
 801a918:	0801ccfa 	.word	0x0801ccfa
 801a91c:	0801cd07 	.word	0x0801cd07
 801a920:	0801cd35 	.word	0x0801cd35

0801a924 <_calloc_r>:
 801a924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a926:	fba1 2402 	umull	r2, r4, r1, r2
 801a92a:	b94c      	cbnz	r4, 801a940 <_calloc_r+0x1c>
 801a92c:	4611      	mov	r1, r2
 801a92e:	9201      	str	r2, [sp, #4]
 801a930:	f7fe fa02 	bl	8018d38 <_malloc_r>
 801a934:	9a01      	ldr	r2, [sp, #4]
 801a936:	4605      	mov	r5, r0
 801a938:	b930      	cbnz	r0, 801a948 <_calloc_r+0x24>
 801a93a:	4628      	mov	r0, r5
 801a93c:	b003      	add	sp, #12
 801a93e:	bd30      	pop	{r4, r5, pc}
 801a940:	220c      	movs	r2, #12
 801a942:	6002      	str	r2, [r0, #0]
 801a944:	2500      	movs	r5, #0
 801a946:	e7f8      	b.n	801a93a <_calloc_r+0x16>
 801a948:	4621      	mov	r1, r4
 801a94a:	f7fd faf8 	bl	8017f3e <memset>
 801a94e:	e7f4      	b.n	801a93a <_calloc_r+0x16>

0801a950 <rshift>:
 801a950:	6903      	ldr	r3, [r0, #16]
 801a952:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a95a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a95e:	f100 0414 	add.w	r4, r0, #20
 801a962:	dd45      	ble.n	801a9f0 <rshift+0xa0>
 801a964:	f011 011f 	ands.w	r1, r1, #31
 801a968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a96c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a970:	d10c      	bne.n	801a98c <rshift+0x3c>
 801a972:	f100 0710 	add.w	r7, r0, #16
 801a976:	4629      	mov	r1, r5
 801a978:	42b1      	cmp	r1, r6
 801a97a:	d334      	bcc.n	801a9e6 <rshift+0x96>
 801a97c:	1a9b      	subs	r3, r3, r2
 801a97e:	009b      	lsls	r3, r3, #2
 801a980:	1eea      	subs	r2, r5, #3
 801a982:	4296      	cmp	r6, r2
 801a984:	bf38      	it	cc
 801a986:	2300      	movcc	r3, #0
 801a988:	4423      	add	r3, r4
 801a98a:	e015      	b.n	801a9b8 <rshift+0x68>
 801a98c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a990:	f1c1 0820 	rsb	r8, r1, #32
 801a994:	40cf      	lsrs	r7, r1
 801a996:	f105 0e04 	add.w	lr, r5, #4
 801a99a:	46a1      	mov	r9, r4
 801a99c:	4576      	cmp	r6, lr
 801a99e:	46f4      	mov	ip, lr
 801a9a0:	d815      	bhi.n	801a9ce <rshift+0x7e>
 801a9a2:	1a9a      	subs	r2, r3, r2
 801a9a4:	0092      	lsls	r2, r2, #2
 801a9a6:	3a04      	subs	r2, #4
 801a9a8:	3501      	adds	r5, #1
 801a9aa:	42ae      	cmp	r6, r5
 801a9ac:	bf38      	it	cc
 801a9ae:	2200      	movcc	r2, #0
 801a9b0:	18a3      	adds	r3, r4, r2
 801a9b2:	50a7      	str	r7, [r4, r2]
 801a9b4:	b107      	cbz	r7, 801a9b8 <rshift+0x68>
 801a9b6:	3304      	adds	r3, #4
 801a9b8:	1b1a      	subs	r2, r3, r4
 801a9ba:	42a3      	cmp	r3, r4
 801a9bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a9c0:	bf08      	it	eq
 801a9c2:	2300      	moveq	r3, #0
 801a9c4:	6102      	str	r2, [r0, #16]
 801a9c6:	bf08      	it	eq
 801a9c8:	6143      	streq	r3, [r0, #20]
 801a9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9ce:	f8dc c000 	ldr.w	ip, [ip]
 801a9d2:	fa0c fc08 	lsl.w	ip, ip, r8
 801a9d6:	ea4c 0707 	orr.w	r7, ip, r7
 801a9da:	f849 7b04 	str.w	r7, [r9], #4
 801a9de:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a9e2:	40cf      	lsrs	r7, r1
 801a9e4:	e7da      	b.n	801a99c <rshift+0x4c>
 801a9e6:	f851 cb04 	ldr.w	ip, [r1], #4
 801a9ea:	f847 cf04 	str.w	ip, [r7, #4]!
 801a9ee:	e7c3      	b.n	801a978 <rshift+0x28>
 801a9f0:	4623      	mov	r3, r4
 801a9f2:	e7e1      	b.n	801a9b8 <rshift+0x68>

0801a9f4 <__hexdig_fun>:
 801a9f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a9f8:	2b09      	cmp	r3, #9
 801a9fa:	d802      	bhi.n	801aa02 <__hexdig_fun+0xe>
 801a9fc:	3820      	subs	r0, #32
 801a9fe:	b2c0      	uxtb	r0, r0
 801aa00:	4770      	bx	lr
 801aa02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801aa06:	2b05      	cmp	r3, #5
 801aa08:	d801      	bhi.n	801aa0e <__hexdig_fun+0x1a>
 801aa0a:	3847      	subs	r0, #71	; 0x47
 801aa0c:	e7f7      	b.n	801a9fe <__hexdig_fun+0xa>
 801aa0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801aa12:	2b05      	cmp	r3, #5
 801aa14:	d801      	bhi.n	801aa1a <__hexdig_fun+0x26>
 801aa16:	3827      	subs	r0, #39	; 0x27
 801aa18:	e7f1      	b.n	801a9fe <__hexdig_fun+0xa>
 801aa1a:	2000      	movs	r0, #0
 801aa1c:	4770      	bx	lr
	...

0801aa20 <__gethex>:
 801aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa24:	4617      	mov	r7, r2
 801aa26:	680a      	ldr	r2, [r1, #0]
 801aa28:	b085      	sub	sp, #20
 801aa2a:	f102 0b02 	add.w	fp, r2, #2
 801aa2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801aa32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801aa36:	4681      	mov	r9, r0
 801aa38:	468a      	mov	sl, r1
 801aa3a:	9302      	str	r3, [sp, #8]
 801aa3c:	32fe      	adds	r2, #254	; 0xfe
 801aa3e:	eb02 030b 	add.w	r3, r2, fp
 801aa42:	46d8      	mov	r8, fp
 801aa44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801aa48:	9301      	str	r3, [sp, #4]
 801aa4a:	2830      	cmp	r0, #48	; 0x30
 801aa4c:	d0f7      	beq.n	801aa3e <__gethex+0x1e>
 801aa4e:	f7ff ffd1 	bl	801a9f4 <__hexdig_fun>
 801aa52:	4604      	mov	r4, r0
 801aa54:	2800      	cmp	r0, #0
 801aa56:	d138      	bne.n	801aaca <__gethex+0xaa>
 801aa58:	49a7      	ldr	r1, [pc, #668]	; (801acf8 <__gethex+0x2d8>)
 801aa5a:	2201      	movs	r2, #1
 801aa5c:	4640      	mov	r0, r8
 801aa5e:	f7ff ff17 	bl	801a890 <strncmp>
 801aa62:	4606      	mov	r6, r0
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d169      	bne.n	801ab3c <__gethex+0x11c>
 801aa68:	f898 0001 	ldrb.w	r0, [r8, #1]
 801aa6c:	465d      	mov	r5, fp
 801aa6e:	f7ff ffc1 	bl	801a9f4 <__hexdig_fun>
 801aa72:	2800      	cmp	r0, #0
 801aa74:	d064      	beq.n	801ab40 <__gethex+0x120>
 801aa76:	465a      	mov	r2, fp
 801aa78:	7810      	ldrb	r0, [r2, #0]
 801aa7a:	2830      	cmp	r0, #48	; 0x30
 801aa7c:	4690      	mov	r8, r2
 801aa7e:	f102 0201 	add.w	r2, r2, #1
 801aa82:	d0f9      	beq.n	801aa78 <__gethex+0x58>
 801aa84:	f7ff ffb6 	bl	801a9f4 <__hexdig_fun>
 801aa88:	2301      	movs	r3, #1
 801aa8a:	fab0 f480 	clz	r4, r0
 801aa8e:	0964      	lsrs	r4, r4, #5
 801aa90:	465e      	mov	r6, fp
 801aa92:	9301      	str	r3, [sp, #4]
 801aa94:	4642      	mov	r2, r8
 801aa96:	4615      	mov	r5, r2
 801aa98:	3201      	adds	r2, #1
 801aa9a:	7828      	ldrb	r0, [r5, #0]
 801aa9c:	f7ff ffaa 	bl	801a9f4 <__hexdig_fun>
 801aaa0:	2800      	cmp	r0, #0
 801aaa2:	d1f8      	bne.n	801aa96 <__gethex+0x76>
 801aaa4:	4994      	ldr	r1, [pc, #592]	; (801acf8 <__gethex+0x2d8>)
 801aaa6:	2201      	movs	r2, #1
 801aaa8:	4628      	mov	r0, r5
 801aaaa:	f7ff fef1 	bl	801a890 <strncmp>
 801aaae:	b978      	cbnz	r0, 801aad0 <__gethex+0xb0>
 801aab0:	b946      	cbnz	r6, 801aac4 <__gethex+0xa4>
 801aab2:	1c6e      	adds	r6, r5, #1
 801aab4:	4632      	mov	r2, r6
 801aab6:	4615      	mov	r5, r2
 801aab8:	3201      	adds	r2, #1
 801aaba:	7828      	ldrb	r0, [r5, #0]
 801aabc:	f7ff ff9a 	bl	801a9f4 <__hexdig_fun>
 801aac0:	2800      	cmp	r0, #0
 801aac2:	d1f8      	bne.n	801aab6 <__gethex+0x96>
 801aac4:	1b73      	subs	r3, r6, r5
 801aac6:	009e      	lsls	r6, r3, #2
 801aac8:	e004      	b.n	801aad4 <__gethex+0xb4>
 801aaca:	2400      	movs	r4, #0
 801aacc:	4626      	mov	r6, r4
 801aace:	e7e1      	b.n	801aa94 <__gethex+0x74>
 801aad0:	2e00      	cmp	r6, #0
 801aad2:	d1f7      	bne.n	801aac4 <__gethex+0xa4>
 801aad4:	782b      	ldrb	r3, [r5, #0]
 801aad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aada:	2b50      	cmp	r3, #80	; 0x50
 801aadc:	d13d      	bne.n	801ab5a <__gethex+0x13a>
 801aade:	786b      	ldrb	r3, [r5, #1]
 801aae0:	2b2b      	cmp	r3, #43	; 0x2b
 801aae2:	d02f      	beq.n	801ab44 <__gethex+0x124>
 801aae4:	2b2d      	cmp	r3, #45	; 0x2d
 801aae6:	d031      	beq.n	801ab4c <__gethex+0x12c>
 801aae8:	1c69      	adds	r1, r5, #1
 801aaea:	f04f 0b00 	mov.w	fp, #0
 801aaee:	7808      	ldrb	r0, [r1, #0]
 801aaf0:	f7ff ff80 	bl	801a9f4 <__hexdig_fun>
 801aaf4:	1e42      	subs	r2, r0, #1
 801aaf6:	b2d2      	uxtb	r2, r2
 801aaf8:	2a18      	cmp	r2, #24
 801aafa:	d82e      	bhi.n	801ab5a <__gethex+0x13a>
 801aafc:	f1a0 0210 	sub.w	r2, r0, #16
 801ab00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ab04:	f7ff ff76 	bl	801a9f4 <__hexdig_fun>
 801ab08:	f100 3cff 	add.w	ip, r0, #4294967295
 801ab0c:	fa5f fc8c 	uxtb.w	ip, ip
 801ab10:	f1bc 0f18 	cmp.w	ip, #24
 801ab14:	d91d      	bls.n	801ab52 <__gethex+0x132>
 801ab16:	f1bb 0f00 	cmp.w	fp, #0
 801ab1a:	d000      	beq.n	801ab1e <__gethex+0xfe>
 801ab1c:	4252      	negs	r2, r2
 801ab1e:	4416      	add	r6, r2
 801ab20:	f8ca 1000 	str.w	r1, [sl]
 801ab24:	b1dc      	cbz	r4, 801ab5e <__gethex+0x13e>
 801ab26:	9b01      	ldr	r3, [sp, #4]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	bf14      	ite	ne
 801ab2c:	f04f 0800 	movne.w	r8, #0
 801ab30:	f04f 0806 	moveq.w	r8, #6
 801ab34:	4640      	mov	r0, r8
 801ab36:	b005      	add	sp, #20
 801ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab3c:	4645      	mov	r5, r8
 801ab3e:	4626      	mov	r6, r4
 801ab40:	2401      	movs	r4, #1
 801ab42:	e7c7      	b.n	801aad4 <__gethex+0xb4>
 801ab44:	f04f 0b00 	mov.w	fp, #0
 801ab48:	1ca9      	adds	r1, r5, #2
 801ab4a:	e7d0      	b.n	801aaee <__gethex+0xce>
 801ab4c:	f04f 0b01 	mov.w	fp, #1
 801ab50:	e7fa      	b.n	801ab48 <__gethex+0x128>
 801ab52:	230a      	movs	r3, #10
 801ab54:	fb03 0002 	mla	r0, r3, r2, r0
 801ab58:	e7d0      	b.n	801aafc <__gethex+0xdc>
 801ab5a:	4629      	mov	r1, r5
 801ab5c:	e7e0      	b.n	801ab20 <__gethex+0x100>
 801ab5e:	eba5 0308 	sub.w	r3, r5, r8
 801ab62:	3b01      	subs	r3, #1
 801ab64:	4621      	mov	r1, r4
 801ab66:	2b07      	cmp	r3, #7
 801ab68:	dc0a      	bgt.n	801ab80 <__gethex+0x160>
 801ab6a:	4648      	mov	r0, r9
 801ab6c:	f7fe f970 	bl	8018e50 <_Balloc>
 801ab70:	4604      	mov	r4, r0
 801ab72:	b940      	cbnz	r0, 801ab86 <__gethex+0x166>
 801ab74:	4b61      	ldr	r3, [pc, #388]	; (801acfc <__gethex+0x2dc>)
 801ab76:	4602      	mov	r2, r0
 801ab78:	21e4      	movs	r1, #228	; 0xe4
 801ab7a:	4861      	ldr	r0, [pc, #388]	; (801ad00 <__gethex+0x2e0>)
 801ab7c:	f7ff feb4 	bl	801a8e8 <__assert_func>
 801ab80:	3101      	adds	r1, #1
 801ab82:	105b      	asrs	r3, r3, #1
 801ab84:	e7ef      	b.n	801ab66 <__gethex+0x146>
 801ab86:	f100 0a14 	add.w	sl, r0, #20
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	495a      	ldr	r1, [pc, #360]	; (801acf8 <__gethex+0x2d8>)
 801ab8e:	f8cd a004 	str.w	sl, [sp, #4]
 801ab92:	469b      	mov	fp, r3
 801ab94:	45a8      	cmp	r8, r5
 801ab96:	d342      	bcc.n	801ac1e <__gethex+0x1fe>
 801ab98:	9801      	ldr	r0, [sp, #4]
 801ab9a:	f840 bb04 	str.w	fp, [r0], #4
 801ab9e:	eba0 000a 	sub.w	r0, r0, sl
 801aba2:	1080      	asrs	r0, r0, #2
 801aba4:	6120      	str	r0, [r4, #16]
 801aba6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801abaa:	4658      	mov	r0, fp
 801abac:	f7fe fa42 	bl	8019034 <__hi0bits>
 801abb0:	683d      	ldr	r5, [r7, #0]
 801abb2:	eba8 0000 	sub.w	r0, r8, r0
 801abb6:	42a8      	cmp	r0, r5
 801abb8:	dd59      	ble.n	801ac6e <__gethex+0x24e>
 801abba:	eba0 0805 	sub.w	r8, r0, r5
 801abbe:	4641      	mov	r1, r8
 801abc0:	4620      	mov	r0, r4
 801abc2:	f7fe fdce 	bl	8019762 <__any_on>
 801abc6:	4683      	mov	fp, r0
 801abc8:	b1b8      	cbz	r0, 801abfa <__gethex+0x1da>
 801abca:	f108 33ff 	add.w	r3, r8, #4294967295
 801abce:	1159      	asrs	r1, r3, #5
 801abd0:	f003 021f 	and.w	r2, r3, #31
 801abd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801abd8:	f04f 0b01 	mov.w	fp, #1
 801abdc:	fa0b f202 	lsl.w	r2, fp, r2
 801abe0:	420a      	tst	r2, r1
 801abe2:	d00a      	beq.n	801abfa <__gethex+0x1da>
 801abe4:	455b      	cmp	r3, fp
 801abe6:	dd06      	ble.n	801abf6 <__gethex+0x1d6>
 801abe8:	f1a8 0102 	sub.w	r1, r8, #2
 801abec:	4620      	mov	r0, r4
 801abee:	f7fe fdb8 	bl	8019762 <__any_on>
 801abf2:	2800      	cmp	r0, #0
 801abf4:	d138      	bne.n	801ac68 <__gethex+0x248>
 801abf6:	f04f 0b02 	mov.w	fp, #2
 801abfa:	4641      	mov	r1, r8
 801abfc:	4620      	mov	r0, r4
 801abfe:	f7ff fea7 	bl	801a950 <rshift>
 801ac02:	4446      	add	r6, r8
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	42b3      	cmp	r3, r6
 801ac08:	da41      	bge.n	801ac8e <__gethex+0x26e>
 801ac0a:	4621      	mov	r1, r4
 801ac0c:	4648      	mov	r0, r9
 801ac0e:	f7fe f95f 	bl	8018ed0 <_Bfree>
 801ac12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac14:	2300      	movs	r3, #0
 801ac16:	6013      	str	r3, [r2, #0]
 801ac18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ac1c:	e78a      	b.n	801ab34 <__gethex+0x114>
 801ac1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ac22:	2a2e      	cmp	r2, #46	; 0x2e
 801ac24:	d014      	beq.n	801ac50 <__gethex+0x230>
 801ac26:	2b20      	cmp	r3, #32
 801ac28:	d106      	bne.n	801ac38 <__gethex+0x218>
 801ac2a:	9b01      	ldr	r3, [sp, #4]
 801ac2c:	f843 bb04 	str.w	fp, [r3], #4
 801ac30:	f04f 0b00 	mov.w	fp, #0
 801ac34:	9301      	str	r3, [sp, #4]
 801ac36:	465b      	mov	r3, fp
 801ac38:	7828      	ldrb	r0, [r5, #0]
 801ac3a:	9303      	str	r3, [sp, #12]
 801ac3c:	f7ff feda 	bl	801a9f4 <__hexdig_fun>
 801ac40:	9b03      	ldr	r3, [sp, #12]
 801ac42:	f000 000f 	and.w	r0, r0, #15
 801ac46:	4098      	lsls	r0, r3
 801ac48:	ea4b 0b00 	orr.w	fp, fp, r0
 801ac4c:	3304      	adds	r3, #4
 801ac4e:	e7a1      	b.n	801ab94 <__gethex+0x174>
 801ac50:	45a8      	cmp	r8, r5
 801ac52:	d8e8      	bhi.n	801ac26 <__gethex+0x206>
 801ac54:	2201      	movs	r2, #1
 801ac56:	4628      	mov	r0, r5
 801ac58:	9303      	str	r3, [sp, #12]
 801ac5a:	f7ff fe19 	bl	801a890 <strncmp>
 801ac5e:	4926      	ldr	r1, [pc, #152]	; (801acf8 <__gethex+0x2d8>)
 801ac60:	9b03      	ldr	r3, [sp, #12]
 801ac62:	2800      	cmp	r0, #0
 801ac64:	d1df      	bne.n	801ac26 <__gethex+0x206>
 801ac66:	e795      	b.n	801ab94 <__gethex+0x174>
 801ac68:	f04f 0b03 	mov.w	fp, #3
 801ac6c:	e7c5      	b.n	801abfa <__gethex+0x1da>
 801ac6e:	da0b      	bge.n	801ac88 <__gethex+0x268>
 801ac70:	eba5 0800 	sub.w	r8, r5, r0
 801ac74:	4621      	mov	r1, r4
 801ac76:	4642      	mov	r2, r8
 801ac78:	4648      	mov	r0, r9
 801ac7a:	f7fe fb43 	bl	8019304 <__lshift>
 801ac7e:	eba6 0608 	sub.w	r6, r6, r8
 801ac82:	4604      	mov	r4, r0
 801ac84:	f100 0a14 	add.w	sl, r0, #20
 801ac88:	f04f 0b00 	mov.w	fp, #0
 801ac8c:	e7ba      	b.n	801ac04 <__gethex+0x1e4>
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	42b3      	cmp	r3, r6
 801ac92:	dd73      	ble.n	801ad7c <__gethex+0x35c>
 801ac94:	1b9e      	subs	r6, r3, r6
 801ac96:	42b5      	cmp	r5, r6
 801ac98:	dc34      	bgt.n	801ad04 <__gethex+0x2e4>
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	2b02      	cmp	r3, #2
 801ac9e:	d023      	beq.n	801ace8 <__gethex+0x2c8>
 801aca0:	2b03      	cmp	r3, #3
 801aca2:	d025      	beq.n	801acf0 <__gethex+0x2d0>
 801aca4:	2b01      	cmp	r3, #1
 801aca6:	d115      	bne.n	801acd4 <__gethex+0x2b4>
 801aca8:	42b5      	cmp	r5, r6
 801acaa:	d113      	bne.n	801acd4 <__gethex+0x2b4>
 801acac:	2d01      	cmp	r5, #1
 801acae:	d10b      	bne.n	801acc8 <__gethex+0x2a8>
 801acb0:	9a02      	ldr	r2, [sp, #8]
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	6013      	str	r3, [r2, #0]
 801acb6:	2301      	movs	r3, #1
 801acb8:	6123      	str	r3, [r4, #16]
 801acba:	f8ca 3000 	str.w	r3, [sl]
 801acbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801acc0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801acc4:	601c      	str	r4, [r3, #0]
 801acc6:	e735      	b.n	801ab34 <__gethex+0x114>
 801acc8:	1e69      	subs	r1, r5, #1
 801acca:	4620      	mov	r0, r4
 801accc:	f7fe fd49 	bl	8019762 <__any_on>
 801acd0:	2800      	cmp	r0, #0
 801acd2:	d1ed      	bne.n	801acb0 <__gethex+0x290>
 801acd4:	4621      	mov	r1, r4
 801acd6:	4648      	mov	r0, r9
 801acd8:	f7fe f8fa 	bl	8018ed0 <_Bfree>
 801acdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801acde:	2300      	movs	r3, #0
 801ace0:	6013      	str	r3, [r2, #0]
 801ace2:	f04f 0850 	mov.w	r8, #80	; 0x50
 801ace6:	e725      	b.n	801ab34 <__gethex+0x114>
 801ace8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acea:	2b00      	cmp	r3, #0
 801acec:	d1f2      	bne.n	801acd4 <__gethex+0x2b4>
 801acee:	e7df      	b.n	801acb0 <__gethex+0x290>
 801acf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d1dc      	bne.n	801acb0 <__gethex+0x290>
 801acf6:	e7ed      	b.n	801acd4 <__gethex+0x2b4>
 801acf8:	0801cb8c 	.word	0x0801cb8c
 801acfc:	0801ca25 	.word	0x0801ca25
 801ad00:	0801cd36 	.word	0x0801cd36
 801ad04:	f106 38ff 	add.w	r8, r6, #4294967295
 801ad08:	f1bb 0f00 	cmp.w	fp, #0
 801ad0c:	d133      	bne.n	801ad76 <__gethex+0x356>
 801ad0e:	f1b8 0f00 	cmp.w	r8, #0
 801ad12:	d004      	beq.n	801ad1e <__gethex+0x2fe>
 801ad14:	4641      	mov	r1, r8
 801ad16:	4620      	mov	r0, r4
 801ad18:	f7fe fd23 	bl	8019762 <__any_on>
 801ad1c:	4683      	mov	fp, r0
 801ad1e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ad22:	2301      	movs	r3, #1
 801ad24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ad28:	f008 081f 	and.w	r8, r8, #31
 801ad2c:	fa03 f308 	lsl.w	r3, r3, r8
 801ad30:	4213      	tst	r3, r2
 801ad32:	4631      	mov	r1, r6
 801ad34:	4620      	mov	r0, r4
 801ad36:	bf18      	it	ne
 801ad38:	f04b 0b02 	orrne.w	fp, fp, #2
 801ad3c:	1bad      	subs	r5, r5, r6
 801ad3e:	f7ff fe07 	bl	801a950 <rshift>
 801ad42:	687e      	ldr	r6, [r7, #4]
 801ad44:	f04f 0802 	mov.w	r8, #2
 801ad48:	f1bb 0f00 	cmp.w	fp, #0
 801ad4c:	d04a      	beq.n	801ade4 <__gethex+0x3c4>
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	2b02      	cmp	r3, #2
 801ad52:	d016      	beq.n	801ad82 <__gethex+0x362>
 801ad54:	2b03      	cmp	r3, #3
 801ad56:	d018      	beq.n	801ad8a <__gethex+0x36a>
 801ad58:	2b01      	cmp	r3, #1
 801ad5a:	d109      	bne.n	801ad70 <__gethex+0x350>
 801ad5c:	f01b 0f02 	tst.w	fp, #2
 801ad60:	d006      	beq.n	801ad70 <__gethex+0x350>
 801ad62:	f8da 3000 	ldr.w	r3, [sl]
 801ad66:	ea4b 0b03 	orr.w	fp, fp, r3
 801ad6a:	f01b 0f01 	tst.w	fp, #1
 801ad6e:	d10f      	bne.n	801ad90 <__gethex+0x370>
 801ad70:	f048 0810 	orr.w	r8, r8, #16
 801ad74:	e036      	b.n	801ade4 <__gethex+0x3c4>
 801ad76:	f04f 0b01 	mov.w	fp, #1
 801ad7a:	e7d0      	b.n	801ad1e <__gethex+0x2fe>
 801ad7c:	f04f 0801 	mov.w	r8, #1
 801ad80:	e7e2      	b.n	801ad48 <__gethex+0x328>
 801ad82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad84:	f1c3 0301 	rsb	r3, r3, #1
 801ad88:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d0ef      	beq.n	801ad70 <__gethex+0x350>
 801ad90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ad94:	f104 0214 	add.w	r2, r4, #20
 801ad98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ad9c:	9301      	str	r3, [sp, #4]
 801ad9e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ada2:	2300      	movs	r3, #0
 801ada4:	4694      	mov	ip, r2
 801ada6:	f852 1b04 	ldr.w	r1, [r2], #4
 801adaa:	f1b1 3fff 	cmp.w	r1, #4294967295
 801adae:	d01e      	beq.n	801adee <__gethex+0x3ce>
 801adb0:	3101      	adds	r1, #1
 801adb2:	f8cc 1000 	str.w	r1, [ip]
 801adb6:	f1b8 0f02 	cmp.w	r8, #2
 801adba:	f104 0214 	add.w	r2, r4, #20
 801adbe:	d13d      	bne.n	801ae3c <__gethex+0x41c>
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	3b01      	subs	r3, #1
 801adc4:	42ab      	cmp	r3, r5
 801adc6:	d10b      	bne.n	801ade0 <__gethex+0x3c0>
 801adc8:	1169      	asrs	r1, r5, #5
 801adca:	2301      	movs	r3, #1
 801adcc:	f005 051f 	and.w	r5, r5, #31
 801add0:	fa03 f505 	lsl.w	r5, r3, r5
 801add4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801add8:	421d      	tst	r5, r3
 801adda:	bf18      	it	ne
 801addc:	f04f 0801 	movne.w	r8, #1
 801ade0:	f048 0820 	orr.w	r8, r8, #32
 801ade4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ade6:	601c      	str	r4, [r3, #0]
 801ade8:	9b02      	ldr	r3, [sp, #8]
 801adea:	601e      	str	r6, [r3, #0]
 801adec:	e6a2      	b.n	801ab34 <__gethex+0x114>
 801adee:	4290      	cmp	r0, r2
 801adf0:	f842 3c04 	str.w	r3, [r2, #-4]
 801adf4:	d8d6      	bhi.n	801ada4 <__gethex+0x384>
 801adf6:	68a2      	ldr	r2, [r4, #8]
 801adf8:	4593      	cmp	fp, r2
 801adfa:	db17      	blt.n	801ae2c <__gethex+0x40c>
 801adfc:	6861      	ldr	r1, [r4, #4]
 801adfe:	4648      	mov	r0, r9
 801ae00:	3101      	adds	r1, #1
 801ae02:	f7fe f825 	bl	8018e50 <_Balloc>
 801ae06:	4682      	mov	sl, r0
 801ae08:	b918      	cbnz	r0, 801ae12 <__gethex+0x3f2>
 801ae0a:	4b1b      	ldr	r3, [pc, #108]	; (801ae78 <__gethex+0x458>)
 801ae0c:	4602      	mov	r2, r0
 801ae0e:	2184      	movs	r1, #132	; 0x84
 801ae10:	e6b3      	b.n	801ab7a <__gethex+0x15a>
 801ae12:	6922      	ldr	r2, [r4, #16]
 801ae14:	3202      	adds	r2, #2
 801ae16:	f104 010c 	add.w	r1, r4, #12
 801ae1a:	0092      	lsls	r2, r2, #2
 801ae1c:	300c      	adds	r0, #12
 801ae1e:	f7fd f90e 	bl	801803e <memcpy>
 801ae22:	4621      	mov	r1, r4
 801ae24:	4648      	mov	r0, r9
 801ae26:	f7fe f853 	bl	8018ed0 <_Bfree>
 801ae2a:	4654      	mov	r4, sl
 801ae2c:	6922      	ldr	r2, [r4, #16]
 801ae2e:	1c51      	adds	r1, r2, #1
 801ae30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ae34:	6121      	str	r1, [r4, #16]
 801ae36:	2101      	movs	r1, #1
 801ae38:	6151      	str	r1, [r2, #20]
 801ae3a:	e7bc      	b.n	801adb6 <__gethex+0x396>
 801ae3c:	6921      	ldr	r1, [r4, #16]
 801ae3e:	4559      	cmp	r1, fp
 801ae40:	dd0b      	ble.n	801ae5a <__gethex+0x43a>
 801ae42:	2101      	movs	r1, #1
 801ae44:	4620      	mov	r0, r4
 801ae46:	f7ff fd83 	bl	801a950 <rshift>
 801ae4a:	68bb      	ldr	r3, [r7, #8]
 801ae4c:	3601      	adds	r6, #1
 801ae4e:	42b3      	cmp	r3, r6
 801ae50:	f6ff aedb 	blt.w	801ac0a <__gethex+0x1ea>
 801ae54:	f04f 0801 	mov.w	r8, #1
 801ae58:	e7c2      	b.n	801ade0 <__gethex+0x3c0>
 801ae5a:	f015 051f 	ands.w	r5, r5, #31
 801ae5e:	d0f9      	beq.n	801ae54 <__gethex+0x434>
 801ae60:	9b01      	ldr	r3, [sp, #4]
 801ae62:	441a      	add	r2, r3
 801ae64:	f1c5 0520 	rsb	r5, r5, #32
 801ae68:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ae6c:	f7fe f8e2 	bl	8019034 <__hi0bits>
 801ae70:	42a8      	cmp	r0, r5
 801ae72:	dbe6      	blt.n	801ae42 <__gethex+0x422>
 801ae74:	e7ee      	b.n	801ae54 <__gethex+0x434>
 801ae76:	bf00      	nop
 801ae78:	0801ca25 	.word	0x0801ca25

0801ae7c <L_shift>:
 801ae7c:	f1c2 0208 	rsb	r2, r2, #8
 801ae80:	0092      	lsls	r2, r2, #2
 801ae82:	b570      	push	{r4, r5, r6, lr}
 801ae84:	f1c2 0620 	rsb	r6, r2, #32
 801ae88:	6843      	ldr	r3, [r0, #4]
 801ae8a:	6804      	ldr	r4, [r0, #0]
 801ae8c:	fa03 f506 	lsl.w	r5, r3, r6
 801ae90:	432c      	orrs	r4, r5
 801ae92:	40d3      	lsrs	r3, r2
 801ae94:	6004      	str	r4, [r0, #0]
 801ae96:	f840 3f04 	str.w	r3, [r0, #4]!
 801ae9a:	4288      	cmp	r0, r1
 801ae9c:	d3f4      	bcc.n	801ae88 <L_shift+0xc>
 801ae9e:	bd70      	pop	{r4, r5, r6, pc}

0801aea0 <__match>:
 801aea0:	b530      	push	{r4, r5, lr}
 801aea2:	6803      	ldr	r3, [r0, #0]
 801aea4:	3301      	adds	r3, #1
 801aea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aeaa:	b914      	cbnz	r4, 801aeb2 <__match+0x12>
 801aeac:	6003      	str	r3, [r0, #0]
 801aeae:	2001      	movs	r0, #1
 801aeb0:	bd30      	pop	{r4, r5, pc}
 801aeb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aeb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801aeba:	2d19      	cmp	r5, #25
 801aebc:	bf98      	it	ls
 801aebe:	3220      	addls	r2, #32
 801aec0:	42a2      	cmp	r2, r4
 801aec2:	d0f0      	beq.n	801aea6 <__match+0x6>
 801aec4:	2000      	movs	r0, #0
 801aec6:	e7f3      	b.n	801aeb0 <__match+0x10>

0801aec8 <__hexnan>:
 801aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aecc:	680b      	ldr	r3, [r1, #0]
 801aece:	6801      	ldr	r1, [r0, #0]
 801aed0:	115e      	asrs	r6, r3, #5
 801aed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801aed6:	f013 031f 	ands.w	r3, r3, #31
 801aeda:	b087      	sub	sp, #28
 801aedc:	bf18      	it	ne
 801aede:	3604      	addne	r6, #4
 801aee0:	2500      	movs	r5, #0
 801aee2:	1f37      	subs	r7, r6, #4
 801aee4:	4682      	mov	sl, r0
 801aee6:	4690      	mov	r8, r2
 801aee8:	9301      	str	r3, [sp, #4]
 801aeea:	f846 5c04 	str.w	r5, [r6, #-4]
 801aeee:	46b9      	mov	r9, r7
 801aef0:	463c      	mov	r4, r7
 801aef2:	9502      	str	r5, [sp, #8]
 801aef4:	46ab      	mov	fp, r5
 801aef6:	784a      	ldrb	r2, [r1, #1]
 801aef8:	1c4b      	adds	r3, r1, #1
 801aefa:	9303      	str	r3, [sp, #12]
 801aefc:	b342      	cbz	r2, 801af50 <__hexnan+0x88>
 801aefe:	4610      	mov	r0, r2
 801af00:	9105      	str	r1, [sp, #20]
 801af02:	9204      	str	r2, [sp, #16]
 801af04:	f7ff fd76 	bl	801a9f4 <__hexdig_fun>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d14f      	bne.n	801afac <__hexnan+0xe4>
 801af0c:	9a04      	ldr	r2, [sp, #16]
 801af0e:	9905      	ldr	r1, [sp, #20]
 801af10:	2a20      	cmp	r2, #32
 801af12:	d818      	bhi.n	801af46 <__hexnan+0x7e>
 801af14:	9b02      	ldr	r3, [sp, #8]
 801af16:	459b      	cmp	fp, r3
 801af18:	dd13      	ble.n	801af42 <__hexnan+0x7a>
 801af1a:	454c      	cmp	r4, r9
 801af1c:	d206      	bcs.n	801af2c <__hexnan+0x64>
 801af1e:	2d07      	cmp	r5, #7
 801af20:	dc04      	bgt.n	801af2c <__hexnan+0x64>
 801af22:	462a      	mov	r2, r5
 801af24:	4649      	mov	r1, r9
 801af26:	4620      	mov	r0, r4
 801af28:	f7ff ffa8 	bl	801ae7c <L_shift>
 801af2c:	4544      	cmp	r4, r8
 801af2e:	d950      	bls.n	801afd2 <__hexnan+0x10a>
 801af30:	2300      	movs	r3, #0
 801af32:	f1a4 0904 	sub.w	r9, r4, #4
 801af36:	f844 3c04 	str.w	r3, [r4, #-4]
 801af3a:	f8cd b008 	str.w	fp, [sp, #8]
 801af3e:	464c      	mov	r4, r9
 801af40:	461d      	mov	r5, r3
 801af42:	9903      	ldr	r1, [sp, #12]
 801af44:	e7d7      	b.n	801aef6 <__hexnan+0x2e>
 801af46:	2a29      	cmp	r2, #41	; 0x29
 801af48:	d155      	bne.n	801aff6 <__hexnan+0x12e>
 801af4a:	3102      	adds	r1, #2
 801af4c:	f8ca 1000 	str.w	r1, [sl]
 801af50:	f1bb 0f00 	cmp.w	fp, #0
 801af54:	d04f      	beq.n	801aff6 <__hexnan+0x12e>
 801af56:	454c      	cmp	r4, r9
 801af58:	d206      	bcs.n	801af68 <__hexnan+0xa0>
 801af5a:	2d07      	cmp	r5, #7
 801af5c:	dc04      	bgt.n	801af68 <__hexnan+0xa0>
 801af5e:	462a      	mov	r2, r5
 801af60:	4649      	mov	r1, r9
 801af62:	4620      	mov	r0, r4
 801af64:	f7ff ff8a 	bl	801ae7c <L_shift>
 801af68:	4544      	cmp	r4, r8
 801af6a:	d934      	bls.n	801afd6 <__hexnan+0x10e>
 801af6c:	f1a8 0204 	sub.w	r2, r8, #4
 801af70:	4623      	mov	r3, r4
 801af72:	f853 1b04 	ldr.w	r1, [r3], #4
 801af76:	f842 1f04 	str.w	r1, [r2, #4]!
 801af7a:	429f      	cmp	r7, r3
 801af7c:	d2f9      	bcs.n	801af72 <__hexnan+0xaa>
 801af7e:	1b3b      	subs	r3, r7, r4
 801af80:	f023 0303 	bic.w	r3, r3, #3
 801af84:	3304      	adds	r3, #4
 801af86:	3e03      	subs	r6, #3
 801af88:	3401      	adds	r4, #1
 801af8a:	42a6      	cmp	r6, r4
 801af8c:	bf38      	it	cc
 801af8e:	2304      	movcc	r3, #4
 801af90:	4443      	add	r3, r8
 801af92:	2200      	movs	r2, #0
 801af94:	f843 2b04 	str.w	r2, [r3], #4
 801af98:	429f      	cmp	r7, r3
 801af9a:	d2fb      	bcs.n	801af94 <__hexnan+0xcc>
 801af9c:	683b      	ldr	r3, [r7, #0]
 801af9e:	b91b      	cbnz	r3, 801afa8 <__hexnan+0xe0>
 801afa0:	4547      	cmp	r7, r8
 801afa2:	d126      	bne.n	801aff2 <__hexnan+0x12a>
 801afa4:	2301      	movs	r3, #1
 801afa6:	603b      	str	r3, [r7, #0]
 801afa8:	2005      	movs	r0, #5
 801afaa:	e025      	b.n	801aff8 <__hexnan+0x130>
 801afac:	3501      	adds	r5, #1
 801afae:	2d08      	cmp	r5, #8
 801afb0:	f10b 0b01 	add.w	fp, fp, #1
 801afb4:	dd06      	ble.n	801afc4 <__hexnan+0xfc>
 801afb6:	4544      	cmp	r4, r8
 801afb8:	d9c3      	bls.n	801af42 <__hexnan+0x7a>
 801afba:	2300      	movs	r3, #0
 801afbc:	f844 3c04 	str.w	r3, [r4, #-4]
 801afc0:	2501      	movs	r5, #1
 801afc2:	3c04      	subs	r4, #4
 801afc4:	6822      	ldr	r2, [r4, #0]
 801afc6:	f000 000f 	and.w	r0, r0, #15
 801afca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801afce:	6020      	str	r0, [r4, #0]
 801afd0:	e7b7      	b.n	801af42 <__hexnan+0x7a>
 801afd2:	2508      	movs	r5, #8
 801afd4:	e7b5      	b.n	801af42 <__hexnan+0x7a>
 801afd6:	9b01      	ldr	r3, [sp, #4]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d0df      	beq.n	801af9c <__hexnan+0xd4>
 801afdc:	f1c3 0320 	rsb	r3, r3, #32
 801afe0:	f04f 32ff 	mov.w	r2, #4294967295
 801afe4:	40da      	lsrs	r2, r3
 801afe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801afea:	4013      	ands	r3, r2
 801afec:	f846 3c04 	str.w	r3, [r6, #-4]
 801aff0:	e7d4      	b.n	801af9c <__hexnan+0xd4>
 801aff2:	3f04      	subs	r7, #4
 801aff4:	e7d2      	b.n	801af9c <__hexnan+0xd4>
 801aff6:	2004      	movs	r0, #4
 801aff8:	b007      	add	sp, #28
 801affa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801affe <__ascii_mbtowc>:
 801affe:	b082      	sub	sp, #8
 801b000:	b901      	cbnz	r1, 801b004 <__ascii_mbtowc+0x6>
 801b002:	a901      	add	r1, sp, #4
 801b004:	b142      	cbz	r2, 801b018 <__ascii_mbtowc+0x1a>
 801b006:	b14b      	cbz	r3, 801b01c <__ascii_mbtowc+0x1e>
 801b008:	7813      	ldrb	r3, [r2, #0]
 801b00a:	600b      	str	r3, [r1, #0]
 801b00c:	7812      	ldrb	r2, [r2, #0]
 801b00e:	1e10      	subs	r0, r2, #0
 801b010:	bf18      	it	ne
 801b012:	2001      	movne	r0, #1
 801b014:	b002      	add	sp, #8
 801b016:	4770      	bx	lr
 801b018:	4610      	mov	r0, r2
 801b01a:	e7fb      	b.n	801b014 <__ascii_mbtowc+0x16>
 801b01c:	f06f 0001 	mvn.w	r0, #1
 801b020:	e7f8      	b.n	801b014 <__ascii_mbtowc+0x16>

0801b022 <_realloc_r>:
 801b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b026:	4680      	mov	r8, r0
 801b028:	4614      	mov	r4, r2
 801b02a:	460e      	mov	r6, r1
 801b02c:	b921      	cbnz	r1, 801b038 <_realloc_r+0x16>
 801b02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b032:	4611      	mov	r1, r2
 801b034:	f7fd be80 	b.w	8018d38 <_malloc_r>
 801b038:	b92a      	cbnz	r2, 801b046 <_realloc_r+0x24>
 801b03a:	f7fd fe09 	bl	8018c50 <_free_r>
 801b03e:	4625      	mov	r5, r4
 801b040:	4628      	mov	r0, r5
 801b042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b046:	f000 f842 	bl	801b0ce <_malloc_usable_size_r>
 801b04a:	4284      	cmp	r4, r0
 801b04c:	4607      	mov	r7, r0
 801b04e:	d802      	bhi.n	801b056 <_realloc_r+0x34>
 801b050:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b054:	d812      	bhi.n	801b07c <_realloc_r+0x5a>
 801b056:	4621      	mov	r1, r4
 801b058:	4640      	mov	r0, r8
 801b05a:	f7fd fe6d 	bl	8018d38 <_malloc_r>
 801b05e:	4605      	mov	r5, r0
 801b060:	2800      	cmp	r0, #0
 801b062:	d0ed      	beq.n	801b040 <_realloc_r+0x1e>
 801b064:	42bc      	cmp	r4, r7
 801b066:	4622      	mov	r2, r4
 801b068:	4631      	mov	r1, r6
 801b06a:	bf28      	it	cs
 801b06c:	463a      	movcs	r2, r7
 801b06e:	f7fc ffe6 	bl	801803e <memcpy>
 801b072:	4631      	mov	r1, r6
 801b074:	4640      	mov	r0, r8
 801b076:	f7fd fdeb 	bl	8018c50 <_free_r>
 801b07a:	e7e1      	b.n	801b040 <_realloc_r+0x1e>
 801b07c:	4635      	mov	r5, r6
 801b07e:	e7df      	b.n	801b040 <_realloc_r+0x1e>

0801b080 <__ascii_wctomb>:
 801b080:	b149      	cbz	r1, 801b096 <__ascii_wctomb+0x16>
 801b082:	2aff      	cmp	r2, #255	; 0xff
 801b084:	bf85      	ittet	hi
 801b086:	238a      	movhi	r3, #138	; 0x8a
 801b088:	6003      	strhi	r3, [r0, #0]
 801b08a:	700a      	strbls	r2, [r1, #0]
 801b08c:	f04f 30ff 	movhi.w	r0, #4294967295
 801b090:	bf98      	it	ls
 801b092:	2001      	movls	r0, #1
 801b094:	4770      	bx	lr
 801b096:	4608      	mov	r0, r1
 801b098:	4770      	bx	lr
	...

0801b09c <fiprintf>:
 801b09c:	b40e      	push	{r1, r2, r3}
 801b09e:	b503      	push	{r0, r1, lr}
 801b0a0:	4601      	mov	r1, r0
 801b0a2:	ab03      	add	r3, sp, #12
 801b0a4:	4805      	ldr	r0, [pc, #20]	; (801b0bc <fiprintf+0x20>)
 801b0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0aa:	6800      	ldr	r0, [r0, #0]
 801b0ac:	9301      	str	r3, [sp, #4]
 801b0ae:	f000 f83f 	bl	801b130 <_vfiprintf_r>
 801b0b2:	b002      	add	sp, #8
 801b0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0b8:	b003      	add	sp, #12
 801b0ba:	4770      	bx	lr
 801b0bc:	24000158 	.word	0x24000158

0801b0c0 <abort>:
 801b0c0:	b508      	push	{r3, lr}
 801b0c2:	2006      	movs	r0, #6
 801b0c4:	f000 fa0c 	bl	801b4e0 <raise>
 801b0c8:	2001      	movs	r0, #1
 801b0ca:	f7e9 f9bf 	bl	800444c <_exit>

0801b0ce <_malloc_usable_size_r>:
 801b0ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b0d2:	1f18      	subs	r0, r3, #4
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	bfbc      	itt	lt
 801b0d8:	580b      	ldrlt	r3, [r1, r0]
 801b0da:	18c0      	addlt	r0, r0, r3
 801b0dc:	4770      	bx	lr

0801b0de <__sfputc_r>:
 801b0de:	6893      	ldr	r3, [r2, #8]
 801b0e0:	3b01      	subs	r3, #1
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	b410      	push	{r4}
 801b0e6:	6093      	str	r3, [r2, #8]
 801b0e8:	da08      	bge.n	801b0fc <__sfputc_r+0x1e>
 801b0ea:	6994      	ldr	r4, [r2, #24]
 801b0ec:	42a3      	cmp	r3, r4
 801b0ee:	db01      	blt.n	801b0f4 <__sfputc_r+0x16>
 801b0f0:	290a      	cmp	r1, #10
 801b0f2:	d103      	bne.n	801b0fc <__sfputc_r+0x1e>
 801b0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0f8:	f000 b934 	b.w	801b364 <__swbuf_r>
 801b0fc:	6813      	ldr	r3, [r2, #0]
 801b0fe:	1c58      	adds	r0, r3, #1
 801b100:	6010      	str	r0, [r2, #0]
 801b102:	7019      	strb	r1, [r3, #0]
 801b104:	4608      	mov	r0, r1
 801b106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b10a:	4770      	bx	lr

0801b10c <__sfputs_r>:
 801b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10e:	4606      	mov	r6, r0
 801b110:	460f      	mov	r7, r1
 801b112:	4614      	mov	r4, r2
 801b114:	18d5      	adds	r5, r2, r3
 801b116:	42ac      	cmp	r4, r5
 801b118:	d101      	bne.n	801b11e <__sfputs_r+0x12>
 801b11a:	2000      	movs	r0, #0
 801b11c:	e007      	b.n	801b12e <__sfputs_r+0x22>
 801b11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b122:	463a      	mov	r2, r7
 801b124:	4630      	mov	r0, r6
 801b126:	f7ff ffda 	bl	801b0de <__sfputc_r>
 801b12a:	1c43      	adds	r3, r0, #1
 801b12c:	d1f3      	bne.n	801b116 <__sfputs_r+0xa>
 801b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b130 <_vfiprintf_r>:
 801b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b134:	460d      	mov	r5, r1
 801b136:	b09d      	sub	sp, #116	; 0x74
 801b138:	4614      	mov	r4, r2
 801b13a:	4698      	mov	r8, r3
 801b13c:	4606      	mov	r6, r0
 801b13e:	b118      	cbz	r0, 801b148 <_vfiprintf_r+0x18>
 801b140:	6a03      	ldr	r3, [r0, #32]
 801b142:	b90b      	cbnz	r3, 801b148 <_vfiprintf_r+0x18>
 801b144:	f7fc fe62 	bl	8017e0c <__sinit>
 801b148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b14a:	07d9      	lsls	r1, r3, #31
 801b14c:	d405      	bmi.n	801b15a <_vfiprintf_r+0x2a>
 801b14e:	89ab      	ldrh	r3, [r5, #12]
 801b150:	059a      	lsls	r2, r3, #22
 801b152:	d402      	bmi.n	801b15a <_vfiprintf_r+0x2a>
 801b154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b156:	f7fc ff70 	bl	801803a <__retarget_lock_acquire_recursive>
 801b15a:	89ab      	ldrh	r3, [r5, #12]
 801b15c:	071b      	lsls	r3, r3, #28
 801b15e:	d501      	bpl.n	801b164 <_vfiprintf_r+0x34>
 801b160:	692b      	ldr	r3, [r5, #16]
 801b162:	b99b      	cbnz	r3, 801b18c <_vfiprintf_r+0x5c>
 801b164:	4629      	mov	r1, r5
 801b166:	4630      	mov	r0, r6
 801b168:	f000 f93a 	bl	801b3e0 <__swsetup_r>
 801b16c:	b170      	cbz	r0, 801b18c <_vfiprintf_r+0x5c>
 801b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b170:	07dc      	lsls	r4, r3, #31
 801b172:	d504      	bpl.n	801b17e <_vfiprintf_r+0x4e>
 801b174:	f04f 30ff 	mov.w	r0, #4294967295
 801b178:	b01d      	add	sp, #116	; 0x74
 801b17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b17e:	89ab      	ldrh	r3, [r5, #12]
 801b180:	0598      	lsls	r0, r3, #22
 801b182:	d4f7      	bmi.n	801b174 <_vfiprintf_r+0x44>
 801b184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b186:	f7fc ff59 	bl	801803c <__retarget_lock_release_recursive>
 801b18a:	e7f3      	b.n	801b174 <_vfiprintf_r+0x44>
 801b18c:	2300      	movs	r3, #0
 801b18e:	9309      	str	r3, [sp, #36]	; 0x24
 801b190:	2320      	movs	r3, #32
 801b192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b196:	f8cd 800c 	str.w	r8, [sp, #12]
 801b19a:	2330      	movs	r3, #48	; 0x30
 801b19c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b350 <_vfiprintf_r+0x220>
 801b1a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1a4:	f04f 0901 	mov.w	r9, #1
 801b1a8:	4623      	mov	r3, r4
 801b1aa:	469a      	mov	sl, r3
 801b1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1b0:	b10a      	cbz	r2, 801b1b6 <_vfiprintf_r+0x86>
 801b1b2:	2a25      	cmp	r2, #37	; 0x25
 801b1b4:	d1f9      	bne.n	801b1aa <_vfiprintf_r+0x7a>
 801b1b6:	ebba 0b04 	subs.w	fp, sl, r4
 801b1ba:	d00b      	beq.n	801b1d4 <_vfiprintf_r+0xa4>
 801b1bc:	465b      	mov	r3, fp
 801b1be:	4622      	mov	r2, r4
 801b1c0:	4629      	mov	r1, r5
 801b1c2:	4630      	mov	r0, r6
 801b1c4:	f7ff ffa2 	bl	801b10c <__sfputs_r>
 801b1c8:	3001      	adds	r0, #1
 801b1ca:	f000 80a9 	beq.w	801b320 <_vfiprintf_r+0x1f0>
 801b1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1d0:	445a      	add	r2, fp
 801b1d2:	9209      	str	r2, [sp, #36]	; 0x24
 801b1d4:	f89a 3000 	ldrb.w	r3, [sl]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	f000 80a1 	beq.w	801b320 <_vfiprintf_r+0x1f0>
 801b1de:	2300      	movs	r3, #0
 801b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 801b1e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1e8:	f10a 0a01 	add.w	sl, sl, #1
 801b1ec:	9304      	str	r3, [sp, #16]
 801b1ee:	9307      	str	r3, [sp, #28]
 801b1f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b1f4:	931a      	str	r3, [sp, #104]	; 0x68
 801b1f6:	4654      	mov	r4, sl
 801b1f8:	2205      	movs	r2, #5
 801b1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1fe:	4854      	ldr	r0, [pc, #336]	; (801b350 <_vfiprintf_r+0x220>)
 801b200:	f7e5 f886 	bl	8000310 <memchr>
 801b204:	9a04      	ldr	r2, [sp, #16]
 801b206:	b9d8      	cbnz	r0, 801b240 <_vfiprintf_r+0x110>
 801b208:	06d1      	lsls	r1, r2, #27
 801b20a:	bf44      	itt	mi
 801b20c:	2320      	movmi	r3, #32
 801b20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b212:	0713      	lsls	r3, r2, #28
 801b214:	bf44      	itt	mi
 801b216:	232b      	movmi	r3, #43	; 0x2b
 801b218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b21c:	f89a 3000 	ldrb.w	r3, [sl]
 801b220:	2b2a      	cmp	r3, #42	; 0x2a
 801b222:	d015      	beq.n	801b250 <_vfiprintf_r+0x120>
 801b224:	9a07      	ldr	r2, [sp, #28]
 801b226:	4654      	mov	r4, sl
 801b228:	2000      	movs	r0, #0
 801b22a:	f04f 0c0a 	mov.w	ip, #10
 801b22e:	4621      	mov	r1, r4
 801b230:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b234:	3b30      	subs	r3, #48	; 0x30
 801b236:	2b09      	cmp	r3, #9
 801b238:	d94d      	bls.n	801b2d6 <_vfiprintf_r+0x1a6>
 801b23a:	b1b0      	cbz	r0, 801b26a <_vfiprintf_r+0x13a>
 801b23c:	9207      	str	r2, [sp, #28]
 801b23e:	e014      	b.n	801b26a <_vfiprintf_r+0x13a>
 801b240:	eba0 0308 	sub.w	r3, r0, r8
 801b244:	fa09 f303 	lsl.w	r3, r9, r3
 801b248:	4313      	orrs	r3, r2
 801b24a:	9304      	str	r3, [sp, #16]
 801b24c:	46a2      	mov	sl, r4
 801b24e:	e7d2      	b.n	801b1f6 <_vfiprintf_r+0xc6>
 801b250:	9b03      	ldr	r3, [sp, #12]
 801b252:	1d19      	adds	r1, r3, #4
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	9103      	str	r1, [sp, #12]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	bfbb      	ittet	lt
 801b25c:	425b      	neglt	r3, r3
 801b25e:	f042 0202 	orrlt.w	r2, r2, #2
 801b262:	9307      	strge	r3, [sp, #28]
 801b264:	9307      	strlt	r3, [sp, #28]
 801b266:	bfb8      	it	lt
 801b268:	9204      	strlt	r2, [sp, #16]
 801b26a:	7823      	ldrb	r3, [r4, #0]
 801b26c:	2b2e      	cmp	r3, #46	; 0x2e
 801b26e:	d10c      	bne.n	801b28a <_vfiprintf_r+0x15a>
 801b270:	7863      	ldrb	r3, [r4, #1]
 801b272:	2b2a      	cmp	r3, #42	; 0x2a
 801b274:	d134      	bne.n	801b2e0 <_vfiprintf_r+0x1b0>
 801b276:	9b03      	ldr	r3, [sp, #12]
 801b278:	1d1a      	adds	r2, r3, #4
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	9203      	str	r2, [sp, #12]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	bfb8      	it	lt
 801b282:	f04f 33ff 	movlt.w	r3, #4294967295
 801b286:	3402      	adds	r4, #2
 801b288:	9305      	str	r3, [sp, #20]
 801b28a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b360 <_vfiprintf_r+0x230>
 801b28e:	7821      	ldrb	r1, [r4, #0]
 801b290:	2203      	movs	r2, #3
 801b292:	4650      	mov	r0, sl
 801b294:	f7e5 f83c 	bl	8000310 <memchr>
 801b298:	b138      	cbz	r0, 801b2aa <_vfiprintf_r+0x17a>
 801b29a:	9b04      	ldr	r3, [sp, #16]
 801b29c:	eba0 000a 	sub.w	r0, r0, sl
 801b2a0:	2240      	movs	r2, #64	; 0x40
 801b2a2:	4082      	lsls	r2, r0
 801b2a4:	4313      	orrs	r3, r2
 801b2a6:	3401      	adds	r4, #1
 801b2a8:	9304      	str	r3, [sp, #16]
 801b2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2ae:	4829      	ldr	r0, [pc, #164]	; (801b354 <_vfiprintf_r+0x224>)
 801b2b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2b4:	2206      	movs	r2, #6
 801b2b6:	f7e5 f82b 	bl	8000310 <memchr>
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d03f      	beq.n	801b33e <_vfiprintf_r+0x20e>
 801b2be:	4b26      	ldr	r3, [pc, #152]	; (801b358 <_vfiprintf_r+0x228>)
 801b2c0:	bb1b      	cbnz	r3, 801b30a <_vfiprintf_r+0x1da>
 801b2c2:	9b03      	ldr	r3, [sp, #12]
 801b2c4:	3307      	adds	r3, #7
 801b2c6:	f023 0307 	bic.w	r3, r3, #7
 801b2ca:	3308      	adds	r3, #8
 801b2cc:	9303      	str	r3, [sp, #12]
 801b2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2d0:	443b      	add	r3, r7
 801b2d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2d4:	e768      	b.n	801b1a8 <_vfiprintf_r+0x78>
 801b2d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2da:	460c      	mov	r4, r1
 801b2dc:	2001      	movs	r0, #1
 801b2de:	e7a6      	b.n	801b22e <_vfiprintf_r+0xfe>
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	3401      	adds	r4, #1
 801b2e4:	9305      	str	r3, [sp, #20]
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	f04f 0c0a 	mov.w	ip, #10
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2f2:	3a30      	subs	r2, #48	; 0x30
 801b2f4:	2a09      	cmp	r2, #9
 801b2f6:	d903      	bls.n	801b300 <_vfiprintf_r+0x1d0>
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d0c6      	beq.n	801b28a <_vfiprintf_r+0x15a>
 801b2fc:	9105      	str	r1, [sp, #20]
 801b2fe:	e7c4      	b.n	801b28a <_vfiprintf_r+0x15a>
 801b300:	fb0c 2101 	mla	r1, ip, r1, r2
 801b304:	4604      	mov	r4, r0
 801b306:	2301      	movs	r3, #1
 801b308:	e7f0      	b.n	801b2ec <_vfiprintf_r+0x1bc>
 801b30a:	ab03      	add	r3, sp, #12
 801b30c:	9300      	str	r3, [sp, #0]
 801b30e:	462a      	mov	r2, r5
 801b310:	4b12      	ldr	r3, [pc, #72]	; (801b35c <_vfiprintf_r+0x22c>)
 801b312:	a904      	add	r1, sp, #16
 801b314:	4630      	mov	r0, r6
 801b316:	f7fb ff3f 	bl	8017198 <_printf_float>
 801b31a:	4607      	mov	r7, r0
 801b31c:	1c78      	adds	r0, r7, #1
 801b31e:	d1d6      	bne.n	801b2ce <_vfiprintf_r+0x19e>
 801b320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b322:	07d9      	lsls	r1, r3, #31
 801b324:	d405      	bmi.n	801b332 <_vfiprintf_r+0x202>
 801b326:	89ab      	ldrh	r3, [r5, #12]
 801b328:	059a      	lsls	r2, r3, #22
 801b32a:	d402      	bmi.n	801b332 <_vfiprintf_r+0x202>
 801b32c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b32e:	f7fc fe85 	bl	801803c <__retarget_lock_release_recursive>
 801b332:	89ab      	ldrh	r3, [r5, #12]
 801b334:	065b      	lsls	r3, r3, #25
 801b336:	f53f af1d 	bmi.w	801b174 <_vfiprintf_r+0x44>
 801b33a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b33c:	e71c      	b.n	801b178 <_vfiprintf_r+0x48>
 801b33e:	ab03      	add	r3, sp, #12
 801b340:	9300      	str	r3, [sp, #0]
 801b342:	462a      	mov	r2, r5
 801b344:	4b05      	ldr	r3, [pc, #20]	; (801b35c <_vfiprintf_r+0x22c>)
 801b346:	a904      	add	r1, sp, #16
 801b348:	4630      	mov	r0, r6
 801b34a:	f7fc f9ad 	bl	80176a8 <_printf_i>
 801b34e:	e7e4      	b.n	801b31a <_vfiprintf_r+0x1ea>
 801b350:	0801cce1 	.word	0x0801cce1
 801b354:	0801cceb 	.word	0x0801cceb
 801b358:	08017199 	.word	0x08017199
 801b35c:	0801b10d 	.word	0x0801b10d
 801b360:	0801cce7 	.word	0x0801cce7

0801b364 <__swbuf_r>:
 801b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b366:	460e      	mov	r6, r1
 801b368:	4614      	mov	r4, r2
 801b36a:	4605      	mov	r5, r0
 801b36c:	b118      	cbz	r0, 801b376 <__swbuf_r+0x12>
 801b36e:	6a03      	ldr	r3, [r0, #32]
 801b370:	b90b      	cbnz	r3, 801b376 <__swbuf_r+0x12>
 801b372:	f7fc fd4b 	bl	8017e0c <__sinit>
 801b376:	69a3      	ldr	r3, [r4, #24]
 801b378:	60a3      	str	r3, [r4, #8]
 801b37a:	89a3      	ldrh	r3, [r4, #12]
 801b37c:	071a      	lsls	r2, r3, #28
 801b37e:	d525      	bpl.n	801b3cc <__swbuf_r+0x68>
 801b380:	6923      	ldr	r3, [r4, #16]
 801b382:	b31b      	cbz	r3, 801b3cc <__swbuf_r+0x68>
 801b384:	6823      	ldr	r3, [r4, #0]
 801b386:	6922      	ldr	r2, [r4, #16]
 801b388:	1a98      	subs	r0, r3, r2
 801b38a:	6963      	ldr	r3, [r4, #20]
 801b38c:	b2f6      	uxtb	r6, r6
 801b38e:	4283      	cmp	r3, r0
 801b390:	4637      	mov	r7, r6
 801b392:	dc04      	bgt.n	801b39e <__swbuf_r+0x3a>
 801b394:	4621      	mov	r1, r4
 801b396:	4628      	mov	r0, r5
 801b398:	f7ff fa38 	bl	801a80c <_fflush_r>
 801b39c:	b9e0      	cbnz	r0, 801b3d8 <__swbuf_r+0x74>
 801b39e:	68a3      	ldr	r3, [r4, #8]
 801b3a0:	3b01      	subs	r3, #1
 801b3a2:	60a3      	str	r3, [r4, #8]
 801b3a4:	6823      	ldr	r3, [r4, #0]
 801b3a6:	1c5a      	adds	r2, r3, #1
 801b3a8:	6022      	str	r2, [r4, #0]
 801b3aa:	701e      	strb	r6, [r3, #0]
 801b3ac:	6962      	ldr	r2, [r4, #20]
 801b3ae:	1c43      	adds	r3, r0, #1
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d004      	beq.n	801b3be <__swbuf_r+0x5a>
 801b3b4:	89a3      	ldrh	r3, [r4, #12]
 801b3b6:	07db      	lsls	r3, r3, #31
 801b3b8:	d506      	bpl.n	801b3c8 <__swbuf_r+0x64>
 801b3ba:	2e0a      	cmp	r6, #10
 801b3bc:	d104      	bne.n	801b3c8 <__swbuf_r+0x64>
 801b3be:	4621      	mov	r1, r4
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	f7ff fa23 	bl	801a80c <_fflush_r>
 801b3c6:	b938      	cbnz	r0, 801b3d8 <__swbuf_r+0x74>
 801b3c8:	4638      	mov	r0, r7
 801b3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3cc:	4621      	mov	r1, r4
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	f000 f806 	bl	801b3e0 <__swsetup_r>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d0d5      	beq.n	801b384 <__swbuf_r+0x20>
 801b3d8:	f04f 37ff 	mov.w	r7, #4294967295
 801b3dc:	e7f4      	b.n	801b3c8 <__swbuf_r+0x64>
	...

0801b3e0 <__swsetup_r>:
 801b3e0:	b538      	push	{r3, r4, r5, lr}
 801b3e2:	4b2a      	ldr	r3, [pc, #168]	; (801b48c <__swsetup_r+0xac>)
 801b3e4:	4605      	mov	r5, r0
 801b3e6:	6818      	ldr	r0, [r3, #0]
 801b3e8:	460c      	mov	r4, r1
 801b3ea:	b118      	cbz	r0, 801b3f4 <__swsetup_r+0x14>
 801b3ec:	6a03      	ldr	r3, [r0, #32]
 801b3ee:	b90b      	cbnz	r3, 801b3f4 <__swsetup_r+0x14>
 801b3f0:	f7fc fd0c 	bl	8017e0c <__sinit>
 801b3f4:	89a3      	ldrh	r3, [r4, #12]
 801b3f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3fa:	0718      	lsls	r0, r3, #28
 801b3fc:	d422      	bmi.n	801b444 <__swsetup_r+0x64>
 801b3fe:	06d9      	lsls	r1, r3, #27
 801b400:	d407      	bmi.n	801b412 <__swsetup_r+0x32>
 801b402:	2309      	movs	r3, #9
 801b404:	602b      	str	r3, [r5, #0]
 801b406:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b40a:	81a3      	strh	r3, [r4, #12]
 801b40c:	f04f 30ff 	mov.w	r0, #4294967295
 801b410:	e034      	b.n	801b47c <__swsetup_r+0x9c>
 801b412:	0758      	lsls	r0, r3, #29
 801b414:	d512      	bpl.n	801b43c <__swsetup_r+0x5c>
 801b416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b418:	b141      	cbz	r1, 801b42c <__swsetup_r+0x4c>
 801b41a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b41e:	4299      	cmp	r1, r3
 801b420:	d002      	beq.n	801b428 <__swsetup_r+0x48>
 801b422:	4628      	mov	r0, r5
 801b424:	f7fd fc14 	bl	8018c50 <_free_r>
 801b428:	2300      	movs	r3, #0
 801b42a:	6363      	str	r3, [r4, #52]	; 0x34
 801b42c:	89a3      	ldrh	r3, [r4, #12]
 801b42e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b432:	81a3      	strh	r3, [r4, #12]
 801b434:	2300      	movs	r3, #0
 801b436:	6063      	str	r3, [r4, #4]
 801b438:	6923      	ldr	r3, [r4, #16]
 801b43a:	6023      	str	r3, [r4, #0]
 801b43c:	89a3      	ldrh	r3, [r4, #12]
 801b43e:	f043 0308 	orr.w	r3, r3, #8
 801b442:	81a3      	strh	r3, [r4, #12]
 801b444:	6923      	ldr	r3, [r4, #16]
 801b446:	b94b      	cbnz	r3, 801b45c <__swsetup_r+0x7c>
 801b448:	89a3      	ldrh	r3, [r4, #12]
 801b44a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b452:	d003      	beq.n	801b45c <__swsetup_r+0x7c>
 801b454:	4621      	mov	r1, r4
 801b456:	4628      	mov	r0, r5
 801b458:	f000 f884 	bl	801b564 <__smakebuf_r>
 801b45c:	89a0      	ldrh	r0, [r4, #12]
 801b45e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b462:	f010 0301 	ands.w	r3, r0, #1
 801b466:	d00a      	beq.n	801b47e <__swsetup_r+0x9e>
 801b468:	2300      	movs	r3, #0
 801b46a:	60a3      	str	r3, [r4, #8]
 801b46c:	6963      	ldr	r3, [r4, #20]
 801b46e:	425b      	negs	r3, r3
 801b470:	61a3      	str	r3, [r4, #24]
 801b472:	6923      	ldr	r3, [r4, #16]
 801b474:	b943      	cbnz	r3, 801b488 <__swsetup_r+0xa8>
 801b476:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b47a:	d1c4      	bne.n	801b406 <__swsetup_r+0x26>
 801b47c:	bd38      	pop	{r3, r4, r5, pc}
 801b47e:	0781      	lsls	r1, r0, #30
 801b480:	bf58      	it	pl
 801b482:	6963      	ldrpl	r3, [r4, #20]
 801b484:	60a3      	str	r3, [r4, #8]
 801b486:	e7f4      	b.n	801b472 <__swsetup_r+0x92>
 801b488:	2000      	movs	r0, #0
 801b48a:	e7f7      	b.n	801b47c <__swsetup_r+0x9c>
 801b48c:	24000158 	.word	0x24000158

0801b490 <_raise_r>:
 801b490:	291f      	cmp	r1, #31
 801b492:	b538      	push	{r3, r4, r5, lr}
 801b494:	4604      	mov	r4, r0
 801b496:	460d      	mov	r5, r1
 801b498:	d904      	bls.n	801b4a4 <_raise_r+0x14>
 801b49a:	2316      	movs	r3, #22
 801b49c:	6003      	str	r3, [r0, #0]
 801b49e:	f04f 30ff 	mov.w	r0, #4294967295
 801b4a2:	bd38      	pop	{r3, r4, r5, pc}
 801b4a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b4a6:	b112      	cbz	r2, 801b4ae <_raise_r+0x1e>
 801b4a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b4ac:	b94b      	cbnz	r3, 801b4c2 <_raise_r+0x32>
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f000 f830 	bl	801b514 <_getpid_r>
 801b4b4:	462a      	mov	r2, r5
 801b4b6:	4601      	mov	r1, r0
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b4be:	f000 b817 	b.w	801b4f0 <_kill_r>
 801b4c2:	2b01      	cmp	r3, #1
 801b4c4:	d00a      	beq.n	801b4dc <_raise_r+0x4c>
 801b4c6:	1c59      	adds	r1, r3, #1
 801b4c8:	d103      	bne.n	801b4d2 <_raise_r+0x42>
 801b4ca:	2316      	movs	r3, #22
 801b4cc:	6003      	str	r3, [r0, #0]
 801b4ce:	2001      	movs	r0, #1
 801b4d0:	e7e7      	b.n	801b4a2 <_raise_r+0x12>
 801b4d2:	2400      	movs	r4, #0
 801b4d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b4d8:	4628      	mov	r0, r5
 801b4da:	4798      	blx	r3
 801b4dc:	2000      	movs	r0, #0
 801b4de:	e7e0      	b.n	801b4a2 <_raise_r+0x12>

0801b4e0 <raise>:
 801b4e0:	4b02      	ldr	r3, [pc, #8]	; (801b4ec <raise+0xc>)
 801b4e2:	4601      	mov	r1, r0
 801b4e4:	6818      	ldr	r0, [r3, #0]
 801b4e6:	f7ff bfd3 	b.w	801b490 <_raise_r>
 801b4ea:	bf00      	nop
 801b4ec:	24000158 	.word	0x24000158

0801b4f0 <_kill_r>:
 801b4f0:	b538      	push	{r3, r4, r5, lr}
 801b4f2:	4d07      	ldr	r5, [pc, #28]	; (801b510 <_kill_r+0x20>)
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	4608      	mov	r0, r1
 801b4fa:	4611      	mov	r1, r2
 801b4fc:	602b      	str	r3, [r5, #0]
 801b4fe:	f7e8 ff95 	bl	800442c <_kill>
 801b502:	1c43      	adds	r3, r0, #1
 801b504:	d102      	bne.n	801b50c <_kill_r+0x1c>
 801b506:	682b      	ldr	r3, [r5, #0]
 801b508:	b103      	cbz	r3, 801b50c <_kill_r+0x1c>
 801b50a:	6023      	str	r3, [r4, #0]
 801b50c:	bd38      	pop	{r3, r4, r5, pc}
 801b50e:	bf00      	nop
 801b510:	24002ad4 	.word	0x24002ad4

0801b514 <_getpid_r>:
 801b514:	f7e8 bf82 	b.w	800441c <_getpid>

0801b518 <__swhatbuf_r>:
 801b518:	b570      	push	{r4, r5, r6, lr}
 801b51a:	460c      	mov	r4, r1
 801b51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b520:	2900      	cmp	r1, #0
 801b522:	b096      	sub	sp, #88	; 0x58
 801b524:	4615      	mov	r5, r2
 801b526:	461e      	mov	r6, r3
 801b528:	da0d      	bge.n	801b546 <__swhatbuf_r+0x2e>
 801b52a:	89a3      	ldrh	r3, [r4, #12]
 801b52c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b530:	f04f 0100 	mov.w	r1, #0
 801b534:	bf0c      	ite	eq
 801b536:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b53a:	2340      	movne	r3, #64	; 0x40
 801b53c:	2000      	movs	r0, #0
 801b53e:	6031      	str	r1, [r6, #0]
 801b540:	602b      	str	r3, [r5, #0]
 801b542:	b016      	add	sp, #88	; 0x58
 801b544:	bd70      	pop	{r4, r5, r6, pc}
 801b546:	466a      	mov	r2, sp
 801b548:	f000 f848 	bl	801b5dc <_fstat_r>
 801b54c:	2800      	cmp	r0, #0
 801b54e:	dbec      	blt.n	801b52a <__swhatbuf_r+0x12>
 801b550:	9901      	ldr	r1, [sp, #4]
 801b552:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b556:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b55a:	4259      	negs	r1, r3
 801b55c:	4159      	adcs	r1, r3
 801b55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b562:	e7eb      	b.n	801b53c <__swhatbuf_r+0x24>

0801b564 <__smakebuf_r>:
 801b564:	898b      	ldrh	r3, [r1, #12]
 801b566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b568:	079d      	lsls	r5, r3, #30
 801b56a:	4606      	mov	r6, r0
 801b56c:	460c      	mov	r4, r1
 801b56e:	d507      	bpl.n	801b580 <__smakebuf_r+0x1c>
 801b570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b574:	6023      	str	r3, [r4, #0]
 801b576:	6123      	str	r3, [r4, #16]
 801b578:	2301      	movs	r3, #1
 801b57a:	6163      	str	r3, [r4, #20]
 801b57c:	b002      	add	sp, #8
 801b57e:	bd70      	pop	{r4, r5, r6, pc}
 801b580:	ab01      	add	r3, sp, #4
 801b582:	466a      	mov	r2, sp
 801b584:	f7ff ffc8 	bl	801b518 <__swhatbuf_r>
 801b588:	9900      	ldr	r1, [sp, #0]
 801b58a:	4605      	mov	r5, r0
 801b58c:	4630      	mov	r0, r6
 801b58e:	f7fd fbd3 	bl	8018d38 <_malloc_r>
 801b592:	b948      	cbnz	r0, 801b5a8 <__smakebuf_r+0x44>
 801b594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b598:	059a      	lsls	r2, r3, #22
 801b59a:	d4ef      	bmi.n	801b57c <__smakebuf_r+0x18>
 801b59c:	f023 0303 	bic.w	r3, r3, #3
 801b5a0:	f043 0302 	orr.w	r3, r3, #2
 801b5a4:	81a3      	strh	r3, [r4, #12]
 801b5a6:	e7e3      	b.n	801b570 <__smakebuf_r+0xc>
 801b5a8:	89a3      	ldrh	r3, [r4, #12]
 801b5aa:	6020      	str	r0, [r4, #0]
 801b5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5b0:	81a3      	strh	r3, [r4, #12]
 801b5b2:	9b00      	ldr	r3, [sp, #0]
 801b5b4:	6163      	str	r3, [r4, #20]
 801b5b6:	9b01      	ldr	r3, [sp, #4]
 801b5b8:	6120      	str	r0, [r4, #16]
 801b5ba:	b15b      	cbz	r3, 801b5d4 <__smakebuf_r+0x70>
 801b5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f000 f81d 	bl	801b600 <_isatty_r>
 801b5c6:	b128      	cbz	r0, 801b5d4 <__smakebuf_r+0x70>
 801b5c8:	89a3      	ldrh	r3, [r4, #12]
 801b5ca:	f023 0303 	bic.w	r3, r3, #3
 801b5ce:	f043 0301 	orr.w	r3, r3, #1
 801b5d2:	81a3      	strh	r3, [r4, #12]
 801b5d4:	89a3      	ldrh	r3, [r4, #12]
 801b5d6:	431d      	orrs	r5, r3
 801b5d8:	81a5      	strh	r5, [r4, #12]
 801b5da:	e7cf      	b.n	801b57c <__smakebuf_r+0x18>

0801b5dc <_fstat_r>:
 801b5dc:	b538      	push	{r3, r4, r5, lr}
 801b5de:	4d07      	ldr	r5, [pc, #28]	; (801b5fc <_fstat_r+0x20>)
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	4608      	mov	r0, r1
 801b5e6:	4611      	mov	r1, r2
 801b5e8:	602b      	str	r3, [r5, #0]
 801b5ea:	f7e8 ff7e 	bl	80044ea <_fstat>
 801b5ee:	1c43      	adds	r3, r0, #1
 801b5f0:	d102      	bne.n	801b5f8 <_fstat_r+0x1c>
 801b5f2:	682b      	ldr	r3, [r5, #0]
 801b5f4:	b103      	cbz	r3, 801b5f8 <_fstat_r+0x1c>
 801b5f6:	6023      	str	r3, [r4, #0]
 801b5f8:	bd38      	pop	{r3, r4, r5, pc}
 801b5fa:	bf00      	nop
 801b5fc:	24002ad4 	.word	0x24002ad4

0801b600 <_isatty_r>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	4d06      	ldr	r5, [pc, #24]	; (801b61c <_isatty_r+0x1c>)
 801b604:	2300      	movs	r3, #0
 801b606:	4604      	mov	r4, r0
 801b608:	4608      	mov	r0, r1
 801b60a:	602b      	str	r3, [r5, #0]
 801b60c:	f7e8 ff7d 	bl	800450a <_isatty>
 801b610:	1c43      	adds	r3, r0, #1
 801b612:	d102      	bne.n	801b61a <_isatty_r+0x1a>
 801b614:	682b      	ldr	r3, [r5, #0]
 801b616:	b103      	cbz	r3, 801b61a <_isatty_r+0x1a>
 801b618:	6023      	str	r3, [r4, #0]
 801b61a:	bd38      	pop	{r3, r4, r5, pc}
 801b61c:	24002ad4 	.word	0x24002ad4

0801b620 <acos>:
 801b620:	b508      	push	{r3, lr}
 801b622:	ed2d 8b04 	vpush	{d8-d9}
 801b626:	eeb0 8b40 	vmov.f64	d8, d0
 801b62a:	f000 f9b1 	bl	801b990 <__ieee754_acos>
 801b62e:	eeb4 8b48 	vcmp.f64	d8, d8
 801b632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b636:	eeb0 9b40 	vmov.f64	d9, d0
 801b63a:	d615      	bvs.n	801b668 <acos+0x48>
 801b63c:	eeb0 0b48 	vmov.f64	d0, d8
 801b640:	f000 f886 	bl	801b750 <fabs>
 801b644:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801b648:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b650:	dd0a      	ble.n	801b668 <acos+0x48>
 801b652:	f7fc fcc7 	bl	8017fe4 <__errno>
 801b656:	ecbd 8b04 	vpop	{d8-d9}
 801b65a:	2321      	movs	r3, #33	; 0x21
 801b65c:	6003      	str	r3, [r0, #0]
 801b65e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b662:	4804      	ldr	r0, [pc, #16]	; (801b674 <acos+0x54>)
 801b664:	f7ff b938 	b.w	801a8d8 <nan>
 801b668:	eeb0 0b49 	vmov.f64	d0, d9
 801b66c:	ecbd 8b04 	vpop	{d8-d9}
 801b670:	bd08      	pop	{r3, pc}
 801b672:	bf00      	nop
 801b674:	0801cd35 	.word	0x0801cd35

0801b678 <sqrt>:
 801b678:	b508      	push	{r3, lr}
 801b67a:	ed2d 8b04 	vpush	{d8-d9}
 801b67e:	eeb0 8b40 	vmov.f64	d8, d0
 801b682:	f000 f8bd 	bl	801b800 <__ieee754_sqrt>
 801b686:	eeb4 8b48 	vcmp.f64	d8, d8
 801b68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b68e:	d60c      	bvs.n	801b6aa <sqrt+0x32>
 801b690:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801b6b0 <sqrt+0x38>
 801b694:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b69c:	d505      	bpl.n	801b6aa <sqrt+0x32>
 801b69e:	f7fc fca1 	bl	8017fe4 <__errno>
 801b6a2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801b6a6:	2321      	movs	r3, #33	; 0x21
 801b6a8:	6003      	str	r3, [r0, #0]
 801b6aa:	ecbd 8b04 	vpop	{d8-d9}
 801b6ae:	bd08      	pop	{r3, pc}
	...

0801b6b8 <cos>:
 801b6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6ba:	eeb0 7b40 	vmov.f64	d7, d0
 801b6be:	ee17 3a90 	vmov	r3, s15
 801b6c2:	4a21      	ldr	r2, [pc, #132]	; (801b748 <cos+0x90>)
 801b6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b6c8:	4293      	cmp	r3, r2
 801b6ca:	dc06      	bgt.n	801b6da <cos+0x22>
 801b6cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b740 <cos+0x88>
 801b6d0:	b005      	add	sp, #20
 801b6d2:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6d6:	f000 b897 	b.w	801b808 <__kernel_cos>
 801b6da:	4a1c      	ldr	r2, [pc, #112]	; (801b74c <cos+0x94>)
 801b6dc:	4293      	cmp	r3, r2
 801b6de:	dd04      	ble.n	801b6ea <cos+0x32>
 801b6e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b6e4:	b005      	add	sp, #20
 801b6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6ea:	4668      	mov	r0, sp
 801b6ec:	f000 fa80 	bl	801bbf0 <__ieee754_rem_pio2>
 801b6f0:	f000 0003 	and.w	r0, r0, #3
 801b6f4:	2801      	cmp	r0, #1
 801b6f6:	d009      	beq.n	801b70c <cos+0x54>
 801b6f8:	2802      	cmp	r0, #2
 801b6fa:	d010      	beq.n	801b71e <cos+0x66>
 801b6fc:	b9b0      	cbnz	r0, 801b72c <cos+0x74>
 801b6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b702:	ed9d 0b00 	vldr	d0, [sp]
 801b706:	f000 f87f 	bl	801b808 <__kernel_cos>
 801b70a:	e7eb      	b.n	801b6e4 <cos+0x2c>
 801b70c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b710:	ed9d 0b00 	vldr	d0, [sp]
 801b714:	f000 f8e4 	bl	801b8e0 <__kernel_sin>
 801b718:	eeb1 0b40 	vneg.f64	d0, d0
 801b71c:	e7e2      	b.n	801b6e4 <cos+0x2c>
 801b71e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b722:	ed9d 0b00 	vldr	d0, [sp]
 801b726:	f000 f86f 	bl	801b808 <__kernel_cos>
 801b72a:	e7f5      	b.n	801b718 <cos+0x60>
 801b72c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b730:	ed9d 0b00 	vldr	d0, [sp]
 801b734:	2001      	movs	r0, #1
 801b736:	f000 f8d3 	bl	801b8e0 <__kernel_sin>
 801b73a:	e7d3      	b.n	801b6e4 <cos+0x2c>
 801b73c:	f3af 8000 	nop.w
	...
 801b748:	3fe921fb 	.word	0x3fe921fb
 801b74c:	7fefffff 	.word	0x7fefffff

0801b750 <fabs>:
 801b750:	ec51 0b10 	vmov	r0, r1, d0
 801b754:	ee10 2a10 	vmov	r2, s0
 801b758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b75c:	ec43 2b10 	vmov	d0, r2, r3
 801b760:	4770      	bx	lr
 801b762:	0000      	movs	r0, r0
 801b764:	0000      	movs	r0, r0
	...

0801b768 <sin>:
 801b768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b76a:	eeb0 7b40 	vmov.f64	d7, d0
 801b76e:	ee17 3a90 	vmov	r3, s15
 801b772:	4a21      	ldr	r2, [pc, #132]	; (801b7f8 <sin+0x90>)
 801b774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b778:	4293      	cmp	r3, r2
 801b77a:	dc07      	bgt.n	801b78c <sin+0x24>
 801b77c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b7f0 <sin+0x88>
 801b780:	2000      	movs	r0, #0
 801b782:	b005      	add	sp, #20
 801b784:	f85d eb04 	ldr.w	lr, [sp], #4
 801b788:	f000 b8aa 	b.w	801b8e0 <__kernel_sin>
 801b78c:	4a1b      	ldr	r2, [pc, #108]	; (801b7fc <sin+0x94>)
 801b78e:	4293      	cmp	r3, r2
 801b790:	dd04      	ble.n	801b79c <sin+0x34>
 801b792:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b796:	b005      	add	sp, #20
 801b798:	f85d fb04 	ldr.w	pc, [sp], #4
 801b79c:	4668      	mov	r0, sp
 801b79e:	f000 fa27 	bl	801bbf0 <__ieee754_rem_pio2>
 801b7a2:	f000 0003 	and.w	r0, r0, #3
 801b7a6:	2801      	cmp	r0, #1
 801b7a8:	d00a      	beq.n	801b7c0 <sin+0x58>
 801b7aa:	2802      	cmp	r0, #2
 801b7ac:	d00f      	beq.n	801b7ce <sin+0x66>
 801b7ae:	b9c0      	cbnz	r0, 801b7e2 <sin+0x7a>
 801b7b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7b4:	ed9d 0b00 	vldr	d0, [sp]
 801b7b8:	2001      	movs	r0, #1
 801b7ba:	f000 f891 	bl	801b8e0 <__kernel_sin>
 801b7be:	e7ea      	b.n	801b796 <sin+0x2e>
 801b7c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7c4:	ed9d 0b00 	vldr	d0, [sp]
 801b7c8:	f000 f81e 	bl	801b808 <__kernel_cos>
 801b7cc:	e7e3      	b.n	801b796 <sin+0x2e>
 801b7ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7d2:	ed9d 0b00 	vldr	d0, [sp]
 801b7d6:	2001      	movs	r0, #1
 801b7d8:	f000 f882 	bl	801b8e0 <__kernel_sin>
 801b7dc:	eeb1 0b40 	vneg.f64	d0, d0
 801b7e0:	e7d9      	b.n	801b796 <sin+0x2e>
 801b7e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7e6:	ed9d 0b00 	vldr	d0, [sp]
 801b7ea:	f000 f80d 	bl	801b808 <__kernel_cos>
 801b7ee:	e7f5      	b.n	801b7dc <sin+0x74>
	...
 801b7f8:	3fe921fb 	.word	0x3fe921fb
 801b7fc:	7fefffff 	.word	0x7fefffff

0801b800 <__ieee754_sqrt>:
 801b800:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801b804:	4770      	bx	lr
	...

0801b808 <__kernel_cos>:
 801b808:	ee10 1a90 	vmov	r1, s1
 801b80c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b814:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801b818:	da05      	bge.n	801b826 <__kernel_cos+0x1e>
 801b81a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801b81e:	ee17 3a90 	vmov	r3, s15
 801b822:	2b00      	cmp	r3, #0
 801b824:	d03d      	beq.n	801b8a2 <__kernel_cos+0x9a>
 801b826:	ee20 5b00 	vmul.f64	d5, d0, d0
 801b82a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801b82e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 801b8a8 <__kernel_cos+0xa0>
 801b832:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801b8b0 <__kernel_cos+0xa8>
 801b836:	eea5 4b07 	vfma.f64	d4, d5, d7
 801b83a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801b8b8 <__kernel_cos+0xb0>
 801b83e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b842:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801b8c0 <__kernel_cos+0xb8>
 801b846:	eea7 4b05 	vfma.f64	d4, d7, d5
 801b84a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801b8c8 <__kernel_cos+0xc0>
 801b84e:	4b22      	ldr	r3, [pc, #136]	; (801b8d8 <__kernel_cos+0xd0>)
 801b850:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b854:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 801b8d0 <__kernel_cos+0xc8>
 801b858:	4299      	cmp	r1, r3
 801b85a:	eea7 4b05 	vfma.f64	d4, d7, d5
 801b85e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801b862:	ee24 4b05 	vmul.f64	d4, d4, d5
 801b866:	ee25 7b07 	vmul.f64	d7, d5, d7
 801b86a:	eea5 1b04 	vfma.f64	d1, d5, d4
 801b86e:	dc04      	bgt.n	801b87a <__kernel_cos+0x72>
 801b870:	ee37 7b41 	vsub.f64	d7, d7, d1
 801b874:	ee36 0b47 	vsub.f64	d0, d6, d7
 801b878:	4770      	bx	lr
 801b87a:	4b18      	ldr	r3, [pc, #96]	; (801b8dc <__kernel_cos+0xd4>)
 801b87c:	4299      	cmp	r1, r3
 801b87e:	dc0d      	bgt.n	801b89c <__kernel_cos+0x94>
 801b880:	2200      	movs	r2, #0
 801b882:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801b886:	ec43 2b15 	vmov	d5, r2, r3
 801b88a:	ee36 0b45 	vsub.f64	d0, d6, d5
 801b88e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801b892:	ee37 7b41 	vsub.f64	d7, d7, d1
 801b896:	ee30 0b47 	vsub.f64	d0, d0, d7
 801b89a:	4770      	bx	lr
 801b89c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801b8a0:	e7f3      	b.n	801b88a <__kernel_cos+0x82>
 801b8a2:	eeb0 0b46 	vmov.f64	d0, d6
 801b8a6:	4770      	bx	lr
 801b8a8:	be8838d4 	.word	0xbe8838d4
 801b8ac:	bda8fae9 	.word	0xbda8fae9
 801b8b0:	bdb4b1c4 	.word	0xbdb4b1c4
 801b8b4:	3e21ee9e 	.word	0x3e21ee9e
 801b8b8:	809c52ad 	.word	0x809c52ad
 801b8bc:	be927e4f 	.word	0xbe927e4f
 801b8c0:	19cb1590 	.word	0x19cb1590
 801b8c4:	3efa01a0 	.word	0x3efa01a0
 801b8c8:	16c15177 	.word	0x16c15177
 801b8cc:	bf56c16c 	.word	0xbf56c16c
 801b8d0:	5555554c 	.word	0x5555554c
 801b8d4:	3fa55555 	.word	0x3fa55555
 801b8d8:	3fd33332 	.word	0x3fd33332
 801b8dc:	3fe90000 	.word	0x3fe90000

0801b8e0 <__kernel_sin>:
 801b8e0:	ee10 3a90 	vmov	r3, s1
 801b8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b8e8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b8ec:	da04      	bge.n	801b8f8 <__kernel_sin+0x18>
 801b8ee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801b8f2:	ee17 3a90 	vmov	r3, s15
 801b8f6:	b35b      	cbz	r3, 801b950 <__kernel_sin+0x70>
 801b8f8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b8fc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801b900:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801b958 <__kernel_sin+0x78>
 801b904:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b960 <__kernel_sin+0x80>
 801b908:	eea6 4b07 	vfma.f64	d4, d6, d7
 801b90c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801b968 <__kernel_sin+0x88>
 801b910:	eea4 7b06 	vfma.f64	d7, d4, d6
 801b914:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b970 <__kernel_sin+0x90>
 801b918:	eea7 4b06 	vfma.f64	d4, d7, d6
 801b91c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801b978 <__kernel_sin+0x98>
 801b920:	eea4 7b06 	vfma.f64	d7, d4, d6
 801b924:	b930      	cbnz	r0, 801b934 <__kernel_sin+0x54>
 801b926:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b980 <__kernel_sin+0xa0>
 801b92a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801b92e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801b932:	4770      	bx	lr
 801b934:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801b938:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801b93c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801b940:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801b944:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801b988 <__kernel_sin+0xa8>
 801b948:	eea5 1b07 	vfma.f64	d1, d5, d7
 801b94c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801b950:	4770      	bx	lr
 801b952:	bf00      	nop
 801b954:	f3af 8000 	nop.w
 801b958:	5acfd57c 	.word	0x5acfd57c
 801b95c:	3de5d93a 	.word	0x3de5d93a
 801b960:	8a2b9ceb 	.word	0x8a2b9ceb
 801b964:	be5ae5e6 	.word	0xbe5ae5e6
 801b968:	57b1fe7d 	.word	0x57b1fe7d
 801b96c:	3ec71de3 	.word	0x3ec71de3
 801b970:	19c161d5 	.word	0x19c161d5
 801b974:	bf2a01a0 	.word	0xbf2a01a0
 801b978:	1110f8a6 	.word	0x1110f8a6
 801b97c:	3f811111 	.word	0x3f811111
 801b980:	55555549 	.word	0x55555549
 801b984:	bfc55555 	.word	0xbfc55555
 801b988:	55555549 	.word	0x55555549
 801b98c:	3fc55555 	.word	0x3fc55555

0801b990 <__ieee754_acos>:
 801b990:	b500      	push	{lr}
 801b992:	ee10 2a90 	vmov	r2, s1
 801b996:	ed2d 8b10 	vpush	{d8-d15}
 801b99a:	4991      	ldr	r1, [pc, #580]	; (801bbe0 <__ieee754_acos+0x250>)
 801b99c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b9a0:	428b      	cmp	r3, r1
 801b9a2:	b087      	sub	sp, #28
 801b9a4:	dd18      	ble.n	801b9d8 <__ieee754_acos+0x48>
 801b9a6:	ee10 1a10 	vmov	r1, s0
 801b9aa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801b9ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b9b2:	430b      	orrs	r3, r1
 801b9b4:	d10b      	bne.n	801b9ce <__ieee754_acos+0x3e>
 801b9b6:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801bb68 <__ieee754_acos+0x1d8>
 801b9ba:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 801bb70 <__ieee754_acos+0x1e0>
 801b9be:	2a00      	cmp	r2, #0
 801b9c0:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801b9c4:	b007      	add	sp, #28
 801b9c6:	ecbd 8b10 	vpop	{d8-d15}
 801b9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9ce:	ee30 8b40 	vsub.f64	d8, d0, d0
 801b9d2:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801b9d6:	e7f5      	b.n	801b9c4 <__ieee754_acos+0x34>
 801b9d8:	4982      	ldr	r1, [pc, #520]	; (801bbe4 <__ieee754_acos+0x254>)
 801b9da:	428b      	cmp	r3, r1
 801b9dc:	dc3c      	bgt.n	801ba58 <__ieee754_acos+0xc8>
 801b9de:	4a82      	ldr	r2, [pc, #520]	; (801bbe8 <__ieee754_acos+0x258>)
 801b9e0:	4293      	cmp	r3, r2
 801b9e2:	ed9f 7b65 	vldr	d7, [pc, #404]	; 801bb78 <__ieee754_acos+0x1e8>
 801b9e6:	f340 80bc 	ble.w	801bb62 <__ieee754_acos+0x1d2>
 801b9ea:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b9ee:	ed9f 4b64 	vldr	d4, [pc, #400]	; 801bb80 <__ieee754_acos+0x1f0>
 801b9f2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bb88 <__ieee754_acos+0x1f8>
 801b9f6:	eea6 5b04 	vfma.f64	d5, d6, d4
 801b9fa:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bb90 <__ieee754_acos+0x200>
 801b9fe:	eea5 4b06 	vfma.f64	d4, d5, d6
 801ba02:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bb98 <__ieee754_acos+0x208>
 801ba06:	eea4 5b06 	vfma.f64	d5, d4, d6
 801ba0a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bba0 <__ieee754_acos+0x210>
 801ba0e:	eea5 4b06 	vfma.f64	d4, d5, d6
 801ba12:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bba8 <__ieee754_acos+0x218>
 801ba16:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801bbb0 <__ieee754_acos+0x220>
 801ba1a:	eea4 5b06 	vfma.f64	d5, d4, d6
 801ba1e:	ee25 5b06 	vmul.f64	d5, d5, d6
 801ba22:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bbb8 <__ieee754_acos+0x228>
 801ba26:	eea6 3b04 	vfma.f64	d3, d6, d4
 801ba2a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bbc0 <__ieee754_acos+0x230>
 801ba2e:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ba32:	ed9f 3b65 	vldr	d3, [pc, #404]	; 801bbc8 <__ieee754_acos+0x238>
 801ba36:	eea4 3b06 	vfma.f64	d3, d4, d6
 801ba3a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801ba3e:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ba42:	ed9f 6b63 	vldr	d6, [pc, #396]	; 801bbd0 <__ieee754_acos+0x240>
 801ba46:	ee85 3b04 	vdiv.f64	d3, d5, d4
 801ba4a:	eea0 6b43 	vfms.f64	d6, d0, d3
 801ba4e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ba52:	ee37 0b40 	vsub.f64	d0, d7, d0
 801ba56:	e7b5      	b.n	801b9c4 <__ieee754_acos+0x34>
 801ba58:	2a00      	cmp	r2, #0
 801ba5a:	ed9f eb49 	vldr	d14, [pc, #292]	; 801bb80 <__ieee754_acos+0x1f0>
 801ba5e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801ba62:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ba66:	ed9f db48 	vldr	d13, [pc, #288]	; 801bb88 <__ieee754_acos+0x1f8>
 801ba6a:	ed9f cb49 	vldr	d12, [pc, #292]	; 801bb90 <__ieee754_acos+0x200>
 801ba6e:	ed9f bb4a 	vldr	d11, [pc, #296]	; 801bb98 <__ieee754_acos+0x208>
 801ba72:	ed9f ab4b 	vldr	d10, [pc, #300]	; 801bba0 <__ieee754_acos+0x210>
 801ba76:	ed9f fb4c 	vldr	d15, [pc, #304]	; 801bba8 <__ieee754_acos+0x218>
 801ba7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801bbb0 <__ieee754_acos+0x220>
 801ba7e:	ed9f 2b50 	vldr	d2, [pc, #320]	; 801bbc0 <__ieee754_acos+0x230>
 801ba82:	ed9f 1b51 	vldr	d1, [pc, #324]	; 801bbc8 <__ieee754_acos+0x238>
 801ba86:	da2a      	bge.n	801bade <__ieee754_acos+0x14e>
 801ba88:	ee30 0b09 	vadd.f64	d0, d0, d9
 801ba8c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ba90:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801bbb8 <__ieee754_acos+0x228>
 801ba94:	eea0 db0e 	vfma.f64	d13, d0, d14
 801ba98:	eead cb00 	vfma.f64	d12, d13, d0
 801ba9c:	eea0 3b07 	vfma.f64	d3, d0, d7
 801baa0:	eeac bb00 	vfma.f64	d11, d12, d0
 801baa4:	eea3 2b00 	vfma.f64	d2, d3, d0
 801baa8:	eeab ab00 	vfma.f64	d10, d11, d0
 801baac:	eea2 1b00 	vfma.f64	d1, d2, d0
 801bab0:	eeaa fb00 	vfma.f64	d15, d10, d0
 801bab4:	eea1 9b00 	vfma.f64	d9, d1, d0
 801bab8:	ee2f 8b00 	vmul.f64	d8, d15, d0
 801babc:	f7ff fea0 	bl	801b800 <__ieee754_sqrt>
 801bac0:	ee88 6b09 	vdiv.f64	d6, d8, d9
 801bac4:	ed9f 7b44 	vldr	d7, [pc, #272]	; 801bbd8 <__ieee754_acos+0x248>
 801bac8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801bacc:	ee37 7b00 	vadd.f64	d7, d7, d0
 801bad0:	ed9f 0b27 	vldr	d0, [pc, #156]	; 801bb70 <__ieee754_acos+0x1e0>
 801bad4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801bad8:	eea7 0b46 	vfms.f64	d0, d7, d6
 801badc:	e772      	b.n	801b9c4 <__ieee754_acos+0x34>
 801bade:	ee39 8b40 	vsub.f64	d8, d9, d0
 801bae2:	ee28 8b07 	vmul.f64	d8, d8, d7
 801bae6:	eeb0 0b48 	vmov.f64	d0, d8
 801baea:	ed8d 1b04 	vstr	d1, [sp, #16]
 801baee:	ed8d 2b02 	vstr	d2, [sp, #8]
 801baf2:	ed8d 3b00 	vstr	d3, [sp]
 801baf6:	f7ff fe83 	bl	801b800 <__ieee754_sqrt>
 801bafa:	eeb0 5b48 	vmov.f64	d5, d8
 801bafe:	eea8 db0e 	vfma.f64	d13, d8, d14
 801bb02:	ec53 2b10 	vmov	r2, r3, d0
 801bb06:	eead cb08 	vfma.f64	d12, d13, d8
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	ec43 2b17 	vmov	d7, r2, r3
 801bb10:	eeac bb08 	vfma.f64	d11, d12, d8
 801bb14:	ee30 6b07 	vadd.f64	d6, d0, d7
 801bb18:	eea7 5b47 	vfms.f64	d5, d7, d7
 801bb1c:	ed9d 3b00 	vldr	d3, [sp]
 801bb20:	ee85 4b06 	vdiv.f64	d4, d5, d6
 801bb24:	eeab ab08 	vfma.f64	d10, d11, d8
 801bb28:	ed9f 6b23 	vldr	d6, [pc, #140]	; 801bbb8 <__ieee754_acos+0x228>
 801bb2c:	eeaa fb08 	vfma.f64	d15, d10, d8
 801bb30:	ee2f fb08 	vmul.f64	d15, d15, d8
 801bb34:	ed9d 2b02 	vldr	d2, [sp, #8]
 801bb38:	eea8 3b06 	vfma.f64	d3, d8, d6
 801bb3c:	eeb0 6b44 	vmov.f64	d6, d4
 801bb40:	ed9d 1b04 	vldr	d1, [sp, #16]
 801bb44:	eea3 2b08 	vfma.f64	d2, d3, d8
 801bb48:	eea2 1b08 	vfma.f64	d1, d2, d8
 801bb4c:	eea1 9b08 	vfma.f64	d9, d1, d8
 801bb50:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 801bb54:	eea0 6b05 	vfma.f64	d6, d0, d5
 801bb58:	ee37 0b06 	vadd.f64	d0, d7, d6
 801bb5c:	ee30 0b00 	vadd.f64	d0, d0, d0
 801bb60:	e730      	b.n	801b9c4 <__ieee754_acos+0x34>
 801bb62:	eeb0 0b47 	vmov.f64	d0, d7
 801bb66:	e72d      	b.n	801b9c4 <__ieee754_acos+0x34>
	...
 801bb70:	54442d18 	.word	0x54442d18
 801bb74:	400921fb 	.word	0x400921fb
 801bb78:	54442d18 	.word	0x54442d18
 801bb7c:	3ff921fb 	.word	0x3ff921fb
 801bb80:	0dfdf709 	.word	0x0dfdf709
 801bb84:	3f023de1 	.word	0x3f023de1
 801bb88:	7501b288 	.word	0x7501b288
 801bb8c:	3f49efe0 	.word	0x3f49efe0
 801bb90:	b5688f3b 	.word	0xb5688f3b
 801bb94:	bfa48228 	.word	0xbfa48228
 801bb98:	0e884455 	.word	0x0e884455
 801bb9c:	3fc9c155 	.word	0x3fc9c155
 801bba0:	03eb6f7d 	.word	0x03eb6f7d
 801bba4:	bfd4d612 	.word	0xbfd4d612
 801bba8:	55555555 	.word	0x55555555
 801bbac:	3fc55555 	.word	0x3fc55555
 801bbb0:	1b8d0159 	.word	0x1b8d0159
 801bbb4:	bfe6066c 	.word	0xbfe6066c
 801bbb8:	b12e9282 	.word	0xb12e9282
 801bbbc:	3fb3b8c5 	.word	0x3fb3b8c5
 801bbc0:	9c598ac8 	.word	0x9c598ac8
 801bbc4:	40002ae5 	.word	0x40002ae5
 801bbc8:	1c8a2d4b 	.word	0x1c8a2d4b
 801bbcc:	c0033a27 	.word	0xc0033a27
 801bbd0:	33145c07 	.word	0x33145c07
 801bbd4:	3c91a626 	.word	0x3c91a626
 801bbd8:	33145c07 	.word	0x33145c07
 801bbdc:	bc91a626 	.word	0xbc91a626
 801bbe0:	3fefffff 	.word	0x3fefffff
 801bbe4:	3fdfffff 	.word	0x3fdfffff
 801bbe8:	3c600000 	.word	0x3c600000
 801bbec:	00000000 	.word	0x00000000

0801bbf0 <__ieee754_rem_pio2>:
 801bbf0:	b570      	push	{r4, r5, r6, lr}
 801bbf2:	eeb0 7b40 	vmov.f64	d7, d0
 801bbf6:	ee17 5a90 	vmov	r5, s15
 801bbfa:	4b99      	ldr	r3, [pc, #612]	; (801be60 <__ieee754_rem_pio2+0x270>)
 801bbfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bc00:	429e      	cmp	r6, r3
 801bc02:	b088      	sub	sp, #32
 801bc04:	4604      	mov	r4, r0
 801bc06:	dc07      	bgt.n	801bc18 <__ieee754_rem_pio2+0x28>
 801bc08:	2200      	movs	r2, #0
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	ed84 0b00 	vstr	d0, [r4]
 801bc10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bc14:	2000      	movs	r0, #0
 801bc16:	e01b      	b.n	801bc50 <__ieee754_rem_pio2+0x60>
 801bc18:	4b92      	ldr	r3, [pc, #584]	; (801be64 <__ieee754_rem_pio2+0x274>)
 801bc1a:	429e      	cmp	r6, r3
 801bc1c:	dc3b      	bgt.n	801bc96 <__ieee754_rem_pio2+0xa6>
 801bc1e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801bc22:	2d00      	cmp	r5, #0
 801bc24:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801be20 <__ieee754_rem_pio2+0x230>
 801bc28:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801bc2c:	dd19      	ble.n	801bc62 <__ieee754_rem_pio2+0x72>
 801bc2e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bc32:	429e      	cmp	r6, r3
 801bc34:	d00e      	beq.n	801bc54 <__ieee754_rem_pio2+0x64>
 801bc36:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801be28 <__ieee754_rem_pio2+0x238>
 801bc3a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801bc3e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bc42:	ed84 5b00 	vstr	d5, [r4]
 801bc46:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bc4a:	ed84 7b02 	vstr	d7, [r4, #8]
 801bc4e:	2001      	movs	r0, #1
 801bc50:	b008      	add	sp, #32
 801bc52:	bd70      	pop	{r4, r5, r6, pc}
 801bc54:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801be30 <__ieee754_rem_pio2+0x240>
 801bc58:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bc5c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801be38 <__ieee754_rem_pio2+0x248>
 801bc60:	e7eb      	b.n	801bc3a <__ieee754_rem_pio2+0x4a>
 801bc62:	429e      	cmp	r6, r3
 801bc64:	ee30 7b06 	vadd.f64	d7, d0, d6
 801bc68:	d00e      	beq.n	801bc88 <__ieee754_rem_pio2+0x98>
 801bc6a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801be28 <__ieee754_rem_pio2+0x238>
 801bc6e:	ee37 5b06 	vadd.f64	d5, d7, d6
 801bc72:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bc76:	ed84 5b00 	vstr	d5, [r4]
 801bc7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 801bc82:	ed84 7b02 	vstr	d7, [r4, #8]
 801bc86:	e7e3      	b.n	801bc50 <__ieee754_rem_pio2+0x60>
 801bc88:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801be30 <__ieee754_rem_pio2+0x240>
 801bc8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bc90:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801be38 <__ieee754_rem_pio2+0x248>
 801bc94:	e7eb      	b.n	801bc6e <__ieee754_rem_pio2+0x7e>
 801bc96:	4b74      	ldr	r3, [pc, #464]	; (801be68 <__ieee754_rem_pio2+0x278>)
 801bc98:	429e      	cmp	r6, r3
 801bc9a:	dc70      	bgt.n	801bd7e <__ieee754_rem_pio2+0x18e>
 801bc9c:	f7ff fd58 	bl	801b750 <fabs>
 801bca0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bca4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801be40 <__ieee754_rem_pio2+0x250>
 801bca8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801bcac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801bcb0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801bcb4:	ee17 0a90 	vmov	r0, s15
 801bcb8:	eeb1 4b45 	vneg.f64	d4, d5
 801bcbc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801be20 <__ieee754_rem_pio2+0x230>
 801bcc0:	eea5 0b47 	vfms.f64	d0, d5, d7
 801bcc4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801be28 <__ieee754_rem_pio2+0x238>
 801bcc8:	281f      	cmp	r0, #31
 801bcca:	ee25 7b07 	vmul.f64	d7, d5, d7
 801bcce:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bcd2:	dc08      	bgt.n	801bce6 <__ieee754_rem_pio2+0xf6>
 801bcd4:	4b65      	ldr	r3, [pc, #404]	; (801be6c <__ieee754_rem_pio2+0x27c>)
 801bcd6:	1e42      	subs	r2, r0, #1
 801bcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bcdc:	42b3      	cmp	r3, r6
 801bcde:	d002      	beq.n	801bce6 <__ieee754_rem_pio2+0xf6>
 801bce0:	ed84 6b00 	vstr	d6, [r4]
 801bce4:	e024      	b.n	801bd30 <__ieee754_rem_pio2+0x140>
 801bce6:	ee16 3a90 	vmov	r3, s13
 801bcea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bcee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801bcf2:	2b10      	cmp	r3, #16
 801bcf4:	ea4f 5226 	mov.w	r2, r6, asr #20
 801bcf8:	ddf2      	ble.n	801bce0 <__ieee754_rem_pio2+0xf0>
 801bcfa:	eeb0 6b40 	vmov.f64	d6, d0
 801bcfe:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801be30 <__ieee754_rem_pio2+0x240>
 801bd02:	eea4 6b03 	vfma.f64	d6, d4, d3
 801bd06:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bd0a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801bd0e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801be38 <__ieee754_rem_pio2+0x248>
 801bd12:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801bd16:	ee36 3b47 	vsub.f64	d3, d6, d7
 801bd1a:	ee13 3a90 	vmov	r3, s7
 801bd1e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bd22:	1ad3      	subs	r3, r2, r3
 801bd24:	2b31      	cmp	r3, #49	; 0x31
 801bd26:	dc17      	bgt.n	801bd58 <__ieee754_rem_pio2+0x168>
 801bd28:	eeb0 0b46 	vmov.f64	d0, d6
 801bd2c:	ed84 3b00 	vstr	d3, [r4]
 801bd30:	ed94 6b00 	vldr	d6, [r4]
 801bd34:	2d00      	cmp	r5, #0
 801bd36:	ee30 0b46 	vsub.f64	d0, d0, d6
 801bd3a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801bd3e:	ed84 0b02 	vstr	d0, [r4, #8]
 801bd42:	da85      	bge.n	801bc50 <__ieee754_rem_pio2+0x60>
 801bd44:	eeb1 6b46 	vneg.f64	d6, d6
 801bd48:	eeb1 0b40 	vneg.f64	d0, d0
 801bd4c:	ed84 6b00 	vstr	d6, [r4]
 801bd50:	ed84 0b02 	vstr	d0, [r4, #8]
 801bd54:	4240      	negs	r0, r0
 801bd56:	e77b      	b.n	801bc50 <__ieee754_rem_pio2+0x60>
 801bd58:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801be48 <__ieee754_rem_pio2+0x258>
 801bd5c:	eeb0 0b46 	vmov.f64	d0, d6
 801bd60:	eea4 0b07 	vfma.f64	d0, d4, d7
 801bd64:	ee36 6b40 	vsub.f64	d6, d6, d0
 801bd68:	eea4 6b07 	vfma.f64	d6, d4, d7
 801bd6c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801be50 <__ieee754_rem_pio2+0x260>
 801bd70:	eeb0 7b46 	vmov.f64	d7, d6
 801bd74:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801bd78:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bd7c:	e7b0      	b.n	801bce0 <__ieee754_rem_pio2+0xf0>
 801bd7e:	4b3c      	ldr	r3, [pc, #240]	; (801be70 <__ieee754_rem_pio2+0x280>)
 801bd80:	429e      	cmp	r6, r3
 801bd82:	dd06      	ble.n	801bd92 <__ieee754_rem_pio2+0x1a2>
 801bd84:	ee30 7b40 	vsub.f64	d7, d0, d0
 801bd88:	ed80 7b02 	vstr	d7, [r0, #8]
 801bd8c:	ed80 7b00 	vstr	d7, [r0]
 801bd90:	e740      	b.n	801bc14 <__ieee754_rem_pio2+0x24>
 801bd92:	1532      	asrs	r2, r6, #20
 801bd94:	ee10 0a10 	vmov	r0, s0
 801bd98:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801bd9c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801bda0:	ec41 0b17 	vmov	d7, r0, r1
 801bda4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bda8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801be58 <__ieee754_rem_pio2+0x268>
 801bdac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bdb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bdb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bdb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bdbc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bdc0:	a808      	add	r0, sp, #32
 801bdc2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bdc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bdca:	ed8d 6b04 	vstr	d6, [sp, #16]
 801bdce:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bdd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bdd6:	2103      	movs	r1, #3
 801bdd8:	ed30 7b02 	vldmdb	r0!, {d7}
 801bddc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bde4:	460b      	mov	r3, r1
 801bde6:	f101 31ff 	add.w	r1, r1, #4294967295
 801bdea:	d0f5      	beq.n	801bdd8 <__ieee754_rem_pio2+0x1e8>
 801bdec:	4921      	ldr	r1, [pc, #132]	; (801be74 <__ieee754_rem_pio2+0x284>)
 801bdee:	9101      	str	r1, [sp, #4]
 801bdf0:	2102      	movs	r1, #2
 801bdf2:	9100      	str	r1, [sp, #0]
 801bdf4:	a802      	add	r0, sp, #8
 801bdf6:	4621      	mov	r1, r4
 801bdf8:	f000 f83e 	bl	801be78 <__kernel_rem_pio2>
 801bdfc:	2d00      	cmp	r5, #0
 801bdfe:	f6bf af27 	bge.w	801bc50 <__ieee754_rem_pio2+0x60>
 801be02:	ed94 7b00 	vldr	d7, [r4]
 801be06:	eeb1 7b47 	vneg.f64	d7, d7
 801be0a:	ed84 7b00 	vstr	d7, [r4]
 801be0e:	ed94 7b02 	vldr	d7, [r4, #8]
 801be12:	eeb1 7b47 	vneg.f64	d7, d7
 801be16:	ed84 7b02 	vstr	d7, [r4, #8]
 801be1a:	e79b      	b.n	801bd54 <__ieee754_rem_pio2+0x164>
 801be1c:	f3af 8000 	nop.w
 801be20:	54400000 	.word	0x54400000
 801be24:	3ff921fb 	.word	0x3ff921fb
 801be28:	1a626331 	.word	0x1a626331
 801be2c:	3dd0b461 	.word	0x3dd0b461
 801be30:	1a600000 	.word	0x1a600000
 801be34:	3dd0b461 	.word	0x3dd0b461
 801be38:	2e037073 	.word	0x2e037073
 801be3c:	3ba3198a 	.word	0x3ba3198a
 801be40:	6dc9c883 	.word	0x6dc9c883
 801be44:	3fe45f30 	.word	0x3fe45f30
 801be48:	2e000000 	.word	0x2e000000
 801be4c:	3ba3198a 	.word	0x3ba3198a
 801be50:	252049c1 	.word	0x252049c1
 801be54:	397b839a 	.word	0x397b839a
 801be58:	00000000 	.word	0x00000000
 801be5c:	41700000 	.word	0x41700000
 801be60:	3fe921fb 	.word	0x3fe921fb
 801be64:	4002d97b 	.word	0x4002d97b
 801be68:	413921fb 	.word	0x413921fb
 801be6c:	0801cd98 	.word	0x0801cd98
 801be70:	7fefffff 	.word	0x7fefffff
 801be74:	0801ce18 	.word	0x0801ce18

0801be78 <__kernel_rem_pio2>:
 801be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be7c:	ed2d 8b06 	vpush	{d8-d10}
 801be80:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801be84:	460f      	mov	r7, r1
 801be86:	9002      	str	r0, [sp, #8]
 801be88:	49c3      	ldr	r1, [pc, #780]	; (801c198 <__kernel_rem_pio2+0x320>)
 801be8a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801be8c:	9301      	str	r3, [sp, #4]
 801be8e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801be92:	9901      	ldr	r1, [sp, #4]
 801be94:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801be96:	f112 0f14 	cmn.w	r2, #20
 801be9a:	bfa8      	it	ge
 801be9c:	1ed0      	subge	r0, r2, #3
 801be9e:	f101 3aff 	add.w	sl, r1, #4294967295
 801bea2:	bfaa      	itet	ge
 801bea4:	2418      	movge	r4, #24
 801bea6:	2000      	movlt	r0, #0
 801bea8:	fb90 f0f4 	sdivge	r0, r0, r4
 801beac:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801c180 <__kernel_rem_pio2+0x308>
 801beb0:	f06f 0417 	mvn.w	r4, #23
 801beb4:	fb00 4404 	mla	r4, r0, r4, r4
 801beb8:	eba0 060a 	sub.w	r6, r0, sl
 801bebc:	4414      	add	r4, r2
 801bebe:	eb09 0c0a 	add.w	ip, r9, sl
 801bec2:	ad1a      	add	r5, sp, #104	; 0x68
 801bec4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801bec8:	2200      	movs	r2, #0
 801beca:	4562      	cmp	r2, ip
 801becc:	dd10      	ble.n	801bef0 <__kernel_rem_pio2+0x78>
 801bece:	9a01      	ldr	r2, [sp, #4]
 801bed0:	a91a      	add	r1, sp, #104	; 0x68
 801bed2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801bed6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801beda:	f04f 0c00 	mov.w	ip, #0
 801bede:	45cc      	cmp	ip, r9
 801bee0:	dc26      	bgt.n	801bf30 <__kernel_rem_pio2+0xb8>
 801bee2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801c180 <__kernel_rem_pio2+0x308>
 801bee6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801beea:	4616      	mov	r6, r2
 801beec:	2500      	movs	r5, #0
 801beee:	e015      	b.n	801bf1c <__kernel_rem_pio2+0xa4>
 801bef0:	42d6      	cmn	r6, r2
 801bef2:	d409      	bmi.n	801bf08 <__kernel_rem_pio2+0x90>
 801bef4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801bef8:	ee07 1a90 	vmov	s15, r1
 801befc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bf00:	eca5 7b02 	vstmia	r5!, {d7}
 801bf04:	3201      	adds	r2, #1
 801bf06:	e7e0      	b.n	801beca <__kernel_rem_pio2+0x52>
 801bf08:	eeb0 7b46 	vmov.f64	d7, d6
 801bf0c:	e7f8      	b.n	801bf00 <__kernel_rem_pio2+0x88>
 801bf0e:	ecbe 5b02 	vldmia	lr!, {d5}
 801bf12:	ed96 6b00 	vldr	d6, [r6]
 801bf16:	3501      	adds	r5, #1
 801bf18:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bf1c:	4555      	cmp	r5, sl
 801bf1e:	f1a6 0608 	sub.w	r6, r6, #8
 801bf22:	ddf4      	ble.n	801bf0e <__kernel_rem_pio2+0x96>
 801bf24:	eca8 7b02 	vstmia	r8!, {d7}
 801bf28:	f10c 0c01 	add.w	ip, ip, #1
 801bf2c:	3208      	adds	r2, #8
 801bf2e:	e7d6      	b.n	801bede <__kernel_rem_pio2+0x66>
 801bf30:	aa06      	add	r2, sp, #24
 801bf32:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801c188 <__kernel_rem_pio2+0x310>
 801bf36:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c190 <__kernel_rem_pio2+0x318>
 801bf3a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801bf3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801bf42:	9204      	str	r2, [sp, #16]
 801bf44:	9303      	str	r3, [sp, #12]
 801bf46:	464d      	mov	r5, r9
 801bf48:	00eb      	lsls	r3, r5, #3
 801bf4a:	9305      	str	r3, [sp, #20]
 801bf4c:	ab92      	add	r3, sp, #584	; 0x248
 801bf4e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bf52:	f10d 0b18 	add.w	fp, sp, #24
 801bf56:	ab6a      	add	r3, sp, #424	; 0x1a8
 801bf58:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801bf5c:	465e      	mov	r6, fp
 801bf5e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bf62:	4628      	mov	r0, r5
 801bf64:	2800      	cmp	r0, #0
 801bf66:	f1a2 0208 	sub.w	r2, r2, #8
 801bf6a:	dc48      	bgt.n	801bffe <__kernel_rem_pio2+0x186>
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	f000 fa17 	bl	801c3a0 <scalbn>
 801bf72:	eeb0 8b40 	vmov.f64	d8, d0
 801bf76:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801bf7a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801bf7e:	f000 fa8f 	bl	801c4a0 <floor>
 801bf82:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801bf86:	eea0 8b47 	vfms.f64	d8, d0, d7
 801bf8a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801bf8e:	2c00      	cmp	r4, #0
 801bf90:	ee17 8a90 	vmov	r8, s15
 801bf94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bf98:	ee38 8b47 	vsub.f64	d8, d8, d7
 801bf9c:	dd41      	ble.n	801c022 <__kernel_rem_pio2+0x1aa>
 801bf9e:	1e68      	subs	r0, r5, #1
 801bfa0:	ab06      	add	r3, sp, #24
 801bfa2:	f1c4 0c18 	rsb	ip, r4, #24
 801bfa6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801bfaa:	fa46 f20c 	asr.w	r2, r6, ip
 801bfae:	4490      	add	r8, r2
 801bfb0:	fa02 f20c 	lsl.w	r2, r2, ip
 801bfb4:	1ab6      	subs	r6, r6, r2
 801bfb6:	f1c4 0217 	rsb	r2, r4, #23
 801bfba:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801bfbe:	4116      	asrs	r6, r2
 801bfc0:	2e00      	cmp	r6, #0
 801bfc2:	dd3d      	ble.n	801c040 <__kernel_rem_pio2+0x1c8>
 801bfc4:	f04f 0c00 	mov.w	ip, #0
 801bfc8:	f108 0801 	add.w	r8, r8, #1
 801bfcc:	4660      	mov	r0, ip
 801bfce:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801bfd2:	4565      	cmp	r5, ip
 801bfd4:	dc6a      	bgt.n	801c0ac <__kernel_rem_pio2+0x234>
 801bfd6:	2c00      	cmp	r4, #0
 801bfd8:	dd04      	ble.n	801bfe4 <__kernel_rem_pio2+0x16c>
 801bfda:	2c01      	cmp	r4, #1
 801bfdc:	d07b      	beq.n	801c0d6 <__kernel_rem_pio2+0x25e>
 801bfde:	2c02      	cmp	r4, #2
 801bfe0:	f000 8083 	beq.w	801c0ea <__kernel_rem_pio2+0x272>
 801bfe4:	2e02      	cmp	r6, #2
 801bfe6:	d12b      	bne.n	801c040 <__kernel_rem_pio2+0x1c8>
 801bfe8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bfec:	ee30 8b48 	vsub.f64	d8, d0, d8
 801bff0:	b330      	cbz	r0, 801c040 <__kernel_rem_pio2+0x1c8>
 801bff2:	4620      	mov	r0, r4
 801bff4:	f000 f9d4 	bl	801c3a0 <scalbn>
 801bff8:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bffc:	e020      	b.n	801c040 <__kernel_rem_pio2+0x1c8>
 801bffe:	ee20 7b09 	vmul.f64	d7, d0, d9
 801c002:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801c006:	3801      	subs	r0, #1
 801c008:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801c00c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801c010:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c014:	eca6 0a01 	vstmia	r6!, {s0}
 801c018:	ed92 0b00 	vldr	d0, [r2]
 801c01c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801c020:	e7a0      	b.n	801bf64 <__kernel_rem_pio2+0xec>
 801c022:	d105      	bne.n	801c030 <__kernel_rem_pio2+0x1b8>
 801c024:	1e6a      	subs	r2, r5, #1
 801c026:	ab06      	add	r3, sp, #24
 801c028:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c02c:	15f6      	asrs	r6, r6, #23
 801c02e:	e7c7      	b.n	801bfc0 <__kernel_rem_pio2+0x148>
 801c030:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801c034:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c03c:	da34      	bge.n	801c0a8 <__kernel_rem_pio2+0x230>
 801c03e:	2600      	movs	r6, #0
 801c040:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c048:	f040 80aa 	bne.w	801c1a0 <__kernel_rem_pio2+0x328>
 801c04c:	f105 3bff 	add.w	fp, r5, #4294967295
 801c050:	4658      	mov	r0, fp
 801c052:	2200      	movs	r2, #0
 801c054:	4548      	cmp	r0, r9
 801c056:	da50      	bge.n	801c0fa <__kernel_rem_pio2+0x282>
 801c058:	2a00      	cmp	r2, #0
 801c05a:	d06b      	beq.n	801c134 <__kernel_rem_pio2+0x2bc>
 801c05c:	ab06      	add	r3, sp, #24
 801c05e:	3c18      	subs	r4, #24
 801c060:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801c064:	2b00      	cmp	r3, #0
 801c066:	f000 8087 	beq.w	801c178 <__kernel_rem_pio2+0x300>
 801c06a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801c06e:	4620      	mov	r0, r4
 801c070:	f000 f996 	bl	801c3a0 <scalbn>
 801c074:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801c188 <__kernel_rem_pio2+0x310>
 801c078:	f10b 0201 	add.w	r2, fp, #1
 801c07c:	a96a      	add	r1, sp, #424	; 0x1a8
 801c07e:	00d3      	lsls	r3, r2, #3
 801c080:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c084:	465a      	mov	r2, fp
 801c086:	2a00      	cmp	r2, #0
 801c088:	f280 80b8 	bge.w	801c1fc <__kernel_rem_pio2+0x384>
 801c08c:	465a      	mov	r2, fp
 801c08e:	2a00      	cmp	r2, #0
 801c090:	f2c0 80d6 	blt.w	801c240 <__kernel_rem_pio2+0x3c8>
 801c094:	a96a      	add	r1, sp, #424	; 0x1a8
 801c096:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c09a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801c180 <__kernel_rem_pio2+0x308>
 801c09e:	4d3f      	ldr	r5, [pc, #252]	; (801c19c <__kernel_rem_pio2+0x324>)
 801c0a0:	2000      	movs	r0, #0
 801c0a2:	ebab 0102 	sub.w	r1, fp, r2
 801c0a6:	e0c0      	b.n	801c22a <__kernel_rem_pio2+0x3b2>
 801c0a8:	2602      	movs	r6, #2
 801c0aa:	e78b      	b.n	801bfc4 <__kernel_rem_pio2+0x14c>
 801c0ac:	f8db 2000 	ldr.w	r2, [fp]
 801c0b0:	b958      	cbnz	r0, 801c0ca <__kernel_rem_pio2+0x252>
 801c0b2:	b122      	cbz	r2, 801c0be <__kernel_rem_pio2+0x246>
 801c0b4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801c0b8:	f8cb 2000 	str.w	r2, [fp]
 801c0bc:	2201      	movs	r2, #1
 801c0be:	f10c 0c01 	add.w	ip, ip, #1
 801c0c2:	f10b 0b04 	add.w	fp, fp, #4
 801c0c6:	4610      	mov	r0, r2
 801c0c8:	e783      	b.n	801bfd2 <__kernel_rem_pio2+0x15a>
 801c0ca:	ebae 0202 	sub.w	r2, lr, r2
 801c0ce:	f8cb 2000 	str.w	r2, [fp]
 801c0d2:	4602      	mov	r2, r0
 801c0d4:	e7f3      	b.n	801c0be <__kernel_rem_pio2+0x246>
 801c0d6:	f105 3cff 	add.w	ip, r5, #4294967295
 801c0da:	ab06      	add	r3, sp, #24
 801c0dc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c0e0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c0e4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801c0e8:	e77c      	b.n	801bfe4 <__kernel_rem_pio2+0x16c>
 801c0ea:	f105 3cff 	add.w	ip, r5, #4294967295
 801c0ee:	ab06      	add	r3, sp, #24
 801c0f0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c0f4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801c0f8:	e7f4      	b.n	801c0e4 <__kernel_rem_pio2+0x26c>
 801c0fa:	ab06      	add	r3, sp, #24
 801c0fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c100:	3801      	subs	r0, #1
 801c102:	431a      	orrs	r2, r3
 801c104:	e7a6      	b.n	801c054 <__kernel_rem_pio2+0x1dc>
 801c106:	3201      	adds	r2, #1
 801c108:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801c10c:	2e00      	cmp	r6, #0
 801c10e:	d0fa      	beq.n	801c106 <__kernel_rem_pio2+0x28e>
 801c110:	9b05      	ldr	r3, [sp, #20]
 801c112:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801c116:	eb0d 0003 	add.w	r0, sp, r3
 801c11a:	9b01      	ldr	r3, [sp, #4]
 801c11c:	18ee      	adds	r6, r5, r3
 801c11e:	ab1a      	add	r3, sp, #104	; 0x68
 801c120:	f105 0c01 	add.w	ip, r5, #1
 801c124:	3898      	subs	r0, #152	; 0x98
 801c126:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c12a:	442a      	add	r2, r5
 801c12c:	4562      	cmp	r2, ip
 801c12e:	da04      	bge.n	801c13a <__kernel_rem_pio2+0x2c2>
 801c130:	4615      	mov	r5, r2
 801c132:	e709      	b.n	801bf48 <__kernel_rem_pio2+0xd0>
 801c134:	9804      	ldr	r0, [sp, #16]
 801c136:	2201      	movs	r2, #1
 801c138:	e7e6      	b.n	801c108 <__kernel_rem_pio2+0x290>
 801c13a:	9b03      	ldr	r3, [sp, #12]
 801c13c:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c140:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c144:	9305      	str	r3, [sp, #20]
 801c146:	ee07 3a90 	vmov	s15, r3
 801c14a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c14e:	2500      	movs	r5, #0
 801c150:	eca6 7b02 	vstmia	r6!, {d7}
 801c154:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801c180 <__kernel_rem_pio2+0x308>
 801c158:	46b0      	mov	r8, r6
 801c15a:	4555      	cmp	r5, sl
 801c15c:	dd04      	ble.n	801c168 <__kernel_rem_pio2+0x2f0>
 801c15e:	eca0 7b02 	vstmia	r0!, {d7}
 801c162:	f10c 0c01 	add.w	ip, ip, #1
 801c166:	e7e1      	b.n	801c12c <__kernel_rem_pio2+0x2b4>
 801c168:	ecbe 5b02 	vldmia	lr!, {d5}
 801c16c:	ed38 6b02 	vldmdb	r8!, {d6}
 801c170:	3501      	adds	r5, #1
 801c172:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c176:	e7f0      	b.n	801c15a <__kernel_rem_pio2+0x2e2>
 801c178:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c17c:	e76e      	b.n	801c05c <__kernel_rem_pio2+0x1e4>
 801c17e:	bf00      	nop
	...
 801c18c:	3e700000 	.word	0x3e700000
 801c190:	00000000 	.word	0x00000000
 801c194:	41700000 	.word	0x41700000
 801c198:	0801cf60 	.word	0x0801cf60
 801c19c:	0801cf20 	.word	0x0801cf20
 801c1a0:	4260      	negs	r0, r4
 801c1a2:	eeb0 0b48 	vmov.f64	d0, d8
 801c1a6:	f000 f8fb 	bl	801c3a0 <scalbn>
 801c1aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801c388 <__kernel_rem_pio2+0x510>
 801c1ae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801c1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b6:	db18      	blt.n	801c1ea <__kernel_rem_pio2+0x372>
 801c1b8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801c390 <__kernel_rem_pio2+0x518>
 801c1bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801c1c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801c1c4:	aa06      	add	r2, sp, #24
 801c1c6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801c1ca:	eea5 0b46 	vfms.f64	d0, d5, d6
 801c1ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c1d2:	f105 0b01 	add.w	fp, r5, #1
 801c1d6:	ee10 3a10 	vmov	r3, s0
 801c1da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c1de:	ee17 3a10 	vmov	r3, s14
 801c1e2:	3418      	adds	r4, #24
 801c1e4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801c1e8:	e73f      	b.n	801c06a <__kernel_rem_pio2+0x1f2>
 801c1ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c1ee:	aa06      	add	r2, sp, #24
 801c1f0:	ee10 3a10 	vmov	r3, s0
 801c1f4:	46ab      	mov	fp, r5
 801c1f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c1fa:	e736      	b.n	801c06a <__kernel_rem_pio2+0x1f2>
 801c1fc:	a806      	add	r0, sp, #24
 801c1fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801c202:	9001      	str	r0, [sp, #4]
 801c204:	ee07 0a90 	vmov	s15, r0
 801c208:	3a01      	subs	r2, #1
 801c20a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c20e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801c212:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c216:	ed21 7b02 	vstmdb	r1!, {d7}
 801c21a:	e734      	b.n	801c086 <__kernel_rem_pio2+0x20e>
 801c21c:	ecb5 5b02 	vldmia	r5!, {d5}
 801c220:	ecb4 6b02 	vldmia	r4!, {d6}
 801c224:	3001      	adds	r0, #1
 801c226:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c22a:	4548      	cmp	r0, r9
 801c22c:	dc01      	bgt.n	801c232 <__kernel_rem_pio2+0x3ba>
 801c22e:	4288      	cmp	r0, r1
 801c230:	ddf4      	ble.n	801c21c <__kernel_rem_pio2+0x3a4>
 801c232:	a842      	add	r0, sp, #264	; 0x108
 801c234:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c238:	ed81 7b00 	vstr	d7, [r1]
 801c23c:	3a01      	subs	r2, #1
 801c23e:	e726      	b.n	801c08e <__kernel_rem_pio2+0x216>
 801c240:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801c242:	2a02      	cmp	r2, #2
 801c244:	dc0a      	bgt.n	801c25c <__kernel_rem_pio2+0x3e4>
 801c246:	2a00      	cmp	r2, #0
 801c248:	dc2e      	bgt.n	801c2a8 <__kernel_rem_pio2+0x430>
 801c24a:	d047      	beq.n	801c2dc <__kernel_rem_pio2+0x464>
 801c24c:	f008 0007 	and.w	r0, r8, #7
 801c250:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801c254:	ecbd 8b06 	vpop	{d8-d10}
 801c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801c25e:	2a03      	cmp	r2, #3
 801c260:	d1f4      	bne.n	801c24c <__kernel_rem_pio2+0x3d4>
 801c262:	a942      	add	r1, sp, #264	; 0x108
 801c264:	f1a3 0208 	sub.w	r2, r3, #8
 801c268:	440a      	add	r2, r1
 801c26a:	4611      	mov	r1, r2
 801c26c:	4658      	mov	r0, fp
 801c26e:	2800      	cmp	r0, #0
 801c270:	f1a1 0108 	sub.w	r1, r1, #8
 801c274:	dc55      	bgt.n	801c322 <__kernel_rem_pio2+0x4aa>
 801c276:	4659      	mov	r1, fp
 801c278:	2901      	cmp	r1, #1
 801c27a:	f1a2 0208 	sub.w	r2, r2, #8
 801c27e:	dc60      	bgt.n	801c342 <__kernel_rem_pio2+0x4ca>
 801c280:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801c398 <__kernel_rem_pio2+0x520>
 801c284:	aa42      	add	r2, sp, #264	; 0x108
 801c286:	4413      	add	r3, r2
 801c288:	f1bb 0f01 	cmp.w	fp, #1
 801c28c:	dc69      	bgt.n	801c362 <__kernel_rem_pio2+0x4ea>
 801c28e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801c292:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801c296:	2e00      	cmp	r6, #0
 801c298:	d16a      	bne.n	801c370 <__kernel_rem_pio2+0x4f8>
 801c29a:	ed87 5b00 	vstr	d5, [r7]
 801c29e:	ed87 6b02 	vstr	d6, [r7, #8]
 801c2a2:	ed87 7b04 	vstr	d7, [r7, #16]
 801c2a6:	e7d1      	b.n	801c24c <__kernel_rem_pio2+0x3d4>
 801c2a8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801c398 <__kernel_rem_pio2+0x520>
 801c2ac:	aa42      	add	r2, sp, #264	; 0x108
 801c2ae:	4413      	add	r3, r2
 801c2b0:	465a      	mov	r2, fp
 801c2b2:	2a00      	cmp	r2, #0
 801c2b4:	da26      	bge.n	801c304 <__kernel_rem_pio2+0x48c>
 801c2b6:	b35e      	cbz	r6, 801c310 <__kernel_rem_pio2+0x498>
 801c2b8:	eeb1 7b46 	vneg.f64	d7, d6
 801c2bc:	ed87 7b00 	vstr	d7, [r7]
 801c2c0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801c2c4:	aa44      	add	r2, sp, #272	; 0x110
 801c2c6:	2301      	movs	r3, #1
 801c2c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c2cc:	459b      	cmp	fp, r3
 801c2ce:	da22      	bge.n	801c316 <__kernel_rem_pio2+0x49e>
 801c2d0:	b10e      	cbz	r6, 801c2d6 <__kernel_rem_pio2+0x45e>
 801c2d2:	eeb1 7b47 	vneg.f64	d7, d7
 801c2d6:	ed87 7b02 	vstr	d7, [r7, #8]
 801c2da:	e7b7      	b.n	801c24c <__kernel_rem_pio2+0x3d4>
 801c2dc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801c398 <__kernel_rem_pio2+0x520>
 801c2e0:	aa42      	add	r2, sp, #264	; 0x108
 801c2e2:	4413      	add	r3, r2
 801c2e4:	f1bb 0f00 	cmp.w	fp, #0
 801c2e8:	da05      	bge.n	801c2f6 <__kernel_rem_pio2+0x47e>
 801c2ea:	b10e      	cbz	r6, 801c2f0 <__kernel_rem_pio2+0x478>
 801c2ec:	eeb1 7b47 	vneg.f64	d7, d7
 801c2f0:	ed87 7b00 	vstr	d7, [r7]
 801c2f4:	e7aa      	b.n	801c24c <__kernel_rem_pio2+0x3d4>
 801c2f6:	ed33 6b02 	vldmdb	r3!, {d6}
 801c2fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c302:	e7ef      	b.n	801c2e4 <__kernel_rem_pio2+0x46c>
 801c304:	ed33 7b02 	vldmdb	r3!, {d7}
 801c308:	3a01      	subs	r2, #1
 801c30a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801c30e:	e7d0      	b.n	801c2b2 <__kernel_rem_pio2+0x43a>
 801c310:	eeb0 7b46 	vmov.f64	d7, d6
 801c314:	e7d2      	b.n	801c2bc <__kernel_rem_pio2+0x444>
 801c316:	ecb2 6b02 	vldmia	r2!, {d6}
 801c31a:	3301      	adds	r3, #1
 801c31c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c320:	e7d4      	b.n	801c2cc <__kernel_rem_pio2+0x454>
 801c322:	ed91 7b00 	vldr	d7, [r1]
 801c326:	ed91 5b02 	vldr	d5, [r1, #8]
 801c32a:	3801      	subs	r0, #1
 801c32c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c330:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c334:	ed81 6b00 	vstr	d6, [r1]
 801c338:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c33c:	ed81 7b02 	vstr	d7, [r1, #8]
 801c340:	e795      	b.n	801c26e <__kernel_rem_pio2+0x3f6>
 801c342:	ed92 7b00 	vldr	d7, [r2]
 801c346:	ed92 5b02 	vldr	d5, [r2, #8]
 801c34a:	3901      	subs	r1, #1
 801c34c:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c350:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c354:	ed82 6b00 	vstr	d6, [r2]
 801c358:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c35c:	ed82 7b02 	vstr	d7, [r2, #8]
 801c360:	e78a      	b.n	801c278 <__kernel_rem_pio2+0x400>
 801c362:	ed33 6b02 	vldmdb	r3!, {d6}
 801c366:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c36a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c36e:	e78b      	b.n	801c288 <__kernel_rem_pio2+0x410>
 801c370:	eeb1 5b45 	vneg.f64	d5, d5
 801c374:	eeb1 6b46 	vneg.f64	d6, d6
 801c378:	ed87 5b00 	vstr	d5, [r7]
 801c37c:	eeb1 7b47 	vneg.f64	d7, d7
 801c380:	ed87 6b02 	vstr	d6, [r7, #8]
 801c384:	e78d      	b.n	801c2a2 <__kernel_rem_pio2+0x42a>
 801c386:	bf00      	nop
 801c388:	00000000 	.word	0x00000000
 801c38c:	41700000 	.word	0x41700000
 801c390:	00000000 	.word	0x00000000
 801c394:	3e700000 	.word	0x3e700000
	...

0801c3a0 <scalbn>:
 801c3a0:	ee10 1a90 	vmov	r1, s1
 801c3a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c3a8:	b98b      	cbnz	r3, 801c3ce <scalbn+0x2e>
 801c3aa:	ee10 3a10 	vmov	r3, s0
 801c3ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c3b2:	4319      	orrs	r1, r3
 801c3b4:	d00a      	beq.n	801c3cc <scalbn+0x2c>
 801c3b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801c468 <scalbn+0xc8>
 801c3ba:	4b37      	ldr	r3, [pc, #220]	; (801c498 <scalbn+0xf8>)
 801c3bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c3c0:	4298      	cmp	r0, r3
 801c3c2:	da0b      	bge.n	801c3dc <scalbn+0x3c>
 801c3c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801c470 <scalbn+0xd0>
 801c3c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c3cc:	4770      	bx	lr
 801c3ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c3d2:	4293      	cmp	r3, r2
 801c3d4:	d107      	bne.n	801c3e6 <scalbn+0x46>
 801c3d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c3da:	4770      	bx	lr
 801c3dc:	ee10 1a90 	vmov	r1, s1
 801c3e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c3e4:	3b36      	subs	r3, #54	; 0x36
 801c3e6:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c3ea:	4290      	cmp	r0, r2
 801c3ec:	dd0d      	ble.n	801c40a <scalbn+0x6a>
 801c3ee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c478 <scalbn+0xd8>
 801c3f2:	ee10 3a90 	vmov	r3, s1
 801c3f6:	eeb0 6b47 	vmov.f64	d6, d7
 801c3fa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801c480 <scalbn+0xe0>
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	fe27 7b05 	vselge.f64	d7, d7, d5
 801c404:	ee27 0b06 	vmul.f64	d0, d7, d6
 801c408:	4770      	bx	lr
 801c40a:	4418      	add	r0, r3
 801c40c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801c410:	4298      	cmp	r0, r3
 801c412:	dcec      	bgt.n	801c3ee <scalbn+0x4e>
 801c414:	2800      	cmp	r0, #0
 801c416:	dd0a      	ble.n	801c42e <scalbn+0x8e>
 801c418:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c41c:	ec53 2b10 	vmov	r2, r3, d0
 801c420:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c424:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c428:	ec43 2b10 	vmov	d0, r2, r3
 801c42c:	4770      	bx	lr
 801c42e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801c432:	da09      	bge.n	801c448 <scalbn+0xa8>
 801c434:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801c470 <scalbn+0xd0>
 801c438:	ee10 3a90 	vmov	r3, s1
 801c43c:	eeb0 6b47 	vmov.f64	d6, d7
 801c440:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801c488 <scalbn+0xe8>
 801c444:	2b00      	cmp	r3, #0
 801c446:	e7db      	b.n	801c400 <scalbn+0x60>
 801c448:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c44c:	ec53 2b10 	vmov	r2, r3, d0
 801c450:	3036      	adds	r0, #54	; 0x36
 801c452:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c456:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c45a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801c490 <scalbn+0xf0>
 801c45e:	ec43 2b10 	vmov	d0, r2, r3
 801c462:	e7b1      	b.n	801c3c8 <scalbn+0x28>
 801c464:	f3af 8000 	nop.w
 801c468:	00000000 	.word	0x00000000
 801c46c:	43500000 	.word	0x43500000
 801c470:	c2f8f359 	.word	0xc2f8f359
 801c474:	01a56e1f 	.word	0x01a56e1f
 801c478:	8800759c 	.word	0x8800759c
 801c47c:	7e37e43c 	.word	0x7e37e43c
 801c480:	8800759c 	.word	0x8800759c
 801c484:	fe37e43c 	.word	0xfe37e43c
 801c488:	c2f8f359 	.word	0xc2f8f359
 801c48c:	81a56e1f 	.word	0x81a56e1f
 801c490:	00000000 	.word	0x00000000
 801c494:	3c900000 	.word	0x3c900000
 801c498:	ffff3cb0 	.word	0xffff3cb0
 801c49c:	00000000 	.word	0x00000000

0801c4a0 <floor>:
 801c4a0:	ee10 1a90 	vmov	r1, s1
 801c4a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c4a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801c4ac:	2b13      	cmp	r3, #19
 801c4ae:	b530      	push	{r4, r5, lr}
 801c4b0:	ee10 0a10 	vmov	r0, s0
 801c4b4:	ee10 5a10 	vmov	r5, s0
 801c4b8:	dc31      	bgt.n	801c51e <floor+0x7e>
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	da15      	bge.n	801c4ea <floor+0x4a>
 801c4be:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801c580 <floor+0xe0>
 801c4c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c4c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ce:	dd07      	ble.n	801c4e0 <floor+0x40>
 801c4d0:	2900      	cmp	r1, #0
 801c4d2:	da4e      	bge.n	801c572 <floor+0xd2>
 801c4d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c4d8:	4308      	orrs	r0, r1
 801c4da:	d04d      	beq.n	801c578 <floor+0xd8>
 801c4dc:	492a      	ldr	r1, [pc, #168]	; (801c588 <floor+0xe8>)
 801c4de:	2000      	movs	r0, #0
 801c4e0:	460b      	mov	r3, r1
 801c4e2:	4602      	mov	r2, r0
 801c4e4:	ec43 2b10 	vmov	d0, r2, r3
 801c4e8:	e020      	b.n	801c52c <floor+0x8c>
 801c4ea:	4a28      	ldr	r2, [pc, #160]	; (801c58c <floor+0xec>)
 801c4ec:	411a      	asrs	r2, r3
 801c4ee:	ea01 0402 	and.w	r4, r1, r2
 801c4f2:	4304      	orrs	r4, r0
 801c4f4:	d01a      	beq.n	801c52c <floor+0x8c>
 801c4f6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c580 <floor+0xe0>
 801c4fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c4fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c506:	ddeb      	ble.n	801c4e0 <floor+0x40>
 801c508:	2900      	cmp	r1, #0
 801c50a:	bfbe      	ittt	lt
 801c50c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801c510:	fa40 f303 	asrlt.w	r3, r0, r3
 801c514:	18c9      	addlt	r1, r1, r3
 801c516:	ea21 0102 	bic.w	r1, r1, r2
 801c51a:	2000      	movs	r0, #0
 801c51c:	e7e0      	b.n	801c4e0 <floor+0x40>
 801c51e:	2b33      	cmp	r3, #51	; 0x33
 801c520:	dd05      	ble.n	801c52e <floor+0x8e>
 801c522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c526:	d101      	bne.n	801c52c <floor+0x8c>
 801c528:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c52c:	bd30      	pop	{r4, r5, pc}
 801c52e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801c532:	f04f 32ff 	mov.w	r2, #4294967295
 801c536:	40e2      	lsrs	r2, r4
 801c538:	4210      	tst	r0, r2
 801c53a:	d0f7      	beq.n	801c52c <floor+0x8c>
 801c53c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801c580 <floor+0xe0>
 801c540:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c544:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54c:	ddc8      	ble.n	801c4e0 <floor+0x40>
 801c54e:	2900      	cmp	r1, #0
 801c550:	da02      	bge.n	801c558 <floor+0xb8>
 801c552:	2b14      	cmp	r3, #20
 801c554:	d103      	bne.n	801c55e <floor+0xbe>
 801c556:	3101      	adds	r1, #1
 801c558:	ea20 0002 	bic.w	r0, r0, r2
 801c55c:	e7c0      	b.n	801c4e0 <floor+0x40>
 801c55e:	2401      	movs	r4, #1
 801c560:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c564:	fa04 f303 	lsl.w	r3, r4, r3
 801c568:	4418      	add	r0, r3
 801c56a:	4285      	cmp	r5, r0
 801c56c:	bf88      	it	hi
 801c56e:	1909      	addhi	r1, r1, r4
 801c570:	e7f2      	b.n	801c558 <floor+0xb8>
 801c572:	2000      	movs	r0, #0
 801c574:	4601      	mov	r1, r0
 801c576:	e7b3      	b.n	801c4e0 <floor+0x40>
 801c578:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c57c:	e7b0      	b.n	801c4e0 <floor+0x40>
 801c57e:	bf00      	nop
 801c580:	8800759c 	.word	0x8800759c
 801c584:	7e37e43c 	.word	0x7e37e43c
 801c588:	bff00000 	.word	0xbff00000
 801c58c:	000fffff 	.word	0x000fffff

0801c590 <_init>:
 801c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c592:	bf00      	nop
 801c594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c596:	bc08      	pop	{r3}
 801c598:	469e      	mov	lr, r3
 801c59a:	4770      	bx	lr

0801c59c <_fini>:
 801c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c59e:	bf00      	nop
 801c5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5a2:	bc08      	pop	{r3}
 801c5a4:	469e      	mov	lr, r3
 801c5a6:	4770      	bx	lr
