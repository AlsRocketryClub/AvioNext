
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c94  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08013f68  08013f68  00023f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014138  08014138  00024138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014140  08014140  00024140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014144  08014144  00024144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08014148  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002de8  24000164  080142ac  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002f4c  080142ac  00032f4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030c9e  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f51  00000000  00000000  00060e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002520  00000000  00000000  00065d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002338  00000000  00000000  000682a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039997  00000000  00000000  0006a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030cbc  00000000  00000000  000a3f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017609b  00000000  00000000  000d4c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024acce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a750  00000000  00000000  0024ad20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013f4c 	.word	0x08013f4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08013f4c 	.word	0x08013f4c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <setLEDs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int datasentflag = 0;

void setLEDs(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
 80006ce:	e181      	b.n	80009d4 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80006d0:	4aa1      	ldr	r2, [pc, #644]	; (8000958 <setLEDs+0x294>)
 80006d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	f200 8177 	bhi.w	80009cc <setLEDs+0x308>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <setLEDs+0x20>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080007a5 	.word	0x080007a5
 80006ec:	08000855 	.word	0x08000855
 80006f0:	08000905 	.word	0x08000905
		case 0:
			for (int j = 0; j < 3; j++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
 80006f8:	e042      	b.n	8000780 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006fe:	e039      	b.n	8000774 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000700:	4996      	ldr	r1, [pc, #600]	; (800095c <setLEDs+0x298>)
 8000702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800070c:	4413      	add	r3, r2
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000716:	fa41 f202 	asr.w	r2, r1, r2
 800071a:	4013      	ands	r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d013      	beq.n	8000748 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	00da      	lsls	r2, r3, #3
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	4a8b      	ldr	r2, [pc, #556]	; (8000958 <setLEDs+0x294>)
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	4a88      	ldr	r2, [pc, #544]	; (8000960 <setLEDs+0x29c>)
 8000740:	213c      	movs	r1, #60	; 0x3c
 8000742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000746:	e012      	b.n	800076e <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074a:	00da      	lsls	r2, r3, #3
 800074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074e:	18d1      	adds	r1, r2, r3
 8000750:	4a81      	ldr	r2, [pc, #516]	; (8000958 <setLEDs+0x294>)
 8000752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3308      	adds	r3, #8
 8000766:	4a7e      	ldr	r2, [pc, #504]	; (8000960 <setLEDs+0x29c>)
 8000768:	211e      	movs	r1, #30
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000770:	3301      	adds	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000776:	2b07      	cmp	r3, #7
 8000778:	ddc2      	ble.n	8000700 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	3301      	adds	r3, #1
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	2b02      	cmp	r3, #2
 8000784:	ddb9      	ble.n	80006fa <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
 800078a:	e007      	b.n	800079c <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 800078c:	4a74      	ldr	r2, [pc, #464]	; (8000960 <setLEDs+0x29c>)
 800078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	3301      	adds	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	2bb1      	cmp	r3, #177	; 0xb1
 80007a0:	ddf4      	ble.n	800078c <setLEDs+0xc8>
			}
			break;
 80007a2:	e114      	b.n	80009ce <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
 80007a8:	e042      	b.n	8000830 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
 80007ae:	e039      	b.n	8000824 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007b0:	496a      	ldr	r1, [pc, #424]	; (800095c <setLEDs+0x298>)
 80007b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007bc:	4413      	add	r3, r2
 80007be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	fa41 f202 	asr.w	r2, r1, r2
 80007ca:	4013      	ands	r3, r2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	18d1      	adds	r1, r2, r3
 80007d8:	4a5f      	ldr	r2, [pc, #380]	; (8000958 <setLEDs+0x294>)
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	4a5d      	ldr	r2, [pc, #372]	; (8000964 <setLEDs+0x2a0>)
 80007f0:	213c      	movs	r1, #60	; 0x3c
 80007f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007f6:	e012      	b.n	800081e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	00da      	lsls	r2, r3, #3
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	18d1      	adds	r1, r2, r3
 8000800:	4a55      	ldr	r2, [pc, #340]	; (8000958 <setLEDs+0x294>)
 8000802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	4a53      	ldr	r2, [pc, #332]	; (8000964 <setLEDs+0x2a0>)
 8000818:	211e      	movs	r1, #30
 800081a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	3301      	adds	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
 8000824:	6a3b      	ldr	r3, [r7, #32]
 8000826:	2b07      	cmp	r3, #7
 8000828:	ddc2      	ble.n	80007b0 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	3301      	adds	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	2b02      	cmp	r3, #2
 8000834:	ddb9      	ble.n	80007aa <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e007      	b.n	800084c <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 800083c:	4a49      	ldr	r2, [pc, #292]	; (8000964 <setLEDs+0x2a0>)
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	2100      	movs	r1, #0
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3301      	adds	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2bb1      	cmp	r3, #177	; 0xb1
 8000850:	ddf4      	ble.n	800083c <setLEDs+0x178>
			}
			break;
 8000852:	e0bc      	b.n	80009ce <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	e042      	b.n	80008e0 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e039      	b.n	80008d4 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000860:	493e      	ldr	r1, [pc, #248]	; (800095c <setLEDs+0x298>)
 8000862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4413      	add	r3, r2
 800086e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	fa41 f202 	asr.w	r2, r1, r2
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d013      	beq.n	80008a8 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	18d1      	adds	r1, r2, r3
 8000888:	4a33      	ldr	r2, [pc, #204]	; (8000958 <setLEDs+0x294>)
 800088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3308      	adds	r3, #8
 800089e:	4a32      	ldr	r2, [pc, #200]	; (8000968 <setLEDs+0x2a4>)
 80008a0:	213c      	movs	r1, #60	; 0x3c
 80008a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008a6:	e012      	b.n	80008ce <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	00da      	lsls	r2, r3, #3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	18d1      	adds	r1, r2, r3
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <setLEDs+0x294>)
 80008b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	4413      	add	r3, r2
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	3308      	adds	r3, #8
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <setLEDs+0x2a4>)
 80008c8:	211e      	movs	r1, #30
 80008ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	ddc2      	ble.n	8000860 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	3301      	adds	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	ddb9      	ble.n	800085a <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 80008e6:	2338      	movs	r3, #56	; 0x38
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	e007      	b.n	80008fc <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 80008ec:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <setLEDs+0x2a4>)
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2100      	movs	r1, #0
 80008f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	3301      	adds	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	2b69      	cmp	r3, #105	; 0x69
 8000900:	ddf4      	ble.n	80008ec <setLEDs+0x228>
			}
			break;
 8000902:	e064      	b.n	80009ce <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e04e      	b.n	80009a8 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	e045      	b.n	800099c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000910:	4912      	ldr	r1, [pc, #72]	; (800095c <setLEDs+0x298>)
 8000912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	fa41 f202 	asr.w	r2, r1, r2
 800092a:	4013      	ands	r3, r2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d01f      	beq.n	8000970 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	00da      	lsls	r2, r3, #3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	18d1      	adds	r1, r2, r3
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <setLEDs+0x294>)
 800093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3308      	adds	r3, #8
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <setLEDs+0x2a8>)
 8000950:	213c      	movs	r1, #60	; 0x3c
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000956:	e01e      	b.n	8000996 <setLEDs+0x2d2>
 8000958:	08014008 	.word	0x08014008
 800095c:	24000a60 	.word	0x24000a60
 8000960:	24000180 	.word	0x24000180
 8000964:	24000448 	.word	0x24000448
 8000968:	24000710 	.word	0x24000710
 800096c:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	00da      	lsls	r2, r3, #3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	18d1      	adds	r1, r2, r3
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <setLEDs+0x350>)
 800097a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4413      	add	r3, r2
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	440b      	add	r3, r1
 800098c:	3308      	adds	r3, #8
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <setLEDs+0x354>)
 8000990:	211e      	movs	r1, #30
 8000992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	ddb6      	ble.n	8000910 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	ddad      	ble.n	800090a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80009ae:	2338      	movs	r3, #56	; 0x38
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	e007      	b.n	80009c4 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <setLEDs+0x354>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2100      	movs	r1, #0
 80009ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b69      	cmp	r3, #105	; 0x69
 80009c8:	ddf4      	ble.n	80009b4 <setLEDs+0x2f0>
			}
			break;
 80009ca:	e000      	b.n	80009ce <setLEDs+0x30a>
		default:
			break;
 80009cc:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d0:	3301      	adds	r3, #1
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	2b0d      	cmp	r3, #13
 80009d8:	f77f ae7a 	ble.w	80006d0 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 80009dc:	23b2      	movs	r3, #178	; 0xb2
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <setLEDs+0x358>)
 80009e0:	210c      	movs	r1, #12
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <setLEDs+0x35c>)
 80009e4:	f00c f8fe 	bl	800cbe4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 80009e8:	23b2      	movs	r3, #178	; 0xb2
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <setLEDs+0x360>)
 80009ec:	2108      	movs	r1, #8
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <setLEDs+0x364>)
 80009f0:	f00c f8f8 	bl	800cbe4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 80009f4:	236a      	movs	r3, #106	; 0x6a
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <setLEDs+0x368>)
 80009f8:	2104      	movs	r1, #4
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <setLEDs+0x36c>)
 80009fc:	f00c f8f2 	bl	800cbe4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000a00:	236a      	movs	r3, #106	; 0x6a
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <setLEDs+0x354>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <setLEDs+0x36c>)
 8000a08:	f00c f8ec 	bl	800cbe4 <HAL_TIM_PWM_Start_DMA>

}
 8000a0c:	bf00      	nop
 8000a0e:	3738      	adds	r7, #56	; 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08014008 	.word	0x08014008
 8000a18:	240008b8 	.word	0x240008b8
 8000a1c:	24000180 	.word	0x24000180
 8000a20:	24000f58 	.word	0x24000f58
 8000a24:	24000448 	.word	0x24000448
 8000a28:	24000e74 	.word	0x24000e74
 8000a2c:	24000710 	.word	0x24000710
 8000a30:	24000ec0 	.word	0x24000ec0

08000a34 <HAL_TIM_PWM_PulseFinishedCallback>:
//	while (!datasentflag) {
//	};
//	datasentflag = 0;
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	//TIM2->CCR3= 0;
	datasentflag = 1;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	24001324 	.word	0x24001324
 8000a54:	00000000 	.word	0x00000000

08000a58 <triangle_space>:


//this function looks like this: /\_/\_/\_/\_
//so it's triangles with spaces between them
double triangle_space(double x)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	ed87 0b00 	vstr	d0, [r7]
	const double LENGTH = 3;
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <triangle_space+0xb0>)
 8000a68:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double normalized = fmod(fabs(x),LENGTH);
 8000a6c:	ed97 7b00 	vldr	d7, [r7]
 8000a70:	eeb0 7bc7 	vabs.f64	d7, d7
 8000a74:	ed97 1b04 	vldr	d1, [r7, #16]
 8000a78:	eeb0 0b47 	vmov.f64	d0, d7
 8000a7c:	f013 f930 	bl	8013ce0 <fmod>
 8000a80:	ed87 0b02 	vstr	d0, [r7, #8]
	if(normalized <= LENGTH/3)
 8000a84:	ed97 6b04 	vldr	d6, [r7, #16]
 8000a88:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a90:	ed97 6b02 	vldr	d6, [r7, #8]
 8000a94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9c:	d80a      	bhi.n	8000ab4 <triangle_space+0x5c>
	{
		return LENGTH/3 - normalized;
 8000a9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000aa2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000aa6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000aaa:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ab2:	e01d      	b.n	8000af0 <triangle_space+0x98>
	}
	else if(normalized <= LENGTH*2/3)
 8000ab4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ab8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000abc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ac0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ac4:	ed97 6b02 	vldr	d6, [r7, #8]
 8000ac8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad0:	d802      	bhi.n	8000ad8 <triangle_space+0x80>
	{
		return 0;
 8000ad2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000b00 <triangle_space+0xa8>
 8000ad6:	e00b      	b.n	8000af0 <triangle_space+0x98>
	}
	else
	{
		return normalized - LENGTH*2/3;
 8000ad8:	ed97 7b04 	vldr	d7, [r7, #16]
 8000adc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ae0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ae4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ae8:	ed97 6b02 	vldr	d6, [r7, #8]
 8000aec:	ee36 7b47 	vsub.f64	d7, d6, d7
	}
}
 8000af0:	eeb0 0b47 	vmov.f64	d0, d7
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	f3af 8000 	nop.w
	...
 8000b08:	40080000 	.word	0x40080000

08000b0c <LG2_Read_Register>:

uint8_t LG2_Read_Register(uint8_t addr){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LG2_Read_Register+0x50>)
 8000b28:	f006 fa72 	bl	8007010 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b2c:	1df9      	adds	r1, r7, #7
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <LG2_Read_Register+0x54>)
 8000b34:	f00b fb8a 	bl	800c24c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b38:	f107 010f 	add.w	r1, r7, #15
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <LG2_Read_Register+0x54>)
 8000b42:	f00b fd7f 	bl	800c644 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <LG2_Read_Register+0x50>)
 8000b4e:	f006 fa5f 	bl	8007010 <HAL_GPIO_WritePin>

	return reg_value;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58020c00 	.word	0x58020c00
 8000b60:	24000d64 	.word	0x24000d64

08000b64 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <LG2_Write_Register+0x48>)
 8000b7c:	f006 fa48 	bl	8007010 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b80:	1df9      	adds	r1, r7, #7
 8000b82:	2364      	movs	r3, #100	; 0x64
 8000b84:	2201      	movs	r2, #1
 8000b86:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <LG2_Write_Register+0x4c>)
 8000b88:	f00b fb60 	bl	800c24c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b8c:	1db9      	adds	r1, r7, #6
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2201      	movs	r2, #1
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <LG2_Write_Register+0x4c>)
 8000b94:	f00b fb5a 	bl	800c24c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <LG2_Write_Register+0x48>)
 8000ba0:	f006 fa36 	bl	8007010 <HAL_GPIO_WritePin>

}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58020c00 	.word	0x58020c00
 8000bb0:	24000d64 	.word	0x24000d64

08000bb4 <LG2_Get_Gyro_Z>:
	float omega = (((float)Gyro) / 32768) * 250;

	return omega;
}

float LG2_Get_Gyro_Z(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000bba:	2026      	movs	r0, #38	; 0x26
 8000bbc:	f7ff ffa6 	bl	8000b0c <LG2_Read_Register>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000bc4:	2027      	movs	r0, #39	; 0x27
 8000bc6:	f7ff ffa1 	bl	8000b0c <LG2_Read_Register>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32768) * 4000;
 8000bdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c0c <LG2_Get_Gyro_Z+0x58>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c10 <LG2_Get_Gyro_Z+0x5c>
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	ee07 3a90 	vmov	s15, r3
}
 8000c02:	eeb0 0a67 	vmov.f32	s0, s15
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	47000000 	.word	0x47000000
 8000c10:	457a0000 	.word	0x457a0000

08000c14 <LG2_Get_Acc_X>:

int16_t LG2_Get_Acc_X(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x28);
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f7ff ff76 	bl	8000b0c <LG2_Read_Register>
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x29);
 8000c24:	2029      	movs	r0, #41	; 0x29
 8000c26:	f7ff ff71 	bl	8000b0c <LG2_Read_Register>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	80bb      	strh	r3, [r7, #4]
	return Acc;
 8000c3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	ed2d 8b02 	vpush	{d8}
 8000c4e:	b0fc      	sub	sp, #496	; 0x1f0
 8000c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c52:	f001 fec5 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f989 	bl	8000f6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c5a:	f000 fa03 	bl	8001064 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 ff07 	bl	8001a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c62:	f000 fec5 	bl	80019f0 <MX_DMA_Init>
  MX_UART4_Init();
 8000c66:	f000 fe2b 	bl	80018c0 <MX_UART4_Init>
  MX_SPI3_Init();
 8000c6a:	f000 fc63 	bl	8001534 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000c6e:	f000 fb11 	bl	8001294 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000c72:	f000 fe71 	bl	8001958 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c76:	f000 fa27 	bl	80010c8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000c7a:	f000 fd6d 	bl	8001758 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000c7e:	f000 fa9b 	bl	80011b8 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000c82:	f000 fc01 	bl	8001488 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000c86:	f000 fb69 	bl	800135c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000c8a:	f000 fca9 	bl	80015e0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000c8e:	f000 fdbd 	bl	800180c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000c92:	f000 fcfd 	bl	8001690 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000c96:	f011 fe6f 	bl	8012978 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000c9a:	f000 fb9f 	bl	80013dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	const int MAX = 80;
 8000c9e:	2350      	movs	r3, #80	; 0x50
 8000ca0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	const double SPEED = 4.0/2000;
 8000ca4:	a3af      	add	r3, pc, #700	; (adr r3, 8000f64 <main+0x31c>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	const double r_offset = 0;
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	const double g_offset = 1;
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <main+0x300>)
 8000cc0:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	const double b_offset = 2;
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ccc:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8000cd0:	213c      	movs	r1, #60	; 0x3c
 8000cd2:	2010      	movs	r0, #16
 8000cd4:	f7ff ff46 	bl	8000b64 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110001); //Gyroscope setup - CTRL2_G
 8000cd8:	2131      	movs	r1, #49	; 0x31
 8000cda:	2011      	movs	r0, #17
 8000cdc:	f7ff ff42 	bl	8000b64 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	2013      	movs	r0, #19
 8000ce4:	f7ff ff3e 	bl	8000b64 <LG2_Write_Register>
	float rotZ = 0;
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	uint32_t lastTime = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	float calOmegaZ = 0;;
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	HAL_Delay(2000);
 8000cfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d02:	f001 feff 	bl	8002b04 <HAL_Delay>
	for(int i = 0; i < 200; i++){
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000d0c:	e011      	b.n	8000d32 <main+0xea>
		calOmegaZ += LG2_Get_Gyro_Z();
 8000d0e:	f7ff ff51 	bl	8000bb4 <LG2_Get_Gyro_Z>
 8000d12:	eeb0 7a40 	vmov.f32	s14, s0
 8000d16:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8000d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d1e:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc
		HAL_Delay(40);
 8000d22:	2028      	movs	r0, #40	; 0x28
 8000d24:	f001 feee 	bl	8002b04 <HAL_Delay>
	for(int i = 0; i < 200; i++){
 8000d28:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000d32:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000d36:	2bc7      	cmp	r3, #199	; 0xc7
 8000d38:	dde9      	ble.n	8000d0e <main+0xc6>
	}
	calOmegaZ /= 200;
 8000d3a:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 8000d3e:	eddf 6a83 	vldr	s13, [pc, #524]	; 8000f4c <main+0x304>
 8000d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d46:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc
  /* USER CODE BEGIN WHILE */
	while (1) {
		//WS2812_Send();
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		//TIM4->CCR3 = *ptr;
		for(int i = 0; i < 14; i++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8000d50:	e08f      	b.n	8000e72 <main+0x22a>

			int time = HAL_GetTick();
 8000d52:	f001 fecb 	bl	8002aec <HAL_GetTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			double height_offset = LED_order[i]*1.0/LED_num_max;
 8000d5c:	4a7c      	ldr	r2, [pc, #496]	; (8000f50 <main+0x308>)
 8000d5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000d6e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8000f54 <main+0x30c>
 8000d72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d7a:	ed87 7b66 	vstr	d7, [r7, #408]	; 0x198
			double color_offset = time*SPEED + height_offset;
 8000d7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d8a:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8000d8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d92:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8000d96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d9a:	ed87 7b64 	vstr	d7, [r7, #400]	; 0x190

			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
 8000d9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000daa:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8000dae:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8000db2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000db6:	eeb0 0b47 	vmov.f64	d0, d7
 8000dba:	f7ff fe4d 	bl	8000a58 <triangle_space>
 8000dbe:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000dc6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dca:	ee17 0a90 	vmov	r0, s15
 8000dce:	4962      	ldr	r1, [pc, #392]	; (8000f58 <main+0x310>)
 8000dd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
 8000de0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000dec:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8000df0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8000df4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000df8:	eeb0 0b47 	vmov.f64	d0, d7
 8000dfc:	f7ff fe2c 	bl	8000a58 <triangle_space>
 8000e00:	eeb0 7b40 	vmov.f64	d7, d0
 8000e04:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	4951      	ldr	r1, [pc, #324]	; (8000f58 <main+0x310>)
 8000e12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	3304      	adds	r3, #4
 8000e22:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
 8000e24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000e30:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8000e34:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8000e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000e40:	f7ff fe0a 	bl	8000a58 <triangle_space>
 8000e44:	eeb0 7b40 	vmov.f64	d7, d0
 8000e48:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e50:	ee17 0a90 	vmov	r0, s15
 8000e54:	4940      	ldr	r1, [pc, #256]	; (8000f58 <main+0x310>)
 8000e56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	440b      	add	r3, r1
 8000e64:	3308      	adds	r3, #8
 8000e66:	6018      	str	r0, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000e68:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8000e72:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e76:	2b0d      	cmp	r3, #13
 8000e78:	f77f af6b 	ble.w	8000d52 <main+0x10a>
		}
		setLEDs();
 8000e7c:	f7ff fc22 	bl	80006c4 <setLEDs>

		uint8_t* data_gyro[100];
		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8000e80:	f001 fe34 	bl	8002aec <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e94:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000f5c <main+0x314>
 8000e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e9c:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac

		float omegaZ = LG2_Get_Gyro_Z() - calOmegaZ;
 8000ea0:	f7ff fe88 	bl	8000bb4 <LG2_Get_Gyro_Z>
 8000ea4:	eeb0 7a40 	vmov.f32	s14, s0
 8000ea8:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8000eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb0:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
		rotZ += omegaZ * timeElapsed;
 8000eb4:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8000eb8:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8000ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec0:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
 8000ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec8:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4

		lastTime = HAL_GetTick();
 8000ecc:	f001 fe0e 	bl	8002aec <HAL_GetTick>
 8000ed0:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
		int16_t accZ = LG2_Get_Acc_X();
 8000ed4:	f7ff fe9e 	bl	8000c14 <LG2_Get_Acc_X>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
		sprintf( data_gyro,  "%d    %d   %d    %d\n", (int)accZ, (int)(1000 *rotZ), (int)lastTime, (int)(1000 * rotZ / lastTime));
 8000ede:	f9b7 21a6 	ldrsh.w	r2, [r7, #422]	; 0x1a6
 8000ee2:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8000ee6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000f5c <main+0x314>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000ef2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ef6:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 8000efa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f5c <main+0x314>
 8000efe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f02:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8000f06:	ee07 1a90 	vmov	s15, r1
 8000f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f16:	ee17 1a90 	vmov	r1, s15
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	9101      	str	r1, [sp, #4]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	ee16 3a10 	vmov	r3, s12
 8000f24:	490e      	ldr	r1, [pc, #56]	; (8000f60 <main+0x318>)
 8000f26:	f012 fa7b 	bl	8013420 <siprintf>
		CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f9ef 	bl	8000310 <strlen>
 8000f32:	4602      	mov	r2, r0
 8000f34:	463b      	mov	r3, r7
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f011 fddd 	bl	8012af8 <CDC_Transmit_HS>

		HAL_Delay(10);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f001 fde0 	bl	8002b04 <HAL_Delay>
	while (1) {
 8000f44:	e701      	b.n	8000d4a <main+0x102>
 8000f46:	bf00      	nop
 8000f48:	3ff00000 	.word	0x3ff00000
 8000f4c:	43480000 	.word	0x43480000
 8000f50:	08014078 	.word	0x08014078
 8000f54:	00000006 	.word	0x00000006
 8000f58:	24000a60 	.word	0x24000a60
 8000f5c:	447a0000 	.word	0x447a0000
 8000f60:	08013f68 	.word	0x08013f68
 8000f64:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f68:	3f60624d 	.word	0x3f60624d

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09c      	sub	sp, #112	; 0x70
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	224c      	movs	r2, #76	; 0x4c
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f012 fa48 	bl	8013410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2220      	movs	r2, #32
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f012 fa42 	bl	8013410 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f007 fc39 	bl	8008804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <SystemClock_Config+0xf4>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <SystemClock_Config+0xf4>)
 8000fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <SystemClock_Config+0xf4>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb2:	bf00      	nop
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <SystemClock_Config+0xf4>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc0:	d1f8      	bne.n	8000fb4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000fc2:	2323      	movs	r3, #35	; 0x23
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fec:	2303      	movs	r3, #3
 8000fee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4618      	mov	r0, r3
 8001006:	f007 fc47 	bl	8008898 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001010:	f000 fe50 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	233f      	movs	r3, #63	; 0x3f
 8001016:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2303      	movs	r3, #3
 800101a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001020:	2308      	movs	r3, #8
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001028:	2350      	movs	r3, #80	; 0x50
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800102c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001030:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f008 f806 	bl	800904c <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001046:	f000 fe35 	bl	8001cb4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800104a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f008 f9b1 	bl	80093b8 <HAL_RCC_MCOConfig>
}
 8001056:	bf00      	nop
 8001058:	3770      	adds	r7, #112	; 0x70
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	58024800 	.word	0x58024800

08001064 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ae      	sub	sp, #184	; 0xb8
 8001068:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	22b8      	movs	r2, #184	; 0xb8
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f012 f9cd 	bl	8013410 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001076:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001082:	2304      	movs	r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001086:	230c      	movs	r3, #12
 8001088:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 fbc1 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80010bc:	f000 fdfa 	bl	8001cb4 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	37b8      	adds	r7, #184	; 0xb8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2224      	movs	r2, #36	; 0x24
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f012 f995 	bl	8013410 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <MX_ADC1_Init+0xe4>)
 80010e8:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <MX_ADC1_Init+0xe8>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_ADC1_Init+0xe4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <MX_ADC1_Init+0xe4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_ADC1_Init+0xe4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001100:	2204      	movs	r2, #4
 8001102:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <MX_ADC1_Init+0xe4>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_ADC1_Init+0xe4>)
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_ADC1_Init+0xe4>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001144:	4819      	ldr	r0, [pc, #100]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001146:	f001 ff47 	bl	8002fd8 <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001150:	f000 fdb0 	bl	8001cb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001160:	f002 ff82 	bl	8004068 <HAL_ADCEx_MultiModeConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800116a:	f000 fda3 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_ADC1_Init+0xec>)
 8001170:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001172:	2306      	movs	r3, #6
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800117e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001180:	2304      	movs	r3, #4
 8001182:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_ADC1_Init+0xe4>)
 8001194:	f002 f928 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800119e:	f000 fd89 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000b08 	.word	0x24000b08
 80011b0:	40022000 	.word	0x40022000
 80011b4:	2a000400 	.word	0x2a000400

080011b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2224      	movs	r2, #36	; 0x24
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f012 f923 	bl	8013410 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011cc:	4a2f      	ldr	r2, [pc, #188]	; (800128c <MX_ADC3_Init+0xd4>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011d8:	2208      	movs	r2, #8
 80011da:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_ADC3_Init+0xd0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_ADC3_Init+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC3_Init+0xd0>)
 800121e:	2200      	movs	r2, #0
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_ADC3_Init+0xd0>)
 800122a:	2200      	movs	r2, #0
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001230:	2200      	movs	r2, #0
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_ADC3_Init+0xd0>)
 800123e:	f001 fecb 	bl	8002fd8 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001248:	f000 fd34 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_ADC3_Init+0xd8>)
 800124e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2306      	movs	r3, #6
 8001252:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001258:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800125c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125e:	2304      	movs	r3, #4
 8001260:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_ADC3_Init+0xd0>)
 8001270:	f002 f8ba 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800127a:	f000 fd1b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24000b78 	.word	0x24000b78
 800128c:	58026000 	.word	0x58026000
 8001290:	10c00010 	.word	0x10c00010

08001294 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <MX_FDCAN3_Init+0xc4>)
 800129c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012be:	2210      	movs	r2, #16
 80012c0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001306:	2204      	movs	r2, #4
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001312:	2204      	movs	r2, #4
 8001314:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001318:	2200      	movs	r2, #0
 800131a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 800131e:	2204      	movs	r2, #4
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001324:	2200      	movs	r2, #0
 8001326:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 800132a:	2200      	movs	r2, #0
 800132c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001330:	2200      	movs	r2, #0
 8001332:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001336:	2200      	movs	r2, #0
 8001338:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 800133c:	2204      	movs	r2, #4
 800133e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_FDCAN3_Init+0xc0>)
 8001342:	f005 f959 	bl	80065f8 <HAL_FDCAN_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800134c:	f000 fcb2 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000be8 	.word	0x24000be8
 8001358:	4000d400 	.word	0x4000d400

0800135c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C2_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_I2C2_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C2_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001398:	f005 fe54 	bl	8007044 <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 fc87 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C2_Init+0x74>)
 80013aa:	f005 fedb 	bl	8007164 <HAL_I2CEx_ConfigAnalogFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 fc7e 	bl	8001cb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_I2C2_Init+0x74>)
 80013bc:	f005 ff1d 	bl	80071fa <HAL_I2CEx_ConfigDigitalFilter>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 fc75 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000c88 	.word	0x24000c88
 80013d4:	40005800 	.word	0x40005800
 80013d8:	00808cd2 	.word	0x00808cd2

080013dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_SPI1_Init+0xa4>)
 80013e2:	4a28      	ldr	r2, [pc, #160]	; (8001484 <MX_SPI1_Init+0xa8>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_SPI1_Init+0xa4>)
 80013e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_SPI1_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_SPI1_Init+0xa4>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_SPI1_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001408:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800140c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001410:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001414:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_SPI1_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_SPI1_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_SPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_SPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_SPI1_Init+0xa4>)
 800146e:	f00a fdc9 	bl	800c004 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001478:	f000 fc1c 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000cdc 	.word	0x24000cdc
 8001484:	40013000 	.word	0x40013000

08001488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_SPI2_Init+0xa4>)
 800148e:	4a28      	ldr	r2, [pc, #160]	; (8001530 <MX_SPI2_Init+0xa8>)
 8001490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <MX_SPI2_Init+0xa4>)
 8001494:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <MX_SPI2_Init+0xa4>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_SPI2_Init+0xa4>)
 80014a2:	2207      	movs	r2, #7
 80014a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <MX_SPI2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_SPI2_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <MX_SPI2_Init+0xa4>)
 80014b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_SPI2_Init+0xa4>)
 80014bc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80014c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_SPI2_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_SPI2_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_SPI2_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_SPI2_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI2_Init+0xa4>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_SPI2_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_SPI2_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI2_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_SPI2_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_SPI2_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI2_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_SPI2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_SPI2_Init+0xa4>)
 800151a:	f00a fd73 	bl	800c004 <HAL_SPI_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001524:	f000 fbc6 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24000d64 	.word	0x24000d64
 8001530:	40003800 	.word	0x40003800

08001534 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <MX_SPI3_Init+0xa8>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001540:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001544:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800154e:	2203      	movs	r2, #3
 8001550:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001560:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001564:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_SPI3_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI3_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_SPI3_Init+0xa4>)
 80015c4:	f00a fd1e 	bl	800c004 <HAL_SPI_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80015ce:	f000 fb71 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000dec 	.word	0x24000dec
 80015dc:	40003c00 	.word	0x40003c00

080015e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_TIM2_Init+0xac>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_TIM2_Init+0xac>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_TIM2_Init+0xac>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_TIM2_Init+0xac>)
 800161a:	225a      	movs	r2, #90	; 0x5a
 800161c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_TIM2_Init+0xac>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_TIM2_Init+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800162a:	4818      	ldr	r0, [pc, #96]	; (800168c <MX_TIM2_Init+0xac>)
 800162c:	f00b fa83 	bl	800cb36 <HAL_TIM_PWM_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001636:	f000 fb3d 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4810      	ldr	r0, [pc, #64]	; (800168c <MX_TIM2_Init+0xac>)
 800164a:	f00c fbe3 	bl	800de14 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001654:	f000 fb2e 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001658:	2360      	movs	r3, #96	; 0x60
 800165a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	2208      	movs	r2, #8
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_TIM2_Init+0xac>)
 8001670:	f00b fe0c 	bl	800d28c <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800167a:	f000 fb1b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_TIM2_Init+0xac>)
 8001680:	f000 fef8 	bl	8002474 <HAL_TIM_MspPostInit>

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000e74 	.word	0x24000e74

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <MX_TIM3_Init+0xc4>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016c8:	225a      	movs	r2, #90	; 0x5a
 80016ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d8:	481d      	ldr	r0, [pc, #116]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016da:	f00b fa2c 	bl	800cb36 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 fae6 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM3_Init+0xc0>)
 80016f8:	f00c fb8c 	bl	800de14 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001702:	f000 fad7 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM3_Init+0xc0>)
 800171e:	f00b fdb5 	bl	800d28c <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001728:	f000 fac4 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM3_Init+0xc0>)
 8001734:	f00b fdaa 	bl	800d28c <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800173e:	f000 fab9 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM3_Init+0xc0>)
 8001744:	f000 fe96 	bl	8002474 <HAL_TIM_MspPostInit>

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000ec0 	.word	0x24000ec0
 8001754:	40000400 	.word	0x40000400

08001758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_TIM4_Init+0xac>)
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <MX_TIM4_Init+0xb0>)
 8001780:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_TIM4_Init+0xac>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_TIM4_Init+0xac>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_TIM4_Init+0xac>)
 8001790:	225a      	movs	r2, #90	; 0x5a
 8001792:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_TIM4_Init+0xac>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_TIM4_Init+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a0:	4818      	ldr	r0, [pc, #96]	; (8001804 <MX_TIM4_Init+0xac>)
 80017a2:	f00b f9c8 	bl	800cb36 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 fa82 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_TIM4_Init+0xac>)
 80017c0:	f00c fb28 	bl	800de14 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017ca:	f000 fa73 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	; 0x60
 80017d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	2208      	movs	r2, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM4_Init+0xac>)
 80017e6:	f00b fd51 	bl	800d28c <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017f0:	f000 fa60 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM4_Init+0xac>)
 80017f6:	f000 fe3d 	bl	8002474 <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	24000f0c 	.word	0x24000f0c
 8001808:	40000800 	.word	0x40000800

0800180c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <MX_TIM5_Init+0xb0>)
 8001834:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_TIM5_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001844:	225a      	movs	r2, #90	; 0x5a
 8001846:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM5_Init+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001856:	f00b f96e 	bl	800cb36 <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001860:	f000 fa28 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_TIM5_Init+0xac>)
 8001874:	f00c face 	bl	800de14 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800187e:	f000 fa19 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	220c      	movs	r2, #12
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	; (80018b8 <MX_TIM5_Init+0xac>)
 800189a:	f00b fcf7 	bl	800d28c <HAL_TIM_PWM_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80018a4:	f000 fa06 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <MX_TIM5_Init+0xac>)
 80018aa:	f000 fde3 	bl	8002474 <HAL_TIM_MspPostInit>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24000f58 	.word	0x24000f58
 80018bc:	40000c00 	.word	0x40000c00

080018c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_UART4_Init+0x90>)
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_UART4_Init+0x94>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_UART4_Init+0x90>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_UART4_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_UART4_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_UART4_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_UART4_Init+0x90>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_UART4_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_UART4_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_UART4_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_UART4_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_UART4_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_UART4_Init+0x90>)
 800190a:	f00c fb3d 	bl	800df88 <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001914:	f000 f9ce 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_UART4_Init+0x90>)
 800191c:	f00d fc43 	bl	800f1a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001926:	f000 f9c5 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_UART4_Init+0x90>)
 800192e:	f00d fc78 	bl	800f222 <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001938:	f000 f9bc 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_UART4_Init+0x90>)
 800193e:	f00d fbf9 	bl	800f134 <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 f9b4 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	240011fc 	.word	0x240011fc
 8001954:	40004c00 	.word	0x40004c00

08001958 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <MX_USART6_UART_Init+0x94>)
 8001960:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 80019a2:	f00c faf1 	bl	800df88 <HAL_UART_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80019ac:	f000 f982 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 80019b4:	f00d fbf7 	bl	800f1a6 <HAL_UARTEx_SetTxFifoThreshold>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80019be:	f000 f979 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 80019c6:	f00d fc2c 	bl	800f222 <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 f970 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_USART6_UART_Init+0x90>)
 80019d6:	f00d fbad 	bl	800f134 <HAL_UARTEx_DisableFifoMode>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f968 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24001290 	.word	0x24001290
 80019ec:	40011400 	.word	0x40011400

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_DMA_Init+0x7c>)
 80019f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <MX_DMA_Init+0x7c>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_DMA_Init+0x7c>)
 8001a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	200b      	movs	r0, #11
 8001a1a:	f002 fce2 	bl	80043e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a1e:	200b      	movs	r0, #11
 8001a20:	f002 fcf9 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	200c      	movs	r0, #12
 8001a2a:	f002 fcda 	bl	80043e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a2e:	200c      	movs	r0, #12
 8001a30:	f002 fcf1 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	200d      	movs	r0, #13
 8001a3a:	f002 fcd2 	bl	80043e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a3e:	200d      	movs	r0, #13
 8001a40:	f002 fce9 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	200e      	movs	r0, #14
 8001a4a:	f002 fcca 	bl	80043e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a4e:	200e      	movs	r0, #14
 8001a50:	f002 fce1 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f002 fcc2 	bl	80043e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f002 fcd9 	bl	8004416 <HAL_NVIC_EnableIRQ>

}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	58024400 	.word	0x58024400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a83      	ldr	r2, [pc, #524]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001aac:	f043 0320 	orr.w	r3, r3, #32
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	4a74      	ldr	r2, [pc, #464]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad2:	4b72      	ldr	r3, [pc, #456]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	4a6d      	ldr	r2, [pc, #436]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <MX_GPIO_Init+0x22c>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4849      	ldr	r0, [pc, #292]	; (8001ca0 <MX_GPIO_Init+0x230>)
 8001b7c:	f005 fa48 	bl	8007010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2106      	movs	r1, #6
 8001b84:	4847      	ldr	r0, [pc, #284]	; (8001ca4 <MX_GPIO_Init+0x234>)
 8001b86:	f005 fa43 	bl	8007010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	4846      	ldr	r0, [pc, #280]	; (8001ca8 <MX_GPIO_Init+0x238>)
 8001b90:	f005 fa3e 	bl	8007010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9a:	4844      	ldr	r0, [pc, #272]	; (8001cac <MX_GPIO_Init+0x23c>)
 8001b9c:	f005 fa38 	bl	8007010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	4842      	ldr	r0, [pc, #264]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001ba6:	f005 fa33 	bl	8007010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4837      	ldr	r0, [pc, #220]	; (8001ca0 <MX_GPIO_Init+0x230>)
 8001bc2:	f005 f87d 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4831      	ldr	r0, [pc, #196]	; (8001ca4 <MX_GPIO_Init+0x234>)
 8001bde:	f005 f86f 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001be2:	2310      	movs	r3, #16
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <MX_GPIO_Init+0x238>)
 8001bfa:	f005 f861 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4825      	ldr	r0, [pc, #148]	; (8001ca8 <MX_GPIO_Init+0x238>)
 8001c12:	f005 f855 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481f      	ldr	r0, [pc, #124]	; (8001cac <MX_GPIO_Init+0x23c>)
 8001c30:	f005 f846 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c34:	2304      	movs	r3, #4
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <MX_GPIO_Init+0x240>)
 8001c4c:	f005 f838 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_GPIO_Init+0x234>)
 8001c6e:	f005 f827 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001c82:	230b      	movs	r3, #11
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_GPIO_Init+0x23c>)
 8001c8e:	f005 f817 	bl	8006cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58021000 	.word	0x58021000
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	58020800 	.word	0x58020800
 8001cac:	58020c00 	.word	0x58020c00
 8001cb0:	58021800 	.word	0x58021800

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_MspInit+0x30>)
 8001cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	58024400 	.word	0x58024400

08001cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_ADC_MspInit+0xe0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d12a      	bne.n	8001d6c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	481d      	ldr	r0, [pc, #116]	; (8001ddc <HAL_ADC_MspInit+0xe8>)
 8001d66:	f004 ffab 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d6a:	e02e      	b.n	8001dca <HAL_ADC_MspInit+0xd6>
  else if(hadc->Instance==ADC3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_ADC_MspInit+0xec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d129      	bne.n	8001dca <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_ADC_MspInit+0xe4>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001db2:	2328      	movs	r3, #40	; 0x28
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <HAL_ADC_MspInit+0xf0>)
 8001dc6:	f004 ff7b 	bl	8006cc0 <HAL_GPIO_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	; 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58020800 	.word	0x58020800
 8001de0:	58026000 	.word	0x58026000
 8001de4:	58021400 	.word	0x58021400

08001de8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0b8      	sub	sp, #224	; 0xe0
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	22b8      	movs	r2, #184	; 0xb8
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f011 fb01 	bl	8013410 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_FDCAN_MspInit+0xc4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d144      	bne.n	8001ea2 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f007 fd03 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001e38:	f7ff ff3c 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e62:	f043 0320 	orr.w	r3, r3, #32
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_FDCAN_MspInit+0xc8>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e78:	23c0      	movs	r3, #192	; 0xc0
 8001e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_FDCAN_MspInit+0xcc>)
 8001e9e:	f004 ff0f 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	37e0      	adds	r7, #224	; 0xe0
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	4000d400 	.word	0x4000d400
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	58021400 	.word	0x58021400

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0b8      	sub	sp, #224	; 0xe0
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	22b8      	movs	r2, #184	; 0xb8
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f011 fa99 	bl	8013410 <memset>
  if(hi2c->Instance==I2C2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_I2C_MspInit+0xc4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d145      	bne.n	8001f74 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ee8:	f04f 0208 	mov.w	r2, #8
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 fc9a 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f0a:	f7ff fed3 	bl	8001cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f16:	f043 0320 	orr.w	r3, r3, #32
 8001f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f32:	2312      	movs	r3, #18
 8001f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f44:	2304      	movs	r3, #4
 8001f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <HAL_I2C_MspInit+0xcc>)
 8001f52:	f004 feb5 	bl	8006cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f5c:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	37e0      	adds	r7, #224	; 0xe0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40005800 	.word	0x40005800
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58021400 	.word	0x58021400

08001f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	; 0x38
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	; (80020e4 <HAL_SPI_MspInit+0x15c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d12e      	bne.n	8002008 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fe6:	23e0      	movs	r3, #224	; 0xe0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	483a      	ldr	r0, [pc, #232]	; (80020ec <HAL_SPI_MspInit+0x164>)
 8002002:	f004 fe5d 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002006:	e068      	b.n	80020da <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <HAL_SPI_MspInit+0x168>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12f      	bne.n	8002072 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 800201a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800204e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002060:	2305      	movs	r3, #5
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	4822      	ldr	r0, [pc, #136]	; (80020f4 <HAL_SPI_MspInit+0x16c>)
 800206c:	f004 fe28 	bl	8006cc0 <HAL_GPIO_Init>
}
 8002070:	e033      	b.n	80020da <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_SPI_MspInit+0x170>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d12e      	bne.n	80020da <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 800207e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 8002084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002088:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 800208e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_SPI_MspInit+0x160>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020ca:	2306      	movs	r3, #6
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4809      	ldr	r0, [pc, #36]	; (80020fc <HAL_SPI_MspInit+0x174>)
 80020d6:	f004 fdf3 	bl	8006cc0 <HAL_GPIO_Init>
}
 80020da:	bf00      	nop
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40013000 	.word	0x40013000
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020000 	.word	0x58020000
 80020f0:	40003800 	.word	0x40003800
 80020f4:	58020400 	.word	0x58020400
 80020f8:	40003c00 	.word	0x40003c00
 80020fc:	58020800 	.word	0x58020800

08002100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d15d      	bne.n	80021de <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002122:	4b9f      	ldr	r3, [pc, #636]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	4a9d      	ldr	r2, [pc, #628]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002132:	4b9b      	ldr	r3, [pc, #620]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b97      	ldr	r3, [pc, #604]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a96      	ldr	r2, [pc, #600]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b93      	ldr	r3, [pc, #588]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	2301      	movs	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800216e:	2301      	movs	r3, #1
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	488a      	ldr	r0, [pc, #552]	; (80023a4 <HAL_TIM_PWM_MspInit+0x2a4>)
 800217a:	f004 fda1 	bl	8006cc0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800217e:	4b8a      	ldr	r3, [pc, #552]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 8002180:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_TIM_PWM_MspInit+0x2ac>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002184:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 8002186:	2214      	movs	r2, #20
 8002188:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218a:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b84      	ldr	r3, [pc, #528]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a6:	4b80      	ldr	r3, [pc, #512]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80021ae:	4b7e      	ldr	r3, [pc, #504]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80021b4:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ba:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80021c0:	4879      	ldr	r0, [pc, #484]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021c2:	f002 f943 	bl	800444c <HAL_DMA_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80021cc:	f7ff fd72 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a75      	ldr	r2, [pc, #468]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d6:	4a74      	ldr	r2, [pc, #464]	; (80023a8 <HAL_TIM_PWM_MspInit+0x2a8>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021dc:	e13d      	b.n	800245a <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a73      	ldr	r2, [pc, #460]	; (80023b0 <HAL_TIM_PWM_MspInit+0x2b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d16d      	bne.n	80022c4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e8:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80021ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ee:	4a6c      	ldr	r2, [pc, #432]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f8:	4b69      	ldr	r3, [pc, #420]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80021fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002206:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002208:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_TIM_PWM_MspInit+0x2b8>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800220c:	4b69      	ldr	r3, [pc, #420]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 800220e:	2218      	movs	r2, #24
 8002210:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002212:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002224:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800222c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002230:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002234:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800223c:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002248:	485a      	ldr	r0, [pc, #360]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 800224a:	f002 f8ff 	bl	800444c <HAL_DMA_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002254:	f7ff fd2e 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
 800225e:	4a55      	ldr	r2, [pc, #340]	; (80023b4 <HAL_TIM_PWM_MspInit+0x2b4>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002264:	4b55      	ldr	r3, [pc, #340]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_TIM_PWM_MspInit+0x2c0>)
 8002268:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 800226c:	2217      	movs	r2, #23
 800226e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002270:	4b52      	ldr	r3, [pc, #328]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800227c:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002284:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 8002286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 800228e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002292:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002294:	4b49      	ldr	r3, [pc, #292]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800229a:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80022a6:	4845      	ldr	r0, [pc, #276]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 80022a8:	f002 f8d0 	bl	800444c <HAL_DMA_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80022b2:	f7ff fcff 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a40      	ldr	r2, [pc, #256]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
 80022bc:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_TIM_PWM_MspInit+0x2bc>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022c2:	e0ca      	b.n	800245a <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a3e      	ldr	r2, [pc, #248]	; (80023c4 <HAL_TIM_PWM_MspInit+0x2c4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f040 8082 	bne.w	80023d4 <HAL_TIM_PWM_MspInit+0x2d4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d0:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80022d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80022e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80022f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_TIM_PWM_MspInit+0x2a0>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800230c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231e:	2302      	movs	r3, #2
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002326:	4619      	mov	r1, r3
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <HAL_TIM_PWM_MspInit+0x2c8>)
 800232a:	f004 fcc9 	bl	8006cc0 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_TIM_PWM_MspInit+0x2d0>)
 8002332:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002336:	221f      	movs	r2, #31
 8002338:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002354:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800235c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002370:	4816      	ldr	r0, [pc, #88]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002372:	f002 f86b 	bl	800444c <HAL_DMA_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_TIM_PWM_MspInit+0x280>
      Error_Handler();
 800237c:	f7ff fc9a 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_TIM_PWM_MspInit+0x2cc>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	201e      	movs	r0, #30
 8002392:	f002 f826 	bl	80043e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002396:	201e      	movs	r0, #30
 8002398:	f002 f83d 	bl	8004416 <HAL_NVIC_EnableIRQ>
}
 800239c:	e05d      	b.n	800245a <HAL_TIM_PWM_MspInit+0x35a>
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58020000 	.word	0x58020000
 80023a8:	24000fa4 	.word	0x24000fa4
 80023ac:	40020028 	.word	0x40020028
 80023b0:	40000400 	.word	0x40000400
 80023b4:	2400101c 	.word	0x2400101c
 80023b8:	40020058 	.word	0x40020058
 80023bc:	24001094 	.word	0x24001094
 80023c0:	40020070 	.word	0x40020070
 80023c4:	40000800 	.word	0x40000800
 80023c8:	58020c00 	.word	0x58020c00
 80023cc:	2400110c 	.word	0x2400110c
 80023d0:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_TIM_PWM_MspInit+0x364>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13d      	bne.n	800245a <HAL_TIM_PWM_MspInit+0x35a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_TIM_PWM_MspInit+0x368>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_TIM_PWM_MspInit+0x368>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_TIM_PWM_MspInit+0x368>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_TIM_PWM_MspInit+0x370>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002404:	223a      	movs	r2, #58	; 0x3a
 8002406:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 800240a:	2240      	movs	r2, #64	; 0x40
 800240c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 800241e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002422:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800243e:	480b      	ldr	r0, [pc, #44]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002440:	f002 f804 	bl	800444c <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIM_PWM_MspInit+0x34e>
      Error_Handler();
 800244a:	f7ff fc33 	bl	8001cb4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a06      	ldr	r2, [pc, #24]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_TIM_PWM_MspInit+0x36c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6393      	str	r3, [r2, #56]	; 0x38
}
 800245a:	bf00      	nop
 800245c:	3738      	adds	r7, #56	; 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40000c00 	.word	0x40000c00
 8002468:	58024400 	.word	0x58024400
 800246c:	24001184 	.word	0x24001184
 8002470:	40020040 	.word	0x40020040

08002474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002494:	d120      	bne.n	80024d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024be:	2302      	movs	r3, #2
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024c6:	2301      	movs	r3, #1
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	4619      	mov	r1, r3
 80024d0:	483c      	ldr	r0, [pc, #240]	; (80025c4 <HAL_TIM_MspPostInit+0x150>)
 80024d2:	f004 fbf5 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80024d6:	e06e      	b.n	80025b6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <HAL_TIM_MspPostInit+0x154>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d11f      	bne.n	8002522 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002500:	2330      	movs	r3, #48	; 0x30
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002508:	2302      	movs	r3, #2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002510:	2302      	movs	r3, #2
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <HAL_TIM_MspPostInit+0x150>)
 800251c:	f004 fbd0 	bl	8006cc0 <HAL_GPIO_Init>
}
 8002520:	e049      	b.n	80025b6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_TIM_MspPostInit+0x158>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d120      	bne.n	800256e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800254a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002554:	2302      	movs	r3, #2
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800255c:	2302      	movs	r3, #2
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	481a      	ldr	r0, [pc, #104]	; (80025d0 <HAL_TIM_MspPostInit+0x15c>)
 8002568:	f004 fbaa 	bl	8006cc0 <HAL_GPIO_Init>
}
 800256c:	e023      	b.n	80025b6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_TIM_MspPostInit+0x160>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d11e      	bne.n	80025b6 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_TIM_MspPostInit+0x14c>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002596:	2308      	movs	r3, #8
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800259e:	2302      	movs	r3, #2
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <HAL_TIM_MspPostInit+0x164>)
 80025b2:	f004 fb85 	bl	8006cc0 <HAL_GPIO_Init>
}
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58020400 	.word	0x58020400
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	58020c00 	.word	0x58020c00
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	58020000 	.word	0x58020000

080025dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0ba      	sub	sp, #232	; 0xe8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	22b8      	movs	r2, #184	; 0xb8
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f010 ff07 	bl	8013410 <memset>
  if(huart->Instance==UART4)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4d      	ldr	r2, [pc, #308]	; (800273c <HAL_UART_MspInit+0x160>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d147      	bne.n	800269c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800260c:	f04f 0202 	mov.w	r2, #2
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261e:	f107 0318 	add.w	r3, r7, #24
 8002622:	4618      	mov	r0, r3
 8002624:	f007 f908 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800262e:	f7ff fb41 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_UART_MspInit+0x164>)
 8002634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002638:	4a41      	ldr	r2, [pc, #260]	; (8002740 <HAL_UART_MspInit+0x164>)
 800263a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800263e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_UART_MspInit+0x164>)
 8002644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_UART_MspInit+0x164>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_UART_MspInit+0x164>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_UART_MspInit+0x164>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800266e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002688:	2308      	movs	r3, #8
 800268a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002692:	4619      	mov	r1, r3
 8002694:	482b      	ldr	r0, [pc, #172]	; (8002744 <HAL_UART_MspInit+0x168>)
 8002696:	f004 fb13 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800269a:	e04a      	b.n	8002732 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_UART_MspInit+0x16c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d145      	bne.n	8002732 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80026a6:	f04f 0201 	mov.w	r2, #1
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f007 f8bb 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80026c8:	f7ff faf4 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026d4:	f043 0320 	orr.w	r3, r3, #32
 80026d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0x164>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002720:	2307      	movs	r3, #7
 8002722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800272a:	4619      	mov	r1, r3
 800272c:	4807      	ldr	r0, [pc, #28]	; (800274c <HAL_UART_MspInit+0x170>)
 800272e:	f004 fac7 	bl	8006cc0 <HAL_GPIO_Init>
}
 8002732:	bf00      	nop
 8002734:	37e8      	adds	r7, #232	; 0xe8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004c00 	.word	0x40004c00
 8002740:	58024400 	.word	0x58024400
 8002744:	58020400 	.word	0x58020400
 8002748:	40011400 	.word	0x40011400
 800274c:	58020800 	.word	0x58020800

08002750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <NMI_Handler+0x4>

08002756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <UsageFault_Handler+0x4>

0800276e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f000 f992 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <DMA1_Stream0_IRQHandler+0x10>)
 80027aa:	f002 fc13 	bl	8004fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2400110c 	.word	0x2400110c

080027b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Stream1_IRQHandler+0x10>)
 80027be:	f002 fc09 	bl	8004fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	24000fa4 	.word	0x24000fa4

080027cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Stream2_IRQHandler+0x10>)
 80027d2:	f002 fbff 	bl	8004fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24001184 	.word	0x24001184

080027e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <DMA1_Stream3_IRQHandler+0x10>)
 80027e6:	f002 fbf5 	bl	8004fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2400101c 	.word	0x2400101c

080027f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <DMA1_Stream4_IRQHandler+0x10>)
 80027fa:	f002 fbeb 	bl	8004fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	24001094 	.word	0x24001094

08002808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM4_IRQHandler+0x10>)
 800280e:	f00a fc1d 	bl	800d04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	24000f0c 	.word	0x24000f0c

0800281c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <OTG_HS_IRQHandler+0x10>)
 8002822:	f004 fe8f 	bl	8007544 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	24002810 	.word	0x24002810

08002830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <_sbrk+0x5c>)
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <_sbrk+0x60>)
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <_sbrk+0x64>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <_sbrk+0x68>)
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002860:	f010 fd9e 	bl	80133a0 <__errno>
 8002864:	4603      	mov	r3, r0
 8002866:	220c      	movs	r2, #12
 8002868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e009      	b.n	8002884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <_sbrk+0x64>)
 8002880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	24050000 	.word	0x24050000
 8002890:	00000400 	.word	0x00000400
 8002894:	24001328 	.word	0x24001328
 8002898:	24002f50 	.word	0x24002f50

0800289c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <SystemInit+0xd0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <SystemInit+0xd0>)
 80028a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <SystemInit+0xd4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d807      	bhi.n	80028cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <SystemInit+0xd4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <SystemInit+0xd4>)
 80028c6:	f043 0307 	orr.w	r3, r3, #7
 80028ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <SystemInit+0xd8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <SystemInit+0xd8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <SystemInit+0xd8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <SystemInit+0xd8>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4924      	ldr	r1, [pc, #144]	; (8002974 <SystemInit+0xd8>)
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <SystemInit+0xdc>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <SystemInit+0xd4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <SystemInit+0xd4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <SystemInit+0xd4>)
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <SystemInit+0xd8>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <SystemInit+0xd8>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <SystemInit+0xd8>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <SystemInit+0xd8>)
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <SystemInit+0xe0>)
 800291c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <SystemInit+0xd8>)
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <SystemInit+0xe4>)
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <SystemInit+0xd8>)
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <SystemInit+0xe8>)
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <SystemInit+0xd8>)
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <SystemInit+0xe8>)
 8002934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <SystemInit+0xd8>)
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <SystemInit+0xd8>)
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <SystemInit+0xe8>)
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <SystemInit+0xd8>)
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <SystemInit+0xd8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <SystemInit+0xd8>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <SystemInit+0xd8>)
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <SystemInit+0xec>)
 800295c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	52002000 	.word	0x52002000
 8002974:	58024400 	.word	0x58024400
 8002978:	eaf6ed7f 	.word	0xeaf6ed7f
 800297c:	02020200 	.word	0x02020200
 8002980:	01ff0000 	.word	0x01ff0000
 8002984:	01010280 	.word	0x01010280
 8002988:	52004000 	.word	0x52004000

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002990:	f7ff ff84 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ba:	f010 fcf7 	bl	80133ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7fe f943 	bl	8000c48 <main>
  bx  lr
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029cc:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80029d0:	08014148 	.word	0x08014148
  ldr r2, =_sbss
 80029d4:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80029d8:	24002f4c 	.word	0x24002f4c

080029dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC3_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e6:	2003      	movs	r0, #3
 80029e8:	f001 fcf0 	bl	80043cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029ec:	f006 fd4e 	bl	800948c <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_Init+0x68>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4913      	ldr	r1, [pc, #76]	; (8002a4c <HAL_Init+0x6c>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_Init+0x68>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_Init+0x6c>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_Init+0x70>)
 8002a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <HAL_Init+0x74>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2a:	200f      	movs	r0, #15
 8002a2c:	f000 f814 	bl	8002a58 <HAL_InitTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e002      	b.n	8002a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a3a:	f7ff f941 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	080140b0 	.word	0x080140b0
 8002a50:	24000004 	.word	0x24000004
 8002a54:	24000000 	.word	0x24000000

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_InitTick+0x60>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e021      	b.n	8002ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_InitTick+0x64>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_InitTick+0x60>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fcd5 	bl	8004432 <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f001 fc9f 	bl	80043e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_InitTick+0x68>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2400000c 	.word	0x2400000c
 8002abc:	24000000 	.word	0x24000000
 8002ac0:	24000008 	.word	0x24000008

08002ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2400000c 	.word	0x2400000c
 8002ae8:	2400132c 	.word	0x2400132c

08002aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2400132c 	.word	0x2400132c

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff ffee 	bl	8002aec <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2a:	bf00      	nop
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
  {
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2400000c 	.word	0x2400000c

08002b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <LL_ADC_SetOffset+0x60>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10b      	bne.n	8002bf0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bee:	e00b      	b.n	8002c08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	58026000 	.word	0x58026000

08002c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	611a      	str	r2, [r3, #16]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	601a      	str	r2, [r3, #0]
  }
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	58026000 	.word	0x58026000

08002cbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <LL_ADC_SetOffsetSaturation+0x40>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10e      	bne.n	8002cee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3360      	adds	r3, #96	; 0x60
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	58026000 	.word	0x58026000

08002d00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <LL_ADC_SetOffsetSign+0x40>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10e      	bne.n	8002d32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58026000 	.word	0x58026000

08002d44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <LL_ADC_SetOffsetState+0x50>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d108      	bne.n	8002d78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d76:	e007      	b.n	8002d88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	58026000 	.word	0x58026000

08002d98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3330      	adds	r3, #48	; 0x30
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	211f      	movs	r1, #31
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 011f 	and.w	r1, r3, #31
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0e5b      	lsrs	r3, r3, #25
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0d1b      	lsrs	r3, r3, #20
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0d1b      	lsrs	r3, r3, #20
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d115      	bne.n	8002e88 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0318 	and.w	r3, r3, #24
 8002e72:	4914      	ldr	r1, [pc, #80]	; (8002ec4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e74:	40d9      	lsrs	r1, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	400b      	ands	r3, r1
 8002e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e86:	e014      	b.n	8002eb2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0318 	and.w	r3, r3, #24
 8002e9e:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ea0:	40d9      	lsrs	r1, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	58026000 	.word	0x58026000
 8002ec4:	000fffff 	.word	0x000fffff

08002ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6093      	str	r3, [r2, #8]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	5fffffc0 	.word	0x5fffffc0

08002eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	6fffffc0 	.word	0x6fffffc0

08002f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f50:	d101      	bne.n	8002f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_IsEnabled+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_IsEnabled+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d101      	bne.n	8002fc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1ee      	b.n	80033d0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fe fe77 	bl	8001cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff67 	bl	8002eec <LL_ADC_IsDeepPowerDownEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff4d 	bl	8002ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff82 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d114      	bne.n	8003068 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff66 	bl	8002f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_ADC_Init+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	4a8e      	ldr	r2, [pc, #568]	; (8003288 <HAL_ADC_Init+0x2b0>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	3301      	adds	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800305a:	e002      	b.n	8003062 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff65 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10d      	bne.n	8003094 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff76 	bl	8002f8a <LL_ADC_REG_IsConversionOngoing>
 800309e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8188 	bne.w	80033be <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 8184 	bne.w	80033be <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff4a 	bl	8002f64 <LL_ADC_IsEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d136      	bne.n	8003144 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6c      	ldr	r2, [pc, #432]	; (800328c <HAL_ADC_Init+0x2b4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_ADC_Init+0x112>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_ADC_Init+0x2b8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10e      	bne.n	8003108 <HAL_ADC_Init+0x130>
 80030ea:	4868      	ldr	r0, [pc, #416]	; (800328c <HAL_ADC_Init+0x2b4>)
 80030ec:	f7ff ff3a 	bl	8002f64 <LL_ADC_IsEnabled>
 80030f0:	4604      	mov	r4, r0
 80030f2:	4867      	ldr	r0, [pc, #412]	; (8003290 <HAL_ADC_Init+0x2b8>)
 80030f4:	f7ff ff36 	bl	8002f64 <LL_ADC_IsEnabled>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4323      	orrs	r3, r4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e008      	b.n	800311a <HAL_ADC_Init+0x142>
 8003108:	4862      	ldr	r0, [pc, #392]	; (8003294 <HAL_ADC_Init+0x2bc>)
 800310a:	f7ff ff2b 	bl	8002f64 <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5a      	ldr	r2, [pc, #360]	; (800328c <HAL_ADC_Init+0x2b4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_ADC_Init+0x15a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_ADC_Init+0x2b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Init+0x15e>
 8003132:	4a59      	ldr	r2, [pc, #356]	; (8003298 <HAL_ADC_Init+0x2c0>)
 8003134:	e000      	b.n	8003138 <HAL_ADC_Init+0x160>
 8003136:	4a59      	ldr	r2, [pc, #356]	; (800329c <HAL_ADC_Init+0x2c4>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7ff fd04 	bl	8002b4c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_ADC_Init+0x2bc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d129      	bne.n	80031a2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7e5b      	ldrb	r3, [r3, #25]
 8003152:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003158:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800315e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d013      	beq.n	8003190 <HAL_ADC_Init+0x1b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d00d      	beq.n	800318c <HAL_ADC_Init+0x1b4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b1c      	cmp	r3, #28
 8003176:	d007      	beq.n	8003188 <HAL_ADC_Init+0x1b0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b18      	cmp	r3, #24
 800317e:	d101      	bne.n	8003184 <HAL_ADC_Init+0x1ac>
 8003180:	2318      	movs	r3, #24
 8003182:	e006      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003184:	2300      	movs	r3, #0
 8003186:	e004      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003188:	2310      	movs	r3, #16
 800318a:	e002      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 800318c:	2308      	movs	r3, #8
 800318e:	e000      	b.n	8003192 <HAL_ADC_Init+0x1ba>
 8003190:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003192:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e00e      	b.n	80031c0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e5b      	ldrb	r3, [r3, #25]
 80031a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_ADC_Init+0x2bc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d115      	bne.n	800322a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_ADC_Init+0x2c8>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	e009      	b.n	800323e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_ADC_Init+0x2cc>)
 8003232:	4013      	ands	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	69b9      	ldr	r1, [r7, #24]
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fea1 	bl	8002f8a <LL_ADC_REG_IsConversionOngoing>
 8003248:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff feae 	bl	8002fb0 <LL_ADC_INJ_IsConversionOngoing>
 8003254:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 808e 	bne.w	800337a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 808a 	bne.w	800337a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_ADC_Init+0x2bc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11b      	bne.n	80032a8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7e1b      	ldrb	r3, [r3, #24]
 8003274:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e018      	b.n	80032b6 <HAL_ADC_Init+0x2de>
 8003284:	24000000 	.word	0x24000000
 8003288:	053e2d63 	.word	0x053e2d63
 800328c:	40022000 	.word	0x40022000
 8003290:	40022100 	.word	0x40022100
 8003294:	58026000 	.word	0x58026000
 8003298:	40022300 	.word	0x40022300
 800329c:	58026300 	.word	0x58026300
 80032a0:	fff04007 	.word	0xfff04007
 80032a4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
 80032ac:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_ADC_Init+0x400>)
 80032be:	4013      	ands	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	430b      	orrs	r3, r1
 80032c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d137      	bne.n	8003344 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3f      	ldr	r2, [pc, #252]	; (80033dc <HAL_ADC_Init+0x404>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d116      	bne.n	8003312 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_ADC_Init+0x408>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003302:	430a      	orrs	r2, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	e020      	b.n	8003354 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <HAL_ADC_Init+0x40c>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003320:	3a01      	subs	r2, #1
 8003322:	0411      	lsls	r1, r2, #16
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003334:	430a      	orrs	r2, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	611a      	str	r2, [r3, #16]
 8003342:	e007      	b.n	8003354 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_ADC_Init+0x404>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d002      	beq.n	800337a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fd63 	bl	8003e40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10c      	bne.n	800339c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f023 010f 	bic.w	r1, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
 800339a:	e007      	b.n	80033ac <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020f 	bic.w	r2, r2, #15
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	f023 0303 	bic.w	r3, r3, #3
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60
 80033bc:	e007      	b.n	80033ce <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3724      	adds	r7, #36	; 0x24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd90      	pop	{r4, r7, pc}
 80033d8:	ffffbffc 	.word	0xffffbffc
 80033dc:	58026000 	.word	0x58026000
 80033e0:	fc00f81f 	.word	0xfc00f81f
 80033e4:	fc00f81e 	.word	0xfc00f81e

080033e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b0b9      	sub	sp, #228	; 0xe4
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003402:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4aa9      	ldr	r2, [pc, #676]	; (80036b0 <HAL_ADC_ConfigChannel+0x2c8>)
 800340a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_ADC_ConfigChannel+0x34>
 8003416:	2302      	movs	r3, #2
 8003418:	f000 bcfa 	b.w	8003e10 <HAL_ADC_ConfigChannel+0xa28>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fdae 	bl	8002f8a <LL_ADC_REG_IsConversionOngoing>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 84de 	bne.w	8003df2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a9e      	ldr	r2, [pc, #632]	; (80036b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d033      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <HAL_ADC_ConfigChannel+0x76>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2201      	movs	r2, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	e01d      	b.n	800349a <HAL_ADC_ConfigChannel+0xb2>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800347a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2201      	movs	r2, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	69d1      	ldr	r1, [r2, #28]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f7ff fc6f 	bl	8002d98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fd63 	bl	8002f8a <LL_ADC_REG_IsConversionOngoing>
 80034c4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fd6f 	bl	8002fb0 <LL_ADC_INJ_IsConversionOngoing>
 80034d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 8270 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 826b 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff fc7a 	bl	8002df0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6c      	ldr	r2, [pc, #432]	; (80036b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003520:	e032      	b.n	8003588 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352e:	d10b      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x160>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	e01d      	b.n	8003584 <HAL_ADC_ConfigChannel+0x19c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x186>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	e00a      	b.n	8003584 <HAL_ADC_ConfigChannel+0x19c>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d048      	beq.n	8003622 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6919      	ldr	r1, [r3, #16]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a0:	f7ff fb08 	bl	8002bb4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_ADC_ConfigChannel+0x2cc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d119      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7ff fba0 	bl	8002d00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6919      	ldr	r1, [r3, #16]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1f0>
 80035d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d6:	e000      	b.n	80035da <HAL_ADC_ConfigChannel+0x1f2>
 80035d8:	2300      	movs	r3, #0
 80035da:	461a      	mov	r2, r3
 80035dc:	f7ff fb6e 	bl	8002cbc <LL_ADC_SetOffsetSaturation>
 80035e0:	e1ee      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6919      	ldr	r1, [r3, #16]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x212>
 80035f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0x214>
 80035fa:	2300      	movs	r3, #0
 80035fc:	461a      	mov	r2, r3
 80035fe:	f7ff fb3b 	bl	8002c78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	7e1b      	ldrb	r3, [r3, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x230>
 8003612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003616:	e000      	b.n	800361a <HAL_ADC_ConfigChannel+0x232>
 8003618:	2300      	movs	r3, #0
 800361a:	461a      	mov	r2, r3
 800361c:	f7ff fb12 	bl	8002c44 <LL_ADC_SetDataRightShift>
 8003620:	e1ce      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a23      	ldr	r2, [pc, #140]	; (80036b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	f040 8181 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff faef 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 800363a:	4603      	mov	r3, r0
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x272>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fae4 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	e01e      	b.n	8003698 <HAL_ADC_ConfigChannel+0x2b0>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fad9 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800367c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800368c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x2d4>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	e01e      	b.n	80036ee <HAL_ADC_ConfigChannel+0x306>
 80036b0:	47ff0000 	.word	0x47ff0000
 80036b4:	58026000 	.word	0x58026000
 80036b8:	5c001000 	.word	0x5c001000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80036d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80036d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e004      	b.n	80036ee <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80036e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d106      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fb22 	bl	8002d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2101      	movs	r1, #1
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fa86 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x344>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fa7b 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e01e      	b.n	800376a <HAL_ADC_ConfigChannel+0x382>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fa70 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800374a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800374e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800375e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x39a>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	e018      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x3cc>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800379a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800379e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e004      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80037aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fabf 	bl	8002d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fa23 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x40a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fa18 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	e01e      	b.n	8003830 <HAL_ADC_ConfigChannel+0x448>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2102      	movs	r1, #2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa0d 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e004      	b.n	800382e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x460>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	e014      	b.n	8003872 <HAL_ADC_ConfigChannel+0x48a>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800385c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e004      	b.n	8003872 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	429a      	cmp	r2, r3
 8003874:	d106      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fa60 	bl	8002d44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2103      	movs	r1, #3
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f9c4 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x4c8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2103      	movs	r1, #3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f9b9 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e017      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x4f8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2103      	movs	r1, #3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f9ae 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80038cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e003      	b.n	80038de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80038d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x510>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	e011      	b.n	800391c <HAL_ADC_ConfigChannel+0x534>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003908:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800390a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e003      	b.n	800391c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	429a      	cmp	r2, r3
 800391e:	d14f      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	2103      	movs	r1, #3
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fa0b 	bl	8002d44 <LL_ADC_SetOffsetState>
 800392e:	e047      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	429a      	cmp	r2, r3
 8003942:	d107      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003976:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	069b      	lsls	r3, r3, #26
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800399a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff facd 	bl	8002f64 <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8219 	bne.w	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7ff fa32 	bl	8002e48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4aa1      	ldr	r2, [pc, #644]	; (8003c70 <HAL_ADC_ConfigChannel+0x888>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f040 812e 	bne.w	8003c4c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x630>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	3301      	adds	r3, #1
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e019      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x664>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	bf94      	ite	ls
 8003a46:	2301      	movls	r3, #1
 8003a48:	2300      	movhi	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d079      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x684>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	3301      	adds	r3, #1
 8003a64:	069b      	lsls	r3, r3, #26
 8003a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6a:	e015      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x6b0>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e003      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	069b      	lsls	r3, r3, #26
 8003a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x6d0>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	e017      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x700>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x726>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	051b      	lsls	r3, r3, #20
 8003b0c:	e018      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x758>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003b26:	2320      	movs	r3, #32
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b40:	430b      	orrs	r3, r1
 8003b42:	e07e      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x778>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	069b      	lsls	r3, r3, #26
 8003b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5e:	e015      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x7c4>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	e017      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x7f4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
  return result;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x820>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b1e      	subs	r3, #30
 8003c00:	051b      	lsls	r3, r3, #20
 8003c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c06:	e01b      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x858>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	60fb      	str	r3, [r7, #12]
  return result;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003c20:	2320      	movs	r3, #32
 8003c22:	e003      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f003 021f 	and.w	r2, r3, #31
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	3b1e      	subs	r3, #30
 8003c3a:	051b      	lsls	r3, r3, #20
 8003c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7ff f8d2 	bl	8002df0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f280 80d7 	bge.w	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <HAL_ADC_ConfigChannel+0x88c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_ADC_ConfigChannel+0x882>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_ADC_ConfigChannel+0x890>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10a      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x898>
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_ADC_ConfigChannel+0x894>)
 8003c6c:	e009      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x89a>
 8003c6e:	bf00      	nop
 8003c70:	47ff0000 	.word	0x47ff0000
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022100 	.word	0x40022100
 8003c7c:	40022300 	.word	0x40022300
 8003c80:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_ADC_ConfigChannel+0xa30>)
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff88 	bl	8002b98 <LL_ADC_GetCommonPathInternalCh>
 8003c88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a62      	ldr	r2, [pc, #392]	; (8003e1c <HAL_ADC_ConfigChannel+0xa34>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_ADC_ConfigChannel+0x8b8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_ADC_ConfigChannel+0xa38>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10e      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x8d6>
 8003ca0:	485e      	ldr	r0, [pc, #376]	; (8003e1c <HAL_ADC_ConfigChannel+0xa34>)
 8003ca2:	f7ff f95f 	bl	8002f64 <LL_ADC_IsEnabled>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	485d      	ldr	r0, [pc, #372]	; (8003e20 <HAL_ADC_ConfigChannel+0xa38>)
 8003caa:	f7ff f95b 	bl	8002f64 <LL_ADC_IsEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4323      	orrs	r3, r4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e008      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x8e8>
 8003cbe:	4859      	ldr	r0, [pc, #356]	; (8003e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8003cc0:	f7ff f950 	bl	8002f64 <LL_ADC_IsEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8084 	beq.w	8003dde <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <HAL_ADC_ConfigChannel+0xa40>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d132      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x95e>
 8003ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12c      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4c      	ldr	r2, [pc, #304]	; (8003e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	f040 8086 	bne.w	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a47      	ldr	r2, [pc, #284]	; (8003e1c <HAL_ADC_ConfigChannel+0xa34>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x924>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a46      	ldr	r2, [pc, #280]	; (8003e20 <HAL_ADC_ConfigChannel+0xa38>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x928>
 8003d0c:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_ADC_ConfigChannel+0xa44>)
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x92a>
 8003d10:	4a41      	ldr	r2, [pc, #260]	; (8003e18 <HAL_ADC_ConfigChannel+0xa30>)
 8003d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fe ff28 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_ADC_ConfigChannel+0xa48>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	4a42      	ldr	r2, [pc, #264]	; (8003e34 <HAL_ADC_ConfigChannel+0xa4c>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	099b      	lsrs	r3, r3, #6
 8003d30:	3301      	adds	r3, #1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d36:	e002      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f9      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d44:	e05e      	b.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_ADC_ConfigChannel+0xa50>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d120      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x9aa>
 8003d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11a      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d14e      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <HAL_ADC_ConfigChannel+0xa34>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x992>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_ADC_ConfigChannel+0xa38>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x996>
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_ADC_ConfigChannel+0xa44>)
 8003d7c:	e000      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x998>
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_ADC_ConfigChannel+0xa30>)
 8003d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fe fef1 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d90:	e038      	b.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <HAL_ADC_ConfigChannel+0xa54>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d133      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
 8003d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d12d      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d128      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_ADC_ConfigChannel+0xa34>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_ADC_ConfigChannel+0x9de>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_ADC_ConfigChannel+0xa38>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x9e2>
 8003dc6:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <HAL_ADC_ConfigChannel+0xa44>)
 8003dc8:	e000      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x9e4>
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_ADC_ConfigChannel+0xa30>)
 8003dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f7fe fecb 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
 8003ddc:	e012      	b.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003df0:	e008      	b.n	8003e04 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003e0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	37e4      	adds	r7, #228	; 0xe4
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	58026300 	.word	0x58026300
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40022100 	.word	0x40022100
 8003e24:	58026000 	.word	0x58026000
 8003e28:	c7520000 	.word	0xc7520000
 8003e2c:	40022300 	.word	0x40022300
 8003e30:	24000000 	.word	0x24000000
 8003e34:	053e2d63 	.word	0x053e2d63
 8003e38:	c3210000 	.word	0xc3210000
 8003e3c:	cb840000 	.word	0xcb840000

08003e40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <ADC_ConfigureBoostMode+0x1c0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <ADC_ConfigureBoostMode+0x1c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6b      	ldr	r2, [pc, #428]	; (8004004 <ADC_ConfigureBoostMode+0x1c4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d109      	bne.n	8003e70 <ADC_ConfigureBoostMode+0x30>
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <ADC_ConfigureBoostMode+0x1c8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e008      	b.n	8003e82 <ADC_ConfigureBoostMode+0x42>
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <ADC_ConfigureBoostMode+0x1cc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01c      	beq.n	8003ec0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e86:	f005 fc7b 	bl	8009780 <HAL_RCC_GetHCLKFreq>
 8003e8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e94:	d010      	beq.n	8003eb8 <ADC_ConfigureBoostMode+0x78>
 8003e96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e9a:	d873      	bhi.n	8003f84 <ADC_ConfigureBoostMode+0x144>
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d002      	beq.n	8003ea8 <ADC_ConfigureBoostMode+0x68>
 8003ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea6:	d16d      	bne.n	8003f84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
        break;
 8003eb6:	e068      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	60fb      	str	r3, [r7, #12]
        break;
 8003ebe:	e064      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ec0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f006 fe56 	bl	800ab78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ecc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ed6:	d051      	beq.n	8003f7c <ADC_ConfigureBoostMode+0x13c>
 8003ed8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003edc:	d854      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003ede:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ee2:	d047      	beq.n	8003f74 <ADC_ConfigureBoostMode+0x134>
 8003ee4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ee8:	d84e      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003eea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003eee:	d03d      	beq.n	8003f6c <ADC_ConfigureBoostMode+0x12c>
 8003ef0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ef4:	d848      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efa:	d033      	beq.n	8003f64 <ADC_ConfigureBoostMode+0x124>
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f00:	d842      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f06:	d029      	beq.n	8003f5c <ADC_ConfigureBoostMode+0x11c>
 8003f08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f0c:	d83c      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f12:	d01a      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x10a>
 8003f14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003f18:	d836      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f1e:	d014      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x10a>
 8003f20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003f24:	d830      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2a:	d00e      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x10a>
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d82a      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f36:	d008      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x10a>
 8003f38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f3c:	d824      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x148>
 8003f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f42:	d002      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x10a>
 8003f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f48:	d11e      	bne.n	8003f88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	0c9b      	lsrs	r3, r3, #18
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
        break;
 8003f5a:	e016      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
        break;
 8003f62:	e012      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	60fb      	str	r3, [r7, #12]
        break;
 8003f6a:	e00e      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	60fb      	str	r3, [r7, #12]
        break;
 8003f72:	e00a      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	09db      	lsrs	r3, r3, #7
 8003f78:	60fb      	str	r3, [r7, #12]
        break;
 8003f7a:	e006      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	60fb      	str	r3, [r7, #12]
        break;
 8003f82:	e002      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f88:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <ADC_ConfigureBoostMode+0x1d0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d808      	bhi.n	8003faa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fa6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fa8:	e025      	b.n	8003ff6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <ADC_ConfigureBoostMode+0x1d4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d80a      	bhi.n	8003fc8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	e016      	b.n	8003ff6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <ADC_ConfigureBoostMode+0x1d8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d80a      	bhi.n	8003fe6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	609a      	str	r2, [r3, #8]
}
 8003fe4:	e007      	b.n	8003ff6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ff4:	609a      	str	r2, [r3, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40022100 	.word	0x40022100
 8004008:	40022300 	.word	0x40022300
 800400c:	58026300 	.word	0x58026300
 8004010:	005f5e10 	.word	0x005f5e10
 8004014:	00bebc20 	.word	0x00bebc20
 8004018:	017d7840 	.word	0x017d7840

0800401c <LL_ADC_IsEnabled>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <LL_ADC_IsEnabled+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <LL_ADC_IsEnabled+0x1a>
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_ADC_REG_IsConversionOngoing>:
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d101      	bne.n	800405a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b0a3      	sub	sp, #140	; 0x8c
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004082:	2302      	movs	r3, #2
 8004084:	e0c1      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004092:	2300      	movs	r3, #0
 8004094:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5e      	ldr	r2, [pc, #376]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d102      	bne.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040a0:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e001      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0a0      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ffb9 	bl	8004042 <LL_ADC_REG_IsConversionOngoing>
 80040d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ffb2 	bl	8004042 <LL_ADC_REG_IsConversionOngoing>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 8081 	bne.w	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d17c      	bne.n	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a48      	ldr	r2, [pc, #288]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a46      	ldr	r2, [pc, #280]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004102:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004104:	e000      	b.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004106:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004108:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d039      	beq.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004112:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	431a      	orrs	r2, r3
 8004120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004122:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a3a      	ldr	r2, [pc, #232]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10e      	bne.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004138:	4836      	ldr	r0, [pc, #216]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800413a:	f7ff ff6f 	bl	800401c <LL_ADC_IsEnabled>
 800413e:	4604      	mov	r4, r0
 8004140:	4835      	ldr	r0, [pc, #212]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004142:	f7ff ff6b 	bl	800401c <LL_ADC_IsEnabled>
 8004146:	4603      	mov	r3, r0
 8004148:	4323      	orrs	r3, r4
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e008      	b.n	8004168 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004156:	4833      	ldr	r0, [pc, #204]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004158:	f7ff ff60 	bl	800401c <LL_ADC_IsEnabled>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d047      	beq.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800416c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004172:	4013      	ands	r3, r2
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	430a      	orrs	r2, r1
 800417e:	431a      	orrs	r2, r3
 8004180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004182:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004184:	e03a      	b.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800418e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004190:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10e      	bne.n	80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80041a6:	481b      	ldr	r0, [pc, #108]	; (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80041a8:	f7ff ff38 	bl	800401c <LL_ADC_IsEnabled>
 80041ac:	4604      	mov	r4, r0
 80041ae:	481a      	ldr	r0, [pc, #104]	; (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80041b0:	f7ff ff34 	bl	800401c <LL_ADC_IsEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4323      	orrs	r3, r4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e008      	b.n	80041d6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80041c4:	4817      	ldr	r0, [pc, #92]	; (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80041c6:	f7ff ff29 	bl	800401c <LL_ADC_IsEnabled>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041e6:	e009      	b.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80041fa:	e000      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004206:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800420a:	4618      	mov	r0, r3
 800420c:	378c      	adds	r7, #140	; 0x8c
 800420e:	46bd      	mov	sp, r7
 8004210:	bd90      	pop	{r4, r7, pc}
 8004212:	bf00      	nop
 8004214:	40022000 	.word	0x40022000
 8004218:	40022100 	.word	0x40022100
 800421c:	40022300 	.word	0x40022300
 8004220:	58026300 	.word	0x58026300
 8004224:	58026000 	.word	0x58026000
 8004228:	fffff0e0 	.word	0xfffff0e0

0800422c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <__NVIC_SetPriorityGrouping+0x40>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 8004256:	4313      	orrs	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <__NVIC_SetPriorityGrouping+0x40>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	60d3      	str	r3, [r2, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000ed00 	.word	0xe000ed00
 8004270:	05fa0000 	.word	0x05fa0000

08004274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <__NVIC_GetPriorityGrouping+0x18>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0307 	and.w	r3, r3, #7
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db0b      	blt.n	80042ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	4907      	ldr	r1, [pc, #28]	; (80042c8 <__NVIC_EnableIRQ+0x38>)
 80042aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2001      	movs	r0, #1
 80042b2:	fa00 f202 	lsl.w	r2, r0, r2
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	; (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004398:	d301      	bcc.n	800439e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439a:	2301      	movs	r3, #1
 800439c:	e00f      	b.n	80043be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439e:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <SysTick_Config+0x40>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a6:	210f      	movs	r1, #15
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	f7ff ff8e 	bl	80042cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <SysTick_Config+0x40>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <SysTick_Config+0x40>)
 80043b8:	2207      	movs	r2, #7
 80043ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000e010 	.word	0xe000e010

080043cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff29 	bl	800422c <__NVIC_SetPriorityGrouping>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f0:	f7ff ff40 	bl	8004274 <__NVIC_GetPriorityGrouping>
 80043f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff90 	bl	8004320 <NVIC_EncodePriority>
 8004400:	4602      	mov	r2, r0
 8004402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff5f 	bl	80042cc <__NVIC_SetPriority>
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff33 	bl	8004290 <__NVIC_EnableIRQ>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ffa4 	bl	8004388 <SysTick_Config>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7fe fb4a 	bl	8002aec <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e314      	b.n	8004a8e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a66      	ldr	r2, [pc, #408]	; (8004604 <HAL_DMA_Init+0x1b8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a65      	ldr	r2, [pc, #404]	; (8004608 <HAL_DMA_Init+0x1bc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a63      	ldr	r2, [pc, #396]	; (800460c <HAL_DMA_Init+0x1c0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a62      	ldr	r2, [pc, #392]	; (8004610 <HAL_DMA_Init+0x1c4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a60      	ldr	r2, [pc, #384]	; (8004614 <HAL_DMA_Init+0x1c8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a5f      	ldr	r2, [pc, #380]	; (8004618 <HAL_DMA_Init+0x1cc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a5d      	ldr	r2, [pc, #372]	; (800461c <HAL_DMA_Init+0x1d0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5c      	ldr	r2, [pc, #368]	; (8004620 <HAL_DMA_Init+0x1d4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_DMA_Init+0x1d8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a59      	ldr	r2, [pc, #356]	; (8004628 <HAL_DMA_Init+0x1dc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_DMA_Init+0x1e0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a56      	ldr	r2, [pc, #344]	; (8004630 <HAL_DMA_Init+0x1e4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a54      	ldr	r2, [pc, #336]	; (8004634 <HAL_DMA_Init+0x1e8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a53      	ldr	r2, [pc, #332]	; (8004638 <HAL_DMA_Init+0x1ec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_DMA_Init+0x1f0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_Init+0xb8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a50      	ldr	r2, [pc, #320]	; (8004640 <HAL_DMA_Init+0x1f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Init+0xbc>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_DMA_Init+0xbe>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 813c 	beq.w	8004788 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a37      	ldr	r2, [pc, #220]	; (8004604 <HAL_DMA_Init+0x1b8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d04a      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a36      	ldr	r2, [pc, #216]	; (8004608 <HAL_DMA_Init+0x1bc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d045      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a34      	ldr	r2, [pc, #208]	; (800460c <HAL_DMA_Init+0x1c0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d040      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a33      	ldr	r2, [pc, #204]	; (8004610 <HAL_DMA_Init+0x1c4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d03b      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a31      	ldr	r2, [pc, #196]	; (8004614 <HAL_DMA_Init+0x1c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d036      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_DMA_Init+0x1cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d031      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2e      	ldr	r2, [pc, #184]	; (800461c <HAL_DMA_Init+0x1d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02c      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <HAL_DMA_Init+0x1d4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d027      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <HAL_DMA_Init+0x1d8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <HAL_DMA_Init+0x1dc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01d      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a28      	ldr	r2, [pc, #160]	; (800462c <HAL_DMA_Init+0x1e0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a27      	ldr	r2, [pc, #156]	; (8004630 <HAL_DMA_Init+0x1e4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a25      	ldr	r2, [pc, #148]	; (8004634 <HAL_DMA_Init+0x1e8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a24      	ldr	r2, [pc, #144]	; (8004638 <HAL_DMA_Init+0x1ec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a22      	ldr	r2, [pc, #136]	; (800463c <HAL_DMA_Init+0x1f0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_DMA_Init+0x174>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a21      	ldr	r2, [pc, #132]	; (8004640 <HAL_DMA_Init+0x1f4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d108      	bne.n	80045d2 <HAL_DMA_Init+0x186>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e007      	b.n	80045e2 <HAL_DMA_Init+0x196>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045e2:	e02f      	b.n	8004644 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e4:	f7fe fa82 	bl	8002aec <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d928      	bls.n	8004644 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e244      	b.n	8004a8e <HAL_DMA_Init+0x642>
 8004604:	40020010 	.word	0x40020010
 8004608:	40020028 	.word	0x40020028
 800460c:	40020040 	.word	0x40020040
 8004610:	40020058 	.word	0x40020058
 8004614:	40020070 	.word	0x40020070
 8004618:	40020088 	.word	0x40020088
 800461c:	400200a0 	.word	0x400200a0
 8004620:	400200b8 	.word	0x400200b8
 8004624:	40020410 	.word	0x40020410
 8004628:	40020428 	.word	0x40020428
 800462c:	40020440 	.word	0x40020440
 8004630:	40020458 	.word	0x40020458
 8004634:	40020470 	.word	0x40020470
 8004638:	40020488 	.word	0x40020488
 800463c:	400204a0 	.word	0x400204a0
 8004640:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1c8      	bne.n	80045e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4b84      	ldr	r3, [pc, #528]	; (8004870 <HAL_DMA_Init+0x424>)
 800465e:	4013      	ands	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800466a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004676:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004682:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2b04      	cmp	r3, #4
 8004696:	d107      	bne.n	80046a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4313      	orrs	r3, r2
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b28      	cmp	r3, #40	; 0x28
 80046ae:	d903      	bls.n	80046b8 <HAL_DMA_Init+0x26c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b2e      	cmp	r3, #46	; 0x2e
 80046b6:	d91f      	bls.n	80046f8 <HAL_DMA_Init+0x2ac>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b3e      	cmp	r3, #62	; 0x3e
 80046be:	d903      	bls.n	80046c8 <HAL_DMA_Init+0x27c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b42      	cmp	r3, #66	; 0x42
 80046c6:	d917      	bls.n	80046f8 <HAL_DMA_Init+0x2ac>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b46      	cmp	r3, #70	; 0x46
 80046ce:	d903      	bls.n	80046d8 <HAL_DMA_Init+0x28c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b48      	cmp	r3, #72	; 0x48
 80046d6:	d90f      	bls.n	80046f8 <HAL_DMA_Init+0x2ac>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b4e      	cmp	r3, #78	; 0x4e
 80046de:	d903      	bls.n	80046e8 <HAL_DMA_Init+0x29c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b52      	cmp	r3, #82	; 0x52
 80046e6:	d907      	bls.n	80046f8 <HAL_DMA_Init+0x2ac>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b73      	cmp	r3, #115	; 0x73
 80046ee:	d905      	bls.n	80046fc <HAL_DMA_Init+0x2b0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b77      	cmp	r3, #119	; 0x77
 80046f6:	d801      	bhi.n	80046fc <HAL_DMA_Init+0x2b0>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_DMA_Init+0x2b2>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004708:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b04      	cmp	r3, #4
 8004732:	d117      	bne.n	8004764 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fdcc 	bl	80062e4 <DMA_CheckFifoParam>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2240      	movs	r2, #64	; 0x40
 8004756:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e194      	b.n	8004a8e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f001 fd07 	bl	8006180 <DMA_CalcBaseAndBitshift>
 8004772:	4603      	mov	r3, r0
 8004774:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	223f      	movs	r2, #63	; 0x3f
 8004780:	409a      	lsls	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	e0ca      	b.n	800491e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a39      	ldr	r2, [pc, #228]	; (8004874 <HAL_DMA_Init+0x428>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <HAL_DMA_Init+0x42c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a36      	ldr	r2, [pc, #216]	; (800487c <HAL_DMA_Init+0x430>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a35      	ldr	r2, [pc, #212]	; (8004880 <HAL_DMA_Init+0x434>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a33      	ldr	r2, [pc, #204]	; (8004884 <HAL_DMA_Init+0x438>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a32      	ldr	r2, [pc, #200]	; (8004888 <HAL_DMA_Init+0x43c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a30      	ldr	r2, [pc, #192]	; (800488c <HAL_DMA_Init+0x440>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_Init+0x38c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <HAL_DMA_Init+0x444>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Init+0x390>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_DMA_Init+0x392>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8094 	beq.w	800490c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_DMA_Init+0x428>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d021      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_DMA_Init+0x42c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d01c      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_DMA_Init+0x430>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d017      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_DMA_Init+0x434>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d012      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_DMA_Init+0x438>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_DMA_Init+0x43c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d008      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_DMA_Init+0x440>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <HAL_DMA_Init+0x3e6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_DMA_Init+0x444>)
 8004830:	4293      	cmp	r3, r2
 8004832:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <HAL_DMA_Init+0x448>)
 8004850:	4013      	ands	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d01d      	beq.n	8004898 <HAL_DMA_Init+0x44c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d102      	bne.n	800486a <HAL_DMA_Init+0x41e>
 8004864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004868:	e017      	b.n	800489a <HAL_DMA_Init+0x44e>
 800486a:	2300      	movs	r3, #0
 800486c:	e015      	b.n	800489a <HAL_DMA_Init+0x44e>
 800486e:	bf00      	nop
 8004870:	fe10803f 	.word	0xfe10803f
 8004874:	58025408 	.word	0x58025408
 8004878:	5802541c 	.word	0x5802541c
 800487c:	58025430 	.word	0x58025430
 8004880:	58025444 	.word	0x58025444
 8004884:	58025458 	.word	0x58025458
 8004888:	5802546c 	.word	0x5802546c
 800488c:	58025480 	.word	0x58025480
 8004890:	58025494 	.word	0x58025494
 8004894:	fffe000f 	.word	0xfffe000f
 8004898:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	4b6e      	ldr	r3, [pc, #440]	; (8004a98 <HAL_DMA_Init+0x64c>)
 80048e0:	4413      	add	r3, r2
 80048e2:	4a6e      	ldr	r2, [pc, #440]	; (8004a9c <HAL_DMA_Init+0x650>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	009a      	lsls	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 fc45 	bl	8006180 <DMA_CalcBaseAndBitshift>
 80048f6:	4603      	mov	r3, r0
 80048f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	e008      	b.n	800491e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2203      	movs	r2, #3
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0b7      	b.n	8004a8e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a5f      	ldr	r2, [pc, #380]	; (8004aa0 <HAL_DMA_Init+0x654>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d072      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a5d      	ldr	r2, [pc, #372]	; (8004aa4 <HAL_DMA_Init+0x658>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d06d      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5c      	ldr	r2, [pc, #368]	; (8004aa8 <HAL_DMA_Init+0x65c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d068      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5a      	ldr	r2, [pc, #360]	; (8004aac <HAL_DMA_Init+0x660>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d063      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a59      	ldr	r2, [pc, #356]	; (8004ab0 <HAL_DMA_Init+0x664>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d05e      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <HAL_DMA_Init+0x668>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d059      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a56      	ldr	r2, [pc, #344]	; (8004ab8 <HAL_DMA_Init+0x66c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d054      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a54      	ldr	r2, [pc, #336]	; (8004abc <HAL_DMA_Init+0x670>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d04f      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a53      	ldr	r2, [pc, #332]	; (8004ac0 <HAL_DMA_Init+0x674>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04a      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a51      	ldr	r2, [pc, #324]	; (8004ac4 <HAL_DMA_Init+0x678>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a50      	ldr	r2, [pc, #320]	; (8004ac8 <HAL_DMA_Init+0x67c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <HAL_DMA_Init+0x680>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4d      	ldr	r2, [pc, #308]	; (8004ad0 <HAL_DMA_Init+0x684>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d036      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a4b      	ldr	r2, [pc, #300]	; (8004ad4 <HAL_DMA_Init+0x688>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4a      	ldr	r2, [pc, #296]	; (8004ad8 <HAL_DMA_Init+0x68c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a48      	ldr	r2, [pc, #288]	; (8004adc <HAL_DMA_Init+0x690>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a47      	ldr	r2, [pc, #284]	; (8004ae0 <HAL_DMA_Init+0x694>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a45      	ldr	r2, [pc, #276]	; (8004ae4 <HAL_DMA_Init+0x698>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a44      	ldr	r2, [pc, #272]	; (8004ae8 <HAL_DMA_Init+0x69c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a42      	ldr	r2, [pc, #264]	; (8004aec <HAL_DMA_Init+0x6a0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a41      	ldr	r2, [pc, #260]	; (8004af0 <HAL_DMA_Init+0x6a4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3f      	ldr	r2, [pc, #252]	; (8004af4 <HAL_DMA_Init+0x6a8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a3e      	ldr	r2, [pc, #248]	; (8004af8 <HAL_DMA_Init+0x6ac>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_DMA_Init+0x5c2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3c      	ldr	r2, [pc, #240]	; (8004afc <HAL_DMA_Init+0x6b0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA_Init+0x5c6>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_DMA_Init+0x5c8>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d032      	beq.n	8004a7e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 fcdf 	bl	80063dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d102      	bne.n	8004a2c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <HAL_DMA_Init+0x620>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d80c      	bhi.n	8004a6c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fd5c 	bl	8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	e008      	b.n	8004a7e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	a7fdabf8 	.word	0xa7fdabf8
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	58025408 	.word	0x58025408
 8004ae4:	5802541c 	.word	0x5802541c
 8004ae8:	58025430 	.word	0x58025430
 8004aec:	58025444 	.word	0x58025444
 8004af0:	58025458 	.word	0x58025458
 8004af4:	5802546c 	.word	0x5802546c
 8004af8:	58025480 	.word	0x58025480
 8004afc:	58025494 	.word	0x58025494

08004b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e226      	b.n	8004f6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_DMA_Start_IT+0x2a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e21f      	b.n	8004f6a <HAL_DMA_Start_IT+0x46a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 820a 	bne.w	8004f54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a68      	ldr	r2, [pc, #416]	; (8004cf4 <HAL_DMA_Start_IT+0x1f4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d04a      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a66      	ldr	r2, [pc, #408]	; (8004cf8 <HAL_DMA_Start_IT+0x1f8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d045      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a65      	ldr	r2, [pc, #404]	; (8004cfc <HAL_DMA_Start_IT+0x1fc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d040      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a63      	ldr	r2, [pc, #396]	; (8004d00 <HAL_DMA_Start_IT+0x200>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d03b      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a62      	ldr	r2, [pc, #392]	; (8004d04 <HAL_DMA_Start_IT+0x204>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d036      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a60      	ldr	r2, [pc, #384]	; (8004d08 <HAL_DMA_Start_IT+0x208>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d031      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a5f      	ldr	r2, [pc, #380]	; (8004d0c <HAL_DMA_Start_IT+0x20c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d02c      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_DMA_Start_IT+0x210>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d027      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <HAL_DMA_Start_IT+0x214>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5a      	ldr	r2, [pc, #360]	; (8004d18 <HAL_DMA_Start_IT+0x218>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01d      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a59      	ldr	r2, [pc, #356]	; (8004d1c <HAL_DMA_Start_IT+0x21c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a57      	ldr	r2, [pc, #348]	; (8004d20 <HAL_DMA_Start_IT+0x220>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a56      	ldr	r2, [pc, #344]	; (8004d24 <HAL_DMA_Start_IT+0x224>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_DMA_Start_IT+0x228>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <HAL_DMA_Start_IT+0x22c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_DMA_Start_IT+0xee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <HAL_DMA_Start_IT+0x230>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <HAL_DMA_Start_IT+0x100>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e007      	b.n	8004c10 <HAL_DMA_Start_IT+0x110>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f001 f906 	bl	8005e28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a34      	ldr	r2, [pc, #208]	; (8004cf4 <HAL_DMA_Start_IT+0x1f4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a33      	ldr	r2, [pc, #204]	; (8004cf8 <HAL_DMA_Start_IT+0x1f8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a31      	ldr	r2, [pc, #196]	; (8004cfc <HAL_DMA_Start_IT+0x1fc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a30      	ldr	r2, [pc, #192]	; (8004d00 <HAL_DMA_Start_IT+0x200>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2e      	ldr	r2, [pc, #184]	; (8004d04 <HAL_DMA_Start_IT+0x204>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_DMA_Start_IT+0x208>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <HAL_DMA_Start_IT+0x20c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <HAL_DMA_Start_IT+0x210>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <HAL_DMA_Start_IT+0x214>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_DMA_Start_IT+0x218>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <HAL_DMA_Start_IT+0x21c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <HAL_DMA_Start_IT+0x220>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <HAL_DMA_Start_IT+0x224>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <HAL_DMA_Start_IT+0x228>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_DMA_Start_IT+0x22c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_Start_IT+0x1bc>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_DMA_Start_IT+0x230>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_DMA_Start_IT+0x1c0>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_DMA_Start_IT+0x1c2>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d036      	beq.n	8004d34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 021e 	bic.w	r2, r3, #30
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0216 	orr.w	r2, r2, #22
 8004cd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03e      	beq.n	8004d60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0208 	orr.w	r2, r2, #8
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e035      	b.n	8004d60 <HAL_DMA_Start_IT+0x260>
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020e 	bic.w	r2, r3, #14
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 020a 	orr.w	r2, r2, #10
 8004d46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0204 	orr.w	r2, r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <HAL_DMA_Start_IT+0x474>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d072      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a82      	ldr	r2, [pc, #520]	; (8004f78 <HAL_DMA_Start_IT+0x478>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d06d      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a80      	ldr	r2, [pc, #512]	; (8004f7c <HAL_DMA_Start_IT+0x47c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d068      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7f      	ldr	r2, [pc, #508]	; (8004f80 <HAL_DMA_Start_IT+0x480>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d063      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7d      	ldr	r2, [pc, #500]	; (8004f84 <HAL_DMA_Start_IT+0x484>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d05e      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7c      	ldr	r2, [pc, #496]	; (8004f88 <HAL_DMA_Start_IT+0x488>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d059      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a7a      	ldr	r2, [pc, #488]	; (8004f8c <HAL_DMA_Start_IT+0x48c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d054      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a79      	ldr	r2, [pc, #484]	; (8004f90 <HAL_DMA_Start_IT+0x490>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d04f      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a77      	ldr	r2, [pc, #476]	; (8004f94 <HAL_DMA_Start_IT+0x494>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d04a      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a76      	ldr	r2, [pc, #472]	; (8004f98 <HAL_DMA_Start_IT+0x498>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d045      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a74      	ldr	r2, [pc, #464]	; (8004f9c <HAL_DMA_Start_IT+0x49c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d040      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a73      	ldr	r2, [pc, #460]	; (8004fa0 <HAL_DMA_Start_IT+0x4a0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d03b      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a71      	ldr	r2, [pc, #452]	; (8004fa4 <HAL_DMA_Start_IT+0x4a4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d036      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a70      	ldr	r2, [pc, #448]	; (8004fa8 <HAL_DMA_Start_IT+0x4a8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d031      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6e      	ldr	r2, [pc, #440]	; (8004fac <HAL_DMA_Start_IT+0x4ac>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02c      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	; (8004fb0 <HAL_DMA_Start_IT+0x4b0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d027      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <HAL_DMA_Start_IT+0x4b4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6a      	ldr	r2, [pc, #424]	; (8004fb8 <HAL_DMA_Start_IT+0x4b8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a68      	ldr	r2, [pc, #416]	; (8004fbc <HAL_DMA_Start_IT+0x4bc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a67      	ldr	r2, [pc, #412]	; (8004fc0 <HAL_DMA_Start_IT+0x4c0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_DMA_Start_IT+0x4c4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a64      	ldr	r2, [pc, #400]	; (8004fc8 <HAL_DMA_Start_IT+0x4c8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a62      	ldr	r2, [pc, #392]	; (8004fcc <HAL_DMA_Start_IT+0x4cc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_DMA_Start_IT+0x350>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a61      	ldr	r2, [pc, #388]	; (8004fd0 <HAL_DMA_Start_IT+0x4d0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA_Start_IT+0x354>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_DMA_Start_IT+0x356>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01a      	beq.n	8004e90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <HAL_DMA_Start_IT+0x474>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d04a      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <HAL_DMA_Start_IT+0x478>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d045      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <HAL_DMA_Start_IT+0x47c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d040      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <HAL_DMA_Start_IT+0x480>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d03b      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <HAL_DMA_Start_IT+0x484>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d036      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <HAL_DMA_Start_IT+0x488>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d031      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <HAL_DMA_Start_IT+0x48c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02c      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2d      	ldr	r2, [pc, #180]	; (8004f90 <HAL_DMA_Start_IT+0x490>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d027      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <HAL_DMA_Start_IT+0x494>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <HAL_DMA_Start_IT+0x498>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d01d      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a28      	ldr	r2, [pc, #160]	; (8004f9c <HAL_DMA_Start_IT+0x49c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <HAL_DMA_Start_IT+0x4a0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <HAL_DMA_Start_IT+0x4a4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <HAL_DMA_Start_IT+0x4a8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	; (8004fac <HAL_DMA_Start_IT+0x4ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_DMA_Start_IT+0x430>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_DMA_Start_IT+0x4b0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d108      	bne.n	8004f42 <HAL_DMA_Start_IT+0x442>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e012      	b.n	8004f68 <HAL_DMA_Start_IT+0x468>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e009      	b.n	8004f68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40020010 	.word	0x40020010
 8004f78:	40020028 	.word	0x40020028
 8004f7c:	40020040 	.word	0x40020040
 8004f80:	40020058 	.word	0x40020058
 8004f84:	40020070 	.word	0x40020070
 8004f88:	40020088 	.word	0x40020088
 8004f8c:	400200a0 	.word	0x400200a0
 8004f90:	400200b8 	.word	0x400200b8
 8004f94:	40020410 	.word	0x40020410
 8004f98:	40020428 	.word	0x40020428
 8004f9c:	40020440 	.word	0x40020440
 8004fa0:	40020458 	.word	0x40020458
 8004fa4:	40020470 	.word	0x40020470
 8004fa8:	40020488 	.word	0x40020488
 8004fac:	400204a0 	.word	0x400204a0
 8004fb0:	400204b8 	.word	0x400204b8
 8004fb4:	58025408 	.word	0x58025408
 8004fb8:	5802541c 	.word	0x5802541c
 8004fbc:	58025430 	.word	0x58025430
 8004fc0:	58025444 	.word	0x58025444
 8004fc4:	58025458 	.word	0x58025458
 8004fc8:	5802546c 	.word	0x5802546c
 8004fcc:	58025480 	.word	0x58025480
 8004fd0:	58025494 	.word	0x58025494

08004fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fe0:	4b67      	ldr	r3, [pc, #412]	; (8005180 <HAL_DMA_IRQHandler+0x1ac>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a67      	ldr	r2, [pc, #412]	; (8005184 <HAL_DMA_IRQHandler+0x1b0>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0a9b      	lsrs	r3, r3, #10
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5f      	ldr	r2, [pc, #380]	; (8005188 <HAL_DMA_IRQHandler+0x1b4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d04a      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_DMA_IRQHandler+0x1b8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d045      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a5c      	ldr	r2, [pc, #368]	; (8005190 <HAL_DMA_IRQHandler+0x1bc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d040      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5a      	ldr	r2, [pc, #360]	; (8005194 <HAL_DMA_IRQHandler+0x1c0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d03b      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a59      	ldr	r2, [pc, #356]	; (8005198 <HAL_DMA_IRQHandler+0x1c4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d036      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a57      	ldr	r2, [pc, #348]	; (800519c <HAL_DMA_IRQHandler+0x1c8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d031      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a56      	ldr	r2, [pc, #344]	; (80051a0 <HAL_DMA_IRQHandler+0x1cc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d02c      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a54      	ldr	r2, [pc, #336]	; (80051a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d027      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a53      	ldr	r2, [pc, #332]	; (80051a8 <HAL_DMA_IRQHandler+0x1d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_DMA_IRQHandler+0x1d8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01d      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <HAL_DMA_IRQHandler+0x1e0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_DMA_IRQHandler+0x1e8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_DMA_IRQHandler+0x1ec>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xd2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_DMA_IRQHandler+0x1f0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_DMA_IRQHandler+0xd6>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_DMA_IRQHandler+0xd8>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 842b 	beq.w	8005908 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2208      	movs	r2, #8
 80050bc:	409a      	lsls	r2, r3
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80a2 	beq.w	800520c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <HAL_DMA_IRQHandler+0x1b4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d04a      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2d      	ldr	r2, [pc, #180]	; (800518c <HAL_DMA_IRQHandler+0x1b8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d045      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <HAL_DMA_IRQHandler+0x1bc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d040      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <HAL_DMA_IRQHandler+0x1c0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03b      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a28      	ldr	r2, [pc, #160]	; (8005198 <HAL_DMA_IRQHandler+0x1c4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d036      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a27      	ldr	r2, [pc, #156]	; (800519c <HAL_DMA_IRQHandler+0x1c8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d031      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <HAL_DMA_IRQHandler+0x1cc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a24      	ldr	r2, [pc, #144]	; (80051a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d027      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <HAL_DMA_IRQHandler+0x1d4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_DMA_IRQHandler+0x1d8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_DMA_IRQHandler+0x1e0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <HAL_DMA_IRQHandler+0x1e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_DMA_IRQHandler+0x1ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_DMA_IRQHandler+0x194>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_DMA_IRQHandler+0x1f0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d12f      	bne.n	80051c8 <HAL_DMA_IRQHandler+0x1f4>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e02e      	b.n	80051dc <HAL_DMA_IRQHandler+0x208>
 800517e:	bf00      	nop
 8005180:	24000000 	.word	0x24000000
 8005184:	1b4e81b5 	.word	0x1b4e81b5
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0204 	bic.w	r2, r2, #4
 80051ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2208      	movs	r2, #8
 80051fa:	409a      	lsls	r2, r3
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005204:	f043 0201 	orr.w	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d06e      	beq.n	8005300 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a69      	ldr	r2, [pc, #420]	; (80053cc <HAL_DMA_IRQHandler+0x3f8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d04a      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a67      	ldr	r2, [pc, #412]	; (80053d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d045      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a66      	ldr	r2, [pc, #408]	; (80053d4 <HAL_DMA_IRQHandler+0x400>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d040      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a64      	ldr	r2, [pc, #400]	; (80053d8 <HAL_DMA_IRQHandler+0x404>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d03b      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a63      	ldr	r2, [pc, #396]	; (80053dc <HAL_DMA_IRQHandler+0x408>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d036      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a61      	ldr	r2, [pc, #388]	; (80053e0 <HAL_DMA_IRQHandler+0x40c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d031      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a60      	ldr	r2, [pc, #384]	; (80053e4 <HAL_DMA_IRQHandler+0x410>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d02c      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5e      	ldr	r2, [pc, #376]	; (80053e8 <HAL_DMA_IRQHandler+0x414>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d027      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5d      	ldr	r2, [pc, #372]	; (80053ec <HAL_DMA_IRQHandler+0x418>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5b      	ldr	r2, [pc, #364]	; (80053f0 <HAL_DMA_IRQHandler+0x41c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01d      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5a      	ldr	r2, [pc, #360]	; (80053f4 <HAL_DMA_IRQHandler+0x420>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_DMA_IRQHandler+0x424>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a57      	ldr	r2, [pc, #348]	; (80053fc <HAL_DMA_IRQHandler+0x428>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a55      	ldr	r2, [pc, #340]	; (8005400 <HAL_DMA_IRQHandler+0x42c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a54      	ldr	r2, [pc, #336]	; (8005404 <HAL_DMA_IRQHandler+0x430>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x2ee>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_DMA_IRQHandler+0x434>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10a      	bne.n	80052d8 <HAL_DMA_IRQHandler+0x304>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e003      	b.n	80052e0 <HAL_DMA_IRQHandler+0x30c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0202 	orr.w	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2204      	movs	r2, #4
 800530a:	409a      	lsls	r2, r3
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 808f 	beq.w	8005434 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <HAL_DMA_IRQHandler+0x3f8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d04a      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_DMA_IRQHandler+0x400>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d040      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <HAL_DMA_IRQHandler+0x404>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a26      	ldr	r2, [pc, #152]	; (80053dc <HAL_DMA_IRQHandler+0x408>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d036      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a24      	ldr	r2, [pc, #144]	; (80053e0 <HAL_DMA_IRQHandler+0x40c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <HAL_DMA_IRQHandler+0x410>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d02c      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a21      	ldr	r2, [pc, #132]	; (80053e8 <HAL_DMA_IRQHandler+0x414>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a20      	ldr	r2, [pc, #128]	; (80053ec <HAL_DMA_IRQHandler+0x418>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_DMA_IRQHandler+0x41c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <HAL_DMA_IRQHandler+0x420>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_DMA_IRQHandler+0x424>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_DMA_IRQHandler+0x428>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_DMA_IRQHandler+0x42c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_DMA_IRQHandler+0x430>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x3e2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_DMA_IRQHandler+0x434>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d12a      	bne.n	800540c <HAL_DMA_IRQHandler+0x438>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e023      	b.n	8005414 <HAL_DMA_IRQHandler+0x440>
 80053cc:	40020010 	.word	0x40020010
 80053d0:	40020028 	.word	0x40020028
 80053d4:	40020040 	.word	0x40020040
 80053d8:	40020058 	.word	0x40020058
 80053dc:	40020070 	.word	0x40020070
 80053e0:	40020088 	.word	0x40020088
 80053e4:	400200a0 	.word	0x400200a0
 80053e8:	400200b8 	.word	0x400200b8
 80053ec:	40020410 	.word	0x40020410
 80053f0:	40020428 	.word	0x40020428
 80053f4:	40020440 	.word	0x40020440
 80053f8:	40020458 	.word	0x40020458
 80053fc:	40020470 	.word	0x40020470
 8005400:	40020488 	.word	0x40020488
 8005404:	400204a0 	.word	0x400204a0
 8005408:	400204b8 	.word	0x400204b8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2204      	movs	r2, #4
 8005422:	409a      	lsls	r2, r3
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f043 0204 	orr.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2210      	movs	r2, #16
 800543e:	409a      	lsls	r2, r3
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a6 	beq.w	8005596 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a85      	ldr	r2, [pc, #532]	; (8005664 <HAL_DMA_IRQHandler+0x690>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d04a      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a83      	ldr	r2, [pc, #524]	; (8005668 <HAL_DMA_IRQHandler+0x694>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d045      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a82      	ldr	r2, [pc, #520]	; (800566c <HAL_DMA_IRQHandler+0x698>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d040      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a80      	ldr	r2, [pc, #512]	; (8005670 <HAL_DMA_IRQHandler+0x69c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d03b      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a7f      	ldr	r2, [pc, #508]	; (8005674 <HAL_DMA_IRQHandler+0x6a0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d036      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7d      	ldr	r2, [pc, #500]	; (8005678 <HAL_DMA_IRQHandler+0x6a4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d031      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7c      	ldr	r2, [pc, #496]	; (800567c <HAL_DMA_IRQHandler+0x6a8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d02c      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a7a      	ldr	r2, [pc, #488]	; (8005680 <HAL_DMA_IRQHandler+0x6ac>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d027      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a79      	ldr	r2, [pc, #484]	; (8005684 <HAL_DMA_IRQHandler+0x6b0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a77      	ldr	r2, [pc, #476]	; (8005688 <HAL_DMA_IRQHandler+0x6b4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01d      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a76      	ldr	r2, [pc, #472]	; (800568c <HAL_DMA_IRQHandler+0x6b8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a74      	ldr	r2, [pc, #464]	; (8005690 <HAL_DMA_IRQHandler+0x6bc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a73      	ldr	r2, [pc, #460]	; (8005694 <HAL_DMA_IRQHandler+0x6c0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a71      	ldr	r2, [pc, #452]	; (8005698 <HAL_DMA_IRQHandler+0x6c4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a70      	ldr	r2, [pc, #448]	; (800569c <HAL_DMA_IRQHandler+0x6c8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_DMA_IRQHandler+0x516>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a6e      	ldr	r2, [pc, #440]	; (80056a0 <HAL_DMA_IRQHandler+0x6cc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10a      	bne.n	8005500 <HAL_DMA_IRQHandler+0x52c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e009      	b.n	8005514 <HAL_DMA_IRQHandler+0x540>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03e      	beq.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2210      	movs	r2, #16
 8005522:	409a      	lsls	r2, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d108      	bne.n	8005556 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d024      	beq.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	4798      	blx	r3
 8005554:	e01f      	b.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01b      	beq.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
 8005566:	e016      	b.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0208 	bic.w	r2, r2, #8
 8005584:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2220      	movs	r2, #32
 80055a0:	409a      	lsls	r2, r3
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8110 	beq.w	80057cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2c      	ldr	r2, [pc, #176]	; (8005664 <HAL_DMA_IRQHandler+0x690>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d04a      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2b      	ldr	r2, [pc, #172]	; (8005668 <HAL_DMA_IRQHandler+0x694>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d045      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a29      	ldr	r2, [pc, #164]	; (800566c <HAL_DMA_IRQHandler+0x698>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d040      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a28      	ldr	r2, [pc, #160]	; (8005670 <HAL_DMA_IRQHandler+0x69c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d03b      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a26      	ldr	r2, [pc, #152]	; (8005674 <HAL_DMA_IRQHandler+0x6a0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d036      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a25      	ldr	r2, [pc, #148]	; (8005678 <HAL_DMA_IRQHandler+0x6a4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d031      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_DMA_IRQHandler+0x6a8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d02c      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a22      	ldr	r2, [pc, #136]	; (8005680 <HAL_DMA_IRQHandler+0x6ac>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d027      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <HAL_DMA_IRQHandler+0x6b0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <HAL_DMA_IRQHandler+0x6b4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d01d      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <HAL_DMA_IRQHandler+0x6b8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_DMA_IRQHandler+0x6bc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <HAL_DMA_IRQHandler+0x6c0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_DMA_IRQHandler+0x6c4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a17      	ldr	r2, [pc, #92]	; (800569c <HAL_DMA_IRQHandler+0x6c8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_DMA_IRQHandler+0x678>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <HAL_DMA_IRQHandler+0x6cc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d12b      	bne.n	80056a4 <HAL_DMA_IRQHandler+0x6d0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf14      	ite	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2300      	moveq	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	e02a      	b.n	80056b8 <HAL_DMA_IRQHandler+0x6e4>
 8005662:	bf00      	nop
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8087 	beq.w	80057cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2220      	movs	r2, #32
 80056c8:	409a      	lsls	r2, r3
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d139      	bne.n	800574e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0216 	bic.w	r2, r2, #22
 80056e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_DMA_IRQHandler+0x736>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0208 	bic.w	r2, r2, #8
 8005718:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	223f      	movs	r2, #63	; 0x3f
 8005724:	409a      	lsls	r2, r3
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 834a 	beq.w	8005dd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
          }
          return;
 800574c:	e344      	b.n	8005dd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d018      	beq.n	800578e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d108      	bne.n	800577c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02c      	beq.n	80057cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
 800577a:	e027      	b.n	80057cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d023      	beq.n	80057cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e01e      	b.n	80057cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10f      	bne.n	80057bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0210 	bic.w	r2, r2, #16
 80057aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8306 	beq.w	8005de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8088 	beq.w	80058f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2204      	movs	r2, #4
 80057e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7a      	ldr	r2, [pc, #488]	; (80059dc <HAL_DMA_IRQHandler+0xa08>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04a      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a79      	ldr	r2, [pc, #484]	; (80059e0 <HAL_DMA_IRQHandler+0xa0c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d045      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a77      	ldr	r2, [pc, #476]	; (80059e4 <HAL_DMA_IRQHandler+0xa10>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d040      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a76      	ldr	r2, [pc, #472]	; (80059e8 <HAL_DMA_IRQHandler+0xa14>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d03b      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a74      	ldr	r2, [pc, #464]	; (80059ec <HAL_DMA_IRQHandler+0xa18>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d036      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a73      	ldr	r2, [pc, #460]	; (80059f0 <HAL_DMA_IRQHandler+0xa1c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d031      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a71      	ldr	r2, [pc, #452]	; (80059f4 <HAL_DMA_IRQHandler+0xa20>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02c      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a70      	ldr	r2, [pc, #448]	; (80059f8 <HAL_DMA_IRQHandler+0xa24>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d027      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6e      	ldr	r2, [pc, #440]	; (80059fc <HAL_DMA_IRQHandler+0xa28>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6d      	ldr	r2, [pc, #436]	; (8005a00 <HAL_DMA_IRQHandler+0xa2c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6b      	ldr	r2, [pc, #428]	; (8005a04 <HAL_DMA_IRQHandler+0xa30>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6a      	ldr	r2, [pc, #424]	; (8005a08 <HAL_DMA_IRQHandler+0xa34>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a68      	ldr	r2, [pc, #416]	; (8005a0c <HAL_DMA_IRQHandler+0xa38>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a67      	ldr	r2, [pc, #412]	; (8005a10 <HAL_DMA_IRQHandler+0xa3c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a65      	ldr	r2, [pc, #404]	; (8005a14 <HAL_DMA_IRQHandler+0xa40>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_IRQHandler+0x8b8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a64      	ldr	r2, [pc, #400]	; (8005a18 <HAL_DMA_IRQHandler+0xa44>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d108      	bne.n	800589e <HAL_DMA_IRQHandler+0x8ca>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e007      	b.n	80058ae <HAL_DMA_IRQHandler+0x8da>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d307      	bcc.n	80058ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f2      	bne.n	80058ae <HAL_DMA_IRQHandler+0x8da>
 80058c8:	e000      	b.n	80058cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80058ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d004      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2203      	movs	r2, #3
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80058e2:	e003      	b.n	80058ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8272 	beq.w	8005de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	e26c      	b.n	8005de2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a43      	ldr	r2, [pc, #268]	; (8005a1c <HAL_DMA_IRQHandler+0xa48>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a42      	ldr	r2, [pc, #264]	; (8005a20 <HAL_DMA_IRQHandler+0xa4c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <HAL_DMA_IRQHandler+0xa50>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <HAL_DMA_IRQHandler+0xa54>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3d      	ldr	r2, [pc, #244]	; (8005a2c <HAL_DMA_IRQHandler+0xa58>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <HAL_DMA_IRQHandler+0xa5c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <HAL_DMA_IRQHandler+0xa60>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_DMA_IRQHandler+0x984>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a39      	ldr	r2, [pc, #228]	; (8005a38 <HAL_DMA_IRQHandler+0xa64>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d101      	bne.n	800595c <HAL_DMA_IRQHandler+0x988>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_DMA_IRQHandler+0x98a>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 823f 	beq.w	8005de2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2204      	movs	r2, #4
 8005976:	409a      	lsls	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80cd 	beq.w	8005b1c <HAL_DMA_IRQHandler+0xb48>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80c7 	beq.w	8005b1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2204      	movs	r2, #4
 8005998:	409a      	lsls	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d049      	beq.n	8005a3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8210 	beq.w	8005ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059c4:	e20a      	b.n	8005ddc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8206 	beq.w	8005ddc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059d8:	e200      	b.n	8005ddc <HAL_DMA_IRQHandler+0xe08>
 80059da:	bf00      	nop
 80059dc:	40020010 	.word	0x40020010
 80059e0:	40020028 	.word	0x40020028
 80059e4:	40020040 	.word	0x40020040
 80059e8:	40020058 	.word	0x40020058
 80059ec:	40020070 	.word	0x40020070
 80059f0:	40020088 	.word	0x40020088
 80059f4:	400200a0 	.word	0x400200a0
 80059f8:	400200b8 	.word	0x400200b8
 80059fc:	40020410 	.word	0x40020410
 8005a00:	40020428 	.word	0x40020428
 8005a04:	40020440 	.word	0x40020440
 8005a08:	40020458 	.word	0x40020458
 8005a0c:	40020470 	.word	0x40020470
 8005a10:	40020488 	.word	0x40020488
 8005a14:	400204a0 	.word	0x400204a0
 8005a18:	400204b8 	.word	0x400204b8
 8005a1c:	58025408 	.word	0x58025408
 8005a20:	5802541c 	.word	0x5802541c
 8005a24:	58025430 	.word	0x58025430
 8005a28:	58025444 	.word	0x58025444
 8005a2c:	58025458 	.word	0x58025458
 8005a30:	5802546c 	.word	0x5802546c
 8005a34:	58025480 	.word	0x58025480
 8005a38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d160      	bne.n	8005b08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a7f      	ldr	r2, [pc, #508]	; (8005c48 <HAL_DMA_IRQHandler+0xc74>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7d      	ldr	r2, [pc, #500]	; (8005c4c <HAL_DMA_IRQHandler+0xc78>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7c      	ldr	r2, [pc, #496]	; (8005c50 <HAL_DMA_IRQHandler+0xc7c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7a      	ldr	r2, [pc, #488]	; (8005c54 <HAL_DMA_IRQHandler+0xc80>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a79      	ldr	r2, [pc, #484]	; (8005c58 <HAL_DMA_IRQHandler+0xc84>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a77      	ldr	r2, [pc, #476]	; (8005c5c <HAL_DMA_IRQHandler+0xc88>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a76      	ldr	r2, [pc, #472]	; (8005c60 <HAL_DMA_IRQHandler+0xc8c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a74      	ldr	r2, [pc, #464]	; (8005c64 <HAL_DMA_IRQHandler+0xc90>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a73      	ldr	r2, [pc, #460]	; (8005c68 <HAL_DMA_IRQHandler+0xc94>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a71      	ldr	r2, [pc, #452]	; (8005c6c <HAL_DMA_IRQHandler+0xc98>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a70      	ldr	r2, [pc, #448]	; (8005c70 <HAL_DMA_IRQHandler+0xc9c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a6e      	ldr	r2, [pc, #440]	; (8005c74 <HAL_DMA_IRQHandler+0xca0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6d      	ldr	r2, [pc, #436]	; (8005c78 <HAL_DMA_IRQHandler+0xca4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6b      	ldr	r2, [pc, #428]	; (8005c7c <HAL_DMA_IRQHandler+0xca8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6a      	ldr	r2, [pc, #424]	; (8005c80 <HAL_DMA_IRQHandler+0xcac>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xb12>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a68      	ldr	r2, [pc, #416]	; (8005c84 <HAL_DMA_IRQHandler+0xcb0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <HAL_DMA_IRQHandler+0xb24>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0208 	bic.w	r2, r2, #8
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <HAL_DMA_IRQHandler+0xb34>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0204 	bic.w	r2, r2, #4
 8005b06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8165 	beq.w	8005ddc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b1a:	e15f      	b.n	8005ddc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	2202      	movs	r2, #2
 8005b26:	409a      	lsls	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80c5 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xce8>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80bf 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2202      	movs	r2, #2
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d018      	beq.n	8005b8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 813a 	beq.w	8005de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b74:	e134      	b.n	8005de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8130 	beq.w	8005de0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b88:	e12a      	b.n	8005de0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8089 	bne.w	8005ca8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <HAL_DMA_IRQHandler+0xc74>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d04a      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <HAL_DMA_IRQHandler+0xc78>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d045      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <HAL_DMA_IRQHandler+0xc7c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d040      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <HAL_DMA_IRQHandler+0xc80>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d03b      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <HAL_DMA_IRQHandler+0xc84>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d036      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a23      	ldr	r2, [pc, #140]	; (8005c5c <HAL_DMA_IRQHandler+0xc88>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d031      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <HAL_DMA_IRQHandler+0xc8c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d02c      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <HAL_DMA_IRQHandler+0xc90>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d027      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <HAL_DMA_IRQHandler+0xc94>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <HAL_DMA_IRQHandler+0xc98>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_DMA_IRQHandler+0xc9c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <HAL_DMA_IRQHandler+0xca0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_DMA_IRQHandler+0xca4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <HAL_DMA_IRQHandler+0xca8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <HAL_DMA_IRQHandler+0xcac>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_IRQHandler+0xc62>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a14      	ldr	r2, [pc, #80]	; (8005c84 <HAL_DMA_IRQHandler+0xcb0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d128      	bne.n	8005c88 <HAL_DMA_IRQHandler+0xcb4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0214 	bic.w	r2, r2, #20
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e027      	b.n	8005c98 <HAL_DMA_IRQHandler+0xcc4>
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 020a 	bic.w	r2, r2, #10
 8005c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8097 	beq.w	8005de0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cba:	e091      	b.n	8005de0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8088 	beq.w	8005de2 <HAL_DMA_IRQHandler+0xe0e>
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8082 	beq.w	8005de2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a41      	ldr	r2, [pc, #260]	; (8005de8 <HAL_DMA_IRQHandler+0xe14>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04a      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3f      	ldr	r2, [pc, #252]	; (8005dec <HAL_DMA_IRQHandler+0xe18>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d045      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a3e      	ldr	r2, [pc, #248]	; (8005df0 <HAL_DMA_IRQHandler+0xe1c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d040      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <HAL_DMA_IRQHandler+0xe20>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d03b      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3b      	ldr	r2, [pc, #236]	; (8005df8 <HAL_DMA_IRQHandler+0xe24>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d036      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a39      	ldr	r2, [pc, #228]	; (8005dfc <HAL_DMA_IRQHandler+0xe28>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a38      	ldr	r2, [pc, #224]	; (8005e00 <HAL_DMA_IRQHandler+0xe2c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d02c      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a36      	ldr	r2, [pc, #216]	; (8005e04 <HAL_DMA_IRQHandler+0xe30>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <HAL_DMA_IRQHandler+0xe34>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a33      	ldr	r2, [pc, #204]	; (8005e0c <HAL_DMA_IRQHandler+0xe38>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a32      	ldr	r2, [pc, #200]	; (8005e10 <HAL_DMA_IRQHandler+0xe3c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a30      	ldr	r2, [pc, #192]	; (8005e14 <HAL_DMA_IRQHandler+0xe40>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2f      	ldr	r2, [pc, #188]	; (8005e18 <HAL_DMA_IRQHandler+0xe44>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2d      	ldr	r2, [pc, #180]	; (8005e1c <HAL_DMA_IRQHandler+0xe48>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <HAL_DMA_IRQHandler+0xe4c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xdaa>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <HAL_DMA_IRQHandler+0xe50>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d108      	bne.n	8005d90 <HAL_DMA_IRQHandler+0xdbc>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 021c 	bic.w	r2, r2, #28
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e007      	b.n	8005da0 <HAL_DMA_IRQHandler+0xdcc>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 020e 	bic.w	r2, r2, #14
 8005d9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2201      	movs	r2, #1
 8005daa:	409a      	lsls	r2, r3
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
 8005dd6:	e004      	b.n	8005de2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005dd8:	bf00      	nop
 8005dda:	e002      	b.n	8005de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40020010 	.word	0x40020010
 8005dec:	40020028 	.word	0x40020028
 8005df0:	40020040 	.word	0x40020040
 8005df4:	40020058 	.word	0x40020058
 8005df8:	40020070 	.word	0x40020070
 8005dfc:	40020088 	.word	0x40020088
 8005e00:	400200a0 	.word	0x400200a0
 8005e04:	400200b8 	.word	0x400200b8
 8005e08:	40020410 	.word	0x40020410
 8005e0c:	40020428 	.word	0x40020428
 8005e10:	40020440 	.word	0x40020440
 8005e14:	40020458 	.word	0x40020458
 8005e18:	40020470 	.word	0x40020470
 8005e1c:	40020488 	.word	0x40020488
 8005e20:	400204a0 	.word	0x400204a0
 8005e24:	400204b8 	.word	0x400204b8

08005e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a7f      	ldr	r2, [pc, #508]	; (8006044 <DMA_SetConfig+0x21c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d072      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a7d      	ldr	r2, [pc, #500]	; (8006048 <DMA_SetConfig+0x220>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d06d      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7c      	ldr	r2, [pc, #496]	; (800604c <DMA_SetConfig+0x224>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d068      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <DMA_SetConfig+0x228>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d063      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a79      	ldr	r2, [pc, #484]	; (8006054 <DMA_SetConfig+0x22c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d05e      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a77      	ldr	r2, [pc, #476]	; (8006058 <DMA_SetConfig+0x230>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d059      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a76      	ldr	r2, [pc, #472]	; (800605c <DMA_SetConfig+0x234>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d054      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a74      	ldr	r2, [pc, #464]	; (8006060 <DMA_SetConfig+0x238>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d04f      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a73      	ldr	r2, [pc, #460]	; (8006064 <DMA_SetConfig+0x23c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d04a      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a71      	ldr	r2, [pc, #452]	; (8006068 <DMA_SetConfig+0x240>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d045      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a70      	ldr	r2, [pc, #448]	; (800606c <DMA_SetConfig+0x244>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d040      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6e      	ldr	r2, [pc, #440]	; (8006070 <DMA_SetConfig+0x248>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d03b      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6d      	ldr	r2, [pc, #436]	; (8006074 <DMA_SetConfig+0x24c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d036      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6b      	ldr	r2, [pc, #428]	; (8006078 <DMA_SetConfig+0x250>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d031      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6a      	ldr	r2, [pc, #424]	; (800607c <DMA_SetConfig+0x254>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d02c      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a68      	ldr	r2, [pc, #416]	; (8006080 <DMA_SetConfig+0x258>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d027      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a67      	ldr	r2, [pc, #412]	; (8006084 <DMA_SetConfig+0x25c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <DMA_SetConfig+0x260>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a64      	ldr	r2, [pc, #400]	; (800608c <DMA_SetConfig+0x264>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a62      	ldr	r2, [pc, #392]	; (8006090 <DMA_SetConfig+0x268>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a61      	ldr	r2, [pc, #388]	; (8006094 <DMA_SetConfig+0x26c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5f      	ldr	r2, [pc, #380]	; (8006098 <DMA_SetConfig+0x270>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a5e      	ldr	r2, [pc, #376]	; (800609c <DMA_SetConfig+0x274>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <DMA_SetConfig+0x10a>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5c      	ldr	r2, [pc, #368]	; (80060a0 <DMA_SetConfig+0x278>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <DMA_SetConfig+0x10e>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <DMA_SetConfig+0x110>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a39      	ldr	r2, [pc, #228]	; (8006044 <DMA_SetConfig+0x21c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d04a      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a38      	ldr	r2, [pc, #224]	; (8006048 <DMA_SetConfig+0x220>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d045      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a36      	ldr	r2, [pc, #216]	; (800604c <DMA_SetConfig+0x224>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d040      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a35      	ldr	r2, [pc, #212]	; (8006050 <DMA_SetConfig+0x228>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d03b      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a33      	ldr	r2, [pc, #204]	; (8006054 <DMA_SetConfig+0x22c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d036      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a32      	ldr	r2, [pc, #200]	; (8006058 <DMA_SetConfig+0x230>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d031      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a30      	ldr	r2, [pc, #192]	; (800605c <DMA_SetConfig+0x234>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d02c      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	; (8006060 <DMA_SetConfig+0x238>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d027      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <DMA_SetConfig+0x23c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2c      	ldr	r2, [pc, #176]	; (8006068 <DMA_SetConfig+0x240>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2a      	ldr	r2, [pc, #168]	; (800606c <DMA_SetConfig+0x244>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a29      	ldr	r2, [pc, #164]	; (8006070 <DMA_SetConfig+0x248>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <DMA_SetConfig+0x24c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a26      	ldr	r2, [pc, #152]	; (8006078 <DMA_SetConfig+0x250>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a24      	ldr	r2, [pc, #144]	; (800607c <DMA_SetConfig+0x254>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <DMA_SetConfig+0x1d0>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a23      	ldr	r2, [pc, #140]	; (8006080 <DMA_SetConfig+0x258>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <DMA_SetConfig+0x1d4>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <DMA_SetConfig+0x1d6>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d059      	beq.n	80060b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	223f      	movs	r2, #63	; 0x3f
 800600c:	409a      	lsls	r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006020:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d138      	bne.n	80060a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006042:	e086      	b.n	8006152 <DMA_SetConfig+0x32a>
 8006044:	40020010 	.word	0x40020010
 8006048:	40020028 	.word	0x40020028
 800604c:	40020040 	.word	0x40020040
 8006050:	40020058 	.word	0x40020058
 8006054:	40020070 	.word	0x40020070
 8006058:	40020088 	.word	0x40020088
 800605c:	400200a0 	.word	0x400200a0
 8006060:	400200b8 	.word	0x400200b8
 8006064:	40020410 	.word	0x40020410
 8006068:	40020428 	.word	0x40020428
 800606c:	40020440 	.word	0x40020440
 8006070:	40020458 	.word	0x40020458
 8006074:	40020470 	.word	0x40020470
 8006078:	40020488 	.word	0x40020488
 800607c:	400204a0 	.word	0x400204a0
 8006080:	400204b8 	.word	0x400204b8
 8006084:	58025408 	.word	0x58025408
 8006088:	5802541c 	.word	0x5802541c
 800608c:	58025430 	.word	0x58025430
 8006090:	58025444 	.word	0x58025444
 8006094:	58025458 	.word	0x58025458
 8006098:	5802546c 	.word	0x5802546c
 800609c:	58025480 	.word	0x58025480
 80060a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
}
 80060b4:	e04d      	b.n	8006152 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a29      	ldr	r2, [pc, #164]	; (8006160 <DMA_SetConfig+0x338>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d022      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a27      	ldr	r2, [pc, #156]	; (8006164 <DMA_SetConfig+0x33c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01d      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <DMA_SetConfig+0x340>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a24      	ldr	r2, [pc, #144]	; (800616c <DMA_SetConfig+0x344>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a23      	ldr	r2, [pc, #140]	; (8006170 <DMA_SetConfig+0x348>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a21      	ldr	r2, [pc, #132]	; (8006174 <DMA_SetConfig+0x34c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a20      	ldr	r2, [pc, #128]	; (8006178 <DMA_SetConfig+0x350>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <DMA_SetConfig+0x2de>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <DMA_SetConfig+0x354>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <DMA_SetConfig+0x2e2>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <DMA_SetConfig+0x2e4>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d108      	bne.n	8006142 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	60da      	str	r2, [r3, #12]
}
 8006140:	e007      	b.n	8006152 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	58025408 	.word	0x58025408
 8006164:	5802541c 	.word	0x5802541c
 8006168:	58025430 	.word	0x58025430
 800616c:	58025444 	.word	0x58025444
 8006170:	58025458 	.word	0x58025458
 8006174:	5802546c 	.word	0x5802546c
 8006178:	58025480 	.word	0x58025480
 800617c:	58025494 	.word	0x58025494

08006180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a42      	ldr	r2, [pc, #264]	; (8006298 <DMA_CalcBaseAndBitshift+0x118>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a41      	ldr	r2, [pc, #260]	; (800629c <DMA_CalcBaseAndBitshift+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3f      	ldr	r2, [pc, #252]	; (80062a0 <DMA_CalcBaseAndBitshift+0x120>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3e      	ldr	r2, [pc, #248]	; (80062a4 <DMA_CalcBaseAndBitshift+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <DMA_CalcBaseAndBitshift+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3b      	ldr	r2, [pc, #236]	; (80062ac <DMA_CalcBaseAndBitshift+0x12c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <DMA_CalcBaseAndBitshift+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a38      	ldr	r2, [pc, #224]	; (80062b4 <DMA_CalcBaseAndBitshift+0x134>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a36      	ldr	r2, [pc, #216]	; (80062b8 <DMA_CalcBaseAndBitshift+0x138>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a35      	ldr	r2, [pc, #212]	; (80062bc <DMA_CalcBaseAndBitshift+0x13c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a33      	ldr	r2, [pc, #204]	; (80062c0 <DMA_CalcBaseAndBitshift+0x140>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a32      	ldr	r2, [pc, #200]	; (80062c4 <DMA_CalcBaseAndBitshift+0x144>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <DMA_CalcBaseAndBitshift+0x148>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <DMA_CalcBaseAndBitshift+0x14c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2d      	ldr	r2, [pc, #180]	; (80062d0 <DMA_CalcBaseAndBitshift+0x150>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <DMA_CalcBaseAndBitshift+0xa8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <DMA_CalcBaseAndBitshift+0x154>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <DMA_CalcBaseAndBitshift+0xac>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <DMA_CalcBaseAndBitshift+0xae>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d024      	beq.n	800627c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	3b10      	subs	r3, #16
 800623a:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <DMA_CalcBaseAndBitshift+0x158>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	4a24      	ldr	r2, [pc, #144]	; (80062dc <DMA_CalcBaseAndBitshift+0x15c>)
 800624c:	5cd3      	ldrb	r3, [r2, r3]
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d908      	bls.n	800626c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <DMA_CalcBaseAndBitshift+0x160>)
 8006262:	4013      	ands	r3, r2
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	659a      	str	r2, [r3, #88]	; 0x58
 800626a:	e00d      	b.n	8006288 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <DMA_CalcBaseAndBitshift+0x160>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6593      	str	r3, [r2, #88]	; 0x58
 800627a:	e005      	b.n	8006288 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40020010 	.word	0x40020010
 800629c:	40020028 	.word	0x40020028
 80062a0:	40020040 	.word	0x40020040
 80062a4:	40020058 	.word	0x40020058
 80062a8:	40020070 	.word	0x40020070
 80062ac:	40020088 	.word	0x40020088
 80062b0:	400200a0 	.word	0x400200a0
 80062b4:	400200b8 	.word	0x400200b8
 80062b8:	40020410 	.word	0x40020410
 80062bc:	40020428 	.word	0x40020428
 80062c0:	40020440 	.word	0x40020440
 80062c4:	40020458 	.word	0x40020458
 80062c8:	40020470 	.word	0x40020470
 80062cc:	40020488 	.word	0x40020488
 80062d0:	400204a0 	.word	0x400204a0
 80062d4:	400204b8 	.word	0x400204b8
 80062d8:	aaaaaaab 	.word	0xaaaaaaab
 80062dc:	080140c0 	.word	0x080140c0
 80062e0:	fffffc00 	.word	0xfffffc00

080062e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d120      	bne.n	800633a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d858      	bhi.n	80063b2 <DMA_CheckFifoParam+0xce>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <DMA_CheckFifoParam+0x24>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	0800632b 	.word	0x0800632b
 8006310:	08006319 	.word	0x08006319
 8006314:	080063b3 	.word	0x080063b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d048      	beq.n	80063b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006328:	e045      	b.n	80063b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006332:	d142      	bne.n	80063ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006338:	e03f      	b.n	80063ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d123      	bne.n	800638c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	2b03      	cmp	r3, #3
 800634a:	d838      	bhi.n	80063be <DMA_CheckFifoParam+0xda>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <DMA_CheckFifoParam+0x70>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	0800636b 	.word	0x0800636b
 800635c:	08006365 	.word	0x08006365
 8006360:	0800637d 	.word	0x0800637d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
        break;
 8006368:	e030      	b.n	80063cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d025      	beq.n	80063c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800637a:	e022      	b.n	80063c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006384:	d11f      	bne.n	80063c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800638a:	e01c      	b.n	80063c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	2b02      	cmp	r3, #2
 8006392:	d902      	bls.n	800639a <DMA_CheckFifoParam+0xb6>
 8006394:	2b03      	cmp	r3, #3
 8006396:	d003      	beq.n	80063a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006398:	e018      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
        break;
 800639e:	e015      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00e      	beq.n	80063ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
    break;
 80063b0:	e00b      	b.n	80063ca <DMA_CheckFifoParam+0xe6>
        break;
 80063b2:	bf00      	nop
 80063b4:	e00a      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        break;
 80063b6:	bf00      	nop
 80063b8:	e008      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        break;
 80063ba:	bf00      	nop
 80063bc:	e006      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        break;
 80063be:	bf00      	nop
 80063c0:	e004      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
        break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <DMA_CheckFifoParam+0xe8>
    break;
 80063ca:	bf00      	nop
    }
  }

  return status;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop

080063dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a38      	ldr	r2, [pc, #224]	; (80064d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a36      	ldr	r2, [pc, #216]	; (80064d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01d      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a35      	ldr	r2, [pc, #212]	; (80064d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a33      	ldr	r2, [pc, #204]	; (80064dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a32      	ldr	r2, [pc, #200]	; (80064e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01a      	beq.n	800647a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3b08      	subs	r3, #8
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a24      	ldr	r2, [pc, #144]	; (80064f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006478:	e024      	b.n	80064c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	3b10      	subs	r3, #16
 8006482:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d806      	bhi.n	80064a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a1b      	ldr	r2, [pc, #108]	; (8006504 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d902      	bls.n	80064a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3308      	adds	r3, #8
 80064a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4b18      	ldr	r3, [pc, #96]	; (8006508 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a16      	ldr	r2, [pc, #88]	; (800650c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80064b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	58025408 	.word	0x58025408
 80064d4:	5802541c 	.word	0x5802541c
 80064d8:	58025430 	.word	0x58025430
 80064dc:	58025444 	.word	0x58025444
 80064e0:	58025458 	.word	0x58025458
 80064e4:	5802546c 	.word	0x5802546c
 80064e8:	58025480 	.word	0x58025480
 80064ec:	58025494 	.word	0x58025494
 80064f0:	cccccccd 	.word	0xcccccccd
 80064f4:	16009600 	.word	0x16009600
 80064f8:	58025880 	.word	0x58025880
 80064fc:	aaaaaaab 	.word	0xaaaaaaab
 8006500:	400204b8 	.word	0x400204b8
 8006504:	4002040f 	.word	0x4002040f
 8006508:	10008200 	.word	0x10008200
 800650c:	40020880 	.word	0x40020880

08006510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d04a      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d847      	bhi.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d022      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a24      	ldr	r2, [pc, #144]	; (80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d01d      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a22      	ldr	r2, [pc, #136]	; (80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d018      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1f      	ldr	r2, [pc, #124]	; (80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00e      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1e      	ldr	r2, [pc, #120]	; (80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006598:	671a      	str	r2, [r3, #112]	; 0x70
 800659a:	e009      	b.n	80065b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	461a      	mov	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a11      	ldr	r2, [pc, #68]	; (80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	2201      	movs	r2, #1
 80065b6:	409a      	lsls	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	58025408 	.word	0x58025408
 80065cc:	5802541c 	.word	0x5802541c
 80065d0:	58025430 	.word	0x58025430
 80065d4:	58025444 	.word	0x58025444
 80065d8:	58025458 	.word	0x58025458
 80065dc:	5802546c 	.word	0x5802546c
 80065e0:	58025480 	.word	0x58025480
 80065e4:	58025494 	.word	0x58025494
 80065e8:	1600963f 	.word	0x1600963f
 80065ec:	58025940 	.word	0x58025940
 80065f0:	1000823f 	.word	0x1000823f
 80065f4:	40020940 	.word	0x40020940

080065f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b098      	sub	sp, #96	; 0x60
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006600:	4a84      	ldr	r2, [pc, #528]	; (8006814 <HAL_FDCAN_Init+0x21c>)
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	4611      	mov	r1, r2
 8006608:	224c      	movs	r2, #76	; 0x4c
 800660a:	4618      	mov	r0, r3
 800660c:	f00c fef2 	bl	80133f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e1c6      	b.n	80069a8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7e      	ldr	r2, [pc, #504]	; (8006818 <HAL_FDCAN_Init+0x220>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d106      	bne.n	8006632 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fbce 	bl	8001de8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0210 	bic.w	r2, r2, #16
 800665a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800665c:	f7fc fa46 	bl	8002aec <HAL_GetTick>
 8006660:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006662:	e014      	b.n	800668e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006664:	f7fc fa42 	bl	8002aec <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b0a      	cmp	r3, #10
 8006670:	d90d      	bls.n	800668e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006678:	f043 0201 	orr.w	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2203      	movs	r2, #3
 8006686:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e18c      	b.n	80069a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d0e3      	beq.n	8006664 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066ac:	f7fc fa1e 	bl	8002aec <HAL_GetTick>
 80066b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80066b2:	e014      	b.n	80066de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80066b4:	f7fc fa1a 	bl	8002aec <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b0a      	cmp	r3, #10
 80066c0:	d90d      	bls.n	80066de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2203      	movs	r2, #3
 80066d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e164      	b.n	80069a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0e3      	beq.n	80066b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0202 	orr.w	r2, r2, #2
 80066fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7c1b      	ldrb	r3, [r3, #16]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d108      	bne.n	8006716 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006712:	619a      	str	r2, [r3, #24]
 8006714:	e007      	b.n	8006726 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006724:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7c5b      	ldrb	r3, [r3, #17]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d108      	bne.n	8006740 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800673c:	619a      	str	r2, [r3, #24]
 800673e:	e007      	b.n	8006750 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800674e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	7c9b      	ldrb	r3, [r3, #18]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d108      	bne.n	800676a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006766:	619a      	str	r2, [r3, #24]
 8006768:	e007      	b.n	800677a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006778:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800679e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0210 	bic.w	r2, r2, #16
 80067ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d108      	bne.n	80067ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0204 	orr.w	r2, r2, #4
 80067c6:	619a      	str	r2, [r3, #24]
 80067c8:	e030      	b.n	800682c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d02c      	beq.n	800682c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d020      	beq.n	800681c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0210 	orr.w	r2, r2, #16
 80067f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d114      	bne.n	800682c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0220 	orr.w	r2, r2, #32
 8006810:	619a      	str	r2, [r3, #24]
 8006812:	e00b      	b.n	800682c <HAL_FDCAN_Init+0x234>
 8006814:	08013f80 	.word	0x08013f80
 8006818:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0220 	orr.w	r2, r2, #32
 800682a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	3b01      	subs	r3, #1
 8006832:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	3b01      	subs	r3, #1
 800683a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800683c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006844:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	3b01      	subs	r3, #1
 800684e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006854:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006856:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006860:	d115      	bne.n	800688e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	3b01      	subs	r3, #1
 800686e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006870:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	3b01      	subs	r3, #1
 8006878:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800687a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	3b01      	subs	r3, #1
 8006884:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800688a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800688c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b4:	4413      	add	r3, r2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d011      	beq.n	80068de <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80068c2:	f023 0107 	bic.w	r1, r3, #7
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	3360      	adds	r3, #96	; 0x60
 80068ce:	443b      	add	r3, r7
 80068d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068ee:	f023 0107 	bic.w	r1, r3, #7
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	3360      	adds	r3, #96	; 0x60
 80068fa:	443b      	add	r3, r7
 80068fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d012      	beq.n	8006938 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800691a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	3360      	adds	r3, #96	; 0x60
 8006926:	443b      	add	r3, r7
 8006928:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800692c:	011a      	lsls	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d012      	beq.n	8006966 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006948:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	3360      	adds	r3, #96	; 0x60
 8006954:	443b      	add	r3, r7
 8006956:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <HAL_FDCAN_Init+0x3b8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d107      	bne.n	8006980 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f022 0203 	bic.w	r2, r2, #3
 800697e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f80b 	bl	80069b4 <FDCAN_CalcultateRamBlockAddresses>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80069a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3760      	adds	r7, #96	; 0x60
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	4000a000 	.word	0x4000a000

080069b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80069ca:	4ba7      	ldr	r3, [pc, #668]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	0091      	lsls	r1, r2, #2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	430b      	orrs	r3, r1
 80069d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	041a      	lsls	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	4413      	add	r3, r2
 8006a00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a0a:	4b97      	ldr	r3, [pc, #604]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	0091      	lsls	r1, r2, #2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	430b      	orrs	r3, r1
 8006a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	041a      	lsls	r2, r3, #16
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006a4c:	4b86      	ldr	r3, [pc, #536]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	0091      	lsls	r1, r2, #2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a66:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	041a      	lsls	r2, r3, #16
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a82:	fb02 f303 	mul.w	r3, r2, r3
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a94:	4b74      	ldr	r3, [pc, #464]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	0091      	lsls	r1, r2, #2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006aae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab6:	041a      	lsls	r2, r3, #16
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006aca:	fb02 f303 	mul.w	r3, r2, r3
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006adc:	4b62      	ldr	r3, [pc, #392]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	0091      	lsls	r1, r2, #2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4413      	add	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006b08:	4b57      	ldr	r3, [pc, #348]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	0091      	lsls	r1, r2, #2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	430b      	orrs	r3, r1
 8006b16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b22:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	041a      	lsls	r2, r3, #16
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006b4a:	4b47      	ldr	r3, [pc, #284]	; (8006c68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0091      	lsls	r1, r2, #2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	430b      	orrs	r3, r1
 8006b58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b64:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	041a      	lsls	r2, r3, #16
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b80:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b88:	061a      	lsls	r2, r3, #24
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	4b34      	ldr	r3, [pc, #208]	; (8006c6c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009a      	lsls	r2, r3, #2
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	441a      	add	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d915      	bls.n	8006c90 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006c64:	e006      	b.n	8006c74 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006c66:	bf00      	nop
 8006c68:	ffff0003 	.word	0xffff0003
 8006c6c:	10002b00 	.word	0x10002b00
 8006c70:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e010      	b.n	8006cb2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e005      	b.n	8006ca4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d3f3      	bcc.n	8006c98 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006cce:	4b86      	ldr	r3, [pc, #536]	; (8006ee8 <HAL_GPIO_Init+0x228>)
 8006cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cd2:	e18c      	b.n	8006fee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	2101      	movs	r1, #1
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 817e 	beq.w	8006fe8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d005      	beq.n	8006d04 <HAL_GPIO_Init+0x44>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d130      	bne.n	8006d66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	2203      	movs	r2, #3
 8006d10:	fa02 f303 	lsl.w	r3, r2, r3
 8006d14:	43db      	mvns	r3, r3
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4013      	ands	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	f003 0201 	and.w	r2, r3, #1
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d017      	beq.n	8006da2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	43db      	mvns	r3, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4013      	ands	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d123      	bne.n	8006df6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	08da      	lsrs	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3208      	adds	r2, #8
 8006db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	220f      	movs	r2, #15
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	08da      	lsrs	r2, r3, #3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3208      	adds	r2, #8
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	2203      	movs	r2, #3
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43db      	mvns	r3, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 0203 	and.w	r2, r3, #3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80d8 	beq.w	8006fe8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e38:	4b2c      	ldr	r3, [pc, #176]	; (8006eec <HAL_GPIO_Init+0x22c>)
 8006e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e3e:	4a2b      	ldr	r2, [pc, #172]	; (8006eec <HAL_GPIO_Init+0x22c>)
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006e48:	4b28      	ldr	r3, [pc, #160]	; (8006eec <HAL_GPIO_Init+0x22c>)
 8006e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e56:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <HAL_GPIO_Init+0x230>)
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	089b      	lsrs	r3, r3, #2
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	220f      	movs	r2, #15
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	43db      	mvns	r3, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4013      	ands	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <HAL_GPIO_Init+0x234>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d04a      	beq.n	8006f18 <HAL_GPIO_Init+0x258>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <HAL_GPIO_Init+0x238>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d02b      	beq.n	8006ee2 <HAL_GPIO_Init+0x222>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <HAL_GPIO_Init+0x23c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d025      	beq.n	8006ede <HAL_GPIO_Init+0x21e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_GPIO_Init+0x240>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01f      	beq.n	8006eda <HAL_GPIO_Init+0x21a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <HAL_GPIO_Init+0x244>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d019      	beq.n	8006ed6 <HAL_GPIO_Init+0x216>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a18      	ldr	r2, [pc, #96]	; (8006f08 <HAL_GPIO_Init+0x248>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_GPIO_Init+0x212>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <HAL_GPIO_Init+0x24c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00d      	beq.n	8006ece <HAL_GPIO_Init+0x20e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <HAL_GPIO_Init+0x250>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <HAL_GPIO_Init+0x20a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <HAL_GPIO_Init+0x254>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006ec2:	2309      	movs	r3, #9
 8006ec4:	e029      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ec6:	230a      	movs	r3, #10
 8006ec8:	e027      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006eca:	2307      	movs	r3, #7
 8006ecc:	e025      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ece:	2306      	movs	r3, #6
 8006ed0:	e023      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ed2:	2305      	movs	r3, #5
 8006ed4:	e021      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	e01f      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006eda:	2303      	movs	r3, #3
 8006edc:	e01d      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e01b      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e019      	b.n	8006f1a <HAL_GPIO_Init+0x25a>
 8006ee6:	bf00      	nop
 8006ee8:	58000080 	.word	0x58000080
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	58000400 	.word	0x58000400
 8006ef4:	58020000 	.word	0x58020000
 8006ef8:	58020400 	.word	0x58020400
 8006efc:	58020800 	.word	0x58020800
 8006f00:	58020c00 	.word	0x58020c00
 8006f04:	58021000 	.word	0x58021000
 8006f08:	58021400 	.word	0x58021400
 8006f0c:	58021800 	.word	0x58021800
 8006f10:	58021c00 	.word	0x58021c00
 8006f14:	58022400 	.word	0x58022400
 8006f18:	2300      	movs	r3, #0
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	f002 0203 	and.w	r2, r2, #3
 8006f20:	0092      	lsls	r2, r2, #2
 8006f22:	4093      	lsls	r3, r2
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f2a:	4938      	ldr	r1, [pc, #224]	; (800700c <HAL_GPIO_Init+0x34c>)
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	089b      	lsrs	r3, r3, #2
 8006f30:	3302      	adds	r3, #2
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	43db      	mvns	r3, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4013      	ands	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f47f ae6b 	bne.w	8006cd4 <HAL_GPIO_Init+0x14>
  }
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	3724      	adds	r7, #36	; 0x24
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	58000400 	.word	0x58000400

08007010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	807b      	strh	r3, [r7, #2]
 800701c:	4613      	mov	r3, r2
 800701e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007020:	787b      	ldrb	r3, [r7, #1]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007026:	887a      	ldrh	r2, [r7, #2]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800702c:	e003      	b.n	8007036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800702e:	887b      	ldrh	r3, [r7, #2]
 8007030:	041a      	lsls	r2, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	619a      	str	r2, [r3, #24]
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e07f      	b.n	8007156 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa ff24 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d107      	bne.n	80070be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ba:	609a      	str	r2, [r3, #8]
 80070bc:	e006      	b.n	80070cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d104      	bne.n	80070de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4b1d      	ldr	r3, [pc, #116]	; (8007160 <HAL_I2C_Init+0x11c>)
 80070ea:	430b      	orrs	r3, r1
 80070ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69d9      	ldr	r1, [r3, #28]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	02008000 	.word	0x02008000

08007164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b20      	cmp	r3, #32
 8007178:	d138      	bne.n	80071ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007184:	2302      	movs	r3, #2
 8007186:	e032      	b.n	80071ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2224      	movs	r2, #36	; 0x24
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6819      	ldr	r1, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b20      	cmp	r3, #32
 800720e:	d139      	bne.n	8007284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800721a:	2302      	movs	r3, #2
 800721c:	e033      	b.n	8007286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2224      	movs	r2, #36	; 0x24
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800724c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007294:	b08f      	sub	sp, #60	; 0x3c
 8007296:	af0a      	add	r7, sp, #40	; 0x28
 8007298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e116      	b.n	80074d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f00b fd62 	bl	8012d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f008 f94b 	bl	800f57e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	687e      	ldr	r6, [r7, #4]
 80072f0:	466d      	mov	r5, sp
 80072f2:	f106 0410 	add.w	r4, r6, #16
 80072f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007302:	e885 0003 	stmia.w	r5, {r0, r1}
 8007306:	1d33      	adds	r3, r6, #4
 8007308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800730a:	6838      	ldr	r0, [r7, #0]
 800730c:	f008 f816 	bl	800f33c <USB_CoreInit>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e0d7      	b.n	80074d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f008 f939 	bl	800f5a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
 8007332:	e04a      	b.n	80073ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007334:	7bfa      	ldrb	r2, [r7, #15]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	333d      	adds	r3, #61	; 0x3d
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007348:	7bfa      	ldrb	r2, [r7, #15]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	333c      	adds	r3, #60	; 0x3c
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	b298      	uxth	r0, r3
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3356      	adds	r3, #86	; 0x56
 8007370:	4602      	mov	r2, r0
 8007372:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	3340      	adds	r3, #64	; 0x40
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007388:	7bfa      	ldrb	r2, [r7, #15]
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	440b      	add	r3, r1
 8007396:	3344      	adds	r3, #68	; 0x44
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	3348      	adds	r3, #72	; 0x48
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	334c      	adds	r3, #76	; 0x4c
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	3301      	adds	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	7bfa      	ldrb	r2, [r7, #15]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d3af      	bcc.n	8007334 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
 80073d8:	e044      	b.n	8007464 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073f0:	7bfa      	ldrb	r2, [r7, #15]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007432:	7bfa      	ldrb	r2, [r7, #15]
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3301      	adds	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d3b5      	bcc.n	80073da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	687e      	ldr	r6, [r7, #4]
 8007476:	466d      	mov	r5, sp
 8007478:	f106 0410 	add.w	r4, r6, #16
 800747c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800747e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007488:	e885 0003 	stmia.w	r5, {r0, r1}
 800748c:	1d33      	adds	r3, r6, #4
 800748e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f008 f8d1 	bl	800f638 <USB_DevInit>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e014      	b.n	80074d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d102      	bne.n	80074c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f96f 	bl	80087a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f009 f913 	bl	80106f6 <USB_DevDisconnect>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_PCD_Start+0x1c>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e022      	b.n	800753c <HAL_PCD_Start+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800750e:	2b01      	cmp	r3, #1
 8007510:	d105      	bne.n	800751e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f008 f81a 	bl	800f55c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4618      	mov	r0, r3
 800752e:	f009 f8c1 	bl	80106b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b08d      	sub	sp, #52	; 0x34
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f009 f97f 	bl	801085e <USB_GetMode>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 84b7 	bne.w	8007ed6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f009 f8e3 	bl	8010738 <USB_ReadInterrupts>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 84ad 	beq.w	8007ed4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f009 f8d0 	bl	8010738 <USB_ReadInterrupts>
 8007598:	4603      	mov	r3, r0
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d107      	bne.n	80075b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f002 0202 	and.w	r2, r2, #2
 80075b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f009 f8be 	bl	8010738 <USB_ReadInterrupts>
 80075bc:	4603      	mov	r3, r0
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d161      	bne.n	800768a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0210 	bic.w	r2, r2, #16
 80075d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f003 020f 	and.w	r2, r3, #15
 80075e2:	4613      	mov	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4413      	add	r3, r2
 80075f2:	3304      	adds	r3, #4
 80075f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	0c5b      	lsrs	r3, r3, #17
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d124      	bne.n	800764c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007608:	4013      	ands	r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d035      	beq.n	800767a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	091b      	lsrs	r3, r3, #4
 8007616:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800761c:	b29b      	uxth	r3, r3
 800761e:	461a      	mov	r2, r3
 8007620:	6a38      	ldr	r0, [r7, #32]
 8007622:	f008 fef5 	bl	8010410 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	091b      	lsrs	r3, r3, #4
 800762e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007632:	441a      	add	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	091b      	lsrs	r3, r3, #4
 8007640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007644:	441a      	add	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	615a      	str	r2, [r3, #20]
 800764a:	e016      	b.n	800767a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	0c5b      	lsrs	r3, r3, #17
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	2b06      	cmp	r3, #6
 8007656:	d110      	bne.n	800767a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800765e:	2208      	movs	r2, #8
 8007660:	4619      	mov	r1, r3
 8007662:	6a38      	ldr	r0, [r7, #32]
 8007664:	f008 fed4 	bl	8010410 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007674:	441a      	add	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0210 	orr.w	r2, r2, #16
 8007688:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f009 f852 	bl	8010738 <USB_ReadInterrupts>
 8007694:	4603      	mov	r3, r0
 8007696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800769a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800769e:	f040 80a7 	bne.w	80077f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f009 f857 	bl	801075e <USB_ReadDevAllOutEpInterrupt>
 80076b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80076b2:	e099      	b.n	80077e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 808e 	beq.w	80077dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f009 f87b 	bl	80107c6 <USB_ReadDevOutEPInterrupt>
 80076d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00c      	beq.n	80076f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	461a      	mov	r2, r3
 80076ea:	2301      	movs	r3, #1
 80076ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80076ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fed1 	bl	8008498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00c      	beq.n	800771a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	2308      	movs	r3, #8
 8007710:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 ffa7 	bl	8008668 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	2310      	movs	r3, #16
 8007734:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d030      	beq.n	80077a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d109      	bne.n	8007760 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800775e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	4413      	add	r3, r2
 8007772:	3304      	adds	r3, #4
 8007774:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	b2db      	uxtb	r3, r3
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f00b fbf4 	bl	8012f78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	461a      	mov	r2, r3
 800779e:	2302      	movs	r3, #2
 80077a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	461a      	mov	r2, r3
 80077ba:	2320      	movs	r3, #32
 80077bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	461a      	mov	r2, r3
 80077d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f47f af62 	bne.w	80076b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f008 ff9f 	bl	8010738 <USB_ReadInterrupts>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007804:	f040 80db 	bne.w	80079be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f008 ffc0 	bl	8010792 <USB_ReadDevAllInEpInterrupt>
 8007812:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007818:	e0cd      	b.n	80079b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80c2 	beq.w	80079aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f008 ffe6 	bl	8010802 <USB_ReadDevInEPInterrupt>
 8007836:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d057      	beq.n	80078f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	2201      	movs	r2, #1
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	43db      	mvns	r3, r3
 800785c:	69f9      	ldr	r1, [r7, #28]
 800785e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007862:	4013      	ands	r3, r2
 8007864:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	461a      	mov	r2, r3
 8007874:	2301      	movs	r3, #1
 8007876:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d132      	bne.n	80078e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	3348      	adds	r3, #72	; 0x48
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007896:	4613      	mov	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4403      	add	r3, r0
 80078a0:	3344      	adds	r3, #68	; 0x44
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4419      	add	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	4613      	mov	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4403      	add	r3, r0
 80078b4:	3348      	adds	r3, #72	; 0x48
 80078b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d113      	bne.n	80078e6 <HAL_PCD_IRQHandler+0x3a2>
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c2:	4613      	mov	r3, r2
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	334c      	adds	r3, #76	; 0x4c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078de:	461a      	mov	r2, r3
 80078e0:	2101      	movs	r1, #1
 80078e2:	f008 ffef 	bl	80108c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f00b fabe 	bl	8012e6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007908:	461a      	mov	r2, r3
 800790a:	2308      	movs	r3, #8
 800790c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007924:	461a      	mov	r2, r3
 8007926:	2310      	movs	r3, #16
 8007928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	461a      	mov	r2, r3
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d023      	beq.n	8007998 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007952:	6a38      	ldr	r0, [r7, #32]
 8007954:	f007 ffce 	bl	800f8f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	4613      	mov	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	3338      	adds	r3, #56	; 0x38
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	78db      	ldrb	r3, [r3, #3]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d108      	bne.n	8007986 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	b2db      	uxtb	r3, r3
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f00b fb0b 	bl	8012f9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007992:	461a      	mov	r2, r3
 8007994:	2302      	movs	r3, #2
 8007996:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80079a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fcea 	bl	800837e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	3301      	adds	r3, #1
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f47f af2e 	bne.w	800781a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f008 feb8 	bl	8010738 <USB_ReadInterrupts>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d2:	d122      	bne.n	8007a1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d108      	bne.n	8007a04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fef5 	bl	80087ec <HAL_PCDEx_LPM_Callback>
 8007a02:	e002      	b.n	8007a0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f00b faa9 	bl	8012f5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f008 fe8a 	bl	8010738 <USB_ReadInterrupts>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2e:	d112      	bne.n	8007a56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d102      	bne.n	8007a46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f00b fa65 	bl	8012f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f008 fe6c 	bl	8010738 <USB_ReadInterrupts>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6a:	d121      	bne.n	8007ab0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007a7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d111      	bne.n	8007aaa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	089b      	lsrs	r3, r3, #2
 8007a96:	f003 020f 	and.w	r2, r3, #15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fea2 	bl	80087ec <HAL_PCDEx_LPM_Callback>
 8007aa8:	e002      	b.n	8007ab0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f00b fa30 	bl	8012f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f008 fe3f 	bl	8010738 <USB_ReadInterrupts>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac4:	f040 80b7 	bne.w	8007c36 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2110      	movs	r1, #16
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f007 ff06 	bl	800f8f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aec:	e046      	b.n	8007b7c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afa:	461a      	mov	r2, r3
 8007afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	3301      	adds	r3, #1
 8007b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3b3      	bcc.n	8007aee <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb2:	f043 030b 	orr.w	r3, r3, #11
 8007bb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc8:	f043 030b 	orr.w	r3, r3, #11
 8007bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8007bce:	e015      	b.n	8007bfc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	4619      	mov	r1, r3
 8007be0:	f242 032b 	movw	r3, #8235	; 0x202b
 8007be4:	4313      	orrs	r3, r2
 8007be6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf6:	f043 030b 	orr.w	r3, r3, #11
 8007bfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007c20:	461a      	mov	r2, r3
 8007c22:	f008 fe4f 	bl	80108c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695a      	ldr	r2, [r3, #20]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f008 fd7c 	bl	8010738 <USB_ReadInterrupts>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4a:	d124      	bne.n	8007c96 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f008 fe13 	bl	801087c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f007 fec7 	bl	800f9ee <USB_GetDevSpeed>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681c      	ldr	r4, [r3, #0]
 8007c6c:	f001 fd88 	bl	8009780 <HAL_RCC_GetHCLKFreq>
 8007c70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f007 fbcc 	bl	800f418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f00b f91c 	bl	8012ebe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f008 fd4c 	bl	8010738 <USB_ReadInterrupts>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d10a      	bne.n	8007cc0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f00b f8f9 	bl	8012ea2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695a      	ldr	r2, [r3, #20]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f002 0208 	and.w	r2, r2, #8
 8007cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f008 fd37 	bl	8010738 <USB_ReadInterrupts>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d122      	bne.n	8007d1a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce4:	e014      	b.n	8007d10 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d105      	bne.n	8007d0a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fb09 	bl	800831c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d3e5      	bcc.n	8007ce6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f008 fd0a 	bl	8010738 <USB_ReadInterrupts>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2e:	d13b      	bne.n	8007da8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d30:	2301      	movs	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	e02b      	b.n	8007d8e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	3340      	adds	r3, #64	; 0x40
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d115      	bne.n	8007d88 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da12      	bge.n	8007d88 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	4613      	mov	r3, r2
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	333f      	adds	r3, #63	; 0x3f
 8007d72:	2201      	movs	r2, #1
 8007d74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 faca 	bl	800831c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d3ce      	bcc.n	8007d36 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f008 fcc3 	bl	8010738 <USB_ReadInterrupts>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dbc:	d155      	bne.n	8007e6a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	e045      	b.n	8007e50 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d12e      	bne.n	8007e4a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007dec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da2b      	bge.n	8007e4a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007dfe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d121      	bne.n	8007e4a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e46:	6053      	str	r3, [r2, #4]
            break;
 8007e48:	e007      	b.n	8007e5a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3b4      	bcc.n	8007dc4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f008 fc62 	bl	8010738 <USB_ReadInterrupts>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d10a      	bne.n	8007e96 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f00b f89d 	bl	8012fc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	695a      	ldr	r2, [r3, #20]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f008 fc4c 	bl	8010738 <USB_ReadInterrupts>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d115      	bne.n	8007ed6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f00b f88d 	bl	8012fdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6859      	ldr	r1, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	e000      	b.n	8007ed6 <HAL_PCD_IRQHandler+0x992>
      return;
 8007ed4:	bf00      	nop
    }
  }
}
 8007ed6:	3734      	adds	r7, #52	; 0x34
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}

08007edc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_PCD_SetAddress+0x1a>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e013      	b.n	8007f1e <HAL_PCD_SetAddress+0x42>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f008 fbaa 	bl	8010668 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	461a      	mov	r2, r3
 8007f34:	4603      	mov	r3, r0
 8007f36:	70fb      	strb	r3, [r7, #3]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	803b      	strh	r3, [r7, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0f      	bge.n	8007f6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	3338      	adds	r3, #56	; 0x38
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	705a      	strb	r2, [r3, #1]
 8007f6a:	e00f      	b.n	8007f8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	3304      	adds	r3, #4
 8007f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f98:	883a      	ldrh	r2, [r7, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	78ba      	ldrb	r2, [r7, #2]
 8007fa2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007fb6:	78bb      	ldrb	r3, [r7, #2]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d102      	bne.n	8007fc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_PCD_EP_Open+0xaa>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e00e      	b.n	8007fee <HAL_PCD_EP_Open+0xc8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f007 fd2a 	bl	800fa38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007fec:	7afb      	ldrb	r3, [r7, #11]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008006:	2b00      	cmp	r3, #0
 8008008:	da0f      	bge.n	800802a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	f003 020f 	and.w	r2, r3, #15
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	3338      	adds	r3, #56	; 0x38
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	705a      	strb	r2, [r3, #1]
 8008028:	e00f      	b.n	800804a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	f003 020f 	and.w	r2, r3, #15
 8008030:	4613      	mov	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	3304      	adds	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	b2da      	uxtb	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_PCD_EP_Close+0x6e>
 8008060:	2302      	movs	r3, #2
 8008062:	e00e      	b.n	8008082 <HAL_PCD_EP_Close+0x8c>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	4618      	mov	r0, r3
 8008074:	f007 fd68 	bl	800fb48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	460b      	mov	r3, r1
 8008098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	3304      	adds	r3, #4
 80080b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d102      	bne.n	80080e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	6979      	ldr	r1, [r7, #20]
 80080f4:	f007 fe04 	bl	800fd00 <USB_EPStartXfer>

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	f003 020f 	and.w	r2, r3, #15
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008124:	681b      	ldr	r3, [r3, #0]
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
 800813e:	460b      	mov	r3, r1
 8008140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	f003 020f 	and.w	r2, r3, #15
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	3338      	adds	r3, #56	; 0x38
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	3304      	adds	r3, #4
 8008158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2200      	movs	r2, #0
 800816a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2201      	movs	r2, #1
 8008170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	b2da      	uxtb	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	6979      	ldr	r1, [r7, #20]
 800819a:	f007 fdb1 	bl	800fd00 <USB_EPStartXfer>

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d901      	bls.n	80081c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e050      	b.n	8008268 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80081c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da0f      	bge.n	80081ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	f003 020f 	and.w	r2, r3, #15
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	3338      	adds	r3, #56	; 0x38
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4413      	add	r3, r2
 80081e2:	3304      	adds	r3, #4
 80081e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	705a      	strb	r2, [r3, #1]
 80081ec:	e00d      	b.n	800820a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	4613      	mov	r3, r2
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4413      	add	r3, r2
 8008200:	3304      	adds	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	b2da      	uxtb	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_PCD_EP_SetStall+0x82>
 8008226:	2302      	movs	r3, #2
 8008228:	e01e      	b.n	8008268 <HAL_PCD_EP_SetStall+0xc0>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	4618      	mov	r0, r3
 800823a:	f008 f941 	bl	80104c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008258:	461a      	mov	r2, r3
 800825a:	f008 fb33 	bl	80108c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	f003 020f 	and.w	r2, r3, #15
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d901      	bls.n	800828e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e042      	b.n	8008314 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800828e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da0f      	bge.n	80082b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	f003 020f 	and.w	r2, r3, #15
 800829c:	4613      	mov	r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	3338      	adds	r3, #56	; 0x38
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	3304      	adds	r3, #4
 80082ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	705a      	strb	r2, [r3, #1]
 80082b4:	e00f      	b.n	80082d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	f003 020f 	and.w	r2, r3, #15
 80082bc:	4613      	mov	r3, r2
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	3304      	adds	r3, #4
 80082ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_PCD_EP_ClrStall+0x86>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e00e      	b.n	8008314 <HAL_PCD_EP_ClrStall+0xa4>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	4618      	mov	r0, r3
 8008306:	f008 f949 	bl	801059c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	da0c      	bge.n	800834a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	4613      	mov	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	3338      	adds	r3, #56	; 0x38
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	3304      	adds	r3, #4
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e00c      	b.n	8008364 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f007 ff68 	bl	8010240 <USB_EPStopXfer>
 8008370:	4603      	mov	r3, r0
 8008372:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008374:	7afb      	ldrb	r3, [r7, #11]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b08a      	sub	sp, #40	; 0x28
 8008382:	af02      	add	r7, sp, #8
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	3338      	adds	r3, #56	; 0x38
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	3304      	adds	r3, #4
 80083a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d901      	bls.n	80083b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e06c      	b.n	8008490 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d902      	bls.n	80083d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3303      	adds	r3, #3
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083da:	e02b      	b.n	8008434 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d902      	bls.n	80083f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	3303      	adds	r3, #3
 80083fc:	089b      	lsrs	r3, r3, #2
 80083fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68d9      	ldr	r1, [r3, #12]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008410:	b2db      	uxtb	r3, r3
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	4603      	mov	r3, r0
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f007 ffbc 	bl	8010394 <USB_WritePacket>

    ep->xfer_buff  += len;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	441a      	add	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	695a      	ldr	r2, [r3, #20]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	441a      	add	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	b29b      	uxth	r3, r3
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	429a      	cmp	r2, r3
 8008448:	d809      	bhi.n	800845e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	695a      	ldr	r2, [r3, #20]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008452:	429a      	cmp	r2, r3
 8008454:	d203      	bcs.n	800845e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1be      	bne.n	80083dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	429a      	cmp	r2, r3
 8008468:	d811      	bhi.n	800848e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	2201      	movs	r2, #1
 8008472:	fa02 f303 	lsl.w	r3, r2, r3
 8008476:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	43db      	mvns	r3, r3
 8008484:	6939      	ldr	r1, [r7, #16]
 8008486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800848a:	4013      	ands	r3, r2
 800848c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	333c      	adds	r3, #60	; 0x3c
 80084b0:	3304      	adds	r3, #4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d17b      	bne.n	80085c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d015      	beq.n	8008504 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	4a61      	ldr	r2, [pc, #388]	; (8008660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	f240 80b9 	bls.w	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80b3 	beq.w	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008500:	6093      	str	r3, [r2, #8]
 8008502:	e0a7      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	2320      	movs	r3, #32
 800851e:	6093      	str	r3, [r2, #8]
 8008520:	e098      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 8093 	bne.w	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4a4b      	ldr	r2, [pc, #300]	; (8008660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d90f      	bls.n	8008556 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008552:	6093      	str	r3, [r2, #8]
 8008554:	e07e      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	4413      	add	r3, r2
 8008568:	3304      	adds	r3, #4
 800856a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1a      	ldr	r2, [r3, #32]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	0159      	lsls	r1, r3, #5
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	440b      	add	r3, r1
 8008578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d114      	bne.n	80085b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085a0:	461a      	mov	r2, r3
 80085a2:	2101      	movs	r1, #1
 80085a4:	f008 f98e 	bl	80108c4 <USB_EP0_OutStart>
 80085a8:	e006      	b.n	80085b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	441a      	add	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f00a fc3a 	bl	8012e38 <HAL_PCD_DataOutStageCallback>
 80085c4:	e046      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	4a26      	ldr	r2, [pc, #152]	; (8008664 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d124      	bne.n	8008618 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ea:	6093      	str	r3, [r2, #8]
 80085ec:	e032      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	461a      	mov	r2, r3
 8008606:	2320      	movs	r3, #32
 8008608:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f00a fc11 	bl	8012e38 <HAL_PCD_DataOutStageCallback>
 8008616:	e01d      	b.n	8008654 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d114      	bne.n	8008648 <PCD_EP_OutXfrComplete_int+0x1b0>
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	4613      	mov	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d108      	bne.n	8008648 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008640:	461a      	mov	r2, r3
 8008642:	2100      	movs	r1, #0
 8008644:	f008 f93e 	bl	80108c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f00a fbf2 	bl	8012e38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	4f54300a 	.word	0x4f54300a
 8008664:	4f54310a 	.word	0x4f54310a

08008668 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	333c      	adds	r3, #60	; 0x3c
 8008680:	3304      	adds	r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a15      	ldr	r2, [pc, #84]	; (80086f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d90e      	bls.n	80086bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	461a      	mov	r2, r3
 80086b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f00a fba9 	bl	8012e14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d90c      	bls.n	80086e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d108      	bne.n	80086e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086dc:	461a      	mov	r2, r3
 80086de:	2101      	movs	r1, #1
 80086e0:	f008 f8f0 	bl	80108c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	4f54300a 	.word	0x4f54300a

080086f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
 8008700:	4613      	mov	r3, r2
 8008702:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008712:	883b      	ldrh	r3, [r7, #0]
 8008714:	0419      	lsls	r1, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	430a      	orrs	r2, r1
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
 8008720:	e028      	b.n	8008774 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e00d      	b.n	8008752 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	3340      	adds	r3, #64	; 0x40
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	0c1b      	lsrs	r3, r3, #16
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	4413      	add	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	3301      	adds	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
 8008752:	7bfa      	ldrb	r2, [r7, #15]
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	3b01      	subs	r3, #1
 8008758:	429a      	cmp	r2, r3
 800875a:	d3ec      	bcc.n	8008736 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800875c:	883b      	ldrh	r3, [r7, #0]
 800875e:	0418      	lsls	r0, r3, #16
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	3b01      	subs	r3, #1
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	4302      	orrs	r2, r0
 800876c:	3340      	adds	r3, #64	; 0x40
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	887a      	ldrh	r2, [r7, #2]
 8008794:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	10000003 	.word	0x10000003

080087ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800880c:	4b19      	ldr	r3, [pc, #100]	; (8008874 <HAL_PWREx_ConfigSupply+0x70>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b04      	cmp	r3, #4
 8008816:	d00a      	beq.n	800882e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008818:	4b16      	ldr	r3, [pc, #88]	; (8008874 <HAL_PWREx_ConfigSupply+0x70>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	429a      	cmp	r2, r3
 8008824:	d001      	beq.n	800882a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e01f      	b.n	800886a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e01d      	b.n	800886a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <HAL_PWREx_ConfigSupply+0x70>)
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f023 0207 	bic.w	r2, r3, #7
 8008836:	490f      	ldr	r1, [pc, #60]	; (8008874 <HAL_PWREx_ConfigSupply+0x70>)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4313      	orrs	r3, r2
 800883c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800883e:	f7fa f955 	bl	8002aec <HAL_GetTick>
 8008842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008844:	e009      	b.n	800885a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008846:	f7fa f951 	bl	8002aec <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008854:	d901      	bls.n	800885a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e007      	b.n	800886a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <HAL_PWREx_ConfigSupply+0x70>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008866:	d1ee      	bne.n	8008846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	58024800 	.word	0x58024800

08008878 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800887c:	4b05      	ldr	r3, [pc, #20]	; (8008894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	4a04      	ldr	r2, [pc, #16]	; (8008894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008886:	60d3      	str	r3, [r2, #12]
}
 8008888:	bf00      	nop
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	58024800 	.word	0x58024800

08008898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	; 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e3c8      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8087 	beq.w	80089c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c2:	4b86      	ldr	r3, [pc, #536]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	d007      	beq.n	80088de <HAL_RCC_OscConfig+0x46>
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	2b18      	cmp	r3, #24
 80088d2:	d110      	bne.n	80088f6 <HAL_RCC_OscConfig+0x5e>
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d10b      	bne.n	80088f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088de:	4b7f      	ldr	r3, [pc, #508]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d06c      	beq.n	80089c4 <HAL_RCC_OscConfig+0x12c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d168      	bne.n	80089c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e3a2      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088fe:	d106      	bne.n	800890e <HAL_RCC_OscConfig+0x76>
 8008900:	4b76      	ldr	r3, [pc, #472]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a75      	ldr	r2, [pc, #468]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	e02e      	b.n	800896c <HAL_RCC_OscConfig+0xd4>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10c      	bne.n	8008930 <HAL_RCC_OscConfig+0x98>
 8008916:	4b71      	ldr	r3, [pc, #452]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a70      	ldr	r2, [pc, #448]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 800891c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4b6e      	ldr	r3, [pc, #440]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a6d      	ldr	r2, [pc, #436]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	e01d      	b.n	800896c <HAL_RCC_OscConfig+0xd4>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008938:	d10c      	bne.n	8008954 <HAL_RCC_OscConfig+0xbc>
 800893a:	4b68      	ldr	r3, [pc, #416]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a67      	ldr	r2, [pc, #412]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	4b65      	ldr	r3, [pc, #404]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a64      	ldr	r2, [pc, #400]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 800894c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	e00b      	b.n	800896c <HAL_RCC_OscConfig+0xd4>
 8008954:	4b61      	ldr	r3, [pc, #388]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a60      	ldr	r2, [pc, #384]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 800895a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	4b5e      	ldr	r3, [pc, #376]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a5d      	ldr	r2, [pc, #372]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800896a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d013      	beq.n	800899c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008974:	f7fa f8ba 	bl	8002aec <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800897c:	f7fa f8b6 	bl	8002aec <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b64      	cmp	r3, #100	; 0x64
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e356      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800898e:	4b53      	ldr	r3, [pc, #332]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f0      	beq.n	800897c <HAL_RCC_OscConfig+0xe4>
 800899a:	e014      	b.n	80089c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fa f8a6 	bl	8002aec <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089a4:	f7fa f8a2 	bl	8002aec <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b64      	cmp	r3, #100	; 0x64
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e342      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089b6:	4b49      	ldr	r3, [pc, #292]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f0      	bne.n	80089a4 <HAL_RCC_OscConfig+0x10c>
 80089c2:	e000      	b.n	80089c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 808c 	beq.w	8008aec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d4:	4b41      	ldr	r3, [pc, #260]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089de:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d007      	beq.n	80089fa <HAL_RCC_OscConfig+0x162>
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	2b18      	cmp	r3, #24
 80089ee:	d137      	bne.n	8008a60 <HAL_RCC_OscConfig+0x1c8>
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d132      	bne.n	8008a60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0304 	and.w	r3, r3, #4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <HAL_RCC_OscConfig+0x17a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e314      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a12:	4b32      	ldr	r3, [pc, #200]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f023 0219 	bic.w	r2, r3, #25
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	492f      	ldr	r1, [pc, #188]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a24:	f7fa f862 	bl	8002aec <HAL_GetTick>
 8008a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a2c:	f7fa f85e 	bl	8002aec <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e2fe      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a3e:	4b27      	ldr	r3, [pc, #156]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f0      	beq.n	8008a2c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4a:	4b24      	ldr	r3, [pc, #144]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	4920      	ldr	r1, [pc, #128]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a5e:	e045      	b.n	8008aec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d026      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a68:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f023 0219 	bic.w	r2, r3, #25
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4919      	ldr	r1, [pc, #100]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a7a:	f7fa f837 	bl	8002aec <HAL_GetTick>
 8008a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a80:	e008      	b.n	8008a94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a82:	f7fa f833 	bl	8002aec <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e2d3      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f0      	beq.n	8008a82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa0:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	490b      	ldr	r1, [pc, #44]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	604b      	str	r3, [r1, #4]
 8008ab4:	e01a      	b.n	8008aec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a08      	ldr	r2, [pc, #32]	; (8008adc <HAL_RCC_OscConfig+0x244>)
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac2:	f7fa f813 	bl	8002aec <HAL_GetTick>
 8008ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ac8:	e00a      	b.n	8008ae0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aca:	f7fa f80f 	bl	8002aec <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d903      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e2af      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
 8008adc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ae0:	4b96      	ldr	r3, [pc, #600]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1ee      	bne.n	8008aca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d06a      	beq.n	8008bce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008af8:	4b90      	ldr	r3, [pc, #576]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b02:	4b8e      	ldr	r3, [pc, #568]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d007      	beq.n	8008b1e <HAL_RCC_OscConfig+0x286>
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b18      	cmp	r3, #24
 8008b12:	d11b      	bne.n	8008b4c <HAL_RCC_OscConfig+0x2b4>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d116      	bne.n	8008b4c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b1e:	4b87      	ldr	r3, [pc, #540]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <HAL_RCC_OscConfig+0x29e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	2b80      	cmp	r3, #128	; 0x80
 8008b30:	d001      	beq.n	8008b36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e282      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b36:	4b81      	ldr	r3, [pc, #516]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	061b      	lsls	r3, r3, #24
 8008b44:	497d      	ldr	r1, [pc, #500]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b4a:	e040      	b.n	8008bce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d023      	beq.n	8008b9c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b54:	4b79      	ldr	r3, [pc, #484]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a78      	ldr	r2, [pc, #480]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b60:	f7f9 ffc4 	bl	8002aec <HAL_GetTick>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b68:	f7f9 ffc0 	bl	8002aec <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e260      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b7a:	4b70      	ldr	r3, [pc, #448]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b86:	4b6d      	ldr	r3, [pc, #436]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	4969      	ldr	r1, [pc, #420]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60cb      	str	r3, [r1, #12]
 8008b9a:	e018      	b.n	8008bce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b9c:	4b67      	ldr	r3, [pc, #412]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a66      	ldr	r2, [pc, #408]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba8:	f7f9 ffa0 	bl	8002aec <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bb0:	f7f9 ff9c 	bl	8002aec <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e23c      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bc2:	4b5e      	ldr	r3, [pc, #376]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d036      	beq.n	8008c48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d019      	beq.n	8008c16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008be2:	4b56      	ldr	r3, [pc, #344]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be6:	4a55      	ldr	r2, [pc, #340]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bee:	f7f9 ff7d 	bl	8002aec <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bf6:	f7f9 ff79 	bl	8002aec <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e219      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c08:	4b4c      	ldr	r3, [pc, #304]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x35e>
 8008c14:	e018      	b.n	8008c48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c16:	4b49      	ldr	r3, [pc, #292]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c1a:	4a48      	ldr	r2, [pc, #288]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c1c:	f023 0301 	bic.w	r3, r3, #1
 8008c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c22:	f7f9 ff63 	bl	8002aec <HAL_GetTick>
 8008c26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c2a:	f7f9 ff5f 	bl	8002aec <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e1ff      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c3c:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c40:	f003 0302 	and.w	r3, r3, #2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f0      	bne.n	8008c2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d036      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d019      	beq.n	8008c90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c5c:	4b37      	ldr	r3, [pc, #220]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a36      	ldr	r2, [pc, #216]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c68:	f7f9 ff40 	bl	8002aec <HAL_GetTick>
 8008c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c70:	f7f9 ff3c 	bl	8002aec <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1dc      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c82:	4b2e      	ldr	r3, [pc, #184]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0f0      	beq.n	8008c70 <HAL_RCC_OscConfig+0x3d8>
 8008c8e:	e018      	b.n	8008cc2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c90:	4b2a      	ldr	r3, [pc, #168]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a29      	ldr	r2, [pc, #164]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c9c:	f7f9 ff26 	bl	8002aec <HAL_GetTick>
 8008ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ca4:	f7f9 ff22 	bl	8002aec <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e1c2      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cb6:	4b21      	ldr	r3, [pc, #132]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f0      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 8086 	beq.w	8008ddc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <HAL_RCC_OscConfig+0x4a8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1a      	ldr	r2, [pc, #104]	; (8008d40 <HAL_RCC_OscConfig+0x4a8>)
 8008cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cdc:	f7f9 ff06 	bl	8002aec <HAL_GetTick>
 8008ce0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce4:	f7f9 ff02 	bl	8002aec <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b64      	cmp	r3, #100	; 0x64
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e1a2      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cf6:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <HAL_RCC_OscConfig+0x4a8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0f0      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d106      	bne.n	8008d18 <HAL_RCC_OscConfig+0x480>
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d10:	f043 0301 	orr.w	r3, r3, #1
 8008d14:	6713      	str	r3, [r2, #112]	; 0x70
 8008d16:	e032      	b.n	8008d7e <HAL_RCC_OscConfig+0x4e6>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d111      	bne.n	8008d44 <HAL_RCC_OscConfig+0x4ac>
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d24:	4a05      	ldr	r2, [pc, #20]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d26:	f023 0301 	bic.w	r3, r3, #1
 8008d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d2c:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d30:	4a02      	ldr	r2, [pc, #8]	; (8008d3c <HAL_RCC_OscConfig+0x4a4>)
 8008d32:	f023 0304 	bic.w	r3, r3, #4
 8008d36:	6713      	str	r3, [r2, #112]	; 0x70
 8008d38:	e021      	b.n	8008d7e <HAL_RCC_OscConfig+0x4e6>
 8008d3a:	bf00      	nop
 8008d3c:	58024400 	.word	0x58024400
 8008d40:	58024800 	.word	0x58024800
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d10c      	bne.n	8008d66 <HAL_RCC_OscConfig+0x4ce>
 8008d4c:	4b83      	ldr	r3, [pc, #524]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	4a82      	ldr	r2, [pc, #520]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d52:	f043 0304 	orr.w	r3, r3, #4
 8008d56:	6713      	str	r3, [r2, #112]	; 0x70
 8008d58:	4b80      	ldr	r3, [pc, #512]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5c:	4a7f      	ldr	r2, [pc, #508]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	6713      	str	r3, [r2, #112]	; 0x70
 8008d64:	e00b      	b.n	8008d7e <HAL_RCC_OscConfig+0x4e6>
 8008d66:	4b7d      	ldr	r3, [pc, #500]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	4a7c      	ldr	r2, [pc, #496]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	6713      	str	r3, [r2, #112]	; 0x70
 8008d72:	4b7a      	ldr	r3, [pc, #488]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d76:	4a79      	ldr	r2, [pc, #484]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d015      	beq.n	8008db2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d86:	f7f9 feb1 	bl	8002aec <HAL_GetTick>
 8008d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d8c:	e00a      	b.n	8008da4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d8e:	f7f9 fead 	bl	8002aec <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e14b      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008da4:	4b6d      	ldr	r3, [pc, #436]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0ee      	beq.n	8008d8e <HAL_RCC_OscConfig+0x4f6>
 8008db0:	e014      	b.n	8008ddc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db2:	f7f9 fe9b 	bl	8002aec <HAL_GetTick>
 8008db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008db8:	e00a      	b.n	8008dd0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dba:	f7f9 fe97 	bl	8002aec <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e135      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dd0:	4b62      	ldr	r3, [pc, #392]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1ee      	bne.n	8008dba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 812a 	beq.w	800903a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008de6:	4b5d      	ldr	r3, [pc, #372]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dee:	2b18      	cmp	r3, #24
 8008df0:	f000 80ba 	beq.w	8008f68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	f040 8095 	bne.w	8008f28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dfe:	4b57      	ldr	r3, [pc, #348]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a56      	ldr	r2, [pc, #344]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0a:	f7f9 fe6f 	bl	8002aec <HAL_GetTick>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e12:	f7f9 fe6b 	bl	8002aec <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e10b      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e24:	4b4d      	ldr	r3, [pc, #308]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1f0      	bne.n	8008e12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e30:	4b4a      	ldr	r3, [pc, #296]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e34:	4b4a      	ldr	r3, [pc, #296]	; (8008f60 <HAL_RCC_OscConfig+0x6c8>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e40:	0112      	lsls	r2, r2, #4
 8008e42:	430a      	orrs	r2, r1
 8008e44:	4945      	ldr	r1, [pc, #276]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	628b      	str	r3, [r1, #40]	; 0x28
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	025b      	lsls	r3, r3, #9
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	3b01      	subs	r3, #1
 8008e66:	041b      	lsls	r3, r3, #16
 8008e68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e72:	3b01      	subs	r3, #1
 8008e74:	061b      	lsls	r3, r3, #24
 8008e76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e7a:	4938      	ldr	r1, [pc, #224]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008e80:	4b36      	ldr	r3, [pc, #216]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a35      	ldr	r2, [pc, #212]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e86:	f023 0301 	bic.w	r3, r3, #1
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e8c:	4b33      	ldr	r3, [pc, #204]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e90:	4b34      	ldr	r3, [pc, #208]	; (8008f64 <HAL_RCC_OscConfig+0x6cc>)
 8008e92:	4013      	ands	r3, r2
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e98:	00d2      	lsls	r2, r2, #3
 8008e9a:	4930      	ldr	r1, [pc, #192]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ea0:	4b2e      	ldr	r3, [pc, #184]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	f023 020c 	bic.w	r2, r3, #12
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	492b      	ldr	r1, [pc, #172]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008eb2:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	f023 0202 	bic.w	r2, r3, #2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebe:	4927      	ldr	r1, [pc, #156]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ec4:	4b25      	ldr	r3, [pc, #148]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a24      	ldr	r2, [pc, #144]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed0:	4b22      	ldr	r3, [pc, #136]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	4a21      	ldr	r2, [pc, #132]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008edc:	4b1f      	ldr	r3, [pc, #124]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008ee8:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ef4:	4b19      	ldr	r3, [pc, #100]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f00:	f7f9 fdf4 	bl	8002aec <HAL_GetTick>
 8008f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f06:	e008      	b.n	8008f1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f08:	f7f9 fdf0 	bl	8002aec <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e090      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f0      	beq.n	8008f08 <HAL_RCC_OscConfig+0x670>
 8008f26:	e088      	b.n	800903a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a0b      	ldr	r2, [pc, #44]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f34:	f7f9 fdda 	bl	8002aec <HAL_GetTick>
 8008f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f3c:	f7f9 fdd6 	bl	8002aec <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e076      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f4e:	4b03      	ldr	r3, [pc, #12]	; (8008f5c <HAL_RCC_OscConfig+0x6c4>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f0      	bne.n	8008f3c <HAL_RCC_OscConfig+0x6a4>
 8008f5a:	e06e      	b.n	800903a <HAL_RCC_OscConfig+0x7a2>
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	fffffc0c 	.word	0xfffffc0c
 8008f64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f68:	4b36      	ldr	r3, [pc, #216]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f6e:	4b35      	ldr	r3, [pc, #212]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d031      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f003 0203 	and.w	r2, r3, #3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d12a      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d122      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d11a      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	0a5b      	lsrs	r3, r3, #9
 8008fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d111      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	0c1b      	lsrs	r3, r3, #16
 8008fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d108      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	0e1b      	lsrs	r3, r3, #24
 8008fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d001      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e02b      	b.n	800903c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d01f      	beq.n	800903a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	4a11      	ldr	r2, [pc, #68]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009006:	f7f9 fd71 	bl	8002aec <HAL_GetTick>
 800900a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800900c:	bf00      	nop
 800900e:	f7f9 fd6d 	bl	8002aec <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	4293      	cmp	r3, r2
 8009018:	d0f9      	beq.n	800900e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800901a:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 800901c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901e:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <HAL_RCC_OscConfig+0x7b0>)
 8009020:	4013      	ands	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009026:	00d2      	lsls	r2, r2, #3
 8009028:	4906      	ldr	r1, [pc, #24]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 800902a:	4313      	orrs	r3, r2
 800902c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <HAL_RCC_OscConfig+0x7ac>)
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3730      	adds	r7, #48	; 0x30
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	58024400 	.word	0x58024400
 8009048:	ffff0007 	.word	0xffff0007

0800904c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e19c      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009060:	4b8a      	ldr	r3, [pc, #552]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d910      	bls.n	8009090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800906e:	4b87      	ldr	r3, [pc, #540]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f023 020f 	bic.w	r2, r3, #15
 8009076:	4985      	ldr	r1, [pc, #532]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	4313      	orrs	r3, r2
 800907c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907e:	4b83      	ldr	r3, [pc, #524]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d001      	beq.n	8009090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e184      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d010      	beq.n	80090be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	4b7b      	ldr	r3, [pc, #492]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d908      	bls.n	80090be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090ac:	4b78      	ldr	r3, [pc, #480]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	4975      	ldr	r1, [pc, #468]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d010      	beq.n	80090ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695a      	ldr	r2, [r3, #20]
 80090ce:	4b70      	ldr	r3, [pc, #448]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d908      	bls.n	80090ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090da:	4b6d      	ldr	r3, [pc, #436]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	496a      	ldr	r1, [pc, #424]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0310 	and.w	r3, r3, #16
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	4b64      	ldr	r3, [pc, #400]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009104:	429a      	cmp	r2, r3
 8009106:	d908      	bls.n	800911a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009108:	4b61      	ldr	r3, [pc, #388]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	495e      	ldr	r1, [pc, #376]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009116:	4313      	orrs	r3, r2
 8009118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	69da      	ldr	r2, [r3, #28]
 800912a:	4b59      	ldr	r3, [pc, #356]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009132:	429a      	cmp	r2, r3
 8009134:	d908      	bls.n	8009148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009136:	4b56      	ldr	r3, [pc, #344]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	4953      	ldr	r1, [pc, #332]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009144:	4313      	orrs	r3, r2
 8009146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	4b4d      	ldr	r3, [pc, #308]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	429a      	cmp	r2, r3
 8009162:	d908      	bls.n	8009176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009164:	4b4a      	ldr	r3, [pc, #296]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f023 020f 	bic.w	r2, r3, #15
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	4947      	ldr	r1, [pc, #284]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009172:	4313      	orrs	r3, r2
 8009174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d055      	beq.n	800922e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009182:	4b43      	ldr	r3, [pc, #268]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	4940      	ldr	r1, [pc, #256]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009190:	4313      	orrs	r3, r2
 8009192:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d107      	bne.n	80091ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800919c:	4b3c      	ldr	r3, [pc, #240]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d121      	bne.n	80091ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0f6      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d107      	bne.n	80091c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091b4:	4b36      	ldr	r3, [pc, #216]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d115      	bne.n	80091ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e0ea      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091cc:	4b30      	ldr	r3, [pc, #192]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e0de      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091dc:	4b2c      	ldr	r3, [pc, #176]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e0d6      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091ec:	4b28      	ldr	r3, [pc, #160]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	f023 0207 	bic.w	r2, r3, #7
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	4925      	ldr	r1, [pc, #148]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fe:	f7f9 fc75 	bl	8002aec <HAL_GetTick>
 8009202:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009204:	e00a      	b.n	800921c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009206:	f7f9 fc71 	bl	8002aec <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	f241 3288 	movw	r2, #5000	; 0x1388
 8009214:	4293      	cmp	r3, r2
 8009216:	d901      	bls.n	800921c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e0be      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800921c:	4b1c      	ldr	r3, [pc, #112]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	429a      	cmp	r2, r3
 800922c:	d1eb      	bne.n	8009206 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d010      	beq.n	800925c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	f003 030f 	and.w	r3, r3, #15
 8009246:	429a      	cmp	r2, r3
 8009248:	d208      	bcs.n	800925c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	f023 020f 	bic.w	r2, r3, #15
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	490e      	ldr	r1, [pc, #56]	; (8009290 <HAL_RCC_ClockConfig+0x244>)
 8009258:	4313      	orrs	r3, r2
 800925a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800925c:	4b0b      	ldr	r3, [pc, #44]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d214      	bcs.n	8009294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800926a:	4b08      	ldr	r3, [pc, #32]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f023 020f 	bic.w	r2, r3, #15
 8009272:	4906      	ldr	r1, [pc, #24]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	4313      	orrs	r3, r2
 8009278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800927a:	4b04      	ldr	r3, [pc, #16]	; (800928c <HAL_RCC_ClockConfig+0x240>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d005      	beq.n	8009294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e086      	b.n	800939a <HAL_RCC_ClockConfig+0x34e>
 800928c:	52002000 	.word	0x52002000
 8009290:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	4b3f      	ldr	r3, [pc, #252]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d208      	bcs.n	80092c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092b0:	4b3c      	ldr	r3, [pc, #240]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	4939      	ldr	r1, [pc, #228]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0308 	and.w	r3, r3, #8
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d010      	beq.n	80092f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	4b34      	ldr	r3, [pc, #208]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092da:	429a      	cmp	r2, r3
 80092dc:	d208      	bcs.n	80092f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092de:	4b31      	ldr	r3, [pc, #196]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	492e      	ldr	r1, [pc, #184]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0310 	and.w	r3, r3, #16
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d010      	beq.n	800931e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009308:	429a      	cmp	r2, r3
 800930a:	d208      	bcs.n	800931e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	4922      	ldr	r1, [pc, #136]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 800931a:	4313      	orrs	r3, r2
 800931c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d010      	beq.n	800934c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	69da      	ldr	r2, [r3, #28]
 800932e:	4b1d      	ldr	r3, [pc, #116]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009336:	429a      	cmp	r2, r3
 8009338:	d208      	bcs.n	800934c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800933a:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	4917      	ldr	r1, [pc, #92]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 8009348:	4313      	orrs	r3, r2
 800934a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800934c:	f000 f89e 	bl	800948c <HAL_RCC_GetSysClockFreq>
 8009350:	4602      	mov	r2, r0
 8009352:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	4912      	ldr	r1, [pc, #72]	; (80093a8 <HAL_RCC_ClockConfig+0x35c>)
 800935e:	5ccb      	ldrb	r3, [r1, r3]
 8009360:	f003 031f 	and.w	r3, r3, #31
 8009364:	fa22 f303 	lsr.w	r3, r2, r3
 8009368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800936a:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <HAL_RCC_ClockConfig+0x358>)
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f003 030f 	and.w	r3, r3, #15
 8009372:	4a0d      	ldr	r2, [pc, #52]	; (80093a8 <HAL_RCC_ClockConfig+0x35c>)
 8009374:	5cd3      	ldrb	r3, [r2, r3]
 8009376:	f003 031f 	and.w	r3, r3, #31
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
 8009380:	4a0a      	ldr	r2, [pc, #40]	; (80093ac <HAL_RCC_ClockConfig+0x360>)
 8009382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009384:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <HAL_RCC_ClockConfig+0x364>)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800938a:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <HAL_RCC_ClockConfig+0x368>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f7f9 fb62 	bl	8002a58 <HAL_InitTick>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3718      	adds	r7, #24
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	58024400 	.word	0x58024400
 80093a8:	080140b0 	.word	0x080140b0
 80093ac:	24000004 	.word	0x24000004
 80093b0:	24000000 	.word	0x24000000
 80093b4:	24000008 	.word	0x24000008

080093b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d12a      	bne.n	8009420 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80093ca:	4b2d      	ldr	r3, [pc, #180]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 80093cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093d0:	4a2b      	ldr	r2, [pc, #172]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093da:	4b29      	ldr	r3, [pc, #164]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 80093dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80093e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ee:	2302      	movs	r3, #2
 80093f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f2:	2303      	movs	r3, #3
 80093f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80093fa:	2300      	movs	r3, #0
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80093fe:	f107 031c 	add.w	r3, r7, #28
 8009402:	4619      	mov	r1, r3
 8009404:	481f      	ldr	r0, [pc, #124]	; (8009484 <HAL_RCC_MCOConfig+0xcc>)
 8009406:	f7fd fc5b 	bl	8006cc0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	430b      	orrs	r3, r1
 8009418:	4919      	ldr	r1, [pc, #100]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 800941a:	4313      	orrs	r3, r2
 800941c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800941e:	e02a      	b.n	8009476 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009420:	4b17      	ldr	r3, [pc, #92]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 8009422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009426:	4a16      	ldr	r2, [pc, #88]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 8009428:	f043 0304 	orr.w	r3, r3, #4
 800942c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009430:	4b13      	ldr	r3, [pc, #76]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 8009432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800943e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009444:	2302      	movs	r3, #2
 8009446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009448:	2303      	movs	r3, #3
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944c:	2300      	movs	r3, #0
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009450:	2300      	movs	r3, #0
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009454:	f107 031c 	add.w	r3, r7, #28
 8009458:	4619      	mov	r1, r3
 800945a:	480b      	ldr	r0, [pc, #44]	; (8009488 <HAL_RCC_MCOConfig+0xd0>)
 800945c:	f7fd fc30 	bl	8006cc0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	01d9      	lsls	r1, r3, #7
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	430b      	orrs	r3, r1
 8009470:	4903      	ldr	r1, [pc, #12]	; (8009480 <HAL_RCC_MCOConfig+0xc8>)
 8009472:	4313      	orrs	r3, r2
 8009474:	610b      	str	r3, [r1, #16]
}
 8009476:	bf00      	nop
 8009478:	3730      	adds	r7, #48	; 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	58024400 	.word	0x58024400
 8009484:	58020000 	.word	0x58020000
 8009488:	58020800 	.word	0x58020800

0800948c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009492:	4bb3      	ldr	r3, [pc, #716]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800949a:	2b18      	cmp	r3, #24
 800949c:	f200 8155 	bhi.w	800974a <HAL_RCC_GetSysClockFreq+0x2be>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	0800950d 	.word	0x0800950d
 80094ac:	0800974b 	.word	0x0800974b
 80094b0:	0800974b 	.word	0x0800974b
 80094b4:	0800974b 	.word	0x0800974b
 80094b8:	0800974b 	.word	0x0800974b
 80094bc:	0800974b 	.word	0x0800974b
 80094c0:	0800974b 	.word	0x0800974b
 80094c4:	0800974b 	.word	0x0800974b
 80094c8:	08009533 	.word	0x08009533
 80094cc:	0800974b 	.word	0x0800974b
 80094d0:	0800974b 	.word	0x0800974b
 80094d4:	0800974b 	.word	0x0800974b
 80094d8:	0800974b 	.word	0x0800974b
 80094dc:	0800974b 	.word	0x0800974b
 80094e0:	0800974b 	.word	0x0800974b
 80094e4:	0800974b 	.word	0x0800974b
 80094e8:	08009539 	.word	0x08009539
 80094ec:	0800974b 	.word	0x0800974b
 80094f0:	0800974b 	.word	0x0800974b
 80094f4:	0800974b 	.word	0x0800974b
 80094f8:	0800974b 	.word	0x0800974b
 80094fc:	0800974b 	.word	0x0800974b
 8009500:	0800974b 	.word	0x0800974b
 8009504:	0800974b 	.word	0x0800974b
 8009508:	0800953f 	.word	0x0800953f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800950c:	4b94      	ldr	r3, [pc, #592]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009518:	4b91      	ldr	r3, [pc, #580]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	4a90      	ldr	r2, [pc, #576]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
 8009528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800952a:	e111      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800952c:	4b8d      	ldr	r3, [pc, #564]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800952e:	61bb      	str	r3, [r7, #24]
      break;
 8009530:	e10e      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009532:	4b8d      	ldr	r3, [pc, #564]	; (8009768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009534:	61bb      	str	r3, [r7, #24]
      break;
 8009536:	e10b      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009538:	4b8c      	ldr	r3, [pc, #560]	; (800976c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800953a:	61bb      	str	r3, [r7, #24]
      break;
 800953c:	e108      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800953e:	4b88      	ldr	r3, [pc, #544]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009548:	4b85      	ldr	r3, [pc, #532]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	091b      	lsrs	r3, r3, #4
 800954e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009552:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009554:	4b82      	ldr	r3, [pc, #520]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800955e:	4b80      	ldr	r3, [pc, #512]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	08db      	lsrs	r3, r3, #3
 8009564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	fb02 f303 	mul.w	r3, r2, r3
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 80e1 	beq.w	8009744 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	f000 8083 	beq.w	8009690 <HAL_RCC_GetSysClockFreq+0x204>
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b02      	cmp	r3, #2
 800958e:	f200 80a1 	bhi.w	80096d4 <HAL_RCC_GetSysClockFreq+0x248>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_RCC_GetSysClockFreq+0x114>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d056      	beq.n	800964c <HAL_RCC_GetSysClockFreq+0x1c0>
 800959e:	e099      	b.n	80096d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a0:	4b6f      	ldr	r3, [pc, #444]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0320 	and.w	r3, r3, #32
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d02d      	beq.n	8009608 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095ac:	4b6c      	ldr	r3, [pc, #432]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	08db      	lsrs	r3, r3, #3
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	4a6b      	ldr	r2, [pc, #428]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095b8:	fa22 f303 	lsr.w	r3, r2, r3
 80095bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	ee07 3a90 	vmov	s15, r3
 80095ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b62      	ldr	r3, [pc, #392]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009606:	e087      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009774 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b51      	ldr	r3, [pc, #324]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a02 	vldr	s12, [r7, #8]
 800962e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800964a:	e065      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b40      	ldr	r3, [pc, #256]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009672:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968e:	e043      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800977c <HAL_RCC_GetSysClockFreq+0x2f0>
 800969e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a2:	4b2f      	ldr	r3, [pc, #188]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096d2:	e021      	b.n	8009718 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009778 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e6:	4b1e      	ldr	r3, [pc, #120]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009716:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	0a5b      	lsrs	r3, r3, #9
 800971e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009722:	3301      	adds	r3, #1
 8009724:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009730:	edd7 6a07 	vldr	s13, [r7, #28]
 8009734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973c:	ee17 3a90 	vmov	r3, s15
 8009740:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009742:	e005      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
      break;
 8009748:	e002      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800974a:	4b07      	ldr	r3, [pc, #28]	; (8009768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800974c:	61bb      	str	r3, [r7, #24]
      break;
 800974e:	bf00      	nop
  }

  return sysclockfreq;
 8009750:	69bb      	ldr	r3, [r7, #24]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3724      	adds	r7, #36	; 0x24
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	58024400 	.word	0x58024400
 8009764:	03d09000 	.word	0x03d09000
 8009768:	003d0900 	.word	0x003d0900
 800976c:	02faf080 	.word	0x02faf080
 8009770:	46000000 	.word	0x46000000
 8009774:	4c742400 	.word	0x4c742400
 8009778:	4a742400 	.word	0x4a742400
 800977c:	4c3ebc20 	.word	0x4c3ebc20

08009780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009786:	f7ff fe81 	bl	800948c <HAL_RCC_GetSysClockFreq>
 800978a:	4602      	mov	r2, r0
 800978c:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	0a1b      	lsrs	r3, r3, #8
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	490f      	ldr	r1, [pc, #60]	; (80097d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009798:	5ccb      	ldrb	r3, [r1, r3]
 800979a:	f003 031f 	and.w	r3, r3, #31
 800979e:	fa22 f303 	lsr.w	r3, r2, r3
 80097a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097a4:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80097ae:	5cd3      	ldrb	r3, [r2, r3]
 80097b0:	f003 031f 	and.w	r3, r3, #31
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ba:	4a07      	ldr	r2, [pc, #28]	; (80097d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097be:	4a07      	ldr	r2, [pc, #28]	; (80097dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097c4:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097c6:	681b      	ldr	r3, [r3, #0]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	58024400 	.word	0x58024400
 80097d4:	080140b0 	.word	0x080140b0
 80097d8:	24000004 	.word	0x24000004
 80097dc:	24000000 	.word	0x24000000

080097e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097e4:	f7ff ffcc 	bl	8009780 <HAL_RCC_GetHCLKFreq>
 80097e8:	4602      	mov	r2, r0
 80097ea:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	091b      	lsrs	r3, r3, #4
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	4904      	ldr	r1, [pc, #16]	; (8009808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097f6:	5ccb      	ldrb	r3, [r1, r3]
 80097f8:	f003 031f 	and.w	r3, r3, #31
 80097fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009800:	4618      	mov	r0, r3
 8009802:	bd80      	pop	{r7, pc}
 8009804:	58024400 	.word	0x58024400
 8009808:	080140b0 	.word	0x080140b0

0800980c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009810:	f7ff ffb6 	bl	8009780 <HAL_RCC_GetHCLKFreq>
 8009814:	4602      	mov	r2, r0
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	4904      	ldr	r1, [pc, #16]	; (8009834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009822:	5ccb      	ldrb	r3, [r1, r3]
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800982c:	4618      	mov	r0, r3
 800982e:	bd80      	pop	{r7, pc}
 8009830:	58024400 	.word	0x58024400
 8009834:	080140b0 	.word	0x080140b0

08009838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b0c6      	sub	sp, #280	; 0x118
 800983e:	af00      	add	r7, sp, #0
 8009840:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009844:	2300      	movs	r3, #0
 8009846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800984a:	2300      	movs	r3, #0
 800984c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800985c:	2500      	movs	r5, #0
 800985e:	ea54 0305 	orrs.w	r3, r4, r5
 8009862:	d049      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800986e:	d02f      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009874:	d828      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800987a:	d01a      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800987c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009880:	d822      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800988a:	d007      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800988c:	e01c      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988e:	4bab      	ldr	r3, [pc, #684]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	4aaa      	ldr	r2, [pc, #680]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800989a:	e01a      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a0:	3308      	adds	r3, #8
 80098a2:	2102      	movs	r1, #2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f002 fa49 	bl	800bd3c <RCCEx_PLL2_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098b0:	e00f      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b6:	3328      	adds	r3, #40	; 0x28
 80098b8:	2102      	movs	r1, #2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f002 faf0 	bl	800bea0 <RCCEx_PLL3_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098c6:	e004      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098ce:	e000      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098da:	4b98      	ldr	r3, [pc, #608]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098e8:	4a94      	ldr	r2, [pc, #592]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098ea:	430b      	orrs	r3, r1
 80098ec:	6513      	str	r3, [r2, #80]	; 0x50
 80098ee:	e003      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009904:	f04f 0900 	mov.w	r9, #0
 8009908:	ea58 0309 	orrs.w	r3, r8, r9
 800990c:	d047      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800990e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009914:	2b04      	cmp	r3, #4
 8009916:	d82a      	bhi.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009918:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009935 	.word	0x08009935
 8009924:	08009943 	.word	0x08009943
 8009928:	08009959 	.word	0x08009959
 800992c:	08009977 	.word	0x08009977
 8009930:	08009977 	.word	0x08009977
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009934:	4b81      	ldr	r3, [pc, #516]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a80      	ldr	r2, [pc, #512]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800993a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009940:	e01a      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009946:	3308      	adds	r3, #8
 8009948:	2100      	movs	r1, #0
 800994a:	4618      	mov	r0, r3
 800994c:	f002 f9f6 	bl	800bd3c <RCCEx_PLL2_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009956:	e00f      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995c:	3328      	adds	r3, #40	; 0x28
 800995e:	2100      	movs	r1, #0
 8009960:	4618      	mov	r0, r3
 8009962:	f002 fa9d 	bl	800bea0 <RCCEx_PLL3_Config>
 8009966:	4603      	mov	r3, r0
 8009968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800996c:	e004      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009974:	e000      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009978:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009980:	4b6e      	ldr	r3, [pc, #440]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009984:	f023 0107 	bic.w	r1, r3, #7
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800998c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998e:	4a6b      	ldr	r2, [pc, #428]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009990:	430b      	orrs	r3, r1
 8009992:	6513      	str	r3, [r2, #80]	; 0x50
 8009994:	e003      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009996:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800999a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80099aa:	f04f 0b00 	mov.w	fp, #0
 80099ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80099b2:	d05b      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099bc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80099c0:	d03b      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80099c2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80099c6:	d834      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099cc:	d037      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80099ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099d2:	d82e      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099d8:	d033      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80099da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099de:	d828      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099e4:	d01a      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80099e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099ea:	d822      	bhi.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80099f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099f4:	d007      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80099f6:	e01c      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f8:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	4a4f      	ldr	r2, [pc, #316]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a04:	e01e      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f002 f994 	bl	800bd3c <RCCEx_PLL2_Config>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a1a:	e013      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a20:	3328      	adds	r3, #40	; 0x28
 8009a22:	2100      	movs	r1, #0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f002 fa3b 	bl	800bea0 <RCCEx_PLL3_Config>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a30:	e008      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a38:	e004      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a3a:	bf00      	nop
 8009a3c:	e002      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a3e:	bf00      	nop
 8009a40:	e000      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10b      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a4c:	4b3b      	ldr	r3, [pc, #236]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a50:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a5c:	4a37      	ldr	r2, [pc, #220]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a5e:	430b      	orrs	r3, r1
 8009a60:	6593      	str	r3, [r2, #88]	; 0x58
 8009a62:	e003      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a86:	460b      	mov	r3, r1
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	d05d      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a94:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a98:	d03b      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009a9a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a9e:	d834      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aa4:	d037      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aaa:	d82e      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ab0:	d033      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ab6:	d828      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009abc:	d01a      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ac2:	d822      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009acc:	d007      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ace:	e01c      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad0:	4b1a      	ldr	r3, [pc, #104]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	4a19      	ldr	r2, [pc, #100]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009adc:	e01e      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f002 f928 	bl	800bd3c <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009af2:	e013      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af8:	3328      	adds	r3, #40	; 0x28
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f002 f9cf 	bl	800bea0 <RCCEx_PLL3_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b08:	e008      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b10:	e004      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b12:	bf00      	nop
 8009b14:	e002      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b16:	bf00      	nop
 8009b18:	e000      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10d      	bne.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b28:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b34:	4a01      	ldr	r2, [pc, #4]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	6593      	str	r3, [r2, #88]	; 0x58
 8009b3a:	e005      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009b54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b5e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4313      	orrs	r3, r2
 8009b66:	d03a      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6e:	2b30      	cmp	r3, #48	; 0x30
 8009b70:	d01f      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009b72:	2b30      	cmp	r3, #48	; 0x30
 8009b74:	d819      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d00c      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d815      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d019      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b82:	2b10      	cmp	r3, #16
 8009b84:	d111      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b86:	4baa      	ldr	r3, [pc, #680]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	4aa9      	ldr	r2, [pc, #676]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b92:	e011      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b98:	3308      	adds	r3, #8
 8009b9a:	2102      	movs	r1, #2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f002 f8cd 	bl	800bd3c <RCCEx_PLL2_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009ba8:	e006      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bb0:	e002      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009bc0:	4b9b      	ldr	r3, [pc, #620]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bce:	4a98      	ldr	r2, [pc, #608]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bd4:	e003      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bf4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	d051      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c08:	d035      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c0e:	d82e      	bhi.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c14:	d031      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c1a:	d828      	bhi.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c20:	d01a      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c26:	d822      	bhi.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d007      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009c32:	e01c      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c34:	4b7e      	ldr	r3, [pc, #504]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	4a7d      	ldr	r2, [pc, #500]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c40:	e01c      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c46:	3308      	adds	r3, #8
 8009c48:	2100      	movs	r1, #0
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f002 f876 	bl	800bd3c <RCCEx_PLL2_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c56:	e011      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5c:	3328      	adds	r3, #40	; 0x28
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 f91d 	bl	800bea0 <RCCEx_PLL3_Config>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c6c:	e006      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c74:	e002      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c76:	bf00      	nop
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c84:	4b6a      	ldr	r3, [pc, #424]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c88:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c92:	4a67      	ldr	r2, [pc, #412]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6513      	str	r3, [r2, #80]	; 0x50
 8009c98:	e003      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cb8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d053      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ccc:	d033      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cd2:	d82c      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cd8:	d02f      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cde:	d826      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ce4:	d02b      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cea:	d820      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf0:	d012      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf6:	d81a      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d022      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d00:	d115      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d06:	3308      	adds	r3, #8
 8009d08:	2101      	movs	r1, #1
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f002 f816 	bl	800bd3c <RCCEx_PLL2_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d16:	e015      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d1c:	3328      	adds	r3, #40	; 0x28
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 f8bd 	bl	800bea0 <RCCEx_PLL3_Config>
 8009d26:	4603      	mov	r3, r0
 8009d28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d2c:	e00a      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d34:	e006      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d36:	bf00      	nop
 8009d38:	e004      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d3a:	bf00      	nop
 8009d3c:	e002      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d3e:	bf00      	nop
 8009d40:	e000      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d4c:	4b38      	ldr	r3, [pc, #224]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d50:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d5a:	4a35      	ldr	r2, [pc, #212]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	6513      	str	r3, [r2, #80]	; 0x50
 8009d60:	e003      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d84:	460b      	mov	r3, r1
 8009d86:	4313      	orrs	r3, r2
 8009d88:	d058      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d96:	d033      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d9c:	d82c      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d02f      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da8:	d826      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dae:	d02b      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009db4:	d820      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dba:	d012      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc0:	d81a      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d022      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dca:	d115      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 ffb1 	bl	800bd3c <RCCEx_PLL2_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009de0:	e015      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de6:	3328      	adds	r3, #40	; 0x28
 8009de8:	2101      	movs	r1, #1
 8009dea:	4618      	mov	r0, r3
 8009dec:	f002 f858 	bl	800bea0 <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009df6:	e00a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009dfe:	e006      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e00:	bf00      	nop
 8009e02:	e004      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e04:	bf00      	nop
 8009e06:	e002      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e08:	bf00      	nop
 8009e0a:	e000      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10e      	bne.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e26:	4a02      	ldr	r2, [pc, #8]	; (8009e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8009e2c:	e006      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009e2e:	bf00      	nop
 8009e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	d037      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e66:	d00e      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e6c:	d816      	bhi.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d018      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e76:	d111      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e78:	4bc4      	ldr	r3, [pc, #784]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	4ac3      	ldr	r2, [pc, #780]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e84:	e00f      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f001 ff54 	bl	800bd3c <RCCEx_PLL2_Config>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e9a:	e004      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ea2:	e000      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009eae:	4bb7      	ldr	r3, [pc, #732]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ebc:	4ab3      	ldr	r2, [pc, #716]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6513      	str	r3, [r2, #80]	; 0x50
 8009ec2:	e003      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ee2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	d039      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d81c      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f39 	.word	0x08009f39
 8009f00:	08009f0d 	.word	0x08009f0d
 8009f04:	08009f1b 	.word	0x08009f1b
 8009f08:	08009f39 	.word	0x08009f39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f0c:	4b9f      	ldr	r3, [pc, #636]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a9e      	ldr	r2, [pc, #632]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f18:	e00f      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2102      	movs	r1, #2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 ff0a 	bl	800bd3c <RCCEx_PLL2_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f2e:	e004      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f36:	e000      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f42:	4b92      	ldr	r3, [pc, #584]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f46:	f023 0103 	bic.w	r1, r3, #3
 8009f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f50:	4a8e      	ldr	r2, [pc, #568]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f52:	430b      	orrs	r3, r1
 8009f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f56:	e003      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f70:	2300      	movs	r3, #0
 8009f72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f000 8099 	beq.w	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f82:	4b83      	ldr	r3, [pc, #524]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a82      	ldr	r2, [pc, #520]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f8e:	f7f8 fdad 	bl	8002aec <HAL_GetTick>
 8009f92:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f96:	e00b      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f98:	f7f8 fda8 	bl	8002aec <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b64      	cmp	r3, #100	; 0x64
 8009fa6:	d903      	bls.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fae:	e005      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb0:	4b77      	ldr	r3, [pc, #476]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0ed      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d173      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009fc4:	4b71      	ldr	r3, [pc, #452]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fd0:	4053      	eors	r3, r2
 8009fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d015      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fda:	4b6c      	ldr	r3, [pc, #432]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fe6:	4b69      	ldr	r3, [pc, #420]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fea:	4a68      	ldr	r2, [pc, #416]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ff0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ff2:	4b66      	ldr	r3, [pc, #408]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	4a65      	ldr	r2, [pc, #404]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ffc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ffe:	4a63      	ldr	r2, [pc, #396]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a004:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a012:	d118      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a014:	f7f8 fd6a 	bl	8002aec <HAL_GetTick>
 800a018:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a01c:	e00d      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a01e:	f7f8 fd65 	bl	8002aec <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a02e:	429a      	cmp	r2, r3
 800a030:	d903      	bls.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a038:	e005      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a03a:	4b54      	ldr	r3, [pc, #336]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0eb      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a046:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d129      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a05e:	d10e      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a060:	4b4a      	ldr	r3, [pc, #296]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a070:	091a      	lsrs	r2, r3, #4
 800a072:	4b48      	ldr	r3, [pc, #288]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a074:	4013      	ands	r3, r2
 800a076:	4a45      	ldr	r2, [pc, #276]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a078:	430b      	orrs	r3, r1
 800a07a:	6113      	str	r3, [r2, #16]
 800a07c:	e005      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a07e:	4b43      	ldr	r3, [pc, #268]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	4a42      	ldr	r2, [pc, #264]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a084:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a088:	6113      	str	r3, [r2, #16]
 800a08a:	4b40      	ldr	r3, [pc, #256]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a08c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a09a:	4a3c      	ldr	r2, [pc, #240]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a09c:	430b      	orrs	r3, r1
 800a09e:	6713      	str	r3, [r2, #112]	; 0x70
 800a0a0:	e008      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a0aa:	e003      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f002 0301 	and.w	r3, r2, #1
 800a0c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f000 808f 	beq.w	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0dc:	2b28      	cmp	r3, #40	; 0x28
 800a0de:	d871      	bhi.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a1cd 	.word	0x0800a1cd
 800a0ec:	0800a1c5 	.word	0x0800a1c5
 800a0f0:	0800a1c5 	.word	0x0800a1c5
 800a0f4:	0800a1c5 	.word	0x0800a1c5
 800a0f8:	0800a1c5 	.word	0x0800a1c5
 800a0fc:	0800a1c5 	.word	0x0800a1c5
 800a100:	0800a1c5 	.word	0x0800a1c5
 800a104:	0800a1c5 	.word	0x0800a1c5
 800a108:	0800a199 	.word	0x0800a199
 800a10c:	0800a1c5 	.word	0x0800a1c5
 800a110:	0800a1c5 	.word	0x0800a1c5
 800a114:	0800a1c5 	.word	0x0800a1c5
 800a118:	0800a1c5 	.word	0x0800a1c5
 800a11c:	0800a1c5 	.word	0x0800a1c5
 800a120:	0800a1c5 	.word	0x0800a1c5
 800a124:	0800a1c5 	.word	0x0800a1c5
 800a128:	0800a1af 	.word	0x0800a1af
 800a12c:	0800a1c5 	.word	0x0800a1c5
 800a130:	0800a1c5 	.word	0x0800a1c5
 800a134:	0800a1c5 	.word	0x0800a1c5
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1c5 	.word	0x0800a1c5
 800a140:	0800a1c5 	.word	0x0800a1c5
 800a144:	0800a1c5 	.word	0x0800a1c5
 800a148:	0800a1cd 	.word	0x0800a1cd
 800a14c:	0800a1c5 	.word	0x0800a1c5
 800a150:	0800a1c5 	.word	0x0800a1c5
 800a154:	0800a1c5 	.word	0x0800a1c5
 800a158:	0800a1c5 	.word	0x0800a1c5
 800a15c:	0800a1c5 	.word	0x0800a1c5
 800a160:	0800a1c5 	.word	0x0800a1c5
 800a164:	0800a1c5 	.word	0x0800a1c5
 800a168:	0800a1cd 	.word	0x0800a1cd
 800a16c:	0800a1c5 	.word	0x0800a1c5
 800a170:	0800a1c5 	.word	0x0800a1c5
 800a174:	0800a1c5 	.word	0x0800a1c5
 800a178:	0800a1c5 	.word	0x0800a1c5
 800a17c:	0800a1c5 	.word	0x0800a1c5
 800a180:	0800a1c5 	.word	0x0800a1c5
 800a184:	0800a1c5 	.word	0x0800a1c5
 800a188:	0800a1cd 	.word	0x0800a1cd
 800a18c:	58024400 	.word	0x58024400
 800a190:	58024800 	.word	0x58024800
 800a194:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19c:	3308      	adds	r3, #8
 800a19e:	2101      	movs	r1, #1
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 fdcb 	bl	800bd3c <RCCEx_PLL2_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a1ac:	e00f      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b2:	3328      	adds	r3, #40	; 0x28
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fe72 	bl	800bea0 <RCCEx_PLL3_Config>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a1c2:	e004      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1ca:	e000      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a1cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a1d6:	4bbf      	ldr	r3, [pc, #764]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1da:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1e4:	4abb      	ldr	r2, [pc, #748]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1e6:	430b      	orrs	r3, r1
 800a1e8:	6553      	str	r3, [r2, #84]	; 0x54
 800a1ea:	e003      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f002 0302 	and.w	r3, r2, #2
 800a200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a204:	2300      	movs	r3, #0
 800a206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a20a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a20e:	460b      	mov	r3, r1
 800a210:	4313      	orrs	r3, r2
 800a212:	d041      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a21a:	2b05      	cmp	r3, #5
 800a21c:	d824      	bhi.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a271 	.word	0x0800a271
 800a228:	0800a23d 	.word	0x0800a23d
 800a22c:	0800a253 	.word	0x0800a253
 800a230:	0800a271 	.word	0x0800a271
 800a234:	0800a271 	.word	0x0800a271
 800a238:	0800a271 	.word	0x0800a271
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a240:	3308      	adds	r3, #8
 800a242:	2101      	movs	r1, #1
 800a244:	4618      	mov	r0, r3
 800a246:	f001 fd79 	bl	800bd3c <RCCEx_PLL2_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a250:	e00f      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a256:	3328      	adds	r3, #40	; 0x28
 800a258:	2101      	movs	r1, #1
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fe20 	bl	800bea0 <RCCEx_PLL3_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a266:	e004      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a26e:	e000      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a27a:	4b96      	ldr	r3, [pc, #600]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	f023 0107 	bic.w	r1, r3, #7
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a288:	4a92      	ldr	r2, [pc, #584]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a28a:	430b      	orrs	r3, r1
 800a28c:	6553      	str	r3, [r2, #84]	; 0x54
 800a28e:	e003      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a290:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a294:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f002 0304 	and.w	r3, r2, #4
 800a2a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	d044      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c0:	2b05      	cmp	r3, #5
 800a2c2:	d825      	bhi.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a2c4:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a319 	.word	0x0800a319
 800a2d0:	0800a2e5 	.word	0x0800a2e5
 800a2d4:	0800a2fb 	.word	0x0800a2fb
 800a2d8:	0800a319 	.word	0x0800a319
 800a2dc:	0800a319 	.word	0x0800a319
 800a2e0:	0800a319 	.word	0x0800a319
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 fd25 	bl	800bd3c <RCCEx_PLL2_Config>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2f8:	e00f      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fe:	3328      	adds	r3, #40	; 0x28
 800a300:	2101      	movs	r1, #1
 800a302:	4618      	mov	r0, r3
 800a304:	f001 fdcc 	bl	800bea0 <RCCEx_PLL3_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a30e:	e004      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a322:	4b6c      	ldr	r3, [pc, #432]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	f023 0107 	bic.w	r1, r3, #7
 800a32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a332:	4a68      	ldr	r2, [pc, #416]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a334:	430b      	orrs	r3, r1
 800a336:	6593      	str	r3, [r2, #88]	; 0x58
 800a338:	e003      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a33e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f002 0320 	and.w	r3, r2, #32
 800a34e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a352:	2300      	movs	r3, #0
 800a354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a358:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4313      	orrs	r3, r2
 800a360:	d055      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a36a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a36e:	d033      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a374:	d82c      	bhi.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37a:	d02f      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a37c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a380:	d826      	bhi.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a386:	d02b      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a388:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a38c:	d820      	bhi.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a392:	d012      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a398:	d81a      	bhi.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d022      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a39e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3a2:	d115      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f001 fcc5 	bl	800bd3c <RCCEx_PLL2_Config>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a3b8:	e015      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3be:	3328      	adds	r3, #40	; 0x28
 800a3c0:	2102      	movs	r1, #2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f001 fd6c 	bl	800bea0 <RCCEx_PLL3_Config>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a3ce:	e00a      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3d6:	e006      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3d8:	bf00      	nop
 800a3da:	e004      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3dc:	bf00      	nop
 800a3de:	e002      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10b      	bne.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3ee:	4b39      	ldr	r3, [pc, #228]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3fe:	4a35      	ldr	r2, [pc, #212]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a400:	430b      	orrs	r3, r1
 800a402:	6553      	str	r3, [r2, #84]	; 0x54
 800a404:	e003      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a406:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a40a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a41a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a41e:	2300      	movs	r3, #0
 800a420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a424:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a428:	460b      	mov	r3, r1
 800a42a:	4313      	orrs	r3, r2
 800a42c:	d058      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a436:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a43a:	d033      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a43c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a440:	d82c      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	d02f      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44c:	d826      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a44e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a452:	d02b      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a458:	d820      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a45e:	d012      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a464:	d81a      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a466:	2b00      	cmp	r3, #0
 800a468:	d022      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a46e:	d115      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a474:	3308      	adds	r3, #8
 800a476:	2100      	movs	r1, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f001 fc5f 	bl	800bd3c <RCCEx_PLL2_Config>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a484:	e015      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48a:	3328      	adds	r3, #40	; 0x28
 800a48c:	2102      	movs	r1, #2
 800a48e:	4618      	mov	r0, r3
 800a490:	f001 fd06 	bl	800bea0 <RCCEx_PLL3_Config>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a49a:	e00a      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4a2:	e006      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4a4:	bf00      	nop
 800a4a6:	e004      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4a8:	bf00      	nop
 800a4aa:	e002      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4ac:	bf00      	nop
 800a4ae:	e000      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10e      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a4ba:	4b06      	ldr	r3, [pc, #24]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4be:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4ca:	4a02      	ldr	r2, [pc, #8]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	6593      	str	r3, [r2, #88]	; 0x58
 800a4d0:	e006      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a4ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d055      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a508:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a50c:	d033      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a50e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a512:	d82c      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a518:	d02f      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a51e:	d826      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a520:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a524:	d02b      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a52a:	d820      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a52c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a530:	d012      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a536:	d81a      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d022      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a540:	d115      	bne.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a546:	3308      	adds	r3, #8
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f001 fbf6 	bl	800bd3c <RCCEx_PLL2_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a556:	e015      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	3328      	adds	r3, #40	; 0x28
 800a55e:	2102      	movs	r1, #2
 800a560:	4618      	mov	r0, r3
 800a562:	f001 fc9d 	bl	800bea0 <RCCEx_PLL3_Config>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a56c:	e00a      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a574:	e006      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a576:	bf00      	nop
 800a578:	e004      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a57a:	bf00      	nop
 800a57c:	e002      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a58c:	4ba0      	ldr	r3, [pc, #640]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a590:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a59c:	4a9c      	ldr	r2, [pc, #624]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	6593      	str	r3, [r2, #88]	; 0x58
 800a5a2:	e003      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 0308 	and.w	r3, r2, #8
 800a5b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d01e      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d8:	d10c      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5de:	3328      	adds	r3, #40	; 0x28
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 fc5c 	bl	800bea0 <RCCEx_PLL3_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a5f4:	4b86      	ldr	r3, [pc, #536]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a604:	4a82      	ldr	r2, [pc, #520]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a606:	430b      	orrs	r3, r1
 800a608:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f002 0310 	and.w	r3, r2, #16
 800a616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a620:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d01e      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a636:	d10c      	bne.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63c:	3328      	adds	r3, #40	; 0x28
 800a63e:	2102      	movs	r1, #2
 800a640:	4618      	mov	r0, r3
 800a642:	f001 fc2d 	bl	800bea0 <RCCEx_PLL3_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a652:	4b6f      	ldr	r3, [pc, #444]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a662:	4a6b      	ldr	r2, [pc, #428]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a664:	430b      	orrs	r3, r1
 800a666:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a674:	67bb      	str	r3, [r7, #120]	; 0x78
 800a676:	2300      	movs	r3, #0
 800a678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a67a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a67e:	460b      	mov	r3, r1
 800a680:	4313      	orrs	r3, r2
 800a682:	d03e      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a68c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a690:	d022      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a696:	d81b      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a0:	d00b      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a6a2:	e015      	b.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 fb45 	bl	800bd3c <RCCEx_PLL2_Config>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6b8:	e00f      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6be:	3328      	adds	r3, #40	; 0x28
 800a6c0:	2102      	movs	r1, #2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 fbec 	bl	800bea0 <RCCEx_PLL3_Config>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6ce:	e004      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6d6:	e000      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10b      	bne.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6e2:	4b4b      	ldr	r3, [pc, #300]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6f2:	4a47      	ldr	r2, [pc, #284]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	6593      	str	r3, [r2, #88]	; 0x58
 800a6f8:	e003      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a70e:	673b      	str	r3, [r7, #112]	; 0x70
 800a710:	2300      	movs	r3, #0
 800a712:	677b      	str	r3, [r7, #116]	; 0x74
 800a714:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a718:	460b      	mov	r3, r1
 800a71a:	4313      	orrs	r3, r2
 800a71c:	d03b      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a72a:	d01f      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a72c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a730:	d818      	bhi.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a736:	d003      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a73c:	d007      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a73e:	e011      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a740:	4b33      	ldr	r3, [pc, #204]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	4a32      	ldr	r2, [pc, #200]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a74a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a74c:	e00f      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	3328      	adds	r3, #40	; 0x28
 800a754:	2101      	movs	r1, #1
 800a756:	4618      	mov	r0, r3
 800a758:	f001 fba2 	bl	800bea0 <RCCEx_PLL3_Config>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a762:	e004      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a76a:	e000      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10b      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a776:	4b26      	ldr	r3, [pc, #152]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a786:	4a22      	ldr	r2, [pc, #136]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a788:	430b      	orrs	r3, r1
 800a78a:	6553      	str	r3, [r2, #84]	; 0x54
 800a78c:	e003      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a792:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a7a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	d034      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a7bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c0:	d007      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a7c2:	e011      	b.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7c4:	4b12      	ldr	r3, [pc, #72]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4a11      	ldr	r2, [pc, #68]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7d0:	e00e      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	2102      	movs	r1, #2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 faae 	bl	800bd3c <RCCEx_PLL2_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7e6:	e003      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10d      	bne.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a806:	4a02      	ldr	r2, [pc, #8]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a808:	430b      	orrs	r3, r1
 800a80a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a80c:	e006      	b.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a80e:	bf00      	nop
 800a810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a818:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a828:	663b      	str	r3, [r7, #96]	; 0x60
 800a82a:	2300      	movs	r3, #0
 800a82c:	667b      	str	r3, [r7, #100]	; 0x64
 800a82e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a832:	460b      	mov	r3, r1
 800a834:	4313      	orrs	r3, r2
 800a836:	d00c      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	3328      	adds	r3, #40	; 0x28
 800a83e:	2102      	movs	r1, #2
 800a840:	4618      	mov	r0, r3
 800a842:	f001 fb2d 	bl	800bea0 <RCCEx_PLL3_Config>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a85e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a860:	2300      	movs	r3, #0
 800a862:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a864:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a868:	460b      	mov	r3, r1
 800a86a:	4313      	orrs	r3, r2
 800a86c:	d036      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a878:	d018      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a87a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a87e:	d811      	bhi.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a884:	d014      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a88a:	d80b      	bhi.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d011      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a894:	d106      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a896:	4bb7      	ldr	r3, [pc, #732]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	4ab6      	ldr	r2, [pc, #728]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a89c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a8a2:	e008      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8aa:	e004      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8ac:	bf00      	nop
 800a8ae:	e002      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8b0:	bf00      	nop
 800a8b2:	e000      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8be:	4bad      	ldr	r3, [pc, #692]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8cc:	4aa9      	ldr	r2, [pc, #676]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	6553      	str	r3, [r2, #84]	; 0x54
 800a8d2:	e003      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a8e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	657b      	str	r3, [r7, #84]	; 0x54
 800a8ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	d009      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8f8:	4b9e      	ldr	r3, [pc, #632]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a906:	4a9b      	ldr	r2, [pc, #620]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a908:	430b      	orrs	r3, r1
 800a90a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a918:	64bb      	str	r3, [r7, #72]	; 0x48
 800a91a:	2300      	movs	r3, #0
 800a91c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a91e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a922:	460b      	mov	r3, r1
 800a924:	4313      	orrs	r3, r2
 800a926:	d009      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a928:	4b92      	ldr	r3, [pc, #584]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a92c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a936:	4a8f      	ldr	r2, [pc, #572]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a938:	430b      	orrs	r3, r1
 800a93a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a948:	643b      	str	r3, [r7, #64]	; 0x40
 800a94a:	2300      	movs	r3, #0
 800a94c:	647b      	str	r3, [r7, #68]	; 0x44
 800a94e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a952:	460b      	mov	r3, r1
 800a954:	4313      	orrs	r3, r2
 800a956:	d00e      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a958:	4b86      	ldr	r3, [pc, #536]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	4a85      	ldr	r2, [pc, #532]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a95e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a962:	6113      	str	r3, [r2, #16]
 800a964:	4b83      	ldr	r3, [pc, #524]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a966:	6919      	ldr	r1, [r3, #16]
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a970:	4a80      	ldr	r2, [pc, #512]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a972:	430b      	orrs	r3, r1
 800a974:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a982:	63bb      	str	r3, [r7, #56]	; 0x38
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a988:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a98c:	460b      	mov	r3, r1
 800a98e:	4313      	orrs	r3, r2
 800a990:	d009      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a992:	4b78      	ldr	r3, [pc, #480]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a996:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a0:	4a74      	ldr	r2, [pc, #464]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9a2:	430b      	orrs	r3, r1
 800a9a4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a9b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	d00a      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9c2:	4b6c      	ldr	r3, [pc, #432]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d2:	4a68      	ldr	r2, [pc, #416]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	62b9      	str	r1, [r7, #40]	; 0x28
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	d011      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 f99d 	bl	800bd3c <RCCEx_PLL2_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	2100      	movs	r1, #0
 800aa22:	6239      	str	r1, [r7, #32]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
 800aa2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4313      	orrs	r3, r2
 800aa32:	d011      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa38:	3308      	adds	r3, #8
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 f97d 	bl	800bd3c <RCCEx_PLL2_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	2100      	movs	r1, #0
 800aa62:	61b9      	str	r1, [r7, #24]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4313      	orrs	r3, r2
 800aa72:	d011      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa78:	3308      	adds	r3, #8
 800aa7a:	2102      	movs	r1, #2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 f95d 	bl	800bd3c <RCCEx_PLL2_Config>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6139      	str	r1, [r7, #16]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	617b      	str	r3, [r7, #20]
 800aaaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d011      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	3328      	adds	r3, #40	; 0x28
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 f9ef 	bl	800bea0 <RCCEx_PLL3_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800aac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	2100      	movs	r1, #0
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	f003 0310 	and.w	r3, r3, #16
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	d011      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf8:	3328      	adds	r3, #40	; 0x28
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 f9cf 	bl	800bea0 <RCCEx_PLL3_Config>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ab08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	2100      	movs	r1, #0
 800ab22:	6039      	str	r1, [r7, #0]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	607b      	str	r3, [r7, #4]
 800ab2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4313      	orrs	r3, r2
 800ab32:	d011      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab38:	3328      	adds	r3, #40	; 0x28
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f9af 	bl	800bea0 <RCCEx_PLL3_Config>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ab48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ab58:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e000      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop
 800ab74:	58024400 	.word	0x58024400

0800ab78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b090      	sub	sp, #64	; 0x40
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab86:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	f040 8094 	bne.w	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab90:	4b9b      	ldr	r3, [pc, #620]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	f200 8087 	bhi.w	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aba2:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800abbd 	.word	0x0800abbd
 800abac:	0800abe5 	.word	0x0800abe5
 800abb0:	0800ac0d 	.word	0x0800ac0d
 800abb4:	0800aca9 	.word	0x0800aca9
 800abb8:	0800ac35 	.word	0x0800ac35
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abbc:	4b90      	ldr	r3, [pc, #576]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abc8:	d108      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 ff62 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd8:	f000 bc93 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abe0:	f000 bc8f 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abe4:	4b86      	ldr	r3, [pc, #536]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abf0:	d108      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf2:	f107 0318 	add.w	r3, r7, #24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fca6 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac00:	f000 bc7f 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac08:	f000 bc7b 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac0c:	4b7c      	ldr	r3, [pc, #496]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac18:	d108      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac1a:	f107 030c 	add.w	r3, r7, #12
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fde6 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac28:	f000 bc6b 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac30:	f000 bc67 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac34:	4b72      	ldr	r3, [pc, #456]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac3e:	4b70      	ldr	r3, [pc, #448]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0304 	and.w	r3, r3, #4
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d10c      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ac4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d109      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac50:	4b6b      	ldr	r3, [pc, #428]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	08db      	lsrs	r3, r3, #3
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	4a6a      	ldr	r2, [pc, #424]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac62:	e01f      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac64:	4b66      	ldr	r3, [pc, #408]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac70:	d106      	bne.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac78:	d102      	bne.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac7a:	4b63      	ldr	r3, [pc, #396]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ac7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7e:	e011      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac80:	4b5f      	ldr	r3, [pc, #380]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac8c:	d106      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac94:	d102      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac96:	4b5d      	ldr	r3, [pc, #372]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac9a:	e003      	b.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aca0:	f000 bc2f 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aca4:	f000 bc2d 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aca8:	4b59      	ldr	r3, [pc, #356]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acac:	f000 bc29 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb4:	f000 bc25 	b.w	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800acb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acbc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800acc0:	430b      	orrs	r3, r1
 800acc2:	f040 80a7 	bne.w	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800acc6:	4b4e      	ldr	r3, [pc, #312]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800acce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acd6:	d054      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acde:	f200 808b 	bhi.w	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ace8:	f000 8083 	beq.w	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acf2:	f200 8081 	bhi.w	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acfc:	d02f      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad04:	d878      	bhi.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad12:	d012      	beq.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ad14:	e070      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad16:	4b3a      	ldr	r3, [pc, #232]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad22:	d107      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 feb5 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad32:	e3e6      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad38:	e3e3      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad3a:	4b31      	ldr	r3, [pc, #196]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad46:	d107      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad48:	f107 0318 	add.w	r3, r7, #24
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fbfb 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad56:	e3d4      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad5c:	e3d1      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad5e:	4b28      	ldr	r3, [pc, #160]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad6a:	d107      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad6c:	f107 030c 	add.w	r3, r7, #12
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fd3d 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad7a:	e3c2      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad80:	e3bf      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad82:	4b1f      	ldr	r3, [pc, #124]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad8c:	4b1c      	ldr	r3, [pc, #112]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0304 	and.w	r3, r3, #4
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d10c      	bne.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ad98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d109      	bne.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad9e:	4b18      	ldr	r3, [pc, #96]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	08db      	lsrs	r3, r3, #3
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	4a16      	ldr	r2, [pc, #88]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800adaa:	fa22 f303 	lsr.w	r3, r2, r3
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb0:	e01e      	b.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adb2:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adbe:	d106      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc6:	d102      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adcc:	e010      	b.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adda:	d106      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800addc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade2:	d102      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ade8:	e002      	b.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800adee:	e388      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800adf0:	e387      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adf2:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf6:	e384      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfc:	e381      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800adfe:	bf00      	nop
 800ae00:	58024400 	.word	0x58024400
 800ae04:	03d09000 	.word	0x03d09000
 800ae08:	003d0900 	.word	0x003d0900
 800ae0c:	02faf080 	.word	0x02faf080
 800ae10:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae18:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	f040 809c 	bne.w	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ae22:	4b9e      	ldr	r3, [pc, #632]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ae2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae32:	d054      	beq.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae3a:	f200 808b 	bhi.w	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae44:	f000 8083 	beq.w	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae4e:	f200 8081 	bhi.w	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae58:	d02f      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae60:	d878      	bhi.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d004      	beq.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae6e:	d012      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ae70:	e070      	b.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae72:	4b8a      	ldr	r3, [pc, #552]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae7e:	d107      	bne.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fe07 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8e:	e338      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae94:	e335      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae96:	4b81      	ldr	r3, [pc, #516]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aea2:	d107      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aea4:	f107 0318 	add.w	r3, r7, #24
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fb4d 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e326      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb8:	e323      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeba:	4b78      	ldr	r3, [pc, #480]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec6:	d107      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec8:	f107 030c 	add.w	r3, r7, #12
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fc8f 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed6:	e314      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aedc:	e311      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aede:	4b6f      	ldr	r3, [pc, #444]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aee8:	4b6c      	ldr	r3, [pc, #432]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d10c      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d109      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aefa:	4b68      	ldr	r3, [pc, #416]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	4a66      	ldr	r2, [pc, #408]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800af06:	fa22 f303 	lsr.w	r3, r2, r3
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af0c:	e01e      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af0e:	4b63      	ldr	r3, [pc, #396]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af1a:	d106      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800af1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af22:	d102      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af24:	4b5f      	ldr	r3, [pc, #380]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af28:	e010      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af2a:	4b5c      	ldr	r3, [pc, #368]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af36:	d106      	bne.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800af38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3e:	d102      	bne.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af40:	4b59      	ldr	r3, [pc, #356]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af44:	e002      	b.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af4a:	e2da      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af4c:	e2d9      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af4e:	4b57      	ldr	r3, [pc, #348]	; (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af52:	e2d6      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af58:	e2d3      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800af5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af5e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800af62:	430b      	orrs	r3, r1
 800af64:	f040 80a7 	bne.w	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af68:	4b4c      	ldr	r3, [pc, #304]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800af70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af78:	d055      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af80:	f200 8096 	bhi.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af8a:	f000 8084 	beq.w	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af94:	f200 808c 	bhi.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af9e:	d030      	beq.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa6:	f200 8083 	bhi.w	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	2b00      	cmp	r3, #0
 800afae:	d004      	beq.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afb6:	d012      	beq.n	800afde <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800afb8:	e07a      	b.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afba:	4b38      	ldr	r3, [pc, #224]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc6:	d107      	bne.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fd63 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd6:	e294      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afdc:	e291      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afde:	4b2f      	ldr	r3, [pc, #188]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afea:	d107      	bne.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afec:	f107 0318 	add.w	r3, r7, #24
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 faa9 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800affa:	e282      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b000:	e27f      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b002:	4b26      	ldr	r3, [pc, #152]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00e:	d107      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b010:	f107 030c 	add.w	r3, r7, #12
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fbeb 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01e:	e270      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b024:	e26d      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b026:	4b1d      	ldr	r3, [pc, #116]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b030:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d10c      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b042:	4b16      	ldr	r3, [pc, #88]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	08db      	lsrs	r3, r3, #3
 800b048:	f003 0303 	and.w	r3, r3, #3
 800b04c:	4a14      	ldr	r2, [pc, #80]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b04e:	fa22 f303 	lsr.w	r3, r2, r3
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b054:	e01e      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b056:	4b11      	ldr	r3, [pc, #68]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b062:	d106      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b06a:	d102      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b06c:	4b0d      	ldr	r3, [pc, #52]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b070:	e010      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b072:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b07e:	d106      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b086:	d102      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b088:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b092:	e236      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b094:	e235      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09a:	e232      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	03d09000 	.word	0x03d09000
 800b0a4:	003d0900 	.word	0x003d0900
 800b0a8:	02faf080 	.word	0x02faf080
 800b0ac:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b4:	e225      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b0be:	430b      	orrs	r3, r1
 800b0c0:	f040 8085 	bne.w	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b0c4:	4b9c      	ldr	r3, [pc, #624]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b0cc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0d4:	d06b      	beq.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0dc:	d874      	bhi.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0e4:	d056      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0ec:	d86c      	bhi.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0f4:	d03b      	beq.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0fc:	d864      	bhi.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b104:	d021      	beq.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b10c:	d85c      	bhi.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b11a:	d004      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b11c:	e054      	b.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b11e:	f7fe fb5f 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 800b122:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b124:	e1ed      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b126:	4b84      	ldr	r3, [pc, #528]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b12e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b132:	d107      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b134:	f107 0318 	add.w	r3, r7, #24
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fa05 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b142:	e1de      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b148:	e1db      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b14a:	4b7b      	ldr	r3, [pc, #492]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b156:	d107      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fb47 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b166:	e1cc      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b16c:	e1c9      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b16e:	4b72      	ldr	r3, [pc, #456]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b04      	cmp	r3, #4
 800b178:	d109      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17a:	4b6f      	ldr	r3, [pc, #444]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a6d      	ldr	r2, [pc, #436]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18c:	e1b9      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b192:	e1b6      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b194:	4b68      	ldr	r3, [pc, #416]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a0:	d102      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b1a2:	4b67      	ldr	r3, [pc, #412]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a6:	e1ac      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ac:	e1a9      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1ae:	4b62      	ldr	r3, [pc, #392]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ba:	d102      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b1bc:	4b61      	ldr	r3, [pc, #388]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c0:	e19f      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c6:	e19c      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1cc:	e199      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	d173      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b1da:	4b57      	ldr	r3, [pc, #348]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1e2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ea:	d02f      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1f2:	d863      	bhi.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d004      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b200:	d012      	beq.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b202:	e05b      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b204:	4b4c      	ldr	r3, [pc, #304]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b20c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b210:	d107      	bne.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b212:	f107 0318 	add.w	r3, r7, #24
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f996 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b220:	e16f      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b226:	e16c      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b228:	4b43      	ldr	r3, [pc, #268]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b234:	d107      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b236:	f107 030c 	add.w	r3, r7, #12
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fad8 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b244:	e15d      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24a:	e15a      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b24c:	4b3a      	ldr	r3, [pc, #232]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b254:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b256:	4b38      	ldr	r3, [pc, #224]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0304 	and.w	r3, r3, #4
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d10c      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b268:	4b33      	ldr	r3, [pc, #204]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	4a32      	ldr	r2, [pc, #200]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b274:	fa22 f303 	lsr.w	r3, r2, r3
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b27a:	e01e      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b27c:	4b2e      	ldr	r3, [pc, #184]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b288:	d106      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b290:	d102      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b292:	4b2b      	ldr	r3, [pc, #172]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b296:	e010      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b298:	4b27      	ldr	r3, [pc, #156]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2a4:	d106      	bne.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ac:	d102      	bne.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2ae:	4b25      	ldr	r3, [pc, #148]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b2:	e002      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2b8:	e123      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2ba:	e122      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c0:	e11f      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	d13c      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b2ce:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2d6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e4:	d012      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b2e6:	e023      	b.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2e8:	4b13      	ldr	r3, [pc, #76]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f4:	d107      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fbcc 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b304:	e0fd      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b30a:	e0fa      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b318:	d107      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b31a:	f107 0318 	add.w	r3, r7, #24
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 f912 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b328:	e0eb      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32e:	e0e8      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b334:	e0e5      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b336:	bf00      	nop
 800b338:	58024400 	.word	0x58024400
 800b33c:	03d09000 	.word	0x03d09000
 800b340:	003d0900 	.word	0x003d0900
 800b344:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b350:	430b      	orrs	r3, r1
 800b352:	f040 8085 	bne.w	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b356:	4b6d      	ldr	r3, [pc, #436]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b35e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b366:	d06b      	beq.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b36e:	d874      	bhi.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b376:	d056      	beq.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37e:	d86c      	bhi.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b386:	d03b      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b38e:	d864      	bhi.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b396:	d021      	beq.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b39e:	d85c      	bhi.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ac:	d004      	beq.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b3ae:	e054      	b.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b3b0:	f000 f8b4 	bl	800b51c <HAL_RCCEx_GetD3PCLK1Freq>
 800b3b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3b6:	e0a4      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3b8:	4b54      	ldr	r3, [pc, #336]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3c4:	d107      	bne.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3c6:	f107 0318 	add.w	r3, r7, #24
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f8bc 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3d4:	e095      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3da:	e092      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3dc:	4b4b      	ldr	r3, [pc, #300]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3e8:	d107      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ea:	f107 030c 	add.w	r3, r7, #12
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f9fe 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f8:	e083      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3fe:	e080      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b400:	4b42      	ldr	r3, [pc, #264]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d109      	bne.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b40c:	4b3f      	ldr	r3, [pc, #252]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	08db      	lsrs	r3, r3, #3
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	4a3e      	ldr	r2, [pc, #248]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b418:	fa22 f303 	lsr.w	r3, r2, r3
 800b41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b41e:	e070      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b424:	e06d      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b432:	d102      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b434:	4b37      	ldr	r3, [pc, #220]	; (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b438:	e063      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43e:	e060      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b440:	4b32      	ldr	r3, [pc, #200]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b44c:	d102      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b44e:	4b32      	ldr	r3, [pc, #200]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b452:	e056      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b458:	e053      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b45e:	e050      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b464:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b468:	430b      	orrs	r3, r1
 800b46a:	d148      	bne.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b46c:	4b27      	ldr	r3, [pc, #156]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b474:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47c:	d02a      	beq.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b484:	d838      	bhi.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b492:	d00d      	beq.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b494:	e030      	b.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b496:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a2:	d102      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b4a4:	4b1c      	ldr	r3, [pc, #112]	; (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a8:	e02b      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ae:	e028      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4b0:	4b16      	ldr	r3, [pc, #88]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4bc:	d107      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fae8 	bl	800ba98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4cc:	e019      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d2:	e016      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4d4:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4e0:	d107      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e2:	f107 0318 	add.w	r3, r7, #24
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f82e 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f0:	e007      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f6:	e004      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4fc:	e001      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b504:	4618      	mov	r0, r3
 800b506:	3740      	adds	r7, #64	; 0x40
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	58024400 	.word	0x58024400
 800b510:	03d09000 	.word	0x03d09000
 800b514:	003d0900 	.word	0x003d0900
 800b518:	02faf080 	.word	0x02faf080

0800b51c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b520:	f7fe f92e 	bl	8009780 <HAL_RCC_GetHCLKFreq>
 800b524:	4602      	mov	r2, r0
 800b526:	4b06      	ldr	r3, [pc, #24]	; (800b540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	091b      	lsrs	r3, r3, #4
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	4904      	ldr	r1, [pc, #16]	; (800b544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b532:	5ccb      	ldrb	r3, [r1, r3]
 800b534:	f003 031f 	and.w	r3, r3, #31
 800b538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	58024400 	.word	0x58024400
 800b544:	080140b0 	.word	0x080140b0

0800b548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b548:	b480      	push	{r7}
 800b54a:	b089      	sub	sp, #36	; 0x24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b550:	4ba1      	ldr	r3, [pc, #644]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b55a:	4b9f      	ldr	r3, [pc, #636]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	0b1b      	lsrs	r3, r3, #12
 800b560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b566:	4b9c      	ldr	r3, [pc, #624]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56a:	091b      	lsrs	r3, r3, #4
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b572:	4b99      	ldr	r3, [pc, #612]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b576:	08db      	lsrs	r3, r3, #3
 800b578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	fb02 f303 	mul.w	r3, r2, r3
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8111 	beq.w	800b7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	f000 8083 	beq.w	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	f200 80a1 	bhi.w	800b6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d056      	beq.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b5b2:	e099      	b.n	800b6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b4:	4b88      	ldr	r3, [pc, #544]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0320 	and.w	r3, r3, #32
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d02d      	beq.n	800b61c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5c0:	4b85      	ldr	r3, [pc, #532]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	08db      	lsrs	r3, r3, #3
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	4a84      	ldr	r2, [pc, #528]	; (800b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	ee07 3a90 	vmov	s15, r3
 800b5d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ea:	4b7b      	ldr	r3, [pc, #492]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b61a:	e087      	b.n	800b72c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62e:	4b6a      	ldr	r3, [pc, #424]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b642:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65e:	e065      	b.n	800b72c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b672:	4b59      	ldr	r3, [pc, #356]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b682:	ed97 6a03 	vldr	s12, [r7, #12]
 800b686:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a2:	e043      	b.n	800b72c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b6:	4b48      	ldr	r3, [pc, #288]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e6:	e021      	b.n	800b72c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fa:	4b37      	ldr	r3, [pc, #220]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b72a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b72c:	4b2a      	ldr	r3, [pc, #168]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	0a5b      	lsrs	r3, r3, #9
 800b732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b746:	edd7 6a07 	vldr	s13, [r7, #28]
 800b74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b752:	ee17 2a90 	vmov	r2, s15
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b75a:	4b1f      	ldr	r3, [pc, #124]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b764:	ee07 3a90 	vmov	s15, r3
 800b768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b770:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b774:	edd7 6a07 	vldr	s13, [r7, #28]
 800b778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b780:	ee17 2a90 	vmov	r2, s15
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b788:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	0e1b      	lsrs	r3, r3, #24
 800b78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b79e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ae:	ee17 2a90 	vmov	r2, s15
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b7b6:	e008      	b.n	800b7ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	609a      	str	r2, [r3, #8]
}
 800b7ca:	bf00      	nop
 800b7cc:	3724      	adds	r7, #36	; 0x24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	58024400 	.word	0x58024400
 800b7dc:	03d09000 	.word	0x03d09000
 800b7e0:	46000000 	.word	0x46000000
 800b7e4:	4c742400 	.word	0x4c742400
 800b7e8:	4a742400 	.word	0x4a742400
 800b7ec:	4c3ebc20 	.word	0x4c3ebc20

0800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b089      	sub	sp, #36	; 0x24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7f8:	4ba1      	ldr	r3, [pc, #644]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fc:	f003 0303 	and.w	r3, r3, #3
 800b800:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b802:	4b9f      	ldr	r3, [pc, #636]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	0d1b      	lsrs	r3, r3, #20
 800b808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b80c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b80e:	4b9c      	ldr	r3, [pc, #624]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f003 0301 	and.w	r3, r3, #1
 800b818:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b81a:	4b99      	ldr	r3, [pc, #612]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	08db      	lsrs	r3, r3, #3
 800b820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	fb02 f303 	mul.w	r3, r2, r3
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 8111 	beq.w	800ba60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b02      	cmp	r3, #2
 800b842:	f000 8083 	beq.w	800b94c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f200 80a1 	bhi.w	800b990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d056      	beq.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b85a:	e099      	b.n	800b990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b85c:	4b88      	ldr	r3, [pc, #544]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0320 	and.w	r3, r3, #32
 800b864:	2b00      	cmp	r3, #0
 800b866:	d02d      	beq.n	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b868:	4b85      	ldr	r3, [pc, #532]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	08db      	lsrs	r3, r3, #3
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	4a84      	ldr	r2, [pc, #528]	; (800ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b874:	fa22 f303 	lsr.w	r3, r2, r3
 800b878:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	ee07 3a90 	vmov	s15, r3
 800b880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b892:	4b7b      	ldr	r3, [pc, #492]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8c2:	e087      	b.n	800b9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d6:	4b6a      	ldr	r3, [pc, #424]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b906:	e065      	b.n	800b9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b91a:	4b59      	ldr	r3, [pc, #356]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b94a:	e043      	b.n	800b9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b956:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b95e:	4b48      	ldr	r3, [pc, #288]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b972:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b98a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b98e:	e021      	b.n	800b9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a2:	4b37      	ldr	r3, [pc, #220]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d8:	0a5b      	lsrs	r3, r3, #9
 800b9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fa:	ee17 2a90 	vmov	r2, s15
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba02:	4b1f      	ldr	r3, [pc, #124]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba06:	0c1b      	lsrs	r3, r3, #16
 800ba08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba28:	ee17 2a90 	vmov	r2, s15
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ba30:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	0e1b      	lsrs	r3, r3, #24
 800ba36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba56:	ee17 2a90 	vmov	r2, s15
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ba5e:	e008      	b.n	800ba72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	609a      	str	r2, [r3, #8]
}
 800ba72:	bf00      	nop
 800ba74:	3724      	adds	r7, #36	; 0x24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	58024400 	.word	0x58024400
 800ba84:	03d09000 	.word	0x03d09000
 800ba88:	46000000 	.word	0x46000000
 800ba8c:	4c742400 	.word	0x4c742400
 800ba90:	4a742400 	.word	0x4a742400
 800ba94:	4c3ebc20 	.word	0x4c3ebc20

0800ba98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b089      	sub	sp, #36	; 0x24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baa0:	4ba0      	ldr	r3, [pc, #640]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa4:	f003 0303 	and.w	r3, r3, #3
 800baa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800baaa:	4b9e      	ldr	r3, [pc, #632]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baae:	091b      	lsrs	r3, r3, #4
 800bab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bab4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bab6:	4b9b      	ldr	r3, [pc, #620]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bac0:	4b98      	ldr	r3, [pc, #608]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	08db      	lsrs	r3, r3, #3
 800bac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	fb02 f303 	mul.w	r3, r2, r3
 800bad0:	ee07 3a90 	vmov	s15, r3
 800bad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 8111 	beq.w	800bd06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	f000 8083 	beq.w	800bbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	f200 80a1 	bhi.w	800bc36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d056      	beq.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb00:	e099      	b.n	800bc36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb02:	4b88      	ldr	r3, [pc, #544]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0320 	and.w	r3, r3, #32
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d02d      	beq.n	800bb6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb0e:	4b85      	ldr	r3, [pc, #532]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	08db      	lsrs	r3, r3, #3
 800bb14:	f003 0303 	and.w	r3, r3, #3
 800bb18:	4a83      	ldr	r2, [pc, #524]	; (800bd28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	ee07 3a90 	vmov	s15, r3
 800bb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb38:	4b7a      	ldr	r3, [pc, #488]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb48:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb4c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb68:	e087      	b.n	800bc7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb74:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7c:	4b69      	ldr	r3, [pc, #420]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb84:	ee07 3a90 	vmov	s15, r3
 800bb88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb90:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbac:	e065      	b.n	800bc7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bbbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc0:	4b58      	ldr	r3, [pc, #352]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf0:	e043      	b.n	800bc7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bd38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc04:	4b47      	ldr	r3, [pc, #284]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc14:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc18:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc34:	e021      	b.n	800bc7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	ee07 3a90 	vmov	s15, r3
 800bc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc40:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc48:	4b36      	ldr	r3, [pc, #216]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc58:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc7a:	4b2a      	ldr	r3, [pc, #168]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc7e:	0a5b      	lsrs	r3, r3, #9
 800bc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc94:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca0:	ee17 2a90 	vmov	r2, s15
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bca8:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb2:	ee07 3a90 	vmov	s15, r3
 800bcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcce:	ee17 2a90 	vmov	r2, s15
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bcd6:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	0e1b      	lsrs	r3, r3, #24
 800bcdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcfc:	ee17 2a90 	vmov	r2, s15
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd04:	e008      	b.n	800bd18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	609a      	str	r2, [r3, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	3724      	adds	r7, #36	; 0x24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	58024400 	.word	0x58024400
 800bd28:	03d09000 	.word	0x03d09000
 800bd2c:	46000000 	.word	0x46000000
 800bd30:	4c742400 	.word	0x4c742400
 800bd34:	4a742400 	.word	0x4a742400
 800bd38:	4c3ebc20 	.word	0x4c3ebc20

0800bd3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd4a:	4b53      	ldr	r3, [pc, #332]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4e:	f003 0303 	and.w	r3, r3, #3
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	d101      	bne.n	800bd5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e099      	b.n	800be8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd5a:	4b4f      	ldr	r3, [pc, #316]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a4e      	ldr	r2, [pc, #312]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd66:	f7f6 fec1 	bl	8002aec <HAL_GetTick>
 800bd6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd6c:	e008      	b.n	800bd80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd6e:	f7f6 febd 	bl	8002aec <HAL_GetTick>
 800bd72:	4602      	mov	r2, r0
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d901      	bls.n	800bd80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e086      	b.n	800be8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd80:	4b45      	ldr	r3, [pc, #276]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1f0      	bne.n	800bd6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd8c:	4b42      	ldr	r3, [pc, #264]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	031b      	lsls	r3, r3, #12
 800bd9a:	493f      	ldr	r1, [pc, #252]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	628b      	str	r3, [r1, #40]	; 0x28
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	3b01      	subs	r3, #1
 800bda6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	025b      	lsls	r3, r3, #9
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	041b      	lsls	r3, r3, #16
 800bdbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	061b      	lsls	r3, r3, #24
 800bdcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bdd0:	4931      	ldr	r1, [pc, #196]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bdd6:	4b30      	ldr	r3, [pc, #192]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	492d      	ldr	r1, [pc, #180]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bde8:	4b2b      	ldr	r3, [pc, #172]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	f023 0220 	bic.w	r2, r3, #32
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	4928      	ldr	r1, [pc, #160]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bdfa:	4b27      	ldr	r3, [pc, #156]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800bdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfe:	4a26      	ldr	r2, [pc, #152]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be00:	f023 0310 	bic.w	r3, r3, #16
 800be04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be06:	4b24      	ldr	r3, [pc, #144]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be0a:	4b24      	ldr	r3, [pc, #144]	; (800be9c <RCCEx_PLL2_Config+0x160>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	69d2      	ldr	r2, [r2, #28]
 800be12:	00d2      	lsls	r2, r2, #3
 800be14:	4920      	ldr	r1, [pc, #128]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be16:	4313      	orrs	r3, r2
 800be18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be1a:	4b1f      	ldr	r3, [pc, #124]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	4a1e      	ldr	r2, [pc, #120]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be20:	f043 0310 	orr.w	r3, r3, #16
 800be24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d106      	bne.n	800be3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be2c:	4b1a      	ldr	r3, [pc, #104]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	4a19      	ldr	r2, [pc, #100]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be38:	e00f      	b.n	800be5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d106      	bne.n	800be4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be40:	4b15      	ldr	r3, [pc, #84]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be44:	4a14      	ldr	r2, [pc, #80]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800be4c:	e005      	b.n	800be5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be4e:	4b12      	ldr	r3, [pc, #72]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be52:	4a11      	ldr	r2, [pc, #68]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be5a:	4b0f      	ldr	r3, [pc, #60]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a0e      	ldr	r2, [pc, #56]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be66:	f7f6 fe41 	bl	8002aec <HAL_GetTick>
 800be6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be6c:	e008      	b.n	800be80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be6e:	f7f6 fe3d 	bl	8002aec <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d901      	bls.n	800be80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e006      	b.n	800be8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be80:	4b05      	ldr	r3, [pc, #20]	; (800be98 <RCCEx_PLL2_Config+0x15c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d0f0      	beq.n	800be6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	58024400 	.word	0x58024400
 800be9c:	ffff0007 	.word	0xffff0007

0800bea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beae:	4b53      	ldr	r3, [pc, #332]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800beb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d101      	bne.n	800bebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e099      	b.n	800bff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bebe:	4b4f      	ldr	r3, [pc, #316]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a4e      	ldr	r2, [pc, #312]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beca:	f7f6 fe0f 	bl	8002aec <HAL_GetTick>
 800bece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bed0:	e008      	b.n	800bee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bed2:	f7f6 fe0b 	bl	8002aec <HAL_GetTick>
 800bed6:	4602      	mov	r2, r0
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d901      	bls.n	800bee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e086      	b.n	800bff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bee4:	4b45      	ldr	r3, [pc, #276]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1f0      	bne.n	800bed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bef0:	4b42      	ldr	r3, [pc, #264]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	051b      	lsls	r3, r3, #20
 800befe:	493f      	ldr	r1, [pc, #252]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	628b      	str	r3, [r1, #40]	; 0x28
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	025b      	lsls	r3, r3, #9
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	041b      	lsls	r3, r3, #16
 800bf22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf26:	431a      	orrs	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	061b      	lsls	r3, r3, #24
 800bf30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf34:	4931      	ldr	r1, [pc, #196]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf3a:	4b30      	ldr	r3, [pc, #192]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	492d      	ldr	r1, [pc, #180]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf4c:	4b2b      	ldr	r3, [pc, #172]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	4928      	ldr	r1, [pc, #160]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf5e:	4b27      	ldr	r3, [pc, #156]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	4a26      	ldr	r2, [pc, #152]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf6a:	4b24      	ldr	r3, [pc, #144]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6e:	4b24      	ldr	r3, [pc, #144]	; (800c000 <RCCEx_PLL3_Config+0x160>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	69d2      	ldr	r2, [r2, #28]
 800bf76:	00d2      	lsls	r2, r2, #3
 800bf78:	4920      	ldr	r1, [pc, #128]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf7e:	4b1f      	ldr	r3, [pc, #124]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	4a1e      	ldr	r2, [pc, #120]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	4a19      	ldr	r2, [pc, #100]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bf96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bf9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf9c:	e00f      	b.n	800bfbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d106      	bne.n	800bfb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfa4:	4b15      	ldr	r3, [pc, #84]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa8:	4a14      	ldr	r2, [pc, #80]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfb0:	e005      	b.n	800bfbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb6:	4a11      	ldr	r2, [pc, #68]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bfbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a0e      	ldr	r2, [pc, #56]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfca:	f7f6 fd8f 	bl	8002aec <HAL_GetTick>
 800bfce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bfd0:	e008      	b.n	800bfe4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfd2:	f7f6 fd8b 	bl	8002aec <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d901      	bls.n	800bfe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e006      	b.n	800bff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <RCCEx_PLL3_Config+0x15c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0f0      	beq.n	800bfd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	58024400 	.word	0x58024400
 800c000:	ffff0007 	.word	0xffff0007

0800c004 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e10f      	b.n	800c236 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a87      	ldr	r2, [pc, #540]	; (800c240 <HAL_SPI_Init+0x23c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d00f      	beq.n	800c046 <HAL_SPI_Init+0x42>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a86      	ldr	r2, [pc, #536]	; (800c244 <HAL_SPI_Init+0x240>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d00a      	beq.n	800c046 <HAL_SPI_Init+0x42>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a84      	ldr	r2, [pc, #528]	; (800c248 <HAL_SPI_Init+0x244>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d005      	beq.n	800c046 <HAL_SPI_Init+0x42>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	2b0f      	cmp	r3, #15
 800c040:	d901      	bls.n	800c046 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e0f7      	b.n	800c236 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fd5a 	bl	800cb00 <SPI_GetPacketSize>
 800c04c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a7b      	ldr	r2, [pc, #492]	; (800c240 <HAL_SPI_Init+0x23c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d00c      	beq.n	800c072 <HAL_SPI_Init+0x6e>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a79      	ldr	r2, [pc, #484]	; (800c244 <HAL_SPI_Init+0x240>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d007      	beq.n	800c072 <HAL_SPI_Init+0x6e>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a78      	ldr	r2, [pc, #480]	; (800c248 <HAL_SPI_Init+0x244>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d002      	beq.n	800c072 <HAL_SPI_Init+0x6e>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b08      	cmp	r3, #8
 800c070:	d811      	bhi.n	800c096 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c076:	4a72      	ldr	r2, [pc, #456]	; (800c240 <HAL_SPI_Init+0x23c>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d009      	beq.n	800c090 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a70      	ldr	r2, [pc, #448]	; (800c244 <HAL_SPI_Init+0x240>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d004      	beq.n	800c090 <HAL_SPI_Init+0x8c>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a6f      	ldr	r2, [pc, #444]	; (800c248 <HAL_SPI_Init+0x244>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d104      	bne.n	800c09a <HAL_SPI_Init+0x96>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b10      	cmp	r3, #16
 800c094:	d901      	bls.n	800c09a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e0cd      	b.n	800c236 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7f5 ff6a 	bl	8001f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0201 	bic.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c0d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0e0:	d119      	bne.n	800c116 <HAL_SPI_Init+0x112>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0ea:	d103      	bne.n	800c0f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d008      	beq.n	800c106 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10c      	bne.n	800c116 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c104:	d107      	bne.n	800c116 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c114:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00f      	beq.n	800c142 <HAL_SPI_Init+0x13e>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	2b06      	cmp	r3, #6
 800c128:	d90b      	bls.n	800c142 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	430a      	orrs	r2, r1
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e007      	b.n	800c152 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c150:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69da      	ldr	r2, [r3, #28]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15a:	431a      	orrs	r2, r3
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c164:	ea42 0103 	orr.w	r1, r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	430a      	orrs	r2, r1
 800c172:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17c:	431a      	orrs	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c182:	431a      	orrs	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	431a      	orrs	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	431a      	orrs	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1b2:	ea42 0103 	orr.w	r1, r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d113      	bne.n	800c1f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f022 0201 	bic.w	r2, r2, #1
 800c200:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	430a      	orrs	r2, r1
 800c222:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	40013000 	.word	0x40013000
 800c244:	40003800 	.word	0x40003800
 800c248:	40003c00 	.word	0x40003c00

0800c24c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af02      	add	r7, sp, #8
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	4613      	mov	r3, r2
 800c25a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3320      	adds	r3, #32
 800c262:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d101      	bne.n	800c276 <HAL_SPI_Transmit+0x2a>
 800c272:	2302      	movs	r3, #2
 800c274:	e1e1      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c27e:	f7f6 fc35 	bl	8002aec <HAL_GetTick>
 800c282:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d007      	beq.n	800c2a0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c290:	2302      	movs	r3, #2
 800c292:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c29c:	7efb      	ldrb	r3, [r7, #27]
 800c29e:	e1cc      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_SPI_Transmit+0x60>
 800c2a6:	88fb      	ldrh	r3, [r7, #6]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d107      	bne.n	800c2bc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2b8:	7efb      	ldrb	r3, [r7, #27]
 800c2ba:	e1be      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	88fa      	ldrh	r2, [r7, #6]
 800c2d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	88fa      	ldrh	r2, [r7, #6]
 800c2de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c30c:	d108      	bne.n	800c320 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	e009      	b.n	800c334 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c332:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	4b96      	ldr	r3, [pc, #600]	; (800c594 <HAL_SPI_Transmit+0x348>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	88f9      	ldrh	r1, [r7, #6]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	430b      	orrs	r3, r1
 800c346:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f042 0201 	orr.w	r2, r2, #1
 800c356:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c360:	d107      	bne.n	800c372 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c370:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	2b0f      	cmp	r3, #15
 800c378:	d947      	bls.n	800c40a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c37a:	e03f      	b.n	800c3fc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b02      	cmp	r3, #2
 800c388:	d114      	bne.n	800c3b4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c39a:	1d1a      	adds	r2, r3, #4
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c3b2:	e023      	b.n	800c3fc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3b4:	f7f6 fb9a 	bl	8002aec <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d803      	bhi.n	800c3cc <HAL_SPI_Transmit+0x180>
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d102      	bne.n	800c3d2 <HAL_SPI_Transmit+0x186>
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d114      	bne.n	800c3fc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 fac6 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e11e      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c402:	b29b      	uxth	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1b9      	bne.n	800c37c <HAL_SPI_Transmit+0x130>
 800c408:	e0f1      	b.n	800c5ee <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	2b07      	cmp	r3, #7
 800c410:	f240 80e6 	bls.w	800c5e0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c414:	e05d      	b.n	800c4d2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b02      	cmp	r3, #2
 800c422:	d132      	bne.n	800c48a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d918      	bls.n	800c462 <HAL_SPI_Transmit+0x216>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d014      	beq.n	800c462 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c448:	1d1a      	adds	r2, r3, #4
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c454:	b29b      	uxth	r3, r3
 800c456:	3b02      	subs	r3, #2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c460:	e037      	b.n	800c4d2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c466:	881a      	ldrh	r2, [r3, #0]
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c470:	1c9a      	adds	r2, r3, #2
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	3b01      	subs	r3, #1
 800c480:	b29a      	uxth	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c488:	e023      	b.n	800c4d2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c48a:	f7f6 fb2f 	bl	8002aec <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d803      	bhi.n	800c4a2 <HAL_SPI_Transmit+0x256>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a0:	d102      	bne.n	800c4a8 <HAL_SPI_Transmit+0x25c>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d114      	bne.n	800c4d2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 fa5b 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e0b3      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d19b      	bne.n	800c416 <HAL_SPI_Transmit+0x1ca>
 800c4de:	e086      	b.n	800c5ee <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	695b      	ldr	r3, [r3, #20]
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d154      	bne.n	800c598 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d918      	bls.n	800c52c <HAL_SPI_Transmit+0x2e0>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fe:	2b40      	cmp	r3, #64	; 0x40
 800c500:	d914      	bls.n	800c52c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6812      	ldr	r2, [r2, #0]
 800c50c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c512:	1d1a      	adds	r2, r3, #4
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c51e:	b29b      	uxth	r3, r3
 800c520:	3b04      	subs	r3, #4
 800c522:	b29a      	uxth	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c52a:	e059      	b.n	800c5e0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c532:	b29b      	uxth	r3, r3
 800c534:	2b01      	cmp	r3, #1
 800c536:	d917      	bls.n	800c568 <HAL_SPI_Transmit+0x31c>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d013      	beq.n	800c568 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c544:	881a      	ldrh	r2, [r3, #0]
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c54e:	1c9a      	adds	r2, r3, #2
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3b02      	subs	r3, #2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c566:	e03b      	b.n	800c5e0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3320      	adds	r3, #32
 800c572:	7812      	ldrb	r2, [r2, #0]
 800c574:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c586:	b29b      	uxth	r3, r3
 800c588:	3b01      	subs	r3, #1
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c592:	e025      	b.n	800c5e0 <HAL_SPI_Transmit+0x394>
 800c594:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c598:	f7f6 faa8 	bl	8002aec <HAL_GetTick>
 800c59c:	4602      	mov	r2, r0
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d803      	bhi.n	800c5b0 <HAL_SPI_Transmit+0x364>
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	d102      	bne.n	800c5b6 <HAL_SPI_Transmit+0x36a>
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d114      	bne.n	800c5e0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f000 f9d4 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e02c      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f47f af79 	bne.w	800c4e0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2108      	movs	r1, #8
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 fa53 	bl	800caa4 <SPI_WaitOnFlagUntilTimeout>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d007      	beq.n	800c614 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c60a:	f043 0220 	orr.w	r2, r3, #32
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 f9a5 	bl	800c964 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800c638:	7efb      	ldrb	r3, [r7, #27]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop

0800c644 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b088      	sub	sp, #32
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	603b      	str	r3, [r7, #0]
 800c650:	4613      	mov	r3, r2
 800c652:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3330      	adds	r3, #48	; 0x30
 800c65e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c666:	2b01      	cmp	r3, #1
 800c668:	d101      	bne.n	800c66e <HAL_SPI_Receive+0x2a>
 800c66a:	2302      	movs	r3, #2
 800c66c:	e173      	b.n	800c956 <HAL_SPI_Receive+0x312>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c676:	f7f6 fa39 	bl	8002aec <HAL_GetTick>
 800c67a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b01      	cmp	r3, #1
 800c686:	d007      	beq.n	800c698 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800c688:	2302      	movs	r3, #2
 800c68a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c694:	7ffb      	ldrb	r3, [r7, #31]
 800c696:	e15e      	b.n	800c956 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <HAL_SPI_Receive+0x60>
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d107      	bne.n	800c6b4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c6b0:	7ffb      	ldrb	r3, [r7, #31]
 800c6b2:	e150      	b.n	800c956 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	88fa      	ldrh	r2, [r7, #6]
 800c6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	88fa      	ldrh	r2, [r7, #6]
 800c6d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c704:	d108      	bne.n	800c718 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	e009      	b.n	800c72c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c72a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	4b8b      	ldr	r3, [pc, #556]	; (800c960 <HAL_SPI_Receive+0x31c>)
 800c734:	4013      	ands	r3, r2
 800c736:	88f9      	ldrh	r1, [r7, #6]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	430b      	orrs	r3, r1
 800c73e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f042 0201 	orr.w	r2, r2, #1
 800c74e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c758:	d107      	bne.n	800c76a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c768:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	2b0f      	cmp	r3, #15
 800c770:	d948      	bls.n	800c804 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c772:	e040      	b.n	800c7f6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	695a      	ldr	r2, [r3, #20]
 800c77a:	f248 0308 	movw	r3, #32776	; 0x8008
 800c77e:	4013      	ands	r3, r2
 800c780:	2b00      	cmp	r3, #0
 800c782:	d014      	beq.n	800c7ae <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c78c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c78e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c794:	1d1a      	adds	r2, r3, #4
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c7ac:	e023      	b.n	800c7f6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7ae:	f7f6 f99d 	bl	8002aec <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d803      	bhi.n	800c7c6 <HAL_SPI_Receive+0x182>
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c4:	d102      	bne.n	800c7cc <HAL_SPI_Receive+0x188>
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d114      	bne.n	800c7f6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f8c9 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e0af      	b.n	800c956 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1b8      	bne.n	800c774 <HAL_SPI_Receive+0x130>
 800c802:	e095      	b.n	800c930 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	2b07      	cmp	r3, #7
 800c80a:	f240 808b 	bls.w	800c924 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c80e:	e03f      	b.n	800c890 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d114      	bne.n	800c848 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	8812      	ldrh	r2, [r2, #0]
 800c826:	b292      	uxth	r2, r2
 800c828:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c82e:	1c9a      	adds	r2, r3, #2
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	3b01      	subs	r3, #1
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c846:	e023      	b.n	800c890 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c848:	f7f6 f950 	bl	8002aec <HAL_GetTick>
 800c84c:	4602      	mov	r2, r0
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d803      	bhi.n	800c860 <HAL_SPI_Receive+0x21c>
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d102      	bne.n	800c866 <HAL_SPI_Receive+0x222>
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d114      	bne.n	800c890 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f87c 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c87a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e062      	b.n	800c956 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c896:	b29b      	uxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1b9      	bne.n	800c810 <HAL_SPI_Receive+0x1cc>
 800c89c:	e048      	b.n	800c930 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	f003 0301 	and.w	r3, r3, #1
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d117      	bne.n	800c8dc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b8:	7812      	ldrb	r2, [r2, #0]
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c8da:	e023      	b.n	800c924 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8dc:	f7f6 f906 	bl	8002aec <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d803      	bhi.n	800c8f4 <HAL_SPI_Receive+0x2b0>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d102      	bne.n	800c8fa <HAL_SPI_Receive+0x2b6>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d114      	bne.n	800c924 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f832 	bl	800c964 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c90e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e018      	b.n	800c956 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1b6      	bne.n	800c89e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 f817 	bl	800c964 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800c954:	7ffb      	ldrb	r3, [r7, #31]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	ffff0000 	.word	0xffff0000

0800c964 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	699a      	ldr	r2, [r3, #24]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f042 0208 	orr.w	r2, r2, #8
 800c982:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	699a      	ldr	r2, [r3, #24]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f042 0210 	orr.w	r2, r2, #16
 800c992:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0201 	bic.w	r2, r2, #1
 800c9a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6919      	ldr	r1, [r3, #16]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	4b3c      	ldr	r3, [pc, #240]	; (800caa0 <SPI_CloseTransfer+0x13c>)
 800c9b0:	400b      	ands	r3, r1
 800c9b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689a      	ldr	r2, [r3, #8]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c9c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d014      	beq.n	800c9fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00f      	beq.n	800c9fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	699a      	ldr	r2, [r3, #24]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f042 0220 	orr.w	r2, r2, #32
 800c9f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d014      	beq.n	800ca30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00f      	beq.n	800ca30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca16:	f043 0204 	orr.w	r2, r3, #4
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	699a      	ldr	r2, [r3, #24]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00f      	beq.n	800ca5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca40:	f043 0201 	orr.w	r2, r3, #1
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	699a      	ldr	r2, [r3, #24]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00f      	beq.n	800ca84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca6a:	f043 0208 	orr.w	r2, r3, #8
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	fffffc90 	.word	0xfffffc90

0800caa4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	4613      	mov	r3, r2
 800cab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cab4:	e010      	b.n	800cad8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cab6:	f7f6 f819 	bl	8002aec <HAL_GetTick>
 800caba:	4602      	mov	r2, r0
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d803      	bhi.n	800cace <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d102      	bne.n	800cad4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e00f      	b.n	800caf8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	695a      	ldr	r2, [r3, #20]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	4013      	ands	r3, r2
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	bf0c      	ite	eq
 800cae8:	2301      	moveq	r3, #1
 800caea:	2300      	movne	r3, #0
 800caec:	b2db      	uxtb	r3, r3
 800caee:	461a      	mov	r2, r3
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d0df      	beq.n	800cab6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0c:	095b      	lsrs	r3, r3, #5
 800cb0e:	3301      	adds	r3, #1
 800cb10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	3301      	adds	r3, #1
 800cb18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	3307      	adds	r3, #7
 800cb1e:	08db      	lsrs	r3, r3, #3
 800cb20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	fb02 f303 	mul.w	r3, r2, r3
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d101      	bne.n	800cb48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e049      	b.n	800cbdc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d106      	bne.n	800cb62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7f5 facf 	bl	8002100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2202      	movs	r2, #2
 800cb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f000 fdab 	bl	800d6d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d109      	bne.n	800cc10 <HAL_TIM_PWM_Start_DMA+0x2c>
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	bf0c      	ite	eq
 800cc08:	2301      	moveq	r3, #1
 800cc0a:	2300      	movne	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	e03c      	b.n	800cc8a <HAL_TIM_PWM_Start_DMA+0xa6>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d109      	bne.n	800cc2a <HAL_TIM_PWM_Start_DMA+0x46>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	bf0c      	ite	eq
 800cc22:	2301      	moveq	r3, #1
 800cc24:	2300      	movne	r3, #0
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	e02f      	b.n	800cc8a <HAL_TIM_PWM_Start_DMA+0xa6>
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b08      	cmp	r3, #8
 800cc2e:	d109      	bne.n	800cc44 <HAL_TIM_PWM_Start_DMA+0x60>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	bf0c      	ite	eq
 800cc3c:	2301      	moveq	r3, #1
 800cc3e:	2300      	movne	r3, #0
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	e022      	b.n	800cc8a <HAL_TIM_PWM_Start_DMA+0xa6>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b0c      	cmp	r3, #12
 800cc48:	d109      	bne.n	800cc5e <HAL_TIM_PWM_Start_DMA+0x7a>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	bf0c      	ite	eq
 800cc56:	2301      	moveq	r3, #1
 800cc58:	2300      	movne	r3, #0
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	e015      	b.n	800cc8a <HAL_TIM_PWM_Start_DMA+0xa6>
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b10      	cmp	r3, #16
 800cc62:	d109      	bne.n	800cc78 <HAL_TIM_PWM_Start_DMA+0x94>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	bf0c      	ite	eq
 800cc70:	2301      	moveq	r3, #1
 800cc72:	2300      	movne	r3, #0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	e008      	b.n	800cc8a <HAL_TIM_PWM_Start_DMA+0xa6>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	bf0c      	ite	eq
 800cc84:	2301      	moveq	r3, #1
 800cc86:	2300      	movne	r3, #0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e1ba      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <HAL_TIM_PWM_Start_DMA+0xc8>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	bf0c      	ite	eq
 800cca4:	2301      	moveq	r3, #1
 800cca6:	2300      	movne	r3, #0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	e03c      	b.n	800cd26 <HAL_TIM_PWM_Start_DMA+0x142>
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d109      	bne.n	800ccc6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	bf0c      	ite	eq
 800ccbe:	2301      	moveq	r3, #1
 800ccc0:	2300      	movne	r3, #0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	e02f      	b.n	800cd26 <HAL_TIM_PWM_Start_DMA+0x142>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b08      	cmp	r3, #8
 800ccca:	d109      	bne.n	800cce0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	bf0c      	ite	eq
 800ccd8:	2301      	moveq	r3, #1
 800ccda:	2300      	movne	r3, #0
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	e022      	b.n	800cd26 <HAL_TIM_PWM_Start_DMA+0x142>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b0c      	cmp	r3, #12
 800cce4:	d109      	bne.n	800ccfa <HAL_TIM_PWM_Start_DMA+0x116>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	bf0c      	ite	eq
 800ccf2:	2301      	moveq	r3, #1
 800ccf4:	2300      	movne	r3, #0
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	e015      	b.n	800cd26 <HAL_TIM_PWM_Start_DMA+0x142>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b10      	cmp	r3, #16
 800ccfe:	d109      	bne.n	800cd14 <HAL_TIM_PWM_Start_DMA+0x130>
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	bf0c      	ite	eq
 800cd0c:	2301      	moveq	r3, #1
 800cd0e:	2300      	movne	r3, #0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	e008      	b.n	800cd26 <HAL_TIM_PWM_Start_DMA+0x142>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	bf0c      	ite	eq
 800cd20:	2301      	moveq	r3, #1
 800cd22:	2300      	movne	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d034      	beq.n	800cd94 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <HAL_TIM_PWM_Start_DMA+0x152>
 800cd30:	887b      	ldrh	r3, [r7, #2]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e166      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d104      	bne.n	800cd4a <HAL_TIM_PWM_Start_DMA+0x166>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd48:	e026      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b04      	cmp	r3, #4
 800cd4e:	d104      	bne.n	800cd5a <HAL_TIM_PWM_Start_DMA+0x176>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd58:	e01e      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b08      	cmp	r3, #8
 800cd5e:	d104      	bne.n	800cd6a <HAL_TIM_PWM_Start_DMA+0x186>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd68:	e016      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b0c      	cmp	r3, #12
 800cd6e:	d104      	bne.n	800cd7a <HAL_TIM_PWM_Start_DMA+0x196>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd78:	e00e      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d104      	bne.n	800cd8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd88:	e006      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd92:	e001      	b.n	800cd98 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e137      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2b0c      	cmp	r3, #12
 800cd9c:	f200 80ae 	bhi.w	800cefc <HAL_TIM_PWM_Start_DMA+0x318>
 800cda0:	a201      	add	r2, pc, #4	; (adr r2, 800cda8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800cda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda6:	bf00      	nop
 800cda8:	0800cddd 	.word	0x0800cddd
 800cdac:	0800cefd 	.word	0x0800cefd
 800cdb0:	0800cefd 	.word	0x0800cefd
 800cdb4:	0800cefd 	.word	0x0800cefd
 800cdb8:	0800ce25 	.word	0x0800ce25
 800cdbc:	0800cefd 	.word	0x0800cefd
 800cdc0:	0800cefd 	.word	0x0800cefd
 800cdc4:	0800cefd 	.word	0x0800cefd
 800cdc8:	0800ce6d 	.word	0x0800ce6d
 800cdcc:	0800cefd 	.word	0x0800cefd
 800cdd0:	0800cefd 	.word	0x0800cefd
 800cdd4:	0800cefd 	.word	0x0800cefd
 800cdd8:	0800ceb5 	.word	0x0800ceb5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	4a8b      	ldr	r2, [pc, #556]	; (800d010 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800cde2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	4a8a      	ldr	r2, [pc, #552]	; (800d014 <HAL_TIM_PWM_Start_DMA+0x430>)
 800cdea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	4a89      	ldr	r2, [pc, #548]	; (800d018 <HAL_TIM_PWM_Start_DMA+0x434>)
 800cdf2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3334      	adds	r3, #52	; 0x34
 800ce00:	461a      	mov	r2, r3
 800ce02:	887b      	ldrh	r3, [r7, #2]
 800ce04:	f7f7 fe7c 	bl	8004b00 <HAL_DMA_Start_IT>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e0fa      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68da      	ldr	r2, [r3, #12]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce20:	60da      	str	r2, [r3, #12]
      break;
 800ce22:	e06e      	b.n	800cf02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce28:	4a79      	ldr	r2, [pc, #484]	; (800d010 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ce2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce30:	4a78      	ldr	r2, [pc, #480]	; (800d014 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ce32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	4a77      	ldr	r2, [pc, #476]	; (800d018 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ce3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3338      	adds	r3, #56	; 0x38
 800ce48:	461a      	mov	r2, r3
 800ce4a:	887b      	ldrh	r3, [r7, #2]
 800ce4c:	f7f7 fe58 	bl	8004b00 <HAL_DMA_Start_IT>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e0d6      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68da      	ldr	r2, [r3, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce68:	60da      	str	r2, [r3, #12]
      break;
 800ce6a:	e04a      	b.n	800cf02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	4a67      	ldr	r2, [pc, #412]	; (800d010 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ce72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	4a66      	ldr	r2, [pc, #408]	; (800d014 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ce7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	4a65      	ldr	r2, [pc, #404]	; (800d018 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ce82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	333c      	adds	r3, #60	; 0x3c
 800ce90:	461a      	mov	r2, r3
 800ce92:	887b      	ldrh	r3, [r7, #2]
 800ce94:	f7f7 fe34 	bl	8004b00 <HAL_DMA_Start_IT>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e0b2      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68da      	ldr	r2, [r3, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceb0:	60da      	str	r2, [r3, #12]
      break;
 800ceb2:	e026      	b.n	800cf02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb8:	4a55      	ldr	r2, [pc, #340]	; (800d010 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ceba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec0:	4a54      	ldr	r2, [pc, #336]	; (800d014 <HAL_TIM_PWM_Start_DMA+0x430>)
 800cec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec8:	4a53      	ldr	r2, [pc, #332]	; (800d018 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ceca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3340      	adds	r3, #64	; 0x40
 800ced8:	461a      	mov	r2, r3
 800ceda:	887b      	ldrh	r3, [r7, #2]
 800cedc:	f7f7 fe10 	bl	8004b00 <HAL_DMA_Start_IT>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e08e      	b.n	800d008 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cef8:	60da      	str	r2, [r3, #12]
      break;
 800cefa:	e002      	b.n	800cf02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	75fb      	strb	r3, [r7, #23]
      break;
 800cf00:	bf00      	nop
  }

  if (status == HAL_OK)
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d17e      	bne.n	800d006 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	68b9      	ldr	r1, [r7, #8]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 ff59 	bl	800ddc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a40      	ldr	r2, [pc, #256]	; (800d01c <HAL_TIM_PWM_Start_DMA+0x438>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d013      	beq.n	800cf48 <HAL_TIM_PWM_Start_DMA+0x364>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a3e      	ldr	r2, [pc, #248]	; (800d020 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d00e      	beq.n	800cf48 <HAL_TIM_PWM_Start_DMA+0x364>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a3d      	ldr	r2, [pc, #244]	; (800d024 <HAL_TIM_PWM_Start_DMA+0x440>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d009      	beq.n	800cf48 <HAL_TIM_PWM_Start_DMA+0x364>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a3b      	ldr	r2, [pc, #236]	; (800d028 <HAL_TIM_PWM_Start_DMA+0x444>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <HAL_TIM_PWM_Start_DMA+0x364>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a3a      	ldr	r2, [pc, #232]	; (800d02c <HAL_TIM_PWM_Start_DMA+0x448>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d101      	bne.n	800cf4c <HAL_TIM_PWM_Start_DMA+0x368>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e000      	b.n	800cf4e <HAL_TIM_PWM_Start_DMA+0x36a>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a2d      	ldr	r2, [pc, #180]	; (800d01c <HAL_TIM_PWM_Start_DMA+0x438>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d02c      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf74:	d027      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a2d      	ldr	r2, [pc, #180]	; (800d030 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d022      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a2b      	ldr	r2, [pc, #172]	; (800d034 <HAL_TIM_PWM_Start_DMA+0x450>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d01d      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a2a      	ldr	r2, [pc, #168]	; (800d038 <HAL_TIM_PWM_Start_DMA+0x454>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d018      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a21      	ldr	r2, [pc, #132]	; (800d020 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d013      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a26      	ldr	r2, [pc, #152]	; (800d03c <HAL_TIM_PWM_Start_DMA+0x458>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d00e      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a1d      	ldr	r2, [pc, #116]	; (800d024 <HAL_TIM_PWM_Start_DMA+0x440>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d009      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a22      	ldr	r2, [pc, #136]	; (800d040 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d004      	beq.n	800cfc6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a20      	ldr	r2, [pc, #128]	; (800d044 <HAL_TIM_PWM_Start_DMA+0x460>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d115      	bne.n	800cff2 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	4b1e      	ldr	r3, [pc, #120]	; (800d048 <HAL_TIM_PWM_Start_DMA+0x464>)
 800cfce:	4013      	ands	r3, r2
 800cfd0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b06      	cmp	r3, #6
 800cfd6:	d015      	beq.n	800d004 <HAL_TIM_PWM_Start_DMA+0x420>
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfde:	d011      	beq.n	800d004 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f042 0201 	orr.w	r2, r2, #1
 800cfee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cff0:	e008      	b.n	800d004 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f042 0201 	orr.w	r2, r2, #1
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	e000      	b.n	800d006 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d004:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d006:	7dfb      	ldrb	r3, [r7, #23]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0800d5bf 	.word	0x0800d5bf
 800d014:	0800d667 	.word	0x0800d667
 800d018:	0800d52d 	.word	0x0800d52d
 800d01c:	40010000 	.word	0x40010000
 800d020:	40010400 	.word	0x40010400
 800d024:	40014000 	.word	0x40014000
 800d028:	40014400 	.word	0x40014400
 800d02c:	40014800 	.word	0x40014800
 800d030:	40000400 	.word	0x40000400
 800d034:	40000800 	.word	0x40000800
 800d038:	40000c00 	.word	0x40000c00
 800d03c:	40001800 	.word	0x40001800
 800d040:	4000e000 	.word	0x4000e000
 800d044:	4000e400 	.word	0x4000e400
 800d048:	00010007 	.word	0x00010007

0800d04c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d122      	bne.n	800d0a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d11b      	bne.n	800d0a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f06f 0202 	mvn.w	r2, #2
 800d078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fa24 	bl	800d4dc <HAL_TIM_IC_CaptureCallback>
 800d094:	e005      	b.n	800d0a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fa16 	bl	800d4c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f3 fcc9 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	f003 0304 	and.w	r3, r3, #4
 800d0b2:	2b04      	cmp	r3, #4
 800d0b4:	d122      	bne.n	800d0fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	f003 0304 	and.w	r3, r3, #4
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d11b      	bne.n	800d0fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f06f 0204 	mvn.w	r2, #4
 800d0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f9fa 	bl	800d4dc <HAL_TIM_IC_CaptureCallback>
 800d0e8:	e005      	b.n	800d0f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f9ec 	bl	800d4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7f3 fc9f 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	f003 0308 	and.w	r3, r3, #8
 800d106:	2b08      	cmp	r3, #8
 800d108:	d122      	bne.n	800d150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	2b08      	cmp	r3, #8
 800d116:	d11b      	bne.n	800d150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f06f 0208 	mvn.w	r2, #8
 800d120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2204      	movs	r2, #4
 800d126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	f003 0303 	and.w	r3, r3, #3
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f9d0 	bl	800d4dc <HAL_TIM_IC_CaptureCallback>
 800d13c:	e005      	b.n	800d14a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f9c2 	bl	800d4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7f3 fc75 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	f003 0310 	and.w	r3, r3, #16
 800d15a:	2b10      	cmp	r3, #16
 800d15c:	d122      	bne.n	800d1a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b10      	cmp	r3, #16
 800d16a:	d11b      	bne.n	800d1a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f06f 0210 	mvn.w	r2, #16
 800d174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2208      	movs	r2, #8
 800d17a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 f9a6 	bl	800d4dc <HAL_TIM_IC_CaptureCallback>
 800d190:	e005      	b.n	800d19e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f998 	bl	800d4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7f3 fc4b 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d10e      	bne.n	800d1d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d107      	bne.n	800d1d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f06f 0201 	mvn.w	r2, #1
 800d1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f972 	bl	800d4b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1da:	2b80      	cmp	r3, #128	; 0x80
 800d1dc:	d10e      	bne.n	800d1fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e8:	2b80      	cmp	r3, #128	; 0x80
 800d1ea:	d107      	bne.n	800d1fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 feb2 	bl	800df60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20a:	d10e      	bne.n	800d22a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d216:	2b80      	cmp	r3, #128	; 0x80
 800d218:	d107      	bne.n	800d22a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fea5 	bl	800df74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d234:	2b40      	cmp	r3, #64	; 0x40
 800d236:	d10e      	bne.n	800d256 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d242:	2b40      	cmp	r3, #64	; 0x40
 800d244:	d107      	bne.n	800d256 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 f957 	bl	800d504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	f003 0320 	and.w	r3, r3, #32
 800d260:	2b20      	cmp	r3, #32
 800d262:	d10e      	bne.n	800d282 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d107      	bne.n	800d282 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f06f 0220 	mvn.w	r2, #32
 800d27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fe65 	bl	800df4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d101      	bne.n	800d2aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	e0ff      	b.n	800d4aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b14      	cmp	r3, #20
 800d2b6:	f200 80f0 	bhi.w	800d49a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d2ba:	a201      	add	r2, pc, #4	; (adr r2, 800d2c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d49b 	.word	0x0800d49b
 800d2c8:	0800d49b 	.word	0x0800d49b
 800d2cc:	0800d49b 	.word	0x0800d49b
 800d2d0:	0800d355 	.word	0x0800d355
 800d2d4:	0800d49b 	.word	0x0800d49b
 800d2d8:	0800d49b 	.word	0x0800d49b
 800d2dc:	0800d49b 	.word	0x0800d49b
 800d2e0:	0800d397 	.word	0x0800d397
 800d2e4:	0800d49b 	.word	0x0800d49b
 800d2e8:	0800d49b 	.word	0x0800d49b
 800d2ec:	0800d49b 	.word	0x0800d49b
 800d2f0:	0800d3d7 	.word	0x0800d3d7
 800d2f4:	0800d49b 	.word	0x0800d49b
 800d2f8:	0800d49b 	.word	0x0800d49b
 800d2fc:	0800d49b 	.word	0x0800d49b
 800d300:	0800d419 	.word	0x0800d419
 800d304:	0800d49b 	.word	0x0800d49b
 800d308:	0800d49b 	.word	0x0800d49b
 800d30c:	0800d49b 	.word	0x0800d49b
 800d310:	0800d459 	.word	0x0800d459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fa7e 	bl	800d81c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	699a      	ldr	r2, [r3, #24]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f042 0208 	orr.w	r2, r2, #8
 800d32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	699a      	ldr	r2, [r3, #24]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f022 0204 	bic.w	r2, r2, #4
 800d33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6999      	ldr	r1, [r3, #24]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	691a      	ldr	r2, [r3, #16]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	430a      	orrs	r2, r1
 800d350:	619a      	str	r2, [r3, #24]
      break;
 800d352:	e0a5      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 faee 	bl	800d93c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	699a      	ldr	r2, [r3, #24]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6999      	ldr	r1, [r3, #24]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	021a      	lsls	r2, r3, #8
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	430a      	orrs	r2, r1
 800d392:	619a      	str	r2, [r3, #24]
      break;
 800d394:	e084      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fb57 	bl	800da50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69da      	ldr	r2, [r3, #28]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f042 0208 	orr.w	r2, r2, #8
 800d3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	69da      	ldr	r2, [r3, #28]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f022 0204 	bic.w	r2, r2, #4
 800d3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69d9      	ldr	r1, [r3, #28]
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	691a      	ldr	r2, [r3, #16]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	61da      	str	r2, [r3, #28]
      break;
 800d3d4:	e064      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fbbf 	bl	800db60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69da      	ldr	r2, [r3, #28]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	69da      	ldr	r2, [r3, #28]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	69d9      	ldr	r1, [r3, #28]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	021a      	lsls	r2, r3, #8
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	430a      	orrs	r2, r1
 800d414:	61da      	str	r2, [r3, #28]
      break;
 800d416:	e043      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68b9      	ldr	r1, [r7, #8]
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 fc08 	bl	800dc34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0208 	orr.w	r2, r2, #8
 800d432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f022 0204 	bic.w	r2, r2, #4
 800d442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	691a      	ldr	r2, [r3, #16]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	430a      	orrs	r2, r1
 800d454:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d456:	e023      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68b9      	ldr	r1, [r7, #8]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 fc4c 	bl	800dcfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	021a      	lsls	r2, r3, #8
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	430a      	orrs	r2, r1
 800d496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d498:	e002      	b.n	800d4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	75fb      	strb	r3, [r7, #23]
      break;
 800d49e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3718      	adds	r7, #24
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop

0800d4b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d538:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d107      	bne.n	800d554 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d552:	e02a      	b.n	800d5aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d107      	bne.n	800d56e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2202      	movs	r2, #2
 800d562:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d56c:	e01d      	b.n	800d5aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d107      	bne.n	800d588 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2204      	movs	r2, #4
 800d57c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d586:	e010      	b.n	800d5aa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d107      	bne.n	800d5a2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2208      	movs	r2, #8
 800d596:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5a0:	e003      	b.n	800d5aa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7ff ffb4 	bl	800d518 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	771a      	strb	r2, [r3, #28]
}
 800d5b6:	bf00      	nop
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d10b      	bne.n	800d5ee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d136      	bne.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5ec:	e031      	b.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d10b      	bne.n	800d610 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d125      	bne.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d60e:	e020      	b.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d10b      	bne.n	800d632 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2204      	movs	r2, #4
 800d61e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	69db      	ldr	r3, [r3, #28]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d114      	bne.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d630:	e00f      	b.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d10a      	bne.n	800d652 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2208      	movs	r2, #8
 800d640:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	69db      	ldr	r3, [r3, #28]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d103      	bne.n	800d652 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f7f3 f9ee 	bl	8000a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	771a      	strb	r2, [r3, #28]
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d672:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d103      	bne.n	800d686 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2201      	movs	r2, #1
 800d682:	771a      	strb	r2, [r3, #28]
 800d684:	e019      	b.n	800d6ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d103      	bne.n	800d698 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2202      	movs	r2, #2
 800d694:	771a      	strb	r2, [r3, #28]
 800d696:	e010      	b.n	800d6ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d103      	bne.n	800d6aa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	771a      	strb	r2, [r3, #28]
 800d6a8:	e007      	b.n	800d6ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d102      	bne.n	800d6ba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2208      	movs	r2, #8
 800d6b8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7ff ff18 	bl	800d4f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	771a      	strb	r2, [r3, #28]
}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a44      	ldr	r2, [pc, #272]	; (800d7f4 <TIM_Base_SetConfig+0x124>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d013      	beq.n	800d710 <TIM_Base_SetConfig+0x40>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ee:	d00f      	beq.n	800d710 <TIM_Base_SetConfig+0x40>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a41      	ldr	r2, [pc, #260]	; (800d7f8 <TIM_Base_SetConfig+0x128>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00b      	beq.n	800d710 <TIM_Base_SetConfig+0x40>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a40      	ldr	r2, [pc, #256]	; (800d7fc <TIM_Base_SetConfig+0x12c>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d007      	beq.n	800d710 <TIM_Base_SetConfig+0x40>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a3f      	ldr	r2, [pc, #252]	; (800d800 <TIM_Base_SetConfig+0x130>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d003      	beq.n	800d710 <TIM_Base_SetConfig+0x40>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a3e      	ldr	r2, [pc, #248]	; (800d804 <TIM_Base_SetConfig+0x134>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d108      	bne.n	800d722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a33      	ldr	r2, [pc, #204]	; (800d7f4 <TIM_Base_SetConfig+0x124>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d027      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d730:	d023      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a30      	ldr	r2, [pc, #192]	; (800d7f8 <TIM_Base_SetConfig+0x128>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d01f      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a2f      	ldr	r2, [pc, #188]	; (800d7fc <TIM_Base_SetConfig+0x12c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d01b      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a2e      	ldr	r2, [pc, #184]	; (800d800 <TIM_Base_SetConfig+0x130>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d017      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a2d      	ldr	r2, [pc, #180]	; (800d804 <TIM_Base_SetConfig+0x134>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d013      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a2c      	ldr	r2, [pc, #176]	; (800d808 <TIM_Base_SetConfig+0x138>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d00f      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a2b      	ldr	r2, [pc, #172]	; (800d80c <TIM_Base_SetConfig+0x13c>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d00b      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a2a      	ldr	r2, [pc, #168]	; (800d810 <TIM_Base_SetConfig+0x140>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d007      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a29      	ldr	r2, [pc, #164]	; (800d814 <TIM_Base_SetConfig+0x144>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d003      	beq.n	800d77a <TIM_Base_SetConfig+0xaa>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a28      	ldr	r2, [pc, #160]	; (800d818 <TIM_Base_SetConfig+0x148>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d108      	bne.n	800d78c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	4313      	orrs	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	695b      	ldr	r3, [r3, #20]
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a10      	ldr	r2, [pc, #64]	; (800d7f4 <TIM_Base_SetConfig+0x124>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d00f      	beq.n	800d7d8 <TIM_Base_SetConfig+0x108>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a12      	ldr	r2, [pc, #72]	; (800d804 <TIM_Base_SetConfig+0x134>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d00b      	beq.n	800d7d8 <TIM_Base_SetConfig+0x108>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a11      	ldr	r2, [pc, #68]	; (800d808 <TIM_Base_SetConfig+0x138>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d007      	beq.n	800d7d8 <TIM_Base_SetConfig+0x108>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a10      	ldr	r2, [pc, #64]	; (800d80c <TIM_Base_SetConfig+0x13c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d003      	beq.n	800d7d8 <TIM_Base_SetConfig+0x108>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a0f      	ldr	r2, [pc, #60]	; (800d810 <TIM_Base_SetConfig+0x140>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d103      	bne.n	800d7e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	691a      	ldr	r2, [r3, #16]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	615a      	str	r2, [r3, #20]
}
 800d7e6:	bf00      	nop
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	40010000 	.word	0x40010000
 800d7f8:	40000400 	.word	0x40000400
 800d7fc:	40000800 	.word	0x40000800
 800d800:	40000c00 	.word	0x40000c00
 800d804:	40010400 	.word	0x40010400
 800d808:	40014000 	.word	0x40014000
 800d80c:	40014400 	.word	0x40014400
 800d810:	40014800 	.word	0x40014800
 800d814:	4000e000 	.word	0x4000e000
 800d818:	4000e400 	.word	0x4000e400

0800d81c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b087      	sub	sp, #28
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	f023 0201 	bic.w	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4b37      	ldr	r3, [pc, #220]	; (800d924 <TIM_OC1_SetConfig+0x108>)
 800d848:	4013      	ands	r3, r2
 800d84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 0303 	bic.w	r3, r3, #3
 800d852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f023 0302 	bic.w	r3, r3, #2
 800d864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a2d      	ldr	r2, [pc, #180]	; (800d928 <TIM_OC1_SetConfig+0x10c>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d00f      	beq.n	800d898 <TIM_OC1_SetConfig+0x7c>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a2c      	ldr	r2, [pc, #176]	; (800d92c <TIM_OC1_SetConfig+0x110>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d00b      	beq.n	800d898 <TIM_OC1_SetConfig+0x7c>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a2b      	ldr	r2, [pc, #172]	; (800d930 <TIM_OC1_SetConfig+0x114>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d007      	beq.n	800d898 <TIM_OC1_SetConfig+0x7c>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a2a      	ldr	r2, [pc, #168]	; (800d934 <TIM_OC1_SetConfig+0x118>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d003      	beq.n	800d898 <TIM_OC1_SetConfig+0x7c>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a29      	ldr	r2, [pc, #164]	; (800d938 <TIM_OC1_SetConfig+0x11c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d10c      	bne.n	800d8b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f023 0308 	bic.w	r3, r3, #8
 800d89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f023 0304 	bic.w	r3, r3, #4
 800d8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <TIM_OC1_SetConfig+0x10c>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d00f      	beq.n	800d8da <TIM_OC1_SetConfig+0xbe>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a1b      	ldr	r2, [pc, #108]	; (800d92c <TIM_OC1_SetConfig+0x110>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d00b      	beq.n	800d8da <TIM_OC1_SetConfig+0xbe>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a1a      	ldr	r2, [pc, #104]	; (800d930 <TIM_OC1_SetConfig+0x114>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d007      	beq.n	800d8da <TIM_OC1_SetConfig+0xbe>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a19      	ldr	r2, [pc, #100]	; (800d934 <TIM_OC1_SetConfig+0x118>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d003      	beq.n	800d8da <TIM_OC1_SetConfig+0xbe>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a18      	ldr	r2, [pc, #96]	; (800d938 <TIM_OC1_SetConfig+0x11c>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d111      	bne.n	800d8fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	621a      	str	r2, [r3, #32]
}
 800d918:	bf00      	nop
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	fffeff8f 	.word	0xfffeff8f
 800d928:	40010000 	.word	0x40010000
 800d92c:	40010400 	.word	0x40010400
 800d930:	40014000 	.word	0x40014000
 800d934:	40014400 	.word	0x40014400
 800d938:	40014800 	.word	0x40014800

0800d93c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	f023 0210 	bic.w	r2, r3, #16
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4b34      	ldr	r3, [pc, #208]	; (800da38 <TIM_OC2_SetConfig+0xfc>)
 800d968:	4013      	ands	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	021b      	lsls	r3, r3, #8
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	f023 0320 	bic.w	r3, r3, #32
 800d986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	4313      	orrs	r3, r2
 800d992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a29      	ldr	r2, [pc, #164]	; (800da3c <TIM_OC2_SetConfig+0x100>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d003      	beq.n	800d9a4 <TIM_OC2_SetConfig+0x68>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a28      	ldr	r2, [pc, #160]	; (800da40 <TIM_OC2_SetConfig+0x104>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d10d      	bne.n	800d9c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	011b      	lsls	r3, r3, #4
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a1e      	ldr	r2, [pc, #120]	; (800da3c <TIM_OC2_SetConfig+0x100>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d00f      	beq.n	800d9e8 <TIM_OC2_SetConfig+0xac>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a1d      	ldr	r2, [pc, #116]	; (800da40 <TIM_OC2_SetConfig+0x104>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d00b      	beq.n	800d9e8 <TIM_OC2_SetConfig+0xac>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a1c      	ldr	r2, [pc, #112]	; (800da44 <TIM_OC2_SetConfig+0x108>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d007      	beq.n	800d9e8 <TIM_OC2_SetConfig+0xac>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a1b      	ldr	r2, [pc, #108]	; (800da48 <TIM_OC2_SetConfig+0x10c>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d003      	beq.n	800d9e8 <TIM_OC2_SetConfig+0xac>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a1a      	ldr	r2, [pc, #104]	; (800da4c <TIM_OC2_SetConfig+0x110>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d113      	bne.n	800da10 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	695b      	ldr	r3, [r3, #20]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	4313      	orrs	r3, r2
 800da02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	621a      	str	r2, [r3, #32]
}
 800da2a:	bf00      	nop
 800da2c:	371c      	adds	r7, #28
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	feff8fff 	.word	0xfeff8fff
 800da3c:	40010000 	.word	0x40010000
 800da40:	40010400 	.word	0x40010400
 800da44:	40014000 	.word	0x40014000
 800da48:	40014400 	.word	0x40014400
 800da4c:	40014800 	.word	0x40014800

0800da50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da50:	b480      	push	{r7}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	4b33      	ldr	r3, [pc, #204]	; (800db48 <TIM_OC3_SetConfig+0xf8>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f023 0303 	bic.w	r3, r3, #3
 800da86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	4313      	orrs	r3, r2
 800da90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	021b      	lsls	r3, r3, #8
 800daa0:	697a      	ldr	r2, [r7, #20]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a28      	ldr	r2, [pc, #160]	; (800db4c <TIM_OC3_SetConfig+0xfc>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d003      	beq.n	800dab6 <TIM_OC3_SetConfig+0x66>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a27      	ldr	r2, [pc, #156]	; (800db50 <TIM_OC3_SetConfig+0x100>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d10d      	bne.n	800dad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dabc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	021b      	lsls	r3, r3, #8
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a1d      	ldr	r2, [pc, #116]	; (800db4c <TIM_OC3_SetConfig+0xfc>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d00f      	beq.n	800dafa <TIM_OC3_SetConfig+0xaa>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a1c      	ldr	r2, [pc, #112]	; (800db50 <TIM_OC3_SetConfig+0x100>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d00b      	beq.n	800dafa <TIM_OC3_SetConfig+0xaa>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a1b      	ldr	r2, [pc, #108]	; (800db54 <TIM_OC3_SetConfig+0x104>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d007      	beq.n	800dafa <TIM_OC3_SetConfig+0xaa>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4a1a      	ldr	r2, [pc, #104]	; (800db58 <TIM_OC3_SetConfig+0x108>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d003      	beq.n	800dafa <TIM_OC3_SetConfig+0xaa>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4a19      	ldr	r2, [pc, #100]	; (800db5c <TIM_OC3_SetConfig+0x10c>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d113      	bne.n	800db22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	4313      	orrs	r3, r2
 800db14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	4313      	orrs	r3, r2
 800db20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	693a      	ldr	r2, [r7, #16]
 800db26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	685a      	ldr	r2, [r3, #4]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	621a      	str	r2, [r3, #32]
}
 800db3c:	bf00      	nop
 800db3e:	371c      	adds	r7, #28
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	fffeff8f 	.word	0xfffeff8f
 800db4c:	40010000 	.word	0x40010000
 800db50:	40010400 	.word	0x40010400
 800db54:	40014000 	.word	0x40014000
 800db58:	40014400 	.word	0x40014400
 800db5c:	40014800 	.word	0x40014800

0800db60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db60:	b480      	push	{r7}
 800db62:	b087      	sub	sp, #28
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	4b24      	ldr	r3, [pc, #144]	; (800dc1c <TIM_OC4_SetConfig+0xbc>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	021b      	lsls	r3, r3, #8
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	031b      	lsls	r3, r3, #12
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a19      	ldr	r2, [pc, #100]	; (800dc20 <TIM_OC4_SetConfig+0xc0>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d00f      	beq.n	800dbe0 <TIM_OC4_SetConfig+0x80>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a18      	ldr	r2, [pc, #96]	; (800dc24 <TIM_OC4_SetConfig+0xc4>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d00b      	beq.n	800dbe0 <TIM_OC4_SetConfig+0x80>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a17      	ldr	r2, [pc, #92]	; (800dc28 <TIM_OC4_SetConfig+0xc8>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d007      	beq.n	800dbe0 <TIM_OC4_SetConfig+0x80>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a16      	ldr	r2, [pc, #88]	; (800dc2c <TIM_OC4_SetConfig+0xcc>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d003      	beq.n	800dbe0 <TIM_OC4_SetConfig+0x80>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a15      	ldr	r2, [pc, #84]	; (800dc30 <TIM_OC4_SetConfig+0xd0>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d109      	bne.n	800dbf4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	019b      	lsls	r3, r3, #6
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	693a      	ldr	r2, [r7, #16]
 800dc0c:	621a      	str	r2, [r3, #32]
}
 800dc0e:	bf00      	nop
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	feff8fff 	.word	0xfeff8fff
 800dc20:	40010000 	.word	0x40010000
 800dc24:	40010400 	.word	0x40010400
 800dc28:	40014000 	.word	0x40014000
 800dc2c:	40014400 	.word	0x40014400
 800dc30:	40014800 	.word	0x40014800

0800dc34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a1b      	ldr	r3, [r3, #32]
 800dc4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4b21      	ldr	r3, [pc, #132]	; (800dce4 <TIM_OC5_SetConfig+0xb0>)
 800dc60:	4013      	ands	r3, r2
 800dc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	041b      	lsls	r3, r3, #16
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a18      	ldr	r2, [pc, #96]	; (800dce8 <TIM_OC5_SetConfig+0xb4>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d00f      	beq.n	800dcaa <TIM_OC5_SetConfig+0x76>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a17      	ldr	r2, [pc, #92]	; (800dcec <TIM_OC5_SetConfig+0xb8>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d00b      	beq.n	800dcaa <TIM_OC5_SetConfig+0x76>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a16      	ldr	r2, [pc, #88]	; (800dcf0 <TIM_OC5_SetConfig+0xbc>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d007      	beq.n	800dcaa <TIM_OC5_SetConfig+0x76>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a15      	ldr	r2, [pc, #84]	; (800dcf4 <TIM_OC5_SetConfig+0xc0>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d003      	beq.n	800dcaa <TIM_OC5_SetConfig+0x76>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a14      	ldr	r2, [pc, #80]	; (800dcf8 <TIM_OC5_SetConfig+0xc4>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d109      	bne.n	800dcbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	021b      	lsls	r3, r3, #8
 800dcb8:	697a      	ldr	r2, [r7, #20]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	685a      	ldr	r2, [r3, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	621a      	str	r2, [r3, #32]
}
 800dcd8:	bf00      	nop
 800dcda:	371c      	adds	r7, #28
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	fffeff8f 	.word	0xfffeff8f
 800dce8:	40010000 	.word	0x40010000
 800dcec:	40010400 	.word	0x40010400
 800dcf0:	40014000 	.word	0x40014000
 800dcf4:	40014400 	.word	0x40014400
 800dcf8:	40014800 	.word	0x40014800

0800dcfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a1b      	ldr	r3, [r3, #32]
 800dd16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4b22      	ldr	r3, [pc, #136]	; (800ddb0 <TIM_OC6_SetConfig+0xb4>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4313      	orrs	r3, r2
 800dd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	051b      	lsls	r3, r3, #20
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a19      	ldr	r2, [pc, #100]	; (800ddb4 <TIM_OC6_SetConfig+0xb8>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d00f      	beq.n	800dd74 <TIM_OC6_SetConfig+0x78>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a18      	ldr	r2, [pc, #96]	; (800ddb8 <TIM_OC6_SetConfig+0xbc>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00b      	beq.n	800dd74 <TIM_OC6_SetConfig+0x78>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a17      	ldr	r2, [pc, #92]	; (800ddbc <TIM_OC6_SetConfig+0xc0>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d007      	beq.n	800dd74 <TIM_OC6_SetConfig+0x78>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a16      	ldr	r2, [pc, #88]	; (800ddc0 <TIM_OC6_SetConfig+0xc4>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d003      	beq.n	800dd74 <TIM_OC6_SetConfig+0x78>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a15      	ldr	r2, [pc, #84]	; (800ddc4 <TIM_OC6_SetConfig+0xc8>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d109      	bne.n	800dd88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	029b      	lsls	r3, r3, #10
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	621a      	str	r2, [r3, #32]
}
 800dda2:	bf00      	nop
 800dda4:	371c      	adds	r7, #28
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	feff8fff 	.word	0xfeff8fff
 800ddb4:	40010000 	.word	0x40010000
 800ddb8:	40010400 	.word	0x40010400
 800ddbc:	40014000 	.word	0x40014000
 800ddc0:	40014400 	.word	0x40014400
 800ddc4:	40014800 	.word	0x40014800

0800ddc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	f003 031f 	and.w	r3, r3, #31
 800ddda:	2201      	movs	r2, #1
 800dddc:	fa02 f303 	lsl.w	r3, r2, r3
 800dde0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6a1a      	ldr	r2, [r3, #32]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	43db      	mvns	r3, r3
 800ddea:	401a      	ands	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6a1a      	ldr	r2, [r3, #32]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f003 031f 	and.w	r3, r3, #31
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	fa01 f303 	lsl.w	r3, r1, r3
 800de00:	431a      	orrs	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	621a      	str	r2, [r3, #32]
}
 800de06:	bf00      	nop
 800de08:	371c      	adds	r7, #28
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
	...

0800de14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de24:	2b01      	cmp	r3, #1
 800de26:	d101      	bne.n	800de2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de28:	2302      	movs	r3, #2
 800de2a:	e077      	b.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2202      	movs	r2, #2
 800de38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a35      	ldr	r2, [pc, #212]	; (800df28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d004      	beq.n	800de60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a34      	ldr	r2, [pc, #208]	; (800df2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d108      	bne.n	800de72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	4313      	orrs	r3, r2
 800de70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4313      	orrs	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a25      	ldr	r2, [pc, #148]	; (800df28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d02c      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de9e:	d027      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a22      	ldr	r2, [pc, #136]	; (800df30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d022      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a21      	ldr	r2, [pc, #132]	; (800df34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d01d      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a1f      	ldr	r2, [pc, #124]	; (800df38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d018      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a1a      	ldr	r2, [pc, #104]	; (800df2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d013      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a1b      	ldr	r2, [pc, #108]	; (800df3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d00e      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a1a      	ldr	r2, [pc, #104]	; (800df40 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d009      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a18      	ldr	r2, [pc, #96]	; (800df44 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d004      	beq.n	800def0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a17      	ldr	r2, [pc, #92]	; (800df48 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d10c      	bne.n	800df0a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800def6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	4313      	orrs	r3, r2
 800df00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2201      	movs	r2, #1
 800df0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	40010000 	.word	0x40010000
 800df2c:	40010400 	.word	0x40010400
 800df30:	40000400 	.word	0x40000400
 800df34:	40000800 	.word	0x40000800
 800df38:	40000c00 	.word	0x40000c00
 800df3c:	40001800 	.word	0x40001800
 800df40:	40014000 	.word	0x40014000
 800df44:	4000e000 	.word	0x4000e000
 800df48:	4000e400 	.word	0x4000e400

0800df4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	e042      	b.n	800e020 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7f4 fb15 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2224      	movs	r2, #36	; 0x24
 800dfb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f022 0201 	bic.w	r2, r2, #1
 800dfc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 f82c 	bl	800e028 <UART_SetConfig>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d101      	bne.n	800dfda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e022      	b.n	800e020 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fe8c 	bl	800ed00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	689a      	ldr	r2, [r3, #8]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f042 0201 	orr.w	r2, r2, #1
 800e016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 ff13 	bl	800ee44 <UART_CheckIdleState>
 800e01e:	4603      	mov	r3, r0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e02c:	b092      	sub	sp, #72	; 0x48
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	689a      	ldr	r2, [r3, #8]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	431a      	orrs	r2, r3
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	431a      	orrs	r2, r3
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	69db      	ldr	r3, [r3, #28]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	4bbe      	ldr	r3, [pc, #760]	; (800e350 <UART_SetConfig+0x328>)
 800e058:	4013      	ands	r3, r2
 800e05a:	697a      	ldr	r2, [r7, #20]
 800e05c:	6812      	ldr	r2, [r2, #0]
 800e05e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e060:	430b      	orrs	r3, r1
 800e062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	430a      	orrs	r2, r1
 800e078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4ab3      	ldr	r2, [pc, #716]	; (800e354 <UART_SetConfig+0x32c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d004      	beq.n	800e094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e090:	4313      	orrs	r3, r2
 800e092:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	689a      	ldr	r2, [r3, #8]
 800e09a:	4baf      	ldr	r3, [pc, #700]	; (800e358 <UART_SetConfig+0x330>)
 800e09c:	4013      	ands	r3, r2
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	6812      	ldr	r2, [r2, #0]
 800e0a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0a4:	430b      	orrs	r3, r1
 800e0a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ae:	f023 010f 	bic.w	r1, r3, #15
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4aa6      	ldr	r2, [pc, #664]	; (800e35c <UART_SetConfig+0x334>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d177      	bne.n	800e1b8 <UART_SetConfig+0x190>
 800e0c8:	4ba5      	ldr	r3, [pc, #660]	; (800e360 <UART_SetConfig+0x338>)
 800e0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0d0:	2b28      	cmp	r3, #40	; 0x28
 800e0d2:	d86d      	bhi.n	800e1b0 <UART_SetConfig+0x188>
 800e0d4:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <UART_SetConfig+0xb4>)
 800e0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0da:	bf00      	nop
 800e0dc:	0800e181 	.word	0x0800e181
 800e0e0:	0800e1b1 	.word	0x0800e1b1
 800e0e4:	0800e1b1 	.word	0x0800e1b1
 800e0e8:	0800e1b1 	.word	0x0800e1b1
 800e0ec:	0800e1b1 	.word	0x0800e1b1
 800e0f0:	0800e1b1 	.word	0x0800e1b1
 800e0f4:	0800e1b1 	.word	0x0800e1b1
 800e0f8:	0800e1b1 	.word	0x0800e1b1
 800e0fc:	0800e189 	.word	0x0800e189
 800e100:	0800e1b1 	.word	0x0800e1b1
 800e104:	0800e1b1 	.word	0x0800e1b1
 800e108:	0800e1b1 	.word	0x0800e1b1
 800e10c:	0800e1b1 	.word	0x0800e1b1
 800e110:	0800e1b1 	.word	0x0800e1b1
 800e114:	0800e1b1 	.word	0x0800e1b1
 800e118:	0800e1b1 	.word	0x0800e1b1
 800e11c:	0800e191 	.word	0x0800e191
 800e120:	0800e1b1 	.word	0x0800e1b1
 800e124:	0800e1b1 	.word	0x0800e1b1
 800e128:	0800e1b1 	.word	0x0800e1b1
 800e12c:	0800e1b1 	.word	0x0800e1b1
 800e130:	0800e1b1 	.word	0x0800e1b1
 800e134:	0800e1b1 	.word	0x0800e1b1
 800e138:	0800e1b1 	.word	0x0800e1b1
 800e13c:	0800e199 	.word	0x0800e199
 800e140:	0800e1b1 	.word	0x0800e1b1
 800e144:	0800e1b1 	.word	0x0800e1b1
 800e148:	0800e1b1 	.word	0x0800e1b1
 800e14c:	0800e1b1 	.word	0x0800e1b1
 800e150:	0800e1b1 	.word	0x0800e1b1
 800e154:	0800e1b1 	.word	0x0800e1b1
 800e158:	0800e1b1 	.word	0x0800e1b1
 800e15c:	0800e1a1 	.word	0x0800e1a1
 800e160:	0800e1b1 	.word	0x0800e1b1
 800e164:	0800e1b1 	.word	0x0800e1b1
 800e168:	0800e1b1 	.word	0x0800e1b1
 800e16c:	0800e1b1 	.word	0x0800e1b1
 800e170:	0800e1b1 	.word	0x0800e1b1
 800e174:	0800e1b1 	.word	0x0800e1b1
 800e178:	0800e1b1 	.word	0x0800e1b1
 800e17c:	0800e1a9 	.word	0x0800e1a9
 800e180:	2301      	movs	r3, #1
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e326      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e188:	2304      	movs	r3, #4
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e322      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e190:	2308      	movs	r3, #8
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e31e      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e198:	2310      	movs	r3, #16
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e31a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1a0:	2320      	movs	r3, #32
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e316      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1a8:	2340      	movs	r3, #64	; 0x40
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e312      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1b0:	2380      	movs	r3, #128	; 0x80
 800e1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b6:	e30e      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a69      	ldr	r2, [pc, #420]	; (800e364 <UART_SetConfig+0x33c>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d130      	bne.n	800e224 <UART_SetConfig+0x1fc>
 800e1c2:	4b67      	ldr	r3, [pc, #412]	; (800e360 <UART_SetConfig+0x338>)
 800e1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b05      	cmp	r3, #5
 800e1cc:	d826      	bhi.n	800e21c <UART_SetConfig+0x1f4>
 800e1ce:	a201      	add	r2, pc, #4	; (adr r2, 800e1d4 <UART_SetConfig+0x1ac>)
 800e1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d4:	0800e1ed 	.word	0x0800e1ed
 800e1d8:	0800e1f5 	.word	0x0800e1f5
 800e1dc:	0800e1fd 	.word	0x0800e1fd
 800e1e0:	0800e205 	.word	0x0800e205
 800e1e4:	0800e20d 	.word	0x0800e20d
 800e1e8:	0800e215 	.word	0x0800e215
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e2f0      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1f4:	2304      	movs	r3, #4
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e2ec      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e1fc:	2308      	movs	r3, #8
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e2e8      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e204:	2310      	movs	r3, #16
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e2e4      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e20c:	2320      	movs	r3, #32
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e2e0      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e214:	2340      	movs	r3, #64	; 0x40
 800e216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21a:	e2dc      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e21c:	2380      	movs	r3, #128	; 0x80
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e2d8      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a4f      	ldr	r2, [pc, #316]	; (800e368 <UART_SetConfig+0x340>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d130      	bne.n	800e290 <UART_SetConfig+0x268>
 800e22e:	4b4c      	ldr	r3, [pc, #304]	; (800e360 <UART_SetConfig+0x338>)
 800e230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	2b05      	cmp	r3, #5
 800e238:	d826      	bhi.n	800e288 <UART_SetConfig+0x260>
 800e23a:	a201      	add	r2, pc, #4	; (adr r2, 800e240 <UART_SetConfig+0x218>)
 800e23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e240:	0800e259 	.word	0x0800e259
 800e244:	0800e261 	.word	0x0800e261
 800e248:	0800e269 	.word	0x0800e269
 800e24c:	0800e271 	.word	0x0800e271
 800e250:	0800e279 	.word	0x0800e279
 800e254:	0800e281 	.word	0x0800e281
 800e258:	2300      	movs	r3, #0
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e2ba      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e260:	2304      	movs	r3, #4
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e2b6      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e268:	2308      	movs	r3, #8
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e2b2      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e270:	2310      	movs	r3, #16
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e2ae      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e278:	2320      	movs	r3, #32
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e2aa      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e280:	2340      	movs	r3, #64	; 0x40
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e2a6      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e288:	2380      	movs	r3, #128	; 0x80
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e2a2      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a35      	ldr	r2, [pc, #212]	; (800e36c <UART_SetConfig+0x344>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d130      	bne.n	800e2fc <UART_SetConfig+0x2d4>
 800e29a:	4b31      	ldr	r3, [pc, #196]	; (800e360 <UART_SetConfig+0x338>)
 800e29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e29e:	f003 0307 	and.w	r3, r3, #7
 800e2a2:	2b05      	cmp	r3, #5
 800e2a4:	d826      	bhi.n	800e2f4 <UART_SetConfig+0x2cc>
 800e2a6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <UART_SetConfig+0x284>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e2c5 	.word	0x0800e2c5
 800e2b0:	0800e2cd 	.word	0x0800e2cd
 800e2b4:	0800e2d5 	.word	0x0800e2d5
 800e2b8:	0800e2dd 	.word	0x0800e2dd
 800e2bc:	0800e2e5 	.word	0x0800e2e5
 800e2c0:	0800e2ed 	.word	0x0800e2ed
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e284      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2cc:	2304      	movs	r3, #4
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d2:	e280      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2d4:	2308      	movs	r3, #8
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2da:	e27c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2dc:	2310      	movs	r3, #16
 800e2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e2:	e278      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e274      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e270      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2f4:	2380      	movs	r3, #128	; 0x80
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e26c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1b      	ldr	r2, [pc, #108]	; (800e370 <UART_SetConfig+0x348>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d142      	bne.n	800e38c <UART_SetConfig+0x364>
 800e306:	4b16      	ldr	r3, [pc, #88]	; (800e360 <UART_SetConfig+0x338>)
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	f003 0307 	and.w	r3, r3, #7
 800e30e:	2b05      	cmp	r3, #5
 800e310:	d838      	bhi.n	800e384 <UART_SetConfig+0x35c>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0x2f0>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e331 	.word	0x0800e331
 800e31c:	0800e339 	.word	0x0800e339
 800e320:	0800e341 	.word	0x0800e341
 800e324:	0800e349 	.word	0x0800e349
 800e328:	0800e375 	.word	0x0800e375
 800e32c:	0800e37d 	.word	0x0800e37d
 800e330:	2300      	movs	r3, #0
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e336:	e24e      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e338:	2304      	movs	r3, #4
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33e:	e24a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e340:	2308      	movs	r3, #8
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e246      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e348:	2310      	movs	r3, #16
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e242      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e350:	cfff69f3 	.word	0xcfff69f3
 800e354:	58000c00 	.word	0x58000c00
 800e358:	11fff4ff 	.word	0x11fff4ff
 800e35c:	40011000 	.word	0x40011000
 800e360:	58024400 	.word	0x58024400
 800e364:	40004400 	.word	0x40004400
 800e368:	40004800 	.word	0x40004800
 800e36c:	40004c00 	.word	0x40004c00
 800e370:	40005000 	.word	0x40005000
 800e374:	2320      	movs	r3, #32
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37a:	e22c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e37c:	2340      	movs	r3, #64	; 0x40
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e228      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e384:	2380      	movs	r3, #128	; 0x80
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e224      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4ab1      	ldr	r2, [pc, #708]	; (800e658 <UART_SetConfig+0x630>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d176      	bne.n	800e484 <UART_SetConfig+0x45c>
 800e396:	4bb1      	ldr	r3, [pc, #708]	; (800e65c <UART_SetConfig+0x634>)
 800e398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e39a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e39e:	2b28      	cmp	r3, #40	; 0x28
 800e3a0:	d86c      	bhi.n	800e47c <UART_SetConfig+0x454>
 800e3a2:	a201      	add	r2, pc, #4	; (adr r2, 800e3a8 <UART_SetConfig+0x380>)
 800e3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a8:	0800e44d 	.word	0x0800e44d
 800e3ac:	0800e47d 	.word	0x0800e47d
 800e3b0:	0800e47d 	.word	0x0800e47d
 800e3b4:	0800e47d 	.word	0x0800e47d
 800e3b8:	0800e47d 	.word	0x0800e47d
 800e3bc:	0800e47d 	.word	0x0800e47d
 800e3c0:	0800e47d 	.word	0x0800e47d
 800e3c4:	0800e47d 	.word	0x0800e47d
 800e3c8:	0800e455 	.word	0x0800e455
 800e3cc:	0800e47d 	.word	0x0800e47d
 800e3d0:	0800e47d 	.word	0x0800e47d
 800e3d4:	0800e47d 	.word	0x0800e47d
 800e3d8:	0800e47d 	.word	0x0800e47d
 800e3dc:	0800e47d 	.word	0x0800e47d
 800e3e0:	0800e47d 	.word	0x0800e47d
 800e3e4:	0800e47d 	.word	0x0800e47d
 800e3e8:	0800e45d 	.word	0x0800e45d
 800e3ec:	0800e47d 	.word	0x0800e47d
 800e3f0:	0800e47d 	.word	0x0800e47d
 800e3f4:	0800e47d 	.word	0x0800e47d
 800e3f8:	0800e47d 	.word	0x0800e47d
 800e3fc:	0800e47d 	.word	0x0800e47d
 800e400:	0800e47d 	.word	0x0800e47d
 800e404:	0800e47d 	.word	0x0800e47d
 800e408:	0800e465 	.word	0x0800e465
 800e40c:	0800e47d 	.word	0x0800e47d
 800e410:	0800e47d 	.word	0x0800e47d
 800e414:	0800e47d 	.word	0x0800e47d
 800e418:	0800e47d 	.word	0x0800e47d
 800e41c:	0800e47d 	.word	0x0800e47d
 800e420:	0800e47d 	.word	0x0800e47d
 800e424:	0800e47d 	.word	0x0800e47d
 800e428:	0800e46d 	.word	0x0800e46d
 800e42c:	0800e47d 	.word	0x0800e47d
 800e430:	0800e47d 	.word	0x0800e47d
 800e434:	0800e47d 	.word	0x0800e47d
 800e438:	0800e47d 	.word	0x0800e47d
 800e43c:	0800e47d 	.word	0x0800e47d
 800e440:	0800e47d 	.word	0x0800e47d
 800e444:	0800e47d 	.word	0x0800e47d
 800e448:	0800e475 	.word	0x0800e475
 800e44c:	2301      	movs	r3, #1
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e1c0      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e454:	2304      	movs	r3, #4
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e1bc      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e45c:	2308      	movs	r3, #8
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e1b8      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e464:	2310      	movs	r3, #16
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e1b4      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e46c:	2320      	movs	r3, #32
 800e46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e472:	e1b0      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e474:	2340      	movs	r3, #64	; 0x40
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e1ac      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e47c:	2380      	movs	r3, #128	; 0x80
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e1a8      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a75      	ldr	r2, [pc, #468]	; (800e660 <UART_SetConfig+0x638>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d130      	bne.n	800e4f0 <UART_SetConfig+0x4c8>
 800e48e:	4b73      	ldr	r3, [pc, #460]	; (800e65c <UART_SetConfig+0x634>)
 800e490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e492:	f003 0307 	and.w	r3, r3, #7
 800e496:	2b05      	cmp	r3, #5
 800e498:	d826      	bhi.n	800e4e8 <UART_SetConfig+0x4c0>
 800e49a:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <UART_SetConfig+0x478>)
 800e49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a0:	0800e4b9 	.word	0x0800e4b9
 800e4a4:	0800e4c1 	.word	0x0800e4c1
 800e4a8:	0800e4c9 	.word	0x0800e4c9
 800e4ac:	0800e4d1 	.word	0x0800e4d1
 800e4b0:	0800e4d9 	.word	0x0800e4d9
 800e4b4:	0800e4e1 	.word	0x0800e4e1
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4be:	e18a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4c0:	2304      	movs	r3, #4
 800e4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c6:	e186      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4c8:	2308      	movs	r3, #8
 800e4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ce:	e182      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4d0:	2310      	movs	r3, #16
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e17e      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4d8:	2320      	movs	r3, #32
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e17a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4e0:	2340      	movs	r3, #64	; 0x40
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e176      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4e8:	2380      	movs	r3, #128	; 0x80
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e172      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a5b      	ldr	r2, [pc, #364]	; (800e664 <UART_SetConfig+0x63c>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d130      	bne.n	800e55c <UART_SetConfig+0x534>
 800e4fa:	4b58      	ldr	r3, [pc, #352]	; (800e65c <UART_SetConfig+0x634>)
 800e4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4fe:	f003 0307 	and.w	r3, r3, #7
 800e502:	2b05      	cmp	r3, #5
 800e504:	d826      	bhi.n	800e554 <UART_SetConfig+0x52c>
 800e506:	a201      	add	r2, pc, #4	; (adr r2, 800e50c <UART_SetConfig+0x4e4>)
 800e508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50c:	0800e525 	.word	0x0800e525
 800e510:	0800e52d 	.word	0x0800e52d
 800e514:	0800e535 	.word	0x0800e535
 800e518:	0800e53d 	.word	0x0800e53d
 800e51c:	0800e545 	.word	0x0800e545
 800e520:	0800e54d 	.word	0x0800e54d
 800e524:	2300      	movs	r3, #0
 800e526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52a:	e154      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e52c:	2304      	movs	r3, #4
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e150      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e534:	2308      	movs	r3, #8
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e14c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e53c:	2310      	movs	r3, #16
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e148      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e544:	2320      	movs	r3, #32
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e144      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e54c:	2340      	movs	r3, #64	; 0x40
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e140      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e554:	2380      	movs	r3, #128	; 0x80
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e13c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a41      	ldr	r2, [pc, #260]	; (800e668 <UART_SetConfig+0x640>)
 800e562:	4293      	cmp	r3, r2
 800e564:	f040 8082 	bne.w	800e66c <UART_SetConfig+0x644>
 800e568:	4b3c      	ldr	r3, [pc, #240]	; (800e65c <UART_SetConfig+0x634>)
 800e56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e56c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e570:	2b28      	cmp	r3, #40	; 0x28
 800e572:	d86d      	bhi.n	800e650 <UART_SetConfig+0x628>
 800e574:	a201      	add	r2, pc, #4	; (adr r2, 800e57c <UART_SetConfig+0x554>)
 800e576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57a:	bf00      	nop
 800e57c:	0800e621 	.word	0x0800e621
 800e580:	0800e651 	.word	0x0800e651
 800e584:	0800e651 	.word	0x0800e651
 800e588:	0800e651 	.word	0x0800e651
 800e58c:	0800e651 	.word	0x0800e651
 800e590:	0800e651 	.word	0x0800e651
 800e594:	0800e651 	.word	0x0800e651
 800e598:	0800e651 	.word	0x0800e651
 800e59c:	0800e629 	.word	0x0800e629
 800e5a0:	0800e651 	.word	0x0800e651
 800e5a4:	0800e651 	.word	0x0800e651
 800e5a8:	0800e651 	.word	0x0800e651
 800e5ac:	0800e651 	.word	0x0800e651
 800e5b0:	0800e651 	.word	0x0800e651
 800e5b4:	0800e651 	.word	0x0800e651
 800e5b8:	0800e651 	.word	0x0800e651
 800e5bc:	0800e631 	.word	0x0800e631
 800e5c0:	0800e651 	.word	0x0800e651
 800e5c4:	0800e651 	.word	0x0800e651
 800e5c8:	0800e651 	.word	0x0800e651
 800e5cc:	0800e651 	.word	0x0800e651
 800e5d0:	0800e651 	.word	0x0800e651
 800e5d4:	0800e651 	.word	0x0800e651
 800e5d8:	0800e651 	.word	0x0800e651
 800e5dc:	0800e639 	.word	0x0800e639
 800e5e0:	0800e651 	.word	0x0800e651
 800e5e4:	0800e651 	.word	0x0800e651
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e651 	.word	0x0800e651
 800e5f0:	0800e651 	.word	0x0800e651
 800e5f4:	0800e651 	.word	0x0800e651
 800e5f8:	0800e651 	.word	0x0800e651
 800e5fc:	0800e641 	.word	0x0800e641
 800e600:	0800e651 	.word	0x0800e651
 800e604:	0800e651 	.word	0x0800e651
 800e608:	0800e651 	.word	0x0800e651
 800e60c:	0800e651 	.word	0x0800e651
 800e610:	0800e651 	.word	0x0800e651
 800e614:	0800e651 	.word	0x0800e651
 800e618:	0800e651 	.word	0x0800e651
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	2301      	movs	r3, #1
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e0d6      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e628:	2304      	movs	r3, #4
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e0d2      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e630:	2308      	movs	r3, #8
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e636:	e0ce      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e638:	2310      	movs	r3, #16
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63e:	e0ca      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e640:	2320      	movs	r3, #32
 800e642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e646:	e0c6      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e648:	2340      	movs	r3, #64	; 0x40
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64e:	e0c2      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e650:	2380      	movs	r3, #128	; 0x80
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e0be      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e658:	40011400 	.word	0x40011400
 800e65c:	58024400 	.word	0x58024400
 800e660:	40007800 	.word	0x40007800
 800e664:	40007c00 	.word	0x40007c00
 800e668:	40011800 	.word	0x40011800
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4aad      	ldr	r2, [pc, #692]	; (800e928 <UART_SetConfig+0x900>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d176      	bne.n	800e764 <UART_SetConfig+0x73c>
 800e676:	4bad      	ldr	r3, [pc, #692]	; (800e92c <UART_SetConfig+0x904>)
 800e678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e67a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e67e:	2b28      	cmp	r3, #40	; 0x28
 800e680:	d86c      	bhi.n	800e75c <UART_SetConfig+0x734>
 800e682:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <UART_SetConfig+0x660>)
 800e684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e688:	0800e72d 	.word	0x0800e72d
 800e68c:	0800e75d 	.word	0x0800e75d
 800e690:	0800e75d 	.word	0x0800e75d
 800e694:	0800e75d 	.word	0x0800e75d
 800e698:	0800e75d 	.word	0x0800e75d
 800e69c:	0800e75d 	.word	0x0800e75d
 800e6a0:	0800e75d 	.word	0x0800e75d
 800e6a4:	0800e75d 	.word	0x0800e75d
 800e6a8:	0800e735 	.word	0x0800e735
 800e6ac:	0800e75d 	.word	0x0800e75d
 800e6b0:	0800e75d 	.word	0x0800e75d
 800e6b4:	0800e75d 	.word	0x0800e75d
 800e6b8:	0800e75d 	.word	0x0800e75d
 800e6bc:	0800e75d 	.word	0x0800e75d
 800e6c0:	0800e75d 	.word	0x0800e75d
 800e6c4:	0800e75d 	.word	0x0800e75d
 800e6c8:	0800e73d 	.word	0x0800e73d
 800e6cc:	0800e75d 	.word	0x0800e75d
 800e6d0:	0800e75d 	.word	0x0800e75d
 800e6d4:	0800e75d 	.word	0x0800e75d
 800e6d8:	0800e75d 	.word	0x0800e75d
 800e6dc:	0800e75d 	.word	0x0800e75d
 800e6e0:	0800e75d 	.word	0x0800e75d
 800e6e4:	0800e75d 	.word	0x0800e75d
 800e6e8:	0800e745 	.word	0x0800e745
 800e6ec:	0800e75d 	.word	0x0800e75d
 800e6f0:	0800e75d 	.word	0x0800e75d
 800e6f4:	0800e75d 	.word	0x0800e75d
 800e6f8:	0800e75d 	.word	0x0800e75d
 800e6fc:	0800e75d 	.word	0x0800e75d
 800e700:	0800e75d 	.word	0x0800e75d
 800e704:	0800e75d 	.word	0x0800e75d
 800e708:	0800e74d 	.word	0x0800e74d
 800e70c:	0800e75d 	.word	0x0800e75d
 800e710:	0800e75d 	.word	0x0800e75d
 800e714:	0800e75d 	.word	0x0800e75d
 800e718:	0800e75d 	.word	0x0800e75d
 800e71c:	0800e75d 	.word	0x0800e75d
 800e720:	0800e75d 	.word	0x0800e75d
 800e724:	0800e75d 	.word	0x0800e75d
 800e728:	0800e755 	.word	0x0800e755
 800e72c:	2301      	movs	r3, #1
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e732:	e050      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e734:	2304      	movs	r3, #4
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73a:	e04c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e73c:	2308      	movs	r3, #8
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e742:	e048      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e744:	2310      	movs	r3, #16
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74a:	e044      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e74c:	2320      	movs	r3, #32
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e752:	e040      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e754:	2340      	movs	r3, #64	; 0x40
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75a:	e03c      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e75c:	2380      	movs	r3, #128	; 0x80
 800e75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e762:	e038      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a71      	ldr	r2, [pc, #452]	; (800e930 <UART_SetConfig+0x908>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d130      	bne.n	800e7d0 <UART_SetConfig+0x7a8>
 800e76e:	4b6f      	ldr	r3, [pc, #444]	; (800e92c <UART_SetConfig+0x904>)
 800e770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e772:	f003 0307 	and.w	r3, r3, #7
 800e776:	2b05      	cmp	r3, #5
 800e778:	d826      	bhi.n	800e7c8 <UART_SetConfig+0x7a0>
 800e77a:	a201      	add	r2, pc, #4	; (adr r2, 800e780 <UART_SetConfig+0x758>)
 800e77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e780:	0800e799 	.word	0x0800e799
 800e784:	0800e7a1 	.word	0x0800e7a1
 800e788:	0800e7a9 	.word	0x0800e7a9
 800e78c:	0800e7b1 	.word	0x0800e7b1
 800e790:	0800e7b9 	.word	0x0800e7b9
 800e794:	0800e7c1 	.word	0x0800e7c1
 800e798:	2302      	movs	r3, #2
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79e:	e01a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7a0:	2304      	movs	r3, #4
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a6:	e016      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ae:	e012      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7b0:	2310      	movs	r3, #16
 800e7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b6:	e00e      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7b8:	2320      	movs	r3, #32
 800e7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7be:	e00a      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7c0:	2340      	movs	r3, #64	; 0x40
 800e7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c6:	e006      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7c8:	2380      	movs	r3, #128	; 0x80
 800e7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ce:	e002      	b.n	800e7d6 <UART_SetConfig+0x7ae>
 800e7d0:	2380      	movs	r3, #128	; 0x80
 800e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a55      	ldr	r2, [pc, #340]	; (800e930 <UART_SetConfig+0x908>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	f040 80f8 	bne.w	800e9d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7e6:	2b20      	cmp	r3, #32
 800e7e8:	dc46      	bgt.n	800e878 <UART_SetConfig+0x850>
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	db75      	blt.n	800e8da <UART_SetConfig+0x8b2>
 800e7ee:	3b02      	subs	r3, #2
 800e7f0:	2b1e      	cmp	r3, #30
 800e7f2:	d872      	bhi.n	800e8da <UART_SetConfig+0x8b2>
 800e7f4:	a201      	add	r2, pc, #4	; (adr r2, 800e7fc <UART_SetConfig+0x7d4>)
 800e7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fa:	bf00      	nop
 800e7fc:	0800e87f 	.word	0x0800e87f
 800e800:	0800e8db 	.word	0x0800e8db
 800e804:	0800e887 	.word	0x0800e887
 800e808:	0800e8db 	.word	0x0800e8db
 800e80c:	0800e8db 	.word	0x0800e8db
 800e810:	0800e8db 	.word	0x0800e8db
 800e814:	0800e897 	.word	0x0800e897
 800e818:	0800e8db 	.word	0x0800e8db
 800e81c:	0800e8db 	.word	0x0800e8db
 800e820:	0800e8db 	.word	0x0800e8db
 800e824:	0800e8db 	.word	0x0800e8db
 800e828:	0800e8db 	.word	0x0800e8db
 800e82c:	0800e8db 	.word	0x0800e8db
 800e830:	0800e8db 	.word	0x0800e8db
 800e834:	0800e8a7 	.word	0x0800e8a7
 800e838:	0800e8db 	.word	0x0800e8db
 800e83c:	0800e8db 	.word	0x0800e8db
 800e840:	0800e8db 	.word	0x0800e8db
 800e844:	0800e8db 	.word	0x0800e8db
 800e848:	0800e8db 	.word	0x0800e8db
 800e84c:	0800e8db 	.word	0x0800e8db
 800e850:	0800e8db 	.word	0x0800e8db
 800e854:	0800e8db 	.word	0x0800e8db
 800e858:	0800e8db 	.word	0x0800e8db
 800e85c:	0800e8db 	.word	0x0800e8db
 800e860:	0800e8db 	.word	0x0800e8db
 800e864:	0800e8db 	.word	0x0800e8db
 800e868:	0800e8db 	.word	0x0800e8db
 800e86c:	0800e8db 	.word	0x0800e8db
 800e870:	0800e8db 	.word	0x0800e8db
 800e874:	0800e8cd 	.word	0x0800e8cd
 800e878:	2b40      	cmp	r3, #64	; 0x40
 800e87a:	d02a      	beq.n	800e8d2 <UART_SetConfig+0x8aa>
 800e87c:	e02d      	b.n	800e8da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e87e:	f7fc fe4d 	bl	800b51c <HAL_RCCEx_GetD3PCLK1Freq>
 800e882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e884:	e02f      	b.n	800e8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fc fe5c 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e894:	e027      	b.n	800e8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e896:	f107 0318 	add.w	r3, r7, #24
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fc ffa8 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a4:	e01f      	b.n	800e8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8a6:	4b21      	ldr	r3, [pc, #132]	; (800e92c <UART_SetConfig+0x904>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f003 0320 	and.w	r3, r3, #32
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d009      	beq.n	800e8c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8b2:	4b1e      	ldr	r3, [pc, #120]	; (800e92c <UART_SetConfig+0x904>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	08db      	lsrs	r3, r3, #3
 800e8b8:	f003 0303 	and.w	r3, r3, #3
 800e8bc:	4a1d      	ldr	r2, [pc, #116]	; (800e934 <UART_SetConfig+0x90c>)
 800e8be:	fa22 f303 	lsr.w	r3, r2, r3
 800e8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8c4:	e00f      	b.n	800e8e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e8c6:	4b1b      	ldr	r3, [pc, #108]	; (800e934 <UART_SetConfig+0x90c>)
 800e8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ca:	e00c      	b.n	800e8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8cc:	4b1a      	ldr	r3, [pc, #104]	; (800e938 <UART_SetConfig+0x910>)
 800e8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8d0:	e009      	b.n	800e8e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8d8:	e005      	b.n	800e8e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 81ee 	beq.w	800ecca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f2:	4a12      	ldr	r2, [pc, #72]	; (800e93c <UART_SetConfig+0x914>)
 800e8f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e900:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	4613      	mov	r3, r2
 800e908:	005b      	lsls	r3, r3, #1
 800e90a:	4413      	add	r3, r2
 800e90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e90e:	429a      	cmp	r2, r3
 800e910:	d305      	bcc.n	800e91e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d910      	bls.n	800e940 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e91e:	2301      	movs	r3, #1
 800e920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e924:	e1d1      	b.n	800ecca <UART_SetConfig+0xca2>
 800e926:	bf00      	nop
 800e928:	40011c00 	.word	0x40011c00
 800e92c:	58024400 	.word	0x58024400
 800e930:	58000c00 	.word	0x58000c00
 800e934:	03d09000 	.word	0x03d09000
 800e938:	003d0900 	.word	0x003d0900
 800e93c:	080140c8 	.word	0x080140c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e942:	2200      	movs	r2, #0
 800e944:	60bb      	str	r3, [r7, #8]
 800e946:	60fa      	str	r2, [r7, #12]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94c:	4ac0      	ldr	r2, [pc, #768]	; (800ec50 <UART_SetConfig+0xc28>)
 800e94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e952:	b29b      	uxth	r3, r3
 800e954:	2200      	movs	r2, #0
 800e956:	603b      	str	r3, [r7, #0]
 800e958:	607a      	str	r2, [r7, #4]
 800e95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e95e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e962:	f7f1 fd2d 	bl	80003c0 <__aeabi_uldivmod>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4610      	mov	r0, r2
 800e96c:	4619      	mov	r1, r3
 800e96e:	f04f 0200 	mov.w	r2, #0
 800e972:	f04f 0300 	mov.w	r3, #0
 800e976:	020b      	lsls	r3, r1, #8
 800e978:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e97c:	0202      	lsls	r2, r0, #8
 800e97e:	6979      	ldr	r1, [r7, #20]
 800e980:	6849      	ldr	r1, [r1, #4]
 800e982:	0849      	lsrs	r1, r1, #1
 800e984:	2000      	movs	r0, #0
 800e986:	460c      	mov	r4, r1
 800e988:	4605      	mov	r5, r0
 800e98a:	eb12 0804 	adds.w	r8, r2, r4
 800e98e:	eb43 0905 	adc.w	r9, r3, r5
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	469a      	mov	sl, r3
 800e99a:	4693      	mov	fp, r2
 800e99c:	4652      	mov	r2, sl
 800e99e:	465b      	mov	r3, fp
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	f7f1 fd0c 	bl	80003c0 <__aeabi_uldivmod>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9b6:	d308      	bcc.n	800e9ca <UART_SetConfig+0x9a2>
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9be:	d204      	bcs.n	800e9ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9c6:	60da      	str	r2, [r3, #12]
 800e9c8:	e17f      	b.n	800ecca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9d0:	e17b      	b.n	800ecca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	69db      	ldr	r3, [r3, #28]
 800e9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9da:	f040 80bd 	bne.w	800eb58 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e9de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9e2:	2b20      	cmp	r3, #32
 800e9e4:	dc48      	bgt.n	800ea78 <UART_SetConfig+0xa50>
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	db7b      	blt.n	800eae2 <UART_SetConfig+0xaba>
 800e9ea:	2b20      	cmp	r3, #32
 800e9ec:	d879      	bhi.n	800eae2 <UART_SetConfig+0xaba>
 800e9ee:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <UART_SetConfig+0x9cc>)
 800e9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f4:	0800ea7f 	.word	0x0800ea7f
 800e9f8:	0800ea87 	.word	0x0800ea87
 800e9fc:	0800eae3 	.word	0x0800eae3
 800ea00:	0800eae3 	.word	0x0800eae3
 800ea04:	0800ea8f 	.word	0x0800ea8f
 800ea08:	0800eae3 	.word	0x0800eae3
 800ea0c:	0800eae3 	.word	0x0800eae3
 800ea10:	0800eae3 	.word	0x0800eae3
 800ea14:	0800ea9f 	.word	0x0800ea9f
 800ea18:	0800eae3 	.word	0x0800eae3
 800ea1c:	0800eae3 	.word	0x0800eae3
 800ea20:	0800eae3 	.word	0x0800eae3
 800ea24:	0800eae3 	.word	0x0800eae3
 800ea28:	0800eae3 	.word	0x0800eae3
 800ea2c:	0800eae3 	.word	0x0800eae3
 800ea30:	0800eae3 	.word	0x0800eae3
 800ea34:	0800eaaf 	.word	0x0800eaaf
 800ea38:	0800eae3 	.word	0x0800eae3
 800ea3c:	0800eae3 	.word	0x0800eae3
 800ea40:	0800eae3 	.word	0x0800eae3
 800ea44:	0800eae3 	.word	0x0800eae3
 800ea48:	0800eae3 	.word	0x0800eae3
 800ea4c:	0800eae3 	.word	0x0800eae3
 800ea50:	0800eae3 	.word	0x0800eae3
 800ea54:	0800eae3 	.word	0x0800eae3
 800ea58:	0800eae3 	.word	0x0800eae3
 800ea5c:	0800eae3 	.word	0x0800eae3
 800ea60:	0800eae3 	.word	0x0800eae3
 800ea64:	0800eae3 	.word	0x0800eae3
 800ea68:	0800eae3 	.word	0x0800eae3
 800ea6c:	0800eae3 	.word	0x0800eae3
 800ea70:	0800eae3 	.word	0x0800eae3
 800ea74:	0800ead5 	.word	0x0800ead5
 800ea78:	2b40      	cmp	r3, #64	; 0x40
 800ea7a:	d02e      	beq.n	800eada <UART_SetConfig+0xab2>
 800ea7c:	e031      	b.n	800eae2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea7e:	f7fa feaf 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 800ea82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea84:	e033      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea86:	f7fa fec1 	bl	800980c <HAL_RCC_GetPCLK2Freq>
 800ea8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea8c:	e02f      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fc fd58 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea9c:	e027      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea9e:	f107 0318 	add.w	r3, r7, #24
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc fea4 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaac:	e01f      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaae:	4b69      	ldr	r3, [pc, #420]	; (800ec54 <UART_SetConfig+0xc2c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f003 0320 	and.w	r3, r3, #32
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d009      	beq.n	800eace <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaba:	4b66      	ldr	r3, [pc, #408]	; (800ec54 <UART_SetConfig+0xc2c>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	08db      	lsrs	r3, r3, #3
 800eac0:	f003 0303 	and.w	r3, r3, #3
 800eac4:	4a64      	ldr	r2, [pc, #400]	; (800ec58 <UART_SetConfig+0xc30>)
 800eac6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eacc:	e00f      	b.n	800eaee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800eace:	4b62      	ldr	r3, [pc, #392]	; (800ec58 <UART_SetConfig+0xc30>)
 800ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead2:	e00c      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ead4:	4b61      	ldr	r3, [pc, #388]	; (800ec5c <UART_SetConfig+0xc34>)
 800ead6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead8:	e009      	b.n	800eaee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae0:	e005      	b.n	800eaee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eae2:	2300      	movs	r3, #0
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eaec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 80ea 	beq.w	800ecca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	4a55      	ldr	r2, [pc, #340]	; (800ec50 <UART_SetConfig+0xc28>)
 800eafc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb00:	461a      	mov	r2, r3
 800eb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb04:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb08:	005a      	lsls	r2, r3, #1
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	085b      	lsrs	r3, r3, #1
 800eb10:	441a      	add	r2, r3
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1e:	2b0f      	cmp	r3, #15
 800eb20:	d916      	bls.n	800eb50 <UART_SetConfig+0xb28>
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb28:	d212      	bcs.n	800eb50 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	f023 030f 	bic.w	r3, r3, #15
 800eb32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb36:	085b      	lsrs	r3, r3, #1
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	f003 0307 	and.w	r3, r3, #7
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb42:	4313      	orrs	r3, r2
 800eb44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	e0bc      	b.n	800ecca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb56:	e0b8      	b.n	800ecca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb5c:	2b20      	cmp	r3, #32
 800eb5e:	dc4b      	bgt.n	800ebf8 <UART_SetConfig+0xbd0>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f2c0 8087 	blt.w	800ec74 <UART_SetConfig+0xc4c>
 800eb66:	2b20      	cmp	r3, #32
 800eb68:	f200 8084 	bhi.w	800ec74 <UART_SetConfig+0xc4c>
 800eb6c:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0xb4c>)
 800eb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb72:	bf00      	nop
 800eb74:	0800ebff 	.word	0x0800ebff
 800eb78:	0800ec07 	.word	0x0800ec07
 800eb7c:	0800ec75 	.word	0x0800ec75
 800eb80:	0800ec75 	.word	0x0800ec75
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec75 	.word	0x0800ec75
 800eb8c:	0800ec75 	.word	0x0800ec75
 800eb90:	0800ec75 	.word	0x0800ec75
 800eb94:	0800ec1f 	.word	0x0800ec1f
 800eb98:	0800ec75 	.word	0x0800ec75
 800eb9c:	0800ec75 	.word	0x0800ec75
 800eba0:	0800ec75 	.word	0x0800ec75
 800eba4:	0800ec75 	.word	0x0800ec75
 800eba8:	0800ec75 	.word	0x0800ec75
 800ebac:	0800ec75 	.word	0x0800ec75
 800ebb0:	0800ec75 	.word	0x0800ec75
 800ebb4:	0800ec2f 	.word	0x0800ec2f
 800ebb8:	0800ec75 	.word	0x0800ec75
 800ebbc:	0800ec75 	.word	0x0800ec75
 800ebc0:	0800ec75 	.word	0x0800ec75
 800ebc4:	0800ec75 	.word	0x0800ec75
 800ebc8:	0800ec75 	.word	0x0800ec75
 800ebcc:	0800ec75 	.word	0x0800ec75
 800ebd0:	0800ec75 	.word	0x0800ec75
 800ebd4:	0800ec75 	.word	0x0800ec75
 800ebd8:	0800ec75 	.word	0x0800ec75
 800ebdc:	0800ec75 	.word	0x0800ec75
 800ebe0:	0800ec75 	.word	0x0800ec75
 800ebe4:	0800ec75 	.word	0x0800ec75
 800ebe8:	0800ec75 	.word	0x0800ec75
 800ebec:	0800ec75 	.word	0x0800ec75
 800ebf0:	0800ec75 	.word	0x0800ec75
 800ebf4:	0800ec67 	.word	0x0800ec67
 800ebf8:	2b40      	cmp	r3, #64	; 0x40
 800ebfa:	d037      	beq.n	800ec6c <UART_SetConfig+0xc44>
 800ebfc:	e03a      	b.n	800ec74 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebfe:	f7fa fdef 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 800ec02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec04:	e03c      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec06:	f7fa fe01 	bl	800980c <HAL_RCC_GetPCLK2Freq>
 800ec0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec0c:	e038      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fc fc98 	bl	800b548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1c:	e030      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec1e:	f107 0318 	add.w	r3, r7, #24
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fc fde4 	bl	800b7f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2c:	e028      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec2e:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <UART_SetConfig+0xc2c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0320 	and.w	r3, r3, #32
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d012      	beq.n	800ec60 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec3a:	4b06      	ldr	r3, [pc, #24]	; (800ec54 <UART_SetConfig+0xc2c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	08db      	lsrs	r3, r3, #3
 800ec40:	f003 0303 	and.w	r3, r3, #3
 800ec44:	4a04      	ldr	r2, [pc, #16]	; (800ec58 <UART_SetConfig+0xc30>)
 800ec46:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec4c:	e018      	b.n	800ec80 <UART_SetConfig+0xc58>
 800ec4e:	bf00      	nop
 800ec50:	080140c8 	.word	0x080140c8
 800ec54:	58024400 	.word	0x58024400
 800ec58:	03d09000 	.word	0x03d09000
 800ec5c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ec60:	4b24      	ldr	r3, [pc, #144]	; (800ecf4 <UART_SetConfig+0xccc>)
 800ec62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec64:	e00c      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec66:	4b24      	ldr	r3, [pc, #144]	; (800ecf8 <UART_SetConfig+0xcd0>)
 800ec68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec6a:	e009      	b.n	800ec80 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec72:	e005      	b.n	800ec80 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ec74:	2300      	movs	r3, #0
 800ec76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec7e:	bf00      	nop
    }

    if (pclk != 0U)
 800ec80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d021      	beq.n	800ecca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8a:	4a1c      	ldr	r2, [pc, #112]	; (800ecfc <UART_SetConfig+0xcd4>)
 800ec8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec90:	461a      	mov	r2, r3
 800ec92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec94:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	085b      	lsrs	r3, r3, #1
 800ec9e:	441a      	add	r2, r3
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecac:	2b0f      	cmp	r3, #15
 800ecae:	d909      	bls.n	800ecc4 <UART_SetConfig+0xc9c>
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecb6:	d205      	bcs.n	800ecc4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	60da      	str	r2, [r3, #12]
 800ecc2:	e002      	b.n	800ecca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	2200      	movs	r2, #0
 800ece4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ece6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3748      	adds	r7, #72	; 0x48
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecf4:	03d09000 	.word	0x03d09000
 800ecf8:	003d0900 	.word	0x003d0900
 800ecfc:	080140c8 	.word	0x080140c8

0800ed00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00a      	beq.n	800ed2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	430a      	orrs	r2, r1
 800ed28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00a      	beq.n	800ed4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	430a      	orrs	r2, r1
 800ed4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed50:	f003 0304 	and.w	r3, r3, #4
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00a      	beq.n	800ed6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	430a      	orrs	r2, r1
 800ed6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	430a      	orrs	r2, r1
 800ed8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	f003 0310 	and.w	r3, r3, #16
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00a      	beq.n	800edb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	430a      	orrs	r2, r1
 800edb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb6:	f003 0320 	and.w	r3, r3, #32
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00a      	beq.n	800edd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	430a      	orrs	r2, r1
 800edd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01a      	beq.n	800ee16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	430a      	orrs	r2, r1
 800edf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edfe:	d10a      	bne.n	800ee16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	430a      	orrs	r2, r1
 800ee14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	605a      	str	r2, [r3, #4]
  }
}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b098      	sub	sp, #96	; 0x60
 800ee48:	af02      	add	r7, sp, #8
 800ee4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee54:	f7f3 fe4a 	bl	8002aec <HAL_GetTick>
 800ee58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 0308 	and.w	r3, r3, #8
 800ee64:	2b08      	cmp	r3, #8
 800ee66:	d12f      	bne.n	800eec8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee70:	2200      	movs	r2, #0
 800ee72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f88e 	bl	800ef98 <UART_WaitOnFlagUntilTimeout>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d022      	beq.n	800eec8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee96:	653b      	str	r3, [r7, #80]	; 0x50
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea0:	647b      	str	r3, [r7, #68]	; 0x44
 800eea2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e6      	bne.n	800ee82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2220      	movs	r2, #32
 800eeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eec4:	2303      	movs	r3, #3
 800eec6:	e063      	b.n	800ef90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0304 	and.w	r3, r3, #4
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d149      	bne.n	800ef6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eed6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eede:	2200      	movs	r2, #0
 800eee0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 f857 	bl	800ef98 <UART_WaitOnFlagUntilTimeout>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d03c      	beq.n	800ef6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	e853 3f00 	ldrex	r3, [r3]
 800eefc:	623b      	str	r3, [r7, #32]
   return(result);
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef16:	e841 2300 	strex	r3, r2, [r1]
 800ef1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1e6      	bne.n	800eef0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3308      	adds	r3, #8
 800ef28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	e853 3f00 	ldrex	r3, [r3]
 800ef30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f023 0301 	bic.w	r3, r3, #1
 800ef38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	3308      	adds	r3, #8
 800ef40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef42:	61fa      	str	r2, [r7, #28]
 800ef44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef46:	69b9      	ldr	r1, [r7, #24]
 800ef48:	69fa      	ldr	r2, [r7, #28]
 800ef4a:	e841 2300 	strex	r3, r2, [r1]
 800ef4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1e5      	bne.n	800ef22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2220      	movs	r2, #32
 800ef5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e012      	b.n	800ef90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2220      	movs	r2, #32
 800ef6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2220      	movs	r2, #32
 800ef76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3758      	adds	r7, #88	; 0x58
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	603b      	str	r3, [r7, #0]
 800efa4:	4613      	mov	r3, r2
 800efa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efa8:	e049      	b.n	800f03e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb0:	d045      	beq.n	800f03e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efb2:	f7f3 fd9b 	bl	8002aec <HAL_GetTick>
 800efb6:	4602      	mov	r2, r0
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	69ba      	ldr	r2, [r7, #24]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d302      	bcc.n	800efc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e048      	b.n	800f05e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0304 	and.w	r3, r3, #4
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d031      	beq.n	800f03e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	f003 0308 	and.w	r3, r3, #8
 800efe4:	2b08      	cmp	r3, #8
 800efe6:	d110      	bne.n	800f00a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2208      	movs	r2, #8
 800efee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f000 f839 	bl	800f068 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2208      	movs	r2, #8
 800effa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
 800f008:	e029      	b.n	800f05e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f018:	d111      	bne.n	800f03e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 f81f 	bl	800f068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2220      	movs	r2, #32
 800f02e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2200      	movs	r2, #0
 800f036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f03a:	2303      	movs	r3, #3
 800f03c:	e00f      	b.n	800f05e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	69da      	ldr	r2, [r3, #28]
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	4013      	ands	r3, r2
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	bf0c      	ite	eq
 800f04e:	2301      	moveq	r3, #1
 800f050:	2300      	movne	r3, #0
 800f052:	b2db      	uxtb	r3, r3
 800f054:	461a      	mov	r2, r3
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d0a6      	beq.n	800efaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f068:	b480      	push	{r7}
 800f06a:	b095      	sub	sp, #84	; 0x54
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f084:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08e:	643b      	str	r3, [r7, #64]	; 0x40
 800f090:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f096:	e841 2300 	strex	r3, r2, [r1]
 800f09a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1e6      	bne.n	800f070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0aa:	6a3b      	ldr	r3, [r7, #32]
 800f0ac:	e853 3f00 	ldrex	r3, [r3]
 800f0b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0b2:	69fa      	ldr	r2, [r7, #28]
 800f0b4:	4b1e      	ldr	r3, [pc, #120]	; (800f130 <UART_EndRxTransfer+0xc8>)
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	3308      	adds	r3, #8
 800f0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e5      	bne.n	800f0a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d118      	bne.n	800f110 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	e853 3f00 	ldrex	r3, [r3]
 800f0ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	f023 0310 	bic.w	r3, r3, #16
 800f0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fc:	61bb      	str	r3, [r7, #24]
 800f0fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f100:	6979      	ldr	r1, [r7, #20]
 800f102:	69ba      	ldr	r2, [r7, #24]
 800f104:	e841 2300 	strex	r3, r2, [r1]
 800f108:	613b      	str	r3, [r7, #16]
   return(result);
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e6      	bne.n	800f0de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2220      	movs	r2, #32
 800f114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f124:	bf00      	nop
 800f126:	3754      	adds	r7, #84	; 0x54
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	effffffe 	.word	0xeffffffe

0800f134 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f142:	2b01      	cmp	r3, #1
 800f144:	d101      	bne.n	800f14a <HAL_UARTEx_DisableFifoMode+0x16>
 800f146:	2302      	movs	r3, #2
 800f148:	e027      	b.n	800f19a <HAL_UARTEx_DisableFifoMode+0x66>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2201      	movs	r2, #1
 800f14e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2224      	movs	r2, #36	; 0x24
 800f156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 0201 	bic.w	r2, r2, #1
 800f170:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b084      	sub	sp, #16
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e02d      	b.n	800f21a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2224      	movs	r2, #36	; 0x24
 800f1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f022 0201 	bic.w	r2, r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	430a      	orrs	r2, r1
 800f1f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f850 	bl	800f2a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2220      	movs	r2, #32
 800f20c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f232:	2b01      	cmp	r3, #1
 800f234:	d101      	bne.n	800f23a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f236:	2302      	movs	r3, #2
 800f238:	e02d      	b.n	800f296 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2201      	movs	r2, #1
 800f23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2224      	movs	r2, #36	; 0x24
 800f246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f022 0201 	bic.w	r2, r2, #1
 800f260:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	430a      	orrs	r2, r1
 800f274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f812 	bl	800f2a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2220      	movs	r2, #32
 800f288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d108      	bne.n	800f2c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2c0:	e031      	b.n	800f326 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2c2:	2310      	movs	r3, #16
 800f2c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2c6:	2310      	movs	r3, #16
 800f2c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	0e5b      	lsrs	r3, r3, #25
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	0f5b      	lsrs	r3, r3, #29
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	f003 0307 	and.w	r3, r3, #7
 800f2e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	7b3a      	ldrb	r2, [r7, #12]
 800f2ee:	4911      	ldr	r1, [pc, #68]	; (800f334 <UARTEx_SetNbDataToProcess+0x94>)
 800f2f0:	5c8a      	ldrb	r2, [r1, r2]
 800f2f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2f6:	7b3a      	ldrb	r2, [r7, #12]
 800f2f8:	490f      	ldr	r1, [pc, #60]	; (800f338 <UARTEx_SetNbDataToProcess+0x98>)
 800f2fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f300:	b29a      	uxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	7b7a      	ldrb	r2, [r7, #13]
 800f30c:	4909      	ldr	r1, [pc, #36]	; (800f334 <UARTEx_SetNbDataToProcess+0x94>)
 800f30e:	5c8a      	ldrb	r2, [r1, r2]
 800f310:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f314:	7b7a      	ldrb	r2, [r7, #13]
 800f316:	4908      	ldr	r1, [pc, #32]	; (800f338 <UARTEx_SetNbDataToProcess+0x98>)
 800f318:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f31a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f31e:	b29a      	uxth	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f326:	bf00      	nop
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	080140e0 	.word	0x080140e0
 800f338:	080140e8 	.word	0x080140e8

0800f33c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f33c:	b084      	sub	sp, #16
 800f33e:	b580      	push	{r7, lr}
 800f340:	b084      	sub	sp, #16
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
 800f346:	f107 001c 	add.w	r0, r7, #28
 800f34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	2b01      	cmp	r3, #1
 800f352:	d120      	bne.n	800f396 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68da      	ldr	r2, [r3, #12]
 800f364:	4b2a      	ldr	r3, [pc, #168]	; (800f410 <USB_CoreInit+0xd4>)
 800f366:	4013      	ands	r3, r2
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d105      	bne.n	800f38a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f001 faf8 	bl	8010980 <USB_CoreReset>
 800f390:	4603      	mov	r3, r0
 800f392:	73fb      	strb	r3, [r7, #15]
 800f394:	e01a      	b.n	800f3cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 faec 	bl	8010980 <USB_CoreReset>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f3be:	e005      	b.n	800f3cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d116      	bne.n	800f400 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	; (800f414 <USB_CoreInit+0xd8>)
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	f043 0206 	orr.w	r2, r3, #6
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f043 0220 	orr.w	r2, r3, #32
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f400:	7bfb      	ldrb	r3, [r7, #15]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f40c:	b004      	add	sp, #16
 800f40e:	4770      	bx	lr
 800f410:	ffbdffbf 	.word	0xffbdffbf
 800f414:	03ee0000 	.word	0x03ee0000

0800f418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f418:	b480      	push	{r7}
 800f41a:	b087      	sub	sp, #28
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	4613      	mov	r3, r2
 800f424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f426:	79fb      	ldrb	r3, [r7, #7]
 800f428:	2b02      	cmp	r3, #2
 800f42a:	d165      	bne.n	800f4f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	4a41      	ldr	r2, [pc, #260]	; (800f534 <USB_SetTurnaroundTime+0x11c>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d906      	bls.n	800f442 <USB_SetTurnaroundTime+0x2a>
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	4a40      	ldr	r2, [pc, #256]	; (800f538 <USB_SetTurnaroundTime+0x120>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d202      	bcs.n	800f442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f43c:	230f      	movs	r3, #15
 800f43e:	617b      	str	r3, [r7, #20]
 800f440:	e062      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	4a3c      	ldr	r2, [pc, #240]	; (800f538 <USB_SetTurnaroundTime+0x120>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d306      	bcc.n	800f458 <USB_SetTurnaroundTime+0x40>
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	4a3b      	ldr	r2, [pc, #236]	; (800f53c <USB_SetTurnaroundTime+0x124>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d202      	bcs.n	800f458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f452:	230e      	movs	r3, #14
 800f454:	617b      	str	r3, [r7, #20]
 800f456:	e057      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	4a38      	ldr	r2, [pc, #224]	; (800f53c <USB_SetTurnaroundTime+0x124>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d306      	bcc.n	800f46e <USB_SetTurnaroundTime+0x56>
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	4a37      	ldr	r2, [pc, #220]	; (800f540 <USB_SetTurnaroundTime+0x128>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d202      	bcs.n	800f46e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f468:	230d      	movs	r3, #13
 800f46a:	617b      	str	r3, [r7, #20]
 800f46c:	e04c      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	4a33      	ldr	r2, [pc, #204]	; (800f540 <USB_SetTurnaroundTime+0x128>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d306      	bcc.n	800f484 <USB_SetTurnaroundTime+0x6c>
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	4a32      	ldr	r2, [pc, #200]	; (800f544 <USB_SetTurnaroundTime+0x12c>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d802      	bhi.n	800f484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f47e:	230c      	movs	r3, #12
 800f480:	617b      	str	r3, [r7, #20]
 800f482:	e041      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	4a2f      	ldr	r2, [pc, #188]	; (800f544 <USB_SetTurnaroundTime+0x12c>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d906      	bls.n	800f49a <USB_SetTurnaroundTime+0x82>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	4a2e      	ldr	r2, [pc, #184]	; (800f548 <USB_SetTurnaroundTime+0x130>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d802      	bhi.n	800f49a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f494:	230b      	movs	r3, #11
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	e036      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	4a2a      	ldr	r2, [pc, #168]	; (800f548 <USB_SetTurnaroundTime+0x130>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d906      	bls.n	800f4b0 <USB_SetTurnaroundTime+0x98>
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	4a29      	ldr	r2, [pc, #164]	; (800f54c <USB_SetTurnaroundTime+0x134>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d802      	bhi.n	800f4b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f4aa:	230a      	movs	r3, #10
 800f4ac:	617b      	str	r3, [r7, #20]
 800f4ae:	e02b      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	4a26      	ldr	r2, [pc, #152]	; (800f54c <USB_SetTurnaroundTime+0x134>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d906      	bls.n	800f4c6 <USB_SetTurnaroundTime+0xae>
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	4a25      	ldr	r2, [pc, #148]	; (800f550 <USB_SetTurnaroundTime+0x138>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d202      	bcs.n	800f4c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f4c0:	2309      	movs	r3, #9
 800f4c2:	617b      	str	r3, [r7, #20]
 800f4c4:	e020      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	4a21      	ldr	r2, [pc, #132]	; (800f550 <USB_SetTurnaroundTime+0x138>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d306      	bcc.n	800f4dc <USB_SetTurnaroundTime+0xc4>
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	4a20      	ldr	r2, [pc, #128]	; (800f554 <USB_SetTurnaroundTime+0x13c>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d802      	bhi.n	800f4dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	e015      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <USB_SetTurnaroundTime+0x13c>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d906      	bls.n	800f4f2 <USB_SetTurnaroundTime+0xda>
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	4a1c      	ldr	r2, [pc, #112]	; (800f558 <USB_SetTurnaroundTime+0x140>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d202      	bcs.n	800f4f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f4ec:	2307      	movs	r3, #7
 800f4ee:	617b      	str	r3, [r7, #20]
 800f4f0:	e00a      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f4f2:	2306      	movs	r3, #6
 800f4f4:	617b      	str	r3, [r7, #20]
 800f4f6:	e007      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d102      	bne.n	800f504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f4fe:	2309      	movs	r3, #9
 800f500:	617b      	str	r3, [r7, #20]
 800f502:	e001      	b.n	800f508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f504:	2309      	movs	r3, #9
 800f506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	029b      	lsls	r3, r3, #10
 800f51c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f520:	431a      	orrs	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	371c      	adds	r7, #28
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	00d8acbf 	.word	0x00d8acbf
 800f538:	00e4e1c0 	.word	0x00e4e1c0
 800f53c:	00f42400 	.word	0x00f42400
 800f540:	01067380 	.word	0x01067380
 800f544:	011a499f 	.word	0x011a499f
 800f548:	01312cff 	.word	0x01312cff
 800f54c:	014ca43f 	.word	0x014ca43f
 800f550:	016e3600 	.word	0x016e3600
 800f554:	01a6ab1f 	.word	0x01a6ab1f
 800f558:	01e84800 	.word	0x01e84800

0800f55c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	f043 0201 	orr.w	r2, r3, #1
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f570:	2300      	movs	r3, #0
}
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	f023 0201 	bic.w	r2, r3, #1
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f5bc:	78fb      	ldrb	r3, [r7, #3]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d115      	bne.n	800f5ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f5ce:	2001      	movs	r0, #1
 800f5d0:	f7f3 fa98 	bl	8002b04 <HAL_Delay>
      ms++;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f001 f93f 	bl	801085e <USB_GetMode>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d01e      	beq.n	800f624 <USB_SetCurrentMode+0x84>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2b31      	cmp	r3, #49	; 0x31
 800f5ea:	d9f0      	bls.n	800f5ce <USB_SetCurrentMode+0x2e>
 800f5ec:	e01a      	b.n	800f624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f5ee:	78fb      	ldrb	r3, [r7, #3]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d115      	bne.n	800f620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f600:	2001      	movs	r0, #1
 800f602:	f7f3 fa7f 	bl	8002b04 <HAL_Delay>
      ms++;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	3301      	adds	r3, #1
 800f60a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f001 f926 	bl	801085e <USB_GetMode>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d005      	beq.n	800f624 <USB_SetCurrentMode+0x84>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b31      	cmp	r3, #49	; 0x31
 800f61c:	d9f0      	bls.n	800f600 <USB_SetCurrentMode+0x60>
 800f61e:	e001      	b.n	800f624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	e005      	b.n	800f630 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2b32      	cmp	r3, #50	; 0x32
 800f628:	d101      	bne.n	800f62e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e000      	b.n	800f630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f638:	b084      	sub	sp, #16
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b086      	sub	sp, #24
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f652:	2300      	movs	r3, #0
 800f654:	613b      	str	r3, [r7, #16]
 800f656:	e009      	b.n	800f66c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3340      	adds	r3, #64	; 0x40
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4413      	add	r3, r2
 800f662:	2200      	movs	r2, #0
 800f664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	3301      	adds	r3, #1
 800f66a:	613b      	str	r3, [r7, #16]
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	2b0e      	cmp	r3, #14
 800f670:	d9f2      	bls.n	800f658 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f674:	2b00      	cmp	r3, #0
 800f676:	d11c      	bne.n	800f6b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f686:	f043 0302 	orr.w	r3, r3, #2
 800f68a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	e005      	b.n	800f6be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d8:	461a      	mov	r2, r3
 800f6da:	680b      	ldr	r3, [r1, #0]
 800f6dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d10c      	bne.n	800f6fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d104      	bne.n	800f6f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f965 	bl	800f9bc <USB_SetDevSpeed>
 800f6f2:	e008      	b.n	800f706 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f960 	bl	800f9bc <USB_SetDevSpeed>
 800f6fc:	e003      	b.n	800f706 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f6fe:	2103      	movs	r1, #3
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 f95b 	bl	800f9bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f706:	2110      	movs	r1, #16
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f8f3 	bl	800f8f4 <USB_FlushTxFifo>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f714:	2301      	movs	r3, #1
 800f716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 f91f 	bl	800f95c <USB_FlushRxFifo>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f724:	2301      	movs	r3, #1
 800f726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72e:	461a      	mov	r2, r3
 800f730:	2300      	movs	r3, #0
 800f732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73a:	461a      	mov	r2, r3
 800f73c:	2300      	movs	r3, #0
 800f73e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f746:	461a      	mov	r2, r3
 800f748:	2300      	movs	r3, #0
 800f74a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f74c:	2300      	movs	r3, #0
 800f74e:	613b      	str	r3, [r7, #16]
 800f750:	e043      	b.n	800f7da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	015a      	lsls	r2, r3, #5
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	4413      	add	r3, r2
 800f75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f768:	d118      	bne.n	800f79c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10a      	bne.n	800f786 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77c:	461a      	mov	r2, r3
 800f77e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	e013      	b.n	800f7ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	015a      	lsls	r2, r3, #5
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4413      	add	r3, r2
 800f78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f792:	461a      	mov	r2, r3
 800f794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	e008      	b.n	800f7ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	015a      	lsls	r2, r3, #5
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	2300      	movs	r3, #0
 800f7be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f7d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	613b      	str	r3, [r7, #16]
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d3b7      	bcc.n	800f752 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	613b      	str	r3, [r7, #16]
 800f7e6:	e043      	b.n	800f870 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7fe:	d118      	bne.n	800f832 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	015a      	lsls	r2, r3, #5
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	4413      	add	r3, r2
 800f80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f812:	461a      	mov	r2, r3
 800f814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	e013      	b.n	800f844 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	461a      	mov	r2, r3
 800f82a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	e008      	b.n	800f844 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	015a      	lsls	r2, r3, #5
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4413      	add	r3, r2
 800f83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83e:	461a      	mov	r2, r3
 800f840:	2300      	movs	r3, #0
 800f842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	015a      	lsls	r2, r3, #5
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4413      	add	r3, r2
 800f84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f850:	461a      	mov	r2, r3
 800f852:	2300      	movs	r3, #0
 800f854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	015a      	lsls	r2, r3, #5
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4413      	add	r3, r2
 800f85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f862:	461a      	mov	r2, r3
 800f864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	3301      	adds	r3, #1
 800f86e:	613b      	str	r3, [r7, #16]
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	693a      	ldr	r2, [r7, #16]
 800f874:	429a      	cmp	r2, r3
 800f876:	d3b7      	bcc.n	800f7e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f88a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d105      	bne.n	800f8ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	f043 0210 	orr.w	r2, r3, #16
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699a      	ldr	r2, [r3, #24]
 800f8b0:	4b0e      	ldr	r3, [pc, #56]	; (800f8ec <USB_DevInit+0x2b4>)
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	f043 0208 	orr.w	r2, r3, #8
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d105      	bne.n	800f8dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	699a      	ldr	r2, [r3, #24]
 800f8d4:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <USB_DevInit+0x2b8>)
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3718      	adds	r7, #24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8e8:	b004      	add	sp, #16
 800f8ea:	4770      	bx	lr
 800f8ec:	803c3800 	.word	0x803c3800
 800f8f0:	40000004 	.word	0x40000004

0800f8f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f8fe:	2300      	movs	r3, #0
 800f900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	3301      	adds	r3, #1
 800f906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	4a13      	ldr	r2, [pc, #76]	; (800f958 <USB_FlushTxFifo+0x64>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d901      	bls.n	800f914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f910:	2303      	movs	r3, #3
 800f912:	e01b      	b.n	800f94c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	691b      	ldr	r3, [r3, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	daf2      	bge.n	800f902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f91c:	2300      	movs	r3, #0
 800f91e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	019b      	lsls	r3, r3, #6
 800f924:	f043 0220 	orr.w	r2, r3, #32
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	3301      	adds	r3, #1
 800f930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4a08      	ldr	r2, [pc, #32]	; (800f958 <USB_FlushTxFifo+0x64>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d901      	bls.n	800f93e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f93a:	2303      	movs	r3, #3
 800f93c:	e006      	b.n	800f94c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	f003 0320 	and.w	r3, r3, #32
 800f946:	2b20      	cmp	r3, #32
 800f948:	d0f0      	beq.n	800f92c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	00030d40 	.word	0x00030d40

0800f95c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3301      	adds	r3, #1
 800f96c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	4a11      	ldr	r2, [pc, #68]	; (800f9b8 <USB_FlushRxFifo+0x5c>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d901      	bls.n	800f97a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f976:	2303      	movs	r3, #3
 800f978:	e018      	b.n	800f9ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	daf2      	bge.n	800f968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2210      	movs	r2, #16
 800f98a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3301      	adds	r3, #1
 800f990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	4a08      	ldr	r2, [pc, #32]	; (800f9b8 <USB_FlushRxFifo+0x5c>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d901      	bls.n	800f99e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f99a:	2303      	movs	r3, #3
 800f99c:	e006      	b.n	800f9ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	f003 0310 	and.w	r3, r3, #16
 800f9a6:	2b10      	cmp	r3, #16
 800f9a8:	d0f0      	beq.n	800f98c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3714      	adds	r7, #20
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr
 800f9b8:	00030d40 	.word	0x00030d40

0800f9bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	78fb      	ldrb	r3, [r7, #3]
 800f9d6:	68f9      	ldr	r1, [r7, #12]
 800f9d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3714      	adds	r7, #20
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr

0800f9ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f9ee:	b480      	push	{r7}
 800f9f0:	b087      	sub	sp, #28
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	f003 0306 	and.w	r3, r3, #6
 800fa06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d102      	bne.n	800fa14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	75fb      	strb	r3, [r7, #23]
 800fa12:	e00a      	b.n	800fa2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d002      	beq.n	800fa20 <USB_GetDevSpeed+0x32>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b06      	cmp	r3, #6
 800fa1e:	d102      	bne.n	800fa26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa20:	2302      	movs	r3, #2
 800fa22:	75fb      	strb	r3, [r7, #23]
 800fa24:	e001      	b.n	800fa2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa26:	230f      	movs	r3, #15
 800fa28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	371c      	adds	r7, #28
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	785b      	ldrb	r3, [r3, #1]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d139      	bne.n	800fac8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa5a:	69da      	ldr	r2, [r3, #28]
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 030f 	and.w	r3, r3, #15
 800fa64:	2101      	movs	r1, #1
 800fa66:	fa01 f303 	lsl.w	r3, r1, r3
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	68f9      	ldr	r1, [r7, #12]
 800fa6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa72:	4313      	orrs	r3, r2
 800fa74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	015a      	lsls	r2, r3, #5
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d153      	bne.n	800fb34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	791b      	ldrb	r3, [r3, #4]
 800faa6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800faa8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	059b      	lsls	r3, r3, #22
 800faae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fab0:	431a      	orrs	r2, r3
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	0159      	lsls	r1, r3, #5
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	440b      	add	r3, r1
 800faba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabe:	4619      	mov	r1, r3
 800fac0:	4b20      	ldr	r3, [pc, #128]	; (800fb44 <USB_ActivateEndpoint+0x10c>)
 800fac2:	4313      	orrs	r3, r2
 800fac4:	600b      	str	r3, [r1, #0]
 800fac6:	e035      	b.n	800fb34 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800face:	69da      	ldr	r2, [r3, #28]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	f003 030f 	and.w	r3, r3, #15
 800fad8:	2101      	movs	r1, #1
 800fada:	fa01 f303 	lsl.w	r3, r1, r3
 800fade:	041b      	lsls	r3, r3, #16
 800fae0:	68f9      	ldr	r1, [r7, #12]
 800fae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fae6:	4313      	orrs	r3, r2
 800fae8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d119      	bne.n	800fb34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	015a      	lsls	r2, r3, #5
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	4413      	add	r3, r2
 800fb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	791b      	ldrb	r3, [r3, #4]
 800fb1a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb1c:	430b      	orrs	r3, r1
 800fb1e:	431a      	orrs	r2, r3
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	0159      	lsls	r1, r3, #5
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	440b      	add	r3, r1
 800fb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	4b05      	ldr	r3, [pc, #20]	; (800fb44 <USB_ActivateEndpoint+0x10c>)
 800fb30:	4313      	orrs	r3, r2
 800fb32:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	10008000 	.word	0x10008000

0800fb48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	781b      	ldrb	r3, [r3, #0]
 800fb5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	785b      	ldrb	r3, [r3, #1]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d161      	bne.n	800fc28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb7a:	d11f      	bne.n	800fbbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	015a      	lsls	r2, r3, #5
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	4413      	add	r3, r2
 800fb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	0151      	lsls	r1, r2, #5
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	440a      	add	r2, r1
 800fb92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fb9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	015a      	lsls	r2, r3, #5
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	4413      	add	r3, r2
 800fba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	0151      	lsls	r1, r2, #5
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	440a      	add	r2, r1
 800fbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 030f 	and.w	r3, r3, #15
 800fbcc:	2101      	movs	r1, #1
 800fbce:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	43db      	mvns	r3, r3
 800fbd6:	68f9      	ldr	r1, [r7, #12]
 800fbd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbdc:	4013      	ands	r3, r2
 800fbde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbe6:	69da      	ldr	r2, [r3, #28]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	f003 030f 	and.w	r3, r3, #15
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	fa01 f303 	lsl.w	r3, r1, r3
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	43db      	mvns	r3, r3
 800fbfa:	68f9      	ldr	r1, [r7, #12]
 800fbfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc00:	4013      	ands	r3, r2
 800fc02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	015a      	lsls	r2, r3, #5
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	0159      	lsls	r1, r3, #5
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	440b      	add	r3, r1
 800fc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4b35      	ldr	r3, [pc, #212]	; (800fcf8 <USB_DeactivateEndpoint+0x1b0>)
 800fc22:	4013      	ands	r3, r2
 800fc24:	600b      	str	r3, [r1, #0]
 800fc26:	e060      	b.n	800fcea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	015a      	lsls	r2, r3, #5
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc3e:	d11f      	bne.n	800fc80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	015a      	lsls	r2, r3, #5
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4413      	add	r3, r2
 800fc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	0151      	lsls	r1, r2, #5
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	440a      	add	r2, r1
 800fc56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	015a      	lsls	r2, r3, #5
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	4413      	add	r3, r2
 800fc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68ba      	ldr	r2, [r7, #8]
 800fc70:	0151      	lsls	r1, r2, #5
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	440a      	add	r2, r1
 800fc76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	f003 030f 	and.w	r3, r3, #15
 800fc90:	2101      	movs	r1, #1
 800fc92:	fa01 f303 	lsl.w	r3, r1, r3
 800fc96:	041b      	lsls	r3, r3, #16
 800fc98:	43db      	mvns	r3, r3
 800fc9a:	68f9      	ldr	r1, [r7, #12]
 800fc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fca0:	4013      	ands	r3, r2
 800fca2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcaa:	69da      	ldr	r2, [r3, #28]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 030f 	and.w	r3, r3, #15
 800fcb4:	2101      	movs	r1, #1
 800fcb6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcba:	041b      	lsls	r3, r3, #16
 800fcbc:	43db      	mvns	r3, r3
 800fcbe:	68f9      	ldr	r1, [r7, #12]
 800fcc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	015a      	lsls	r2, r3, #5
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4413      	add	r3, r2
 800fcd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	0159      	lsls	r1, r3, #5
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	440b      	add	r3, r1
 800fcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce2:	4619      	mov	r1, r3
 800fce4:	4b05      	ldr	r3, [pc, #20]	; (800fcfc <USB_DeactivateEndpoint+0x1b4>)
 800fce6:	4013      	ands	r3, r2
 800fce8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	ec337800 	.word	0xec337800
 800fcfc:	eff37800 	.word	0xeff37800

0800fd00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08a      	sub	sp, #40	; 0x28
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	785b      	ldrb	r3, [r3, #1]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	f040 8181 	bne.w	8010024 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	691b      	ldr	r3, [r3, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d132      	bne.n	800fd90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd2a:	69bb      	ldr	r3, [r7, #24]
 800fd2c:	015a      	lsls	r2, r3, #5
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	4413      	add	r3, r2
 800fd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd36:	691a      	ldr	r2, [r3, #16]
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	0159      	lsls	r1, r3, #5
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	440b      	add	r3, r1
 800fd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd44:	4619      	mov	r1, r3
 800fd46:	4ba5      	ldr	r3, [pc, #660]	; (800ffdc <USB_EPStartXfer+0x2dc>)
 800fd48:	4013      	ands	r3, r2
 800fd4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	015a      	lsls	r2, r3, #5
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	4413      	add	r3, r2
 800fd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	69ba      	ldr	r2, [r7, #24]
 800fd5c:	0151      	lsls	r1, r2, #5
 800fd5e:	69fa      	ldr	r2, [r7, #28]
 800fd60:	440a      	add	r2, r1
 800fd62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	015a      	lsls	r2, r3, #5
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	4413      	add	r3, r2
 800fd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd78:	691a      	ldr	r2, [r3, #16]
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	0159      	lsls	r1, r3, #5
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	440b      	add	r3, r1
 800fd82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd86:	4619      	mov	r1, r3
 800fd88:	4b95      	ldr	r3, [pc, #596]	; (800ffe0 <USB_EPStartXfer+0x2e0>)
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	610b      	str	r3, [r1, #16]
 800fd8e:	e092      	b.n	800feb6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	015a      	lsls	r2, r3, #5
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	4413      	add	r3, r2
 800fd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd9c:	691a      	ldr	r2, [r3, #16]
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	0159      	lsls	r1, r3, #5
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	440b      	add	r3, r1
 800fda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdaa:	4619      	mov	r1, r3
 800fdac:	4b8c      	ldr	r3, [pc, #560]	; (800ffe0 <USB_EPStartXfer+0x2e0>)
 800fdae:	4013      	ands	r3, r2
 800fdb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	015a      	lsls	r2, r3, #5
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	4413      	add	r3, r2
 800fdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdbe:	691a      	ldr	r2, [r3, #16]
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	0159      	lsls	r1, r3, #5
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	440b      	add	r3, r1
 800fdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4b83      	ldr	r3, [pc, #524]	; (800ffdc <USB_EPStartXfer+0x2dc>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d11a      	bne.n	800fe10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	691a      	ldr	r2, [r3, #16]
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d903      	bls.n	800fdee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	689a      	ldr	r2, [r3, #8]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	015a      	lsls	r2, r3, #5
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	69ba      	ldr	r2, [r7, #24]
 800fdfe:	0151      	lsls	r1, r2, #5
 800fe00:	69fa      	ldr	r2, [r7, #28]
 800fe02:	440a      	add	r2, r1
 800fe04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe0c:	6113      	str	r3, [r2, #16]
 800fe0e:	e01b      	b.n	800fe48 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	015a      	lsls	r2, r3, #5
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	4413      	add	r3, r2
 800fe18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	6919      	ldr	r1, [r3, #16]
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	440b      	add	r3, r1
 800fe28:	1e59      	subs	r1, r3, #1
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fe32:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe34:	4b6b      	ldr	r3, [pc, #428]	; (800ffe4 <USB_EPStartXfer+0x2e4>)
 800fe36:	400b      	ands	r3, r1
 800fe38:	69b9      	ldr	r1, [r7, #24]
 800fe3a:	0148      	lsls	r0, r1, #5
 800fe3c:	69f9      	ldr	r1, [r7, #28]
 800fe3e:	4401      	add	r1, r0
 800fe40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe44:	4313      	orrs	r3, r2
 800fe46:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	015a      	lsls	r2, r3, #5
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	4413      	add	r3, r2
 800fe50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe54:	691a      	ldr	r2, [r3, #16]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe5e:	69b9      	ldr	r1, [r7, #24]
 800fe60:	0148      	lsls	r0, r1, #5
 800fe62:	69f9      	ldr	r1, [r7, #28]
 800fe64:	4401      	add	r1, r0
 800fe66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	791b      	ldrb	r3, [r3, #4]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d11f      	bne.n	800feb6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	015a      	lsls	r2, r3, #5
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	69ba      	ldr	r2, [r7, #24]
 800fe86:	0151      	lsls	r1, r2, #5
 800fe88:	69fa      	ldr	r2, [r7, #28]
 800fe8a:	440a      	add	r2, r1
 800fe8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fe94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	015a      	lsls	r2, r3, #5
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea2:	691b      	ldr	r3, [r3, #16]
 800fea4:	69ba      	ldr	r2, [r7, #24]
 800fea6:	0151      	lsls	r1, r2, #5
 800fea8:	69fa      	ldr	r2, [r7, #28]
 800feaa:	440a      	add	r2, r1
 800feac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800feb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800feb6:	79fb      	ldrb	r3, [r7, #7]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d14b      	bne.n	800ff54 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	69db      	ldr	r3, [r3, #28]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d009      	beq.n	800fed8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fed0:	461a      	mov	r2, r3
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	791b      	ldrb	r3, [r3, #4]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d128      	bne.n	800ff32 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feec:	2b00      	cmp	r3, #0
 800feee:	d110      	bne.n	800ff12 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	015a      	lsls	r2, r3, #5
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	4413      	add	r3, r2
 800fef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	0151      	lsls	r1, r2, #5
 800ff02:	69fa      	ldr	r2, [r7, #28]
 800ff04:	440a      	add	r2, r1
 800ff06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff0e:	6013      	str	r3, [r2, #0]
 800ff10:	e00f      	b.n	800ff32 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	015a      	lsls	r2, r3, #5
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	4413      	add	r3, r2
 800ff1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	69ba      	ldr	r2, [r7, #24]
 800ff22:	0151      	lsls	r1, r2, #5
 800ff24:	69fa      	ldr	r2, [r7, #28]
 800ff26:	440a      	add	r2, r1
 800ff28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	015a      	lsls	r2, r3, #5
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	4413      	add	r3, r2
 800ff3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	0151      	lsls	r1, r2, #5
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	440a      	add	r2, r1
 800ff48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff50:	6013      	str	r3, [r2, #0]
 800ff52:	e16a      	b.n	801022a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	015a      	lsls	r2, r3, #5
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	69ba      	ldr	r2, [r7, #24]
 800ff64:	0151      	lsls	r1, r2, #5
 800ff66:	69fa      	ldr	r2, [r7, #28]
 800ff68:	440a      	add	r2, r1
 800ff6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	791b      	ldrb	r3, [r3, #4]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d015      	beq.n	800ffa8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f000 8152 	beq.w	801022a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	f003 030f 	and.w	r3, r3, #15
 800ff96:	2101      	movs	r1, #1
 800ff98:	fa01 f303 	lsl.w	r3, r1, r3
 800ff9c:	69f9      	ldr	r1, [r7, #28]
 800ff9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	634b      	str	r3, [r1, #52]	; 0x34
 800ffa6:	e140      	b.n	801022a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d117      	bne.n	800ffe8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	0151      	lsls	r1, r2, #5
 800ffca:	69fa      	ldr	r2, [r7, #28]
 800ffcc:	440a      	add	r2, r1
 800ffce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	e016      	b.n	8010008 <USB_EPStartXfer+0x308>
 800ffda:	bf00      	nop
 800ffdc:	e007ffff 	.word	0xe007ffff
 800ffe0:	fff80000 	.word	0xfff80000
 800ffe4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	015a      	lsls	r2, r3, #5
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	4413      	add	r3, r2
 800fff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	69ba      	ldr	r2, [r7, #24]
 800fff8:	0151      	lsls	r1, r2, #5
 800fffa:	69fa      	ldr	r2, [r7, #28]
 800fffc:	440a      	add	r2, r1
 800fffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010006:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	68d9      	ldr	r1, [r3, #12]
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	781a      	ldrb	r2, [r3, #0]
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	b298      	uxth	r0, r3
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4603      	mov	r3, r0
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f000 f9b9 	bl	8010394 <USB_WritePacket>
 8010022:	e102      	b.n	801022a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010030:	691a      	ldr	r2, [r3, #16]
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	0159      	lsls	r1, r3, #5
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	440b      	add	r3, r1
 801003a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003e:	4619      	mov	r1, r3
 8010040:	4b7c      	ldr	r3, [pc, #496]	; (8010234 <USB_EPStartXfer+0x534>)
 8010042:	4013      	ands	r3, r2
 8010044:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010052:	691a      	ldr	r2, [r3, #16]
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	0159      	lsls	r1, r3, #5
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	440b      	add	r3, r1
 801005c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010060:	4619      	mov	r1, r3
 8010062:	4b75      	ldr	r3, [pc, #468]	; (8010238 <USB_EPStartXfer+0x538>)
 8010064:	4013      	ands	r3, r2
 8010066:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d12f      	bne.n	80100ce <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d003      	beq.n	801007e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	689a      	ldr	r2, [r3, #8]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	015a      	lsls	r2, r3, #5
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	4413      	add	r3, r2
 801008e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010092:	691a      	ldr	r2, [r3, #16]
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	6a1b      	ldr	r3, [r3, #32]
 8010098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801009c:	69b9      	ldr	r1, [r7, #24]
 801009e:	0148      	lsls	r0, r1, #5
 80100a0:	69f9      	ldr	r1, [r7, #28]
 80100a2:	4401      	add	r1, r0
 80100a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100a8:	4313      	orrs	r3, r2
 80100aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	015a      	lsls	r2, r3, #5
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	4413      	add	r3, r2
 80100b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	69ba      	ldr	r2, [r7, #24]
 80100bc:	0151      	lsls	r1, r2, #5
 80100be:	69fa      	ldr	r2, [r7, #28]
 80100c0:	440a      	add	r2, r1
 80100c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100ca:	6113      	str	r3, [r2, #16]
 80100cc:	e05f      	b.n	801018e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d123      	bne.n	801011e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	015a      	lsls	r2, r3, #5
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	4413      	add	r3, r2
 80100de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e2:	691a      	ldr	r2, [r3, #16]
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100ec:	69b9      	ldr	r1, [r7, #24]
 80100ee:	0148      	lsls	r0, r1, #5
 80100f0:	69f9      	ldr	r1, [r7, #28]
 80100f2:	4401      	add	r1, r0
 80100f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100f8:	4313      	orrs	r3, r2
 80100fa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	4413      	add	r3, r2
 8010104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	0151      	lsls	r1, r2, #5
 801010e:	69fa      	ldr	r2, [r7, #28]
 8010110:	440a      	add	r2, r1
 8010112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010116:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801011a:	6113      	str	r3, [r2, #16]
 801011c:	e037      	b.n	801018e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	691a      	ldr	r2, [r3, #16]
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	4413      	add	r3, r2
 8010128:	1e5a      	subs	r2, r3, #1
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010132:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	8afa      	ldrh	r2, [r7, #22]
 801013a:	fb03 f202 	mul.w	r2, r3, r2
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	015a      	lsls	r2, r3, #5
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	4413      	add	r3, r2
 801014a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801014e:	691a      	ldr	r2, [r3, #16]
 8010150:	8afb      	ldrh	r3, [r7, #22]
 8010152:	04d9      	lsls	r1, r3, #19
 8010154:	4b39      	ldr	r3, [pc, #228]	; (801023c <USB_EPStartXfer+0x53c>)
 8010156:	400b      	ands	r3, r1
 8010158:	69b9      	ldr	r1, [r7, #24]
 801015a:	0148      	lsls	r0, r1, #5
 801015c:	69f9      	ldr	r1, [r7, #28]
 801015e:	4401      	add	r1, r0
 8010160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010164:	4313      	orrs	r3, r2
 8010166:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	015a      	lsls	r2, r3, #5
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	4413      	add	r3, r2
 8010170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010174:	691a      	ldr	r2, [r3, #16]
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	6a1b      	ldr	r3, [r3, #32]
 801017a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801017e:	69b9      	ldr	r1, [r7, #24]
 8010180:	0148      	lsls	r0, r1, #5
 8010182:	69f9      	ldr	r1, [r7, #28]
 8010184:	4401      	add	r1, r0
 8010186:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801018a:	4313      	orrs	r3, r2
 801018c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b01      	cmp	r3, #1
 8010192:	d10d      	bne.n	80101b0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d009      	beq.n	80101b0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	68d9      	ldr	r1, [r3, #12]
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ac:	460a      	mov	r2, r1
 80101ae:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	791b      	ldrb	r3, [r3, #4]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d128      	bne.n	801020a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d110      	bne.n	80101ea <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	015a      	lsls	r2, r3, #5
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	4413      	add	r3, r2
 80101d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	69ba      	ldr	r2, [r7, #24]
 80101d8:	0151      	lsls	r1, r2, #5
 80101da:	69fa      	ldr	r2, [r7, #28]
 80101dc:	440a      	add	r2, r1
 80101de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	e00f      	b.n	801020a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	015a      	lsls	r2, r3, #5
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	4413      	add	r3, r2
 80101f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	69ba      	ldr	r2, [r7, #24]
 80101fa:	0151      	lsls	r1, r2, #5
 80101fc:	69fa      	ldr	r2, [r7, #28]
 80101fe:	440a      	add	r2, r1
 8010200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010208:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	015a      	lsls	r2, r3, #5
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	4413      	add	r3, r2
 8010212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	69ba      	ldr	r2, [r7, #24]
 801021a:	0151      	lsls	r1, r2, #5
 801021c:	69fa      	ldr	r2, [r7, #28]
 801021e:	440a      	add	r2, r1
 8010220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3720      	adds	r7, #32
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	fff80000 	.word	0xfff80000
 8010238:	e007ffff 	.word	0xe007ffff
 801023c:	1ff80000 	.word	0x1ff80000

08010240 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010240:	b480      	push	{r7}
 8010242:	b087      	sub	sp, #28
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	785b      	ldrb	r3, [r3, #1]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d14a      	bne.n	80102f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	4413      	add	r3, r2
 8010268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010276:	f040 8086 	bne.w	8010386 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	015a      	lsls	r2, r3, #5
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	4413      	add	r3, r2
 8010284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	7812      	ldrb	r2, [r2, #0]
 801028e:	0151      	lsls	r1, r2, #5
 8010290:	693a      	ldr	r2, [r7, #16]
 8010292:	440a      	add	r2, r1
 8010294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801029c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	015a      	lsls	r2, r3, #5
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	4413      	add	r3, r2
 80102a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	7812      	ldrb	r2, [r2, #0]
 80102b2:	0151      	lsls	r1, r2, #5
 80102b4:	693a      	ldr	r2, [r7, #16]
 80102b6:	440a      	add	r2, r1
 80102b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	3301      	adds	r3, #1
 80102c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d902      	bls.n	80102d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	75fb      	strb	r3, [r7, #23]
          break;
 80102d6:	e056      	b.n	8010386 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	015a      	lsls	r2, r3, #5
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	4413      	add	r3, r2
 80102e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102f0:	d0e7      	beq.n	80102c2 <USB_EPStopXfer+0x82>
 80102f2:	e048      	b.n	8010386 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	015a      	lsls	r2, r3, #5
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801030c:	d13b      	bne.n	8010386 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	015a      	lsls	r2, r3, #5
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	4413      	add	r3, r2
 8010318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	7812      	ldrb	r2, [r2, #0]
 8010322:	0151      	lsls	r1, r2, #5
 8010324:	693a      	ldr	r2, [r7, #16]
 8010326:	440a      	add	r2, r1
 8010328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801032c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010330:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	015a      	lsls	r2, r3, #5
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	4413      	add	r3, r2
 801033c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	683a      	ldr	r2, [r7, #0]
 8010344:	7812      	ldrb	r2, [r2, #0]
 8010346:	0151      	lsls	r1, r2, #5
 8010348:	693a      	ldr	r2, [r7, #16]
 801034a:	440a      	add	r2, r1
 801034c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010354:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3301      	adds	r3, #1
 801035a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010362:	4293      	cmp	r3, r2
 8010364:	d902      	bls.n	801036c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010366:	2301      	movs	r3, #1
 8010368:	75fb      	strb	r3, [r7, #23]
          break;
 801036a:	e00c      	b.n	8010386 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	015a      	lsls	r2, r3, #5
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	4413      	add	r3, r2
 8010376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010384:	d0e7      	beq.n	8010356 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010386:	7dfb      	ldrb	r3, [r7, #23]
}
 8010388:	4618      	mov	r0, r3
 801038a:	371c      	adds	r7, #28
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010394:	b480      	push	{r7}
 8010396:	b089      	sub	sp, #36	; 0x24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	4611      	mov	r1, r2
 80103a0:	461a      	mov	r2, r3
 80103a2:	460b      	mov	r3, r1
 80103a4:	71fb      	strb	r3, [r7, #7]
 80103a6:	4613      	mov	r3, r2
 80103a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80103b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d123      	bne.n	8010402 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80103ba:	88bb      	ldrh	r3, [r7, #4]
 80103bc:	3303      	adds	r3, #3
 80103be:	089b      	lsrs	r3, r3, #2
 80103c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80103c2:	2300      	movs	r3, #0
 80103c4:	61bb      	str	r3, [r7, #24]
 80103c6:	e018      	b.n	80103fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80103c8:	79fb      	ldrb	r3, [r7, #7]
 80103ca:	031a      	lsls	r2, r3, #12
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	4413      	add	r3, r2
 80103d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103d4:	461a      	mov	r2, r3
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	3301      	adds	r3, #1
 80103e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	3301      	adds	r3, #1
 80103e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	3301      	adds	r3, #1
 80103ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	3301      	adds	r3, #1
 80103f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	3301      	adds	r3, #1
 80103f8:	61bb      	str	r3, [r7, #24]
 80103fa:	69ba      	ldr	r2, [r7, #24]
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d3e2      	bcc.n	80103c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3724      	adds	r7, #36	; 0x24
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010410:	b480      	push	{r7}
 8010412:	b08b      	sub	sp, #44	; 0x2c
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	4613      	mov	r3, r2
 801041c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010426:	88fb      	ldrh	r3, [r7, #6]
 8010428:	089b      	lsrs	r3, r3, #2
 801042a:	b29b      	uxth	r3, r3
 801042c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801042e:	88fb      	ldrh	r3, [r7, #6]
 8010430:	f003 0303 	and.w	r3, r3, #3
 8010434:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010436:	2300      	movs	r3, #0
 8010438:	623b      	str	r3, [r7, #32]
 801043a:	e014      	b.n	8010466 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	601a      	str	r2, [r3, #0]
    pDest++;
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	3301      	adds	r3, #1
 801044c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010450:	3301      	adds	r3, #1
 8010452:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	3301      	adds	r3, #1
 8010458:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801045a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045c:	3301      	adds	r3, #1
 801045e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010460:	6a3b      	ldr	r3, [r7, #32]
 8010462:	3301      	adds	r3, #1
 8010464:	623b      	str	r3, [r7, #32]
 8010466:	6a3a      	ldr	r2, [r7, #32]
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	429a      	cmp	r2, r3
 801046c:	d3e6      	bcc.n	801043c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801046e:	8bfb      	ldrh	r3, [r7, #30]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d01e      	beq.n	80104b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010474:	2300      	movs	r3, #0
 8010476:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801047e:	461a      	mov	r2, r3
 8010480:	f107 0310 	add.w	r3, r7, #16
 8010484:	6812      	ldr	r2, [r2, #0]
 8010486:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010488:	693a      	ldr	r2, [r7, #16]
 801048a:	6a3b      	ldr	r3, [r7, #32]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	fa22 f303 	lsr.w	r3, r2, r3
 8010494:	b2da      	uxtb	r2, r3
 8010496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010498:	701a      	strb	r2, [r3, #0]
      i++;
 801049a:	6a3b      	ldr	r3, [r7, #32]
 801049c:	3301      	adds	r3, #1
 801049e:	623b      	str	r3, [r7, #32]
      pDest++;
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	3301      	adds	r3, #1
 80104a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80104a6:	8bfb      	ldrh	r3, [r7, #30]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80104ac:	8bfb      	ldrh	r3, [r7, #30]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1ea      	bne.n	8010488 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	372c      	adds	r7, #44	; 0x2c
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b085      	sub	sp, #20
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	785b      	ldrb	r3, [r3, #1]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d12c      	bne.n	8010536 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	015a      	lsls	r2, r3, #5
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	4413      	add	r3, r2
 80104e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	db12      	blt.n	8010514 <USB_EPSetStall+0x54>
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00f      	beq.n	8010514 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	015a      	lsls	r2, r3, #5
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	4413      	add	r3, r2
 80104fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	0151      	lsls	r1, r2, #5
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	440a      	add	r2, r1
 801050a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801050e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010512:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	68ba      	ldr	r2, [r7, #8]
 8010524:	0151      	lsls	r1, r2, #5
 8010526:	68fa      	ldr	r2, [r7, #12]
 8010528:	440a      	add	r2, r1
 801052a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801052e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	e02b      	b.n	801058e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	015a      	lsls	r2, r3, #5
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	4413      	add	r3, r2
 801053e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	db12      	blt.n	801056e <USB_EPSetStall+0xae>
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d00f      	beq.n	801056e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	015a      	lsls	r2, r3, #5
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	4413      	add	r3, r2
 8010556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68ba      	ldr	r2, [r7, #8]
 801055e:	0151      	lsls	r1, r2, #5
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	440a      	add	r2, r1
 8010564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801056c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	015a      	lsls	r2, r3, #5
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	4413      	add	r3, r2
 8010576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	0151      	lsls	r1, r2, #5
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	440a      	add	r2, r1
 8010584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801058c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	785b      	ldrb	r3, [r3, #1]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d128      	bne.n	801060a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80105d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	791b      	ldrb	r3, [r3, #4]
 80105dc:	2b03      	cmp	r3, #3
 80105de:	d003      	beq.n	80105e8 <USB_EPClearStall+0x4c>
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	791b      	ldrb	r3, [r3, #4]
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d138      	bne.n	801065a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	0151      	lsls	r1, r2, #5
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	440a      	add	r2, r1
 80105fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010606:	6013      	str	r3, [r2, #0]
 8010608:	e027      	b.n	801065a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	0151      	lsls	r1, r2, #5
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	440a      	add	r2, r1
 8010620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010628:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	791b      	ldrb	r3, [r3, #4]
 801062e:	2b03      	cmp	r3, #3
 8010630:	d003      	beq.n	801063a <USB_EPClearStall+0x9e>
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	791b      	ldrb	r3, [r3, #4]
 8010636:	2b02      	cmp	r3, #2
 8010638:	d10f      	bne.n	801065a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	015a      	lsls	r2, r3, #5
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	4413      	add	r3, r2
 8010642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	0151      	lsls	r1, r2, #5
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	440a      	add	r2, r1
 8010650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010658:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	460b      	mov	r3, r1
 8010672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010686:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801068a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	78fb      	ldrb	r3, [r7, #3]
 8010696:	011b      	lsls	r3, r3, #4
 8010698:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801069c:	68f9      	ldr	r1, [r7, #12]
 801069e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106a2:	4313      	orrs	r3, r2
 80106a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3714      	adds	r7, #20
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106ce:	f023 0303 	bic.w	r3, r3, #3
 80106d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106e2:	f023 0302 	bic.w	r3, r3, #2
 80106e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3714      	adds	r7, #20
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b085      	sub	sp, #20
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010710:	f023 0303 	bic.w	r3, r3, #3
 8010714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010724:	f043 0302 	orr.w	r3, r3, #2
 8010728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	695b      	ldr	r3, [r3, #20]
 8010744:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	4013      	ands	r3, r2
 801074e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010750:	68fb      	ldr	r3, [r7, #12]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3714      	adds	r7, #20
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr

0801075e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801075e:	b480      	push	{r7}
 8010760:	b085      	sub	sp, #20
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010770:	699b      	ldr	r3, [r3, #24]
 8010772:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	68ba      	ldr	r2, [r7, #8]
 801077e:	4013      	ands	r3, r2
 8010780:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	0c1b      	lsrs	r3, r3, #16
}
 8010786:	4618      	mov	r0, r3
 8010788:	3714      	adds	r7, #20
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010792:	b480      	push	{r7}
 8010794:	b085      	sub	sp, #20
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107ae:	69db      	ldr	r3, [r3, #28]
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	4013      	ands	r3, r2
 80107b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	b29b      	uxth	r3, r3
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3714      	adds	r7, #20
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b085      	sub	sp, #20
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80107d6:	78fb      	ldrb	r3, [r7, #3]
 80107d8:	015a      	lsls	r2, r3, #5
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	4413      	add	r3, r2
 80107de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e2:	689b      	ldr	r3, [r3, #8]
 80107e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107ec:	695b      	ldr	r3, [r3, #20]
 80107ee:	68ba      	ldr	r2, [r7, #8]
 80107f0:	4013      	ands	r3, r2
 80107f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80107f4:	68bb      	ldr	r3, [r7, #8]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010802:	b480      	push	{r7}
 8010804:	b087      	sub	sp, #28
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	460b      	mov	r3, r1
 801080c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010818:	691b      	ldr	r3, [r3, #16]
 801081a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010824:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010826:	78fb      	ldrb	r3, [r7, #3]
 8010828:	f003 030f 	and.w	r3, r3, #15
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	fa22 f303 	lsr.w	r3, r2, r3
 8010832:	01db      	lsls	r3, r3, #7
 8010834:	b2db      	uxtb	r3, r3
 8010836:	693a      	ldr	r2, [r7, #16]
 8010838:	4313      	orrs	r3, r2
 801083a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	015a      	lsls	r2, r3, #5
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	4413      	add	r3, r2
 8010844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010848:	689b      	ldr	r3, [r3, #8]
 801084a:	693a      	ldr	r2, [r7, #16]
 801084c:	4013      	ands	r3, r2
 801084e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010850:	68bb      	ldr	r3, [r7, #8]
}
 8010852:	4618      	mov	r0, r3
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr

0801085e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801085e:	b480      	push	{r7}
 8010860:	b083      	sub	sp, #12
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	f003 0301 	and.w	r3, r3, #1
}
 801086e:	4618      	mov	r0, r3
 8010870:	370c      	adds	r7, #12
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
	...

0801087c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010896:	4619      	mov	r1, r3
 8010898:	4b09      	ldr	r3, [pc, #36]	; (80108c0 <USB_ActivateSetup+0x44>)
 801089a:	4013      	ands	r3, r2
 801089c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3714      	adds	r7, #20
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	fffff800 	.word	0xfffff800

080108c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b087      	sub	sp, #28
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	460b      	mov	r3, r1
 80108ce:	607a      	str	r2, [r7, #4]
 80108d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	333c      	adds	r3, #60	; 0x3c
 80108da:	3304      	adds	r3, #4
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	4a26      	ldr	r2, [pc, #152]	; (801097c <USB_EP0_OutStart+0xb8>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d90a      	bls.n	80108fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108f8:	d101      	bne.n	80108fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80108fa:	2300      	movs	r3, #0
 80108fc:	e037      	b.n	801096e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010904:	461a      	mov	r2, r3
 8010906:	2300      	movs	r3, #0
 8010908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010910:	691b      	ldr	r3, [r3, #16]
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801091c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010924:	691b      	ldr	r3, [r3, #16]
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801092c:	f043 0318 	orr.w	r3, r3, #24
 8010930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010940:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010946:	7afb      	ldrb	r3, [r7, #11]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d10f      	bne.n	801096c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010952:	461a      	mov	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	697a      	ldr	r2, [r7, #20]
 8010962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010966:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801096a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	371c      	adds	r7, #28
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	4f54300a 	.word	0x4f54300a

08010980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	3301      	adds	r3, #1
 8010990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	4a13      	ldr	r2, [pc, #76]	; (80109e4 <USB_CoreReset+0x64>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d901      	bls.n	801099e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801099a:	2303      	movs	r3, #3
 801099c:	e01b      	b.n	80109d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	691b      	ldr	r3, [r3, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	daf2      	bge.n	801098c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80109a6:	2300      	movs	r3, #0
 80109a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	f043 0201 	orr.w	r2, r3, #1
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3301      	adds	r3, #1
 80109ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	4a09      	ldr	r2, [pc, #36]	; (80109e4 <USB_CoreReset+0x64>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d901      	bls.n	80109c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80109c4:	2303      	movs	r3, #3
 80109c6:	e006      	b.n	80109d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	f003 0301 	and.w	r3, r3, #1
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d0f0      	beq.n	80109b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80109d4:	2300      	movs	r3, #0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	00030d40 	.word	0x00030d40

080109e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	460b      	mov	r3, r1
 80109f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80109f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80109f8:	f002 fc8e 	bl	8013318 <USBD_static_malloc>
 80109fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d109      	bne.n	8010a18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	32b0      	adds	r2, #176	; 0xb0
 8010a0e:	2100      	movs	r1, #0
 8010a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010a14:	2302      	movs	r3, #2
 8010a16:	e0d4      	b.n	8010bc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010a18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f002 fcf6 	bl	8013410 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	32b0      	adds	r2, #176	; 0xb0
 8010a2e:	68f9      	ldr	r1, [r7, #12]
 8010a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	32b0      	adds	r2, #176	; 0xb0
 8010a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	7c1b      	ldrb	r3, [r3, #16]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d138      	bne.n	8010ac2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010a50:	4b5e      	ldr	r3, [pc, #376]	; (8010bcc <USBD_CDC_Init+0x1e4>)
 8010a52:	7819      	ldrb	r1, [r3, #0]
 8010a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a58:	2202      	movs	r2, #2
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f002 fb39 	bl	80130d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010a60:	4b5a      	ldr	r3, [pc, #360]	; (8010bcc <USBD_CDC_Init+0x1e4>)
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	f003 020f 	and.w	r2, r3, #15
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	4413      	add	r3, r2
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	440b      	add	r3, r1
 8010a74:	3324      	adds	r3, #36	; 0x24
 8010a76:	2201      	movs	r2, #1
 8010a78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010a7a:	4b55      	ldr	r3, [pc, #340]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010a7c:	7819      	ldrb	r1, [r3, #0]
 8010a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a82:	2202      	movs	r2, #2
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f002 fb24 	bl	80130d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010a8a:	4b51      	ldr	r3, [pc, #324]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	f003 020f 	and.w	r2, r3, #15
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	4613      	mov	r3, r2
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4413      	add	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	440b      	add	r3, r1
 8010a9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010aa6:	4b4b      	ldr	r3, [pc, #300]	; (8010bd4 <USBD_CDC_Init+0x1ec>)
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	f003 020f 	and.w	r2, r3, #15
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	440b      	add	r3, r1
 8010aba:	3326      	adds	r3, #38	; 0x26
 8010abc:	2210      	movs	r2, #16
 8010abe:	801a      	strh	r2, [r3, #0]
 8010ac0:	e035      	b.n	8010b2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010ac2:	4b42      	ldr	r3, [pc, #264]	; (8010bcc <USBD_CDC_Init+0x1e4>)
 8010ac4:	7819      	ldrb	r1, [r3, #0]
 8010ac6:	2340      	movs	r3, #64	; 0x40
 8010ac8:	2202      	movs	r2, #2
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f002 fb01 	bl	80130d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010ad0:	4b3e      	ldr	r3, [pc, #248]	; (8010bcc <USBD_CDC_Init+0x1e4>)
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	f003 020f 	and.w	r2, r3, #15
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	4413      	add	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3324      	adds	r3, #36	; 0x24
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010aea:	4b39      	ldr	r3, [pc, #228]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010aec:	7819      	ldrb	r1, [r3, #0]
 8010aee:	2340      	movs	r3, #64	; 0x40
 8010af0:	2202      	movs	r2, #2
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f002 faed 	bl	80130d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010af8:	4b35      	ldr	r3, [pc, #212]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f003 020f 	and.w	r2, r3, #15
 8010b00:	6879      	ldr	r1, [r7, #4]
 8010b02:	4613      	mov	r3, r2
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	4413      	add	r3, r2
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	440b      	add	r3, r1
 8010b0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b10:	2201      	movs	r2, #1
 8010b12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010b14:	4b2f      	ldr	r3, [pc, #188]	; (8010bd4 <USBD_CDC_Init+0x1ec>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	f003 020f 	and.w	r2, r3, #15
 8010b1c:	6879      	ldr	r1, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4413      	add	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	440b      	add	r3, r1
 8010b28:	3326      	adds	r3, #38	; 0x26
 8010b2a:	2210      	movs	r2, #16
 8010b2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010b2e:	4b29      	ldr	r3, [pc, #164]	; (8010bd4 <USBD_CDC_Init+0x1ec>)
 8010b30:	7819      	ldrb	r1, [r3, #0]
 8010b32:	2308      	movs	r3, #8
 8010b34:	2203      	movs	r2, #3
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f002 facb 	bl	80130d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010b3c:	4b25      	ldr	r3, [pc, #148]	; (8010bd4 <USBD_CDC_Init+0x1ec>)
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	f003 020f 	and.w	r2, r3, #15
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	4613      	mov	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4413      	add	r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	3324      	adds	r3, #36	; 0x24
 8010b52:	2201      	movs	r2, #1
 8010b54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	33b0      	adds	r3, #176	; 0xb0
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	4413      	add	r3, r2
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2200      	movs	r2, #0
 8010b76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d101      	bne.n	8010b90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	e018      	b.n	8010bc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	7c1b      	ldrb	r3, [r3, #16]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d10a      	bne.n	8010bae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010b98:	4b0d      	ldr	r3, [pc, #52]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010b9a:	7819      	ldrb	r1, [r3, #0]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f002 fb82 	bl	80132b0 <USBD_LL_PrepareReceive>
 8010bac:	e008      	b.n	8010bc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010bae:	4b08      	ldr	r3, [pc, #32]	; (8010bd0 <USBD_CDC_Init+0x1e8>)
 8010bb0:	7819      	ldrb	r1, [r3, #0]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010bb8:	2340      	movs	r3, #64	; 0x40
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f002 fb78 	bl	80132b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3710      	adds	r7, #16
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	24000097 	.word	0x24000097
 8010bd0:	24000098 	.word	0x24000098
 8010bd4:	24000099 	.word	0x24000099

08010bd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010be4:	4b3a      	ldr	r3, [pc, #232]	; (8010cd0 <USBD_CDC_DeInit+0xf8>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f002 fa97 	bl	801311e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010bf0:	4b37      	ldr	r3, [pc, #220]	; (8010cd0 <USBD_CDC_DeInit+0xf8>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 020f 	and.w	r2, r3, #15
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	009b      	lsls	r3, r3, #2
 8010bfe:	4413      	add	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	440b      	add	r3, r1
 8010c04:	3324      	adds	r3, #36	; 0x24
 8010c06:	2200      	movs	r2, #0
 8010c08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010c0a:	4b32      	ldr	r3, [pc, #200]	; (8010cd4 <USBD_CDC_DeInit+0xfc>)
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f002 fa84 	bl	801311e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010c16:	4b2f      	ldr	r3, [pc, #188]	; (8010cd4 <USBD_CDC_DeInit+0xfc>)
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	f003 020f 	and.w	r2, r3, #15
 8010c1e:	6879      	ldr	r1, [r7, #4]
 8010c20:	4613      	mov	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	440b      	add	r3, r1
 8010c2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c2e:	2200      	movs	r2, #0
 8010c30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010c32:	4b29      	ldr	r3, [pc, #164]	; (8010cd8 <USBD_CDC_DeInit+0x100>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	4619      	mov	r1, r3
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f002 fa70 	bl	801311e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010c3e:	4b26      	ldr	r3, [pc, #152]	; (8010cd8 <USBD_CDC_DeInit+0x100>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	f003 020f 	and.w	r2, r3, #15
 8010c46:	6879      	ldr	r1, [r7, #4]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4413      	add	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	440b      	add	r3, r1
 8010c52:	3324      	adds	r3, #36	; 0x24
 8010c54:	2200      	movs	r2, #0
 8010c56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010c58:	4b1f      	ldr	r3, [pc, #124]	; (8010cd8 <USBD_CDC_DeInit+0x100>)
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	f003 020f 	and.w	r2, r3, #15
 8010c60:	6879      	ldr	r1, [r7, #4]
 8010c62:	4613      	mov	r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	4413      	add	r3, r2
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	440b      	add	r3, r1
 8010c6c:	3326      	adds	r3, #38	; 0x26
 8010c6e:	2200      	movs	r2, #0
 8010c70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	32b0      	adds	r2, #176	; 0xb0
 8010c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d01f      	beq.n	8010cc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	33b0      	adds	r3, #176	; 0xb0
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	4413      	add	r3, r2
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	32b0      	adds	r2, #176	; 0xb0
 8010ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f002 fb44 	bl	8013334 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	32b0      	adds	r2, #176	; 0xb0
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	24000097 	.word	0x24000097
 8010cd4:	24000098 	.word	0x24000098
 8010cd8:	24000099 	.word	0x24000099

08010cdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	32b0      	adds	r2, #176	; 0xb0
 8010cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010d08:	2303      	movs	r3, #3
 8010d0a:	e0bf      	b.n	8010e8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d050      	beq.n	8010dba <USBD_CDC_Setup+0xde>
 8010d18:	2b20      	cmp	r3, #32
 8010d1a:	f040 80af 	bne.w	8010e7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	88db      	ldrh	r3, [r3, #6]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d03a      	beq.n	8010d9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	b25b      	sxtb	r3, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	da1b      	bge.n	8010d68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	33b0      	adds	r3, #176	; 0xb0
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	4413      	add	r3, r2
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	689b      	ldr	r3, [r3, #8]
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010d46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	88d2      	ldrh	r2, [r2, #6]
 8010d4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	88db      	ldrh	r3, [r3, #6]
 8010d52:	2b07      	cmp	r3, #7
 8010d54:	bf28      	it	cs
 8010d56:	2307      	movcs	r3, #7
 8010d58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	89fa      	ldrh	r2, [r7, #14]
 8010d5e:	4619      	mov	r1, r3
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f001 fd89 	bl	8012878 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010d66:	e090      	b.n	8010e8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	785a      	ldrb	r2, [r3, #1]
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	88db      	ldrh	r3, [r3, #6]
 8010d76:	2b3f      	cmp	r3, #63	; 0x3f
 8010d78:	d803      	bhi.n	8010d82 <USBD_CDC_Setup+0xa6>
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	88db      	ldrh	r3, [r3, #6]
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	e000      	b.n	8010d84 <USBD_CDC_Setup+0xa8>
 8010d82:	2240      	movs	r2, #64	; 0x40
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010d8a:	6939      	ldr	r1, [r7, #16]
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010d92:	461a      	mov	r2, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f001 fd9b 	bl	80128d0 <USBD_CtlPrepareRx>
      break;
 8010d9a:	e076      	b.n	8010e8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	33b0      	adds	r3, #176	; 0xb0
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	683a      	ldr	r2, [r7, #0]
 8010db0:	7850      	ldrb	r0, [r2, #1]
 8010db2:	2200      	movs	r2, #0
 8010db4:	6839      	ldr	r1, [r7, #0]
 8010db6:	4798      	blx	r3
      break;
 8010db8:	e067      	b.n	8010e8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	785b      	ldrb	r3, [r3, #1]
 8010dbe:	2b0b      	cmp	r3, #11
 8010dc0:	d851      	bhi.n	8010e66 <USBD_CDC_Setup+0x18a>
 8010dc2:	a201      	add	r2, pc, #4	; (adr r2, 8010dc8 <USBD_CDC_Setup+0xec>)
 8010dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc8:	08010df9 	.word	0x08010df9
 8010dcc:	08010e75 	.word	0x08010e75
 8010dd0:	08010e67 	.word	0x08010e67
 8010dd4:	08010e67 	.word	0x08010e67
 8010dd8:	08010e67 	.word	0x08010e67
 8010ddc:	08010e67 	.word	0x08010e67
 8010de0:	08010e67 	.word	0x08010e67
 8010de4:	08010e67 	.word	0x08010e67
 8010de8:	08010e67 	.word	0x08010e67
 8010dec:	08010e67 	.word	0x08010e67
 8010df0:	08010e23 	.word	0x08010e23
 8010df4:	08010e4d 	.word	0x08010e4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	2b03      	cmp	r3, #3
 8010e02:	d107      	bne.n	8010e14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010e04:	f107 030a 	add.w	r3, r7, #10
 8010e08:	2202      	movs	r2, #2
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f001 fd33 	bl	8012878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010e12:	e032      	b.n	8010e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010e14:	6839      	ldr	r1, [r7, #0]
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f001 fcbd 	bl	8012796 <USBD_CtlError>
            ret = USBD_FAIL;
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8010e20:	e02b      	b.n	8010e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	2b03      	cmp	r3, #3
 8010e2c:	d107      	bne.n	8010e3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010e2e:	f107 030d 	add.w	r3, r7, #13
 8010e32:	2201      	movs	r2, #1
 8010e34:	4619      	mov	r1, r3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f001 fd1e 	bl	8012878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010e3c:	e01d      	b.n	8010e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010e3e:	6839      	ldr	r1, [r7, #0]
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f001 fca8 	bl	8012796 <USBD_CtlError>
            ret = USBD_FAIL;
 8010e46:	2303      	movs	r3, #3
 8010e48:	75fb      	strb	r3, [r7, #23]
          break;
 8010e4a:	e016      	b.n	8010e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d00f      	beq.n	8010e78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010e58:	6839      	ldr	r1, [r7, #0]
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f001 fc9b 	bl	8012796 <USBD_CtlError>
            ret = USBD_FAIL;
 8010e60:	2303      	movs	r3, #3
 8010e62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010e64:	e008      	b.n	8010e78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010e66:	6839      	ldr	r1, [r7, #0]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f001 fc94 	bl	8012796 <USBD_CtlError>
          ret = USBD_FAIL;
 8010e6e:	2303      	movs	r3, #3
 8010e70:	75fb      	strb	r3, [r7, #23]
          break;
 8010e72:	e002      	b.n	8010e7a <USBD_CDC_Setup+0x19e>
          break;
 8010e74:	bf00      	nop
 8010e76:	e008      	b.n	8010e8a <USBD_CDC_Setup+0x1ae>
          break;
 8010e78:	bf00      	nop
      }
      break;
 8010e7a:	e006      	b.n	8010e8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010e7c:	6839      	ldr	r1, [r7, #0]
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f001 fc89 	bl	8012796 <USBD_CtlError>
      ret = USBD_FAIL;
 8010e84:	2303      	movs	r3, #3
 8010e86:	75fb      	strb	r3, [r7, #23]
      break;
 8010e88:	bf00      	nop
  }

  return (uint8_t)ret;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3718      	adds	r7, #24
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	32b0      	adds	r2, #176	; 0xb0
 8010eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010eba:	2303      	movs	r3, #3
 8010ebc:	e065      	b.n	8010f8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	32b0      	adds	r2, #176	; 0xb0
 8010ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ecc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010ece:	78fb      	ldrb	r3, [r7, #3]
 8010ed0:	f003 020f 	and.w	r2, r3, #15
 8010ed4:	6879      	ldr	r1, [r7, #4]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4413      	add	r3, r2
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	440b      	add	r3, r1
 8010ee0:	3318      	adds	r3, #24
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d02f      	beq.n	8010f48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010ee8:	78fb      	ldrb	r3, [r7, #3]
 8010eea:	f003 020f 	and.w	r2, r3, #15
 8010eee:	6879      	ldr	r1, [r7, #4]
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	440b      	add	r3, r1
 8010efa:	3318      	adds	r3, #24
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	78fb      	ldrb	r3, [r7, #3]
 8010f00:	f003 010f 	and.w	r1, r3, #15
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	460b      	mov	r3, r1
 8010f08:	00db      	lsls	r3, r3, #3
 8010f0a:	440b      	add	r3, r1
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4403      	add	r3, r0
 8010f10:	3344      	adds	r3, #68	; 0x44
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8010f18:	fb01 f303 	mul.w	r3, r1, r3
 8010f1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d112      	bne.n	8010f48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010f22:	78fb      	ldrb	r3, [r7, #3]
 8010f24:	f003 020f 	and.w	r2, r3, #15
 8010f28:	6879      	ldr	r1, [r7, #4]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	440b      	add	r3, r1
 8010f34:	3318      	adds	r3, #24
 8010f36:	2200      	movs	r2, #0
 8010f38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010f3a:	78f9      	ldrb	r1, [r7, #3]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	2200      	movs	r2, #0
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f002 f994 	bl	801326e <USBD_LL_Transmit>
 8010f46:	e01f      	b.n	8010f88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	33b0      	adds	r3, #176	; 0xb0
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	4413      	add	r3, r2
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	691b      	ldr	r3, [r3, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d010      	beq.n	8010f88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	33b0      	adds	r3, #176	; 0xb0
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	4413      	add	r3, r2
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010f84:	78fa      	ldrb	r2, [r7, #3]
 8010f86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b084      	sub	sp, #16
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	32b0      	adds	r2, #176	; 0xb0
 8010fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	32b0      	adds	r2, #176	; 0xb0
 8010fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010fc0:	2303      	movs	r3, #3
 8010fc2:	e01a      	b.n	8010ffa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010fc4:	78fb      	ldrb	r3, [r7, #3]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f002 f992 	bl	80132f2 <USBD_LL_GetRxDataSize>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	33b0      	adds	r3, #176	; 0xb0
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010ff8:	2300      	movs	r3, #0
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b084      	sub	sp, #16
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	32b0      	adds	r2, #176	; 0xb0
 8011014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d101      	bne.n	8011024 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011020:	2303      	movs	r3, #3
 8011022:	e025      	b.n	8011070 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	33b0      	adds	r3, #176	; 0xb0
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	4413      	add	r3, r2
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d01a      	beq.n	801106e <USBD_CDC_EP0_RxReady+0x6c>
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801103e:	2bff      	cmp	r3, #255	; 0xff
 8011040:	d015      	beq.n	801106e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	33b0      	adds	r3, #176	; 0xb0
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	4413      	add	r3, r2
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801105a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011062:	b292      	uxth	r2, r2
 8011064:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	22ff      	movs	r2, #255	; 0xff
 801106a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801106e:	2300      	movs	r3, #0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b086      	sub	sp, #24
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011080:	2182      	movs	r1, #130	; 0x82
 8011082:	4818      	ldr	r0, [pc, #96]	; (80110e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011084:	f000 fd4f 	bl	8011b26 <USBD_GetEpDesc>
 8011088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801108a:	2101      	movs	r1, #1
 801108c:	4815      	ldr	r0, [pc, #84]	; (80110e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801108e:	f000 fd4a 	bl	8011b26 <USBD_GetEpDesc>
 8011092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011094:	2181      	movs	r1, #129	; 0x81
 8011096:	4813      	ldr	r0, [pc, #76]	; (80110e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011098:	f000 fd45 	bl	8011b26 <USBD_GetEpDesc>
 801109c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	2210      	movs	r2, #16
 80110a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d006      	beq.n	80110be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110b8:	711a      	strb	r2, [r3, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d006      	beq.n	80110d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2200      	movs	r2, #0
 80110c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110cc:	711a      	strb	r2, [r3, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2243      	movs	r2, #67	; 0x43
 80110d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80110d8:	4b02      	ldr	r3, [pc, #8]	; (80110e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3718      	adds	r7, #24
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	24000054 	.word	0x24000054

080110e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80110f0:	2182      	movs	r1, #130	; 0x82
 80110f2:	4818      	ldr	r0, [pc, #96]	; (8011154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80110f4:	f000 fd17 	bl	8011b26 <USBD_GetEpDesc>
 80110f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80110fa:	2101      	movs	r1, #1
 80110fc:	4815      	ldr	r0, [pc, #84]	; (8011154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80110fe:	f000 fd12 	bl	8011b26 <USBD_GetEpDesc>
 8011102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011104:	2181      	movs	r1, #129	; 0x81
 8011106:	4813      	ldr	r0, [pc, #76]	; (8011154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011108:	f000 fd0d 	bl	8011b26 <USBD_GetEpDesc>
 801110c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d002      	beq.n	801111a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	2210      	movs	r2, #16
 8011118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d006      	beq.n	801112e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	2200      	movs	r2, #0
 8011124:	711a      	strb	r2, [r3, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f042 0202 	orr.w	r2, r2, #2
 801112c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d006      	beq.n	8011142 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2200      	movs	r2, #0
 8011138:	711a      	strb	r2, [r3, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f042 0202 	orr.w	r2, r2, #2
 8011140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2243      	movs	r2, #67	; 0x43
 8011146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011148:	4b02      	ldr	r3, [pc, #8]	; (8011154 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801114a:	4618      	mov	r0, r3
 801114c:	3718      	adds	r7, #24
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	24000054 	.word	0x24000054

08011158 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b086      	sub	sp, #24
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011160:	2182      	movs	r1, #130	; 0x82
 8011162:	4818      	ldr	r0, [pc, #96]	; (80111c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011164:	f000 fcdf 	bl	8011b26 <USBD_GetEpDesc>
 8011168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801116a:	2101      	movs	r1, #1
 801116c:	4815      	ldr	r0, [pc, #84]	; (80111c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801116e:	f000 fcda 	bl	8011b26 <USBD_GetEpDesc>
 8011172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011174:	2181      	movs	r1, #129	; 0x81
 8011176:	4813      	ldr	r0, [pc, #76]	; (80111c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011178:	f000 fcd5 	bl	8011b26 <USBD_GetEpDesc>
 801117c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2210      	movs	r2, #16
 8011188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d006      	beq.n	801119e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	2200      	movs	r2, #0
 8011194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011198:	711a      	strb	r2, [r3, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d006      	beq.n	80111b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111ac:	711a      	strb	r2, [r3, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2243      	movs	r2, #67	; 0x43
 80111b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80111b8:	4b02      	ldr	r3, [pc, #8]	; (80111c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3718      	adds	r7, #24
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	24000054 	.word	0x24000054

080111c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	220a      	movs	r2, #10
 80111d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80111d6:	4b03      	ldr	r3, [pc, #12]	; (80111e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80111d8:	4618      	mov	r0, r3
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	24000010 	.word	0x24000010

080111e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d101      	bne.n	80111fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80111f8:	2303      	movs	r3, #3
 80111fa:	e009      	b.n	8011210 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	33b0      	adds	r3, #176	; 0xb0
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	4413      	add	r3, r2
 801120a:	683a      	ldr	r2, [r7, #0]
 801120c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	370c      	adds	r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801121c:	b480      	push	{r7}
 801121e:	b087      	sub	sp, #28
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	32b0      	adds	r2, #176	; 0xb0
 8011232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011236:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d101      	bne.n	8011242 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801123e:	2303      	movs	r3, #3
 8011240:	e008      	b.n	8011254 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	68ba      	ldr	r2, [r7, #8]
 8011246:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011252:	2300      	movs	r3, #0
}
 8011254:	4618      	mov	r0, r3
 8011256:	371c      	adds	r7, #28
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	32b0      	adds	r2, #176	; 0xb0
 8011274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011278:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d101      	bne.n	8011284 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011280:	2303      	movs	r3, #3
 8011282:	e004      	b.n	801128e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
	...

0801129c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	32b0      	adds	r2, #176	; 0xb0
 80112ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80112b4:	2301      	movs	r3, #1
 80112b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d101      	bne.n	80112c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80112be:	2303      	movs	r3, #3
 80112c0:	e025      	b.n	801130e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d11f      	bne.n	801130c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80112d4:	4b10      	ldr	r3, [pc, #64]	; (8011318 <USBD_CDC_TransmitPacket+0x7c>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	f003 020f 	and.w	r2, r3, #15
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	4613      	mov	r3, r2
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	4413      	add	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	4403      	add	r3, r0
 80112ee:	3318      	adds	r3, #24
 80112f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80112f2:	4b09      	ldr	r3, [pc, #36]	; (8011318 <USBD_CDC_TransmitPacket+0x7c>)
 80112f4:	7819      	ldrb	r1, [r3, #0]
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f001 ffb3 	bl	801326e <USBD_LL_Transmit>

    ret = USBD_OK;
 8011308:	2300      	movs	r3, #0
 801130a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801130c:	7bfb      	ldrb	r3, [r7, #15]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	24000097 	.word	0x24000097

0801131c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	32b0      	adds	r2, #176	; 0xb0
 801132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011332:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	32b0      	adds	r2, #176	; 0xb0
 801133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d101      	bne.n	801134a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011346:	2303      	movs	r3, #3
 8011348:	e018      	b.n	801137c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	7c1b      	ldrb	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10a      	bne.n	8011368 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011352:	4b0c      	ldr	r3, [pc, #48]	; (8011384 <USBD_CDC_ReceivePacket+0x68>)
 8011354:	7819      	ldrb	r1, [r3, #0]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801135c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f001 ffa5 	bl	80132b0 <USBD_LL_PrepareReceive>
 8011366:	e008      	b.n	801137a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011368:	4b06      	ldr	r3, [pc, #24]	; (8011384 <USBD_CDC_ReceivePacket+0x68>)
 801136a:	7819      	ldrb	r1, [r3, #0]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011372:	2340      	movs	r3, #64	; 0x40
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f001 ff9b 	bl	80132b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	24000098 	.word	0x24000098

08011388 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d101      	bne.n	80113a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801139c:	2303      	movs	r3, #3
 801139e:	e01f      	b.n	80113e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2200      	movs	r2, #0
 80113b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d003      	beq.n	80113c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	68ba      	ldr	r2, [r7, #8]
 80113c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2201      	movs	r2, #1
 80113ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	79fa      	ldrb	r2, [r7, #7]
 80113d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f001 fe0f 	bl	8012ff8 <USBD_LL_Init>
 80113da:	4603      	mov	r3, r0
 80113dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80113de:	7dfb      	ldrb	r3, [r7, #23]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3718      	adds	r7, #24
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80113f2:	2300      	movs	r3, #0
 80113f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d101      	bne.n	8011400 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80113fc:	2303      	movs	r3, #3
 80113fe:	e025      	b.n	801144c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	32ae      	adds	r2, #174	; 0xae
 8011412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00f      	beq.n	801143c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	32ae      	adds	r2, #174	; 0xae
 8011426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	f107 020e 	add.w	r2, r7, #14
 8011430:	4610      	mov	r0, r2
 8011432:	4798      	blx	r3
 8011434:	4602      	mov	r2, r0
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f001 fe1d 	bl	801309c <USBD_LL_Start>
 8011462:	4603      	mov	r3, r0
}
 8011464:	4618      	mov	r0, r3
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011474:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011476:	4618      	mov	r0, r3
 8011478:	370c      	adds	r7, #12
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr

08011482 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b084      	sub	sp, #16
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
 801148a:	460b      	mov	r3, r1
 801148c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011498:	2b00      	cmp	r3, #0
 801149a:	d009      	beq.n	80114b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	78fa      	ldrb	r2, [r7, #3]
 80114a6:	4611      	mov	r1, r2
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	4798      	blx	r3
 80114ac:	4603      	mov	r3, r0
 80114ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80114b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	460b      	mov	r3, r1
 80114c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80114c6:	2300      	movs	r3, #0
 80114c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	78fa      	ldrb	r2, [r7, #3]
 80114d4:	4611      	mov	r1, r2
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	4798      	blx	r3
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80114e0:	2303      	movs	r3, #3
 80114e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b084      	sub	sp, #16
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114fe:	6839      	ldr	r1, [r7, #0]
 8011500:	4618      	mov	r0, r3
 8011502:	f001 f90e 	bl	8012722 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2201      	movs	r2, #1
 801150a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011514:	461a      	mov	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011522:	f003 031f 	and.w	r3, r3, #31
 8011526:	2b02      	cmp	r3, #2
 8011528:	d01a      	beq.n	8011560 <USBD_LL_SetupStage+0x72>
 801152a:	2b02      	cmp	r3, #2
 801152c:	d822      	bhi.n	8011574 <USBD_LL_SetupStage+0x86>
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <USBD_LL_SetupStage+0x4a>
 8011532:	2b01      	cmp	r3, #1
 8011534:	d00a      	beq.n	801154c <USBD_LL_SetupStage+0x5e>
 8011536:	e01d      	b.n	8011574 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 fb65 	bl	8011c10 <USBD_StdDevReq>
 8011546:	4603      	mov	r3, r0
 8011548:	73fb      	strb	r3, [r7, #15]
      break;
 801154a:	e020      	b.n	801158e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011552:	4619      	mov	r1, r3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 fbcd 	bl	8011cf4 <USBD_StdItfReq>
 801155a:	4603      	mov	r3, r0
 801155c:	73fb      	strb	r3, [r7, #15]
      break;
 801155e:	e016      	b.n	801158e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011566:	4619      	mov	r1, r3
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f000 fc2f 	bl	8011dcc <USBD_StdEPReq>
 801156e:	4603      	mov	r3, r0
 8011570:	73fb      	strb	r3, [r7, #15]
      break;
 8011572:	e00c      	b.n	801158e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801157a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801157e:	b2db      	uxtb	r3, r3
 8011580:	4619      	mov	r1, r3
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f001 fdea 	bl	801315c <USBD_LL_StallEP>
 8011588:	4603      	mov	r3, r0
 801158a:	73fb      	strb	r3, [r7, #15]
      break;
 801158c:	bf00      	nop
  }

  return ret;
 801158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	460b      	mov	r3, r1
 80115a2:	607a      	str	r2, [r7, #4]
 80115a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80115aa:	7afb      	ldrb	r3, [r7, #11]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d16e      	bne.n	801168e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80115b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80115be:	2b03      	cmp	r3, #3
 80115c0:	f040 8098 	bne.w	80116f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	689a      	ldr	r2, [r3, #8]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d913      	bls.n	80115f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	689a      	ldr	r2, [r3, #8]
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	1ad2      	subs	r2, r2, r3
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	68da      	ldr	r2, [r3, #12]
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	4293      	cmp	r3, r2
 80115e8:	bf28      	it	cs
 80115ea:	4613      	movcs	r3, r2
 80115ec:	461a      	mov	r2, r3
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	68f8      	ldr	r0, [r7, #12]
 80115f2:	f001 f98a 	bl	801290a <USBD_CtlContinueRx>
 80115f6:	e07d      	b.n	80116f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80115fe:	f003 031f 	and.w	r3, r3, #31
 8011602:	2b02      	cmp	r3, #2
 8011604:	d014      	beq.n	8011630 <USBD_LL_DataOutStage+0x98>
 8011606:	2b02      	cmp	r3, #2
 8011608:	d81d      	bhi.n	8011646 <USBD_LL_DataOutStage+0xae>
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <USBD_LL_DataOutStage+0x7c>
 801160e:	2b01      	cmp	r3, #1
 8011610:	d003      	beq.n	801161a <USBD_LL_DataOutStage+0x82>
 8011612:	e018      	b.n	8011646 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011614:	2300      	movs	r3, #0
 8011616:	75bb      	strb	r3, [r7, #22]
            break;
 8011618:	e018      	b.n	801164c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011620:	b2db      	uxtb	r3, r3
 8011622:	4619      	mov	r1, r3
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 fa64 	bl	8011af2 <USBD_CoreFindIF>
 801162a:	4603      	mov	r3, r0
 801162c:	75bb      	strb	r3, [r7, #22]
            break;
 801162e:	e00d      	b.n	801164c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011636:	b2db      	uxtb	r3, r3
 8011638:	4619      	mov	r1, r3
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f000 fa66 	bl	8011b0c <USBD_CoreFindEP>
 8011640:	4603      	mov	r3, r0
 8011642:	75bb      	strb	r3, [r7, #22]
            break;
 8011644:	e002      	b.n	801164c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011646:	2300      	movs	r3, #0
 8011648:	75bb      	strb	r3, [r7, #22]
            break;
 801164a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801164c:	7dbb      	ldrb	r3, [r7, #22]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d119      	bne.n	8011686 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b03      	cmp	r3, #3
 801165c:	d113      	bne.n	8011686 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801165e:	7dba      	ldrb	r2, [r7, #22]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	32ae      	adds	r2, #174	; 0xae
 8011664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011668:	691b      	ldr	r3, [r3, #16]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00b      	beq.n	8011686 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801166e:	7dba      	ldrb	r2, [r7, #22]
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011676:	7dba      	ldrb	r2, [r7, #22]
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	32ae      	adds	r2, #174	; 0xae
 801167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f001 f950 	bl	801292c <USBD_CtlSendStatus>
 801168c:	e032      	b.n	80116f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801168e:	7afb      	ldrb	r3, [r7, #11]
 8011690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011694:	b2db      	uxtb	r3, r3
 8011696:	4619      	mov	r1, r3
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f000 fa37 	bl	8011b0c <USBD_CoreFindEP>
 801169e:	4603      	mov	r3, r0
 80116a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116a2:	7dbb      	ldrb	r3, [r7, #22]
 80116a4:	2bff      	cmp	r3, #255	; 0xff
 80116a6:	d025      	beq.n	80116f4 <USBD_LL_DataOutStage+0x15c>
 80116a8:	7dbb      	ldrb	r3, [r7, #22]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d122      	bne.n	80116f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d117      	bne.n	80116ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80116ba:	7dba      	ldrb	r2, [r7, #22]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	32ae      	adds	r2, #174	; 0xae
 80116c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116c4:	699b      	ldr	r3, [r3, #24]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00f      	beq.n	80116ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80116ca:	7dba      	ldrb	r2, [r7, #22]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80116d2:	7dba      	ldrb	r2, [r7, #22]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	32ae      	adds	r2, #174	; 0xae
 80116d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116dc:	699b      	ldr	r3, [r3, #24]
 80116de:	7afa      	ldrb	r2, [r7, #11]
 80116e0:	4611      	mov	r1, r2
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	4798      	blx	r3
 80116e6:	4603      	mov	r3, r0
 80116e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
 80116f2:	e000      	b.n	80116f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b086      	sub	sp, #24
 8011702:	af00      	add	r7, sp, #0
 8011704:	60f8      	str	r0, [r7, #12]
 8011706:	460b      	mov	r3, r1
 8011708:	607a      	str	r2, [r7, #4]
 801170a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801170c:	7afb      	ldrb	r3, [r7, #11]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d16f      	bne.n	80117f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3314      	adds	r3, #20
 8011716:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801171e:	2b02      	cmp	r3, #2
 8011720:	d15a      	bne.n	80117d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	689a      	ldr	r2, [r3, #8]
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	429a      	cmp	r2, r3
 801172c:	d914      	bls.n	8011758 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	689a      	ldr	r2, [r3, #8]
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	1ad2      	subs	r2, r2, r3
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	461a      	mov	r2, r3
 8011742:	6879      	ldr	r1, [r7, #4]
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f001 f8b2 	bl	80128ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801174a:	2300      	movs	r3, #0
 801174c:	2200      	movs	r2, #0
 801174e:	2100      	movs	r1, #0
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f001 fdad 	bl	80132b0 <USBD_LL_PrepareReceive>
 8011756:	e03f      	b.n	80117d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	68da      	ldr	r2, [r3, #12]
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	689b      	ldr	r3, [r3, #8]
 8011760:	429a      	cmp	r2, r3
 8011762:	d11c      	bne.n	801179e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801176c:	429a      	cmp	r2, r3
 801176e:	d316      	bcc.n	801179e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801177a:	429a      	cmp	r2, r3
 801177c:	d20f      	bcs.n	801179e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801177e:	2200      	movs	r2, #0
 8011780:	2100      	movs	r1, #0
 8011782:	68f8      	ldr	r0, [r7, #12]
 8011784:	f001 f893 	bl	80128ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2200      	movs	r2, #0
 801178c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011790:	2300      	movs	r3, #0
 8011792:	2200      	movs	r2, #0
 8011794:	2100      	movs	r1, #0
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f001 fd8a 	bl	80132b0 <USBD_LL_PrepareReceive>
 801179c:	e01c      	b.n	80117d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	2b03      	cmp	r3, #3
 80117a8:	d10f      	bne.n	80117ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d009      	beq.n	80117ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80117ca:	2180      	movs	r1, #128	; 0x80
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f001 fcc5 	bl	801315c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80117d2:	68f8      	ldr	r0, [r7, #12]
 80117d4:	f001 f8bd 	bl	8012952 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d03a      	beq.n	8011858 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f7ff fe42 	bl	801146c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2200      	movs	r2, #0
 80117ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80117f0:	e032      	b.n	8011858 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80117f2:	7afb      	ldrb	r3, [r7, #11]
 80117f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	4619      	mov	r1, r3
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f000 f985 	bl	8011b0c <USBD_CoreFindEP>
 8011802:	4603      	mov	r3, r0
 8011804:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	2bff      	cmp	r3, #255	; 0xff
 801180a:	d025      	beq.n	8011858 <USBD_LL_DataInStage+0x15a>
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d122      	bne.n	8011858 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011818:	b2db      	uxtb	r3, r3
 801181a:	2b03      	cmp	r3, #3
 801181c:	d11c      	bne.n	8011858 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801181e:	7dfa      	ldrb	r2, [r7, #23]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	32ae      	adds	r2, #174	; 0xae
 8011824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d014      	beq.n	8011858 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801182e:	7dfa      	ldrb	r2, [r7, #23]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011836:	7dfa      	ldrb	r2, [r7, #23]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	32ae      	adds	r2, #174	; 0xae
 801183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	7afa      	ldrb	r2, [r7, #11]
 8011844:	4611      	mov	r1, r2
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	4798      	blx	r3
 801184a:	4603      	mov	r3, r0
 801184c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801184e:	7dbb      	ldrb	r3, [r7, #22]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d001      	beq.n	8011858 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011854:	7dbb      	ldrb	r3, [r7, #22]
 8011856:	e000      	b.n	801185a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	3718      	adds	r7, #24
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011862:	b580      	push	{r7, lr}
 8011864:	b084      	sub	sp, #16
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2201      	movs	r2, #1
 8011872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2200      	movs	r2, #0
 801187a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2200      	movs	r2, #0
 8011888:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801189a:	2b00      	cmp	r3, #0
 801189c:	d014      	beq.n	80118c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00e      	beq.n	80118c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	6852      	ldr	r2, [r2, #4]
 80118b6:	b2d2      	uxtb	r2, r2
 80118b8:	4611      	mov	r1, r2
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	4798      	blx	r3
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80118c4:	2303      	movs	r3, #3
 80118c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80118c8:	2340      	movs	r3, #64	; 0x40
 80118ca:	2200      	movs	r2, #0
 80118cc:	2100      	movs	r1, #0
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f001 fbff 	bl	80130d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2240      	movs	r2, #64	; 0x40
 80118e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80118e4:	2340      	movs	r3, #64	; 0x40
 80118e6:	2200      	movs	r2, #0
 80118e8:	2180      	movs	r1, #128	; 0x80
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f001 fbf1 	bl	80130d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2201      	movs	r2, #1
 80118f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2240      	movs	r2, #64	; 0x40
 80118fa:	621a      	str	r2, [r3, #32]

  return ret;
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011906:	b480      	push	{r7}
 8011908:	b083      	sub	sp, #12
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	460b      	mov	r3, r1
 8011910:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	78fa      	ldrb	r2, [r7, #3]
 8011916:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011934:	b2db      	uxtb	r3, r3
 8011936:	2b04      	cmp	r3, #4
 8011938:	d006      	beq.n	8011948 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011940:	b2da      	uxtb	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2204      	movs	r2, #4
 801194c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801195e:	b480      	push	{r7}
 8011960:	b083      	sub	sp, #12
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801196c:	b2db      	uxtb	r3, r3
 801196e:	2b04      	cmp	r3, #4
 8011970:	d106      	bne.n	8011980 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011978:	b2da      	uxtb	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	370c      	adds	r7, #12
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr

0801198e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b082      	sub	sp, #8
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d110      	bne.n	80119c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00b      	beq.n	80119c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d005      	beq.n	80119c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b082      	sub	sp, #8
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	460b      	mov	r3, r1
 80119d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	32ae      	adds	r2, #174	; 0xae
 80119e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d101      	bne.n	80119f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80119ec:	2303      	movs	r3, #3
 80119ee:	e01c      	b.n	8011a2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b03      	cmp	r3, #3
 80119fa:	d115      	bne.n	8011a28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	32ae      	adds	r2, #174	; 0xae
 8011a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a0a:	6a1b      	ldr	r3, [r3, #32]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	32ae      	adds	r2, #174	; 0xae
 8011a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1e:	6a1b      	ldr	r3, [r3, #32]
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	4611      	mov	r1, r2
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a28:	2300      	movs	r3, #0
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b082      	sub	sp, #8
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	32ae      	adds	r2, #174	; 0xae
 8011a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011a50:	2303      	movs	r3, #3
 8011a52:	e01c      	b.n	8011a8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	2b03      	cmp	r3, #3
 8011a5e:	d115      	bne.n	8011a8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	32ae      	adds	r2, #174	; 0xae
 8011a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00b      	beq.n	8011a8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	32ae      	adds	r2, #174	; 0xae
 8011a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a84:	78fa      	ldrb	r2, [r7, #3]
 8011a86:	4611      	mov	r1, r2
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011a96:	b480      	push	{r7}
 8011a98:	b083      	sub	sp, #12
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00e      	beq.n	8011ae8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	6852      	ldr	r2, [r2, #4]
 8011ad6:	b2d2      	uxtb	r2, r2
 8011ad8:	4611      	mov	r1, r2
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	4798      	blx	r3
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011af2:	b480      	push	{r7}
 8011af4:	b083      	sub	sp, #12
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	460b      	mov	r3, r1
 8011afc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011afe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b086      	sub	sp, #24
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	460b      	mov	r3, r1
 8011b30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	885b      	ldrh	r3, [r3, #2]
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d920      	bls.n	8011b90 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011b56:	e013      	b.n	8011b80 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011b58:	f107 030a 	add.w	r3, r7, #10
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	6978      	ldr	r0, [r7, #20]
 8011b60:	f000 f81b 	bl	8011b9a <USBD_GetNextDesc>
 8011b64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	785b      	ldrb	r3, [r3, #1]
 8011b6a:	2b05      	cmp	r3, #5
 8011b6c:	d108      	bne.n	8011b80 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	789b      	ldrb	r3, [r3, #2]
 8011b76:	78fa      	ldrb	r2, [r7, #3]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d008      	beq.n	8011b8e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	885b      	ldrh	r3, [r3, #2]
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	897b      	ldrh	r3, [r7, #10]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d8e5      	bhi.n	8011b58 <USBD_GetEpDesc+0x32>
 8011b8c:	e000      	b.n	8011b90 <USBD_GetEpDesc+0x6a>
          break;
 8011b8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011b90:	693b      	ldr	r3, [r7, #16]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3718      	adds	r7, #24
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011b9a:	b480      	push	{r7}
 8011b9c:	b085      	sub	sp, #20
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	6078      	str	r0, [r7, #4]
 8011ba2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	881a      	ldrh	r2, [r3, #0]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	4413      	add	r3, r2
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011bc6:	68fb      	ldr	r3, [r7, #12]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b087      	sub	sp, #28
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	3301      	adds	r3, #1
 8011bea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011bf2:	8a3b      	ldrh	r3, [r7, #16]
 8011bf4:	021b      	lsls	r3, r3, #8
 8011bf6:	b21a      	sxth	r2, r3
 8011bf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	b21b      	sxth	r3, r3
 8011c00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c02:	89fb      	ldrh	r3, [r7, #14]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	371c      	adds	r7, #28
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c26:	2b40      	cmp	r3, #64	; 0x40
 8011c28:	d005      	beq.n	8011c36 <USBD_StdDevReq+0x26>
 8011c2a:	2b40      	cmp	r3, #64	; 0x40
 8011c2c:	d857      	bhi.n	8011cde <USBD_StdDevReq+0xce>
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00f      	beq.n	8011c52 <USBD_StdDevReq+0x42>
 8011c32:	2b20      	cmp	r3, #32
 8011c34:	d153      	bne.n	8011cde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	32ae      	adds	r2, #174	; 0xae
 8011c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c44:	689b      	ldr	r3, [r3, #8]
 8011c46:	6839      	ldr	r1, [r7, #0]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	4798      	blx	r3
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c50:	e04a      	b.n	8011ce8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	785b      	ldrb	r3, [r3, #1]
 8011c56:	2b09      	cmp	r3, #9
 8011c58:	d83b      	bhi.n	8011cd2 <USBD_StdDevReq+0xc2>
 8011c5a:	a201      	add	r2, pc, #4	; (adr r2, 8011c60 <USBD_StdDevReq+0x50>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011cb5 	.word	0x08011cb5
 8011c64:	08011cc9 	.word	0x08011cc9
 8011c68:	08011cd3 	.word	0x08011cd3
 8011c6c:	08011cbf 	.word	0x08011cbf
 8011c70:	08011cd3 	.word	0x08011cd3
 8011c74:	08011c93 	.word	0x08011c93
 8011c78:	08011c89 	.word	0x08011c89
 8011c7c:	08011cd3 	.word	0x08011cd3
 8011c80:	08011cab 	.word	0x08011cab
 8011c84:	08011c9d 	.word	0x08011c9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fa3c 	bl	8012108 <USBD_GetDescriptor>
          break;
 8011c90:	e024      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fba1 	bl	80123dc <USBD_SetAddress>
          break;
 8011c9a:	e01f      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011c9c:	6839      	ldr	r1, [r7, #0]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 fbe0 	bl	8012464 <USBD_SetConfig>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	73fb      	strb	r3, [r7, #15]
          break;
 8011ca8:	e018      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011caa:	6839      	ldr	r1, [r7, #0]
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f000 fc83 	bl	80125b8 <USBD_GetConfig>
          break;
 8011cb2:	e013      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fcb4 	bl	8012624 <USBD_GetStatus>
          break;
 8011cbc:	e00e      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011cbe:	6839      	ldr	r1, [r7, #0]
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fce3 	bl	801268c <USBD_SetFeature>
          break;
 8011cc6:	e009      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011cc8:	6839      	ldr	r1, [r7, #0]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 fd07 	bl	80126de <USBD_ClrFeature>
          break;
 8011cd0:	e004      	b.n	8011cdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011cd2:	6839      	ldr	r1, [r7, #0]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 fd5e 	bl	8012796 <USBD_CtlError>
          break;
 8011cda:	bf00      	nop
      }
      break;
 8011cdc:	e004      	b.n	8011ce8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fd58 	bl	8012796 <USBD_CtlError>
      break;
 8011ce6:	bf00      	nop
  }

  return ret;
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop

08011cf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d0a:	2b40      	cmp	r3, #64	; 0x40
 8011d0c:	d005      	beq.n	8011d1a <USBD_StdItfReq+0x26>
 8011d0e:	2b40      	cmp	r3, #64	; 0x40
 8011d10:	d852      	bhi.n	8011db8 <USBD_StdItfReq+0xc4>
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <USBD_StdItfReq+0x26>
 8011d16:	2b20      	cmp	r3, #32
 8011d18:	d14e      	bne.n	8011db8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	3b01      	subs	r3, #1
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d840      	bhi.n	8011daa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	889b      	ldrh	r3, [r3, #4]
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d836      	bhi.n	8011da0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	889b      	ldrh	r3, [r3, #4]
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	4619      	mov	r1, r3
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f7ff fed9 	bl	8011af2 <USBD_CoreFindIF>
 8011d40:	4603      	mov	r3, r0
 8011d42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d44:	7bbb      	ldrb	r3, [r7, #14]
 8011d46:	2bff      	cmp	r3, #255	; 0xff
 8011d48:	d01d      	beq.n	8011d86 <USBD_StdItfReq+0x92>
 8011d4a:	7bbb      	ldrb	r3, [r7, #14]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d11a      	bne.n	8011d86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011d50:	7bba      	ldrb	r2, [r7, #14]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	32ae      	adds	r2, #174	; 0xae
 8011d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d00f      	beq.n	8011d80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011d60:	7bba      	ldrb	r2, [r7, #14]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d68:	7bba      	ldrb	r2, [r7, #14]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	32ae      	adds	r2, #174	; 0xae
 8011d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	4798      	blx	r3
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011d7e:	e004      	b.n	8011d8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011d80:	2303      	movs	r3, #3
 8011d82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011d84:	e001      	b.n	8011d8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011d86:	2303      	movs	r3, #3
 8011d88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	88db      	ldrh	r3, [r3, #6]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d110      	bne.n	8011db4 <USBD_StdItfReq+0xc0>
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10d      	bne.n	8011db4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fdc7 	bl	801292c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011d9e:	e009      	b.n	8011db4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 fcf7 	bl	8012796 <USBD_CtlError>
          break;
 8011da8:	e004      	b.n	8011db4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f000 fcf2 	bl	8012796 <USBD_CtlError>
          break;
 8011db2:	e000      	b.n	8011db6 <USBD_StdItfReq+0xc2>
          break;
 8011db4:	bf00      	nop
      }
      break;
 8011db6:	e004      	b.n	8011dc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 fceb 	bl	8012796 <USBD_CtlError>
      break;
 8011dc0:	bf00      	nop
  }

  return ret;
 8011dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	889b      	ldrh	r3, [r3, #4]
 8011dde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011de8:	2b40      	cmp	r3, #64	; 0x40
 8011dea:	d007      	beq.n	8011dfc <USBD_StdEPReq+0x30>
 8011dec:	2b40      	cmp	r3, #64	; 0x40
 8011dee:	f200 817f 	bhi.w	80120f0 <USBD_StdEPReq+0x324>
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d02a      	beq.n	8011e4c <USBD_StdEPReq+0x80>
 8011df6:	2b20      	cmp	r3, #32
 8011df8:	f040 817a 	bne.w	80120f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011dfc:	7bbb      	ldrb	r3, [r7, #14]
 8011dfe:	4619      	mov	r1, r3
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7ff fe83 	bl	8011b0c <USBD_CoreFindEP>
 8011e06:	4603      	mov	r3, r0
 8011e08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e0a:	7b7b      	ldrb	r3, [r7, #13]
 8011e0c:	2bff      	cmp	r3, #255	; 0xff
 8011e0e:	f000 8174 	beq.w	80120fa <USBD_StdEPReq+0x32e>
 8011e12:	7b7b      	ldrb	r3, [r7, #13]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f040 8170 	bne.w	80120fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011e1a:	7b7a      	ldrb	r2, [r7, #13]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011e22:	7b7a      	ldrb	r2, [r7, #13]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	32ae      	adds	r2, #174	; 0xae
 8011e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 8163 	beq.w	80120fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011e34:	7b7a      	ldrb	r2, [r7, #13]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	32ae      	adds	r2, #174	; 0xae
 8011e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	4798      	blx	r3
 8011e46:	4603      	mov	r3, r0
 8011e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011e4a:	e156      	b.n	80120fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	785b      	ldrb	r3, [r3, #1]
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d008      	beq.n	8011e66 <USBD_StdEPReq+0x9a>
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	f300 8145 	bgt.w	80120e4 <USBD_StdEPReq+0x318>
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f000 809b 	beq.w	8011f96 <USBD_StdEPReq+0x1ca>
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d03c      	beq.n	8011ede <USBD_StdEPReq+0x112>
 8011e64:	e13e      	b.n	80120e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	d002      	beq.n	8011e78 <USBD_StdEPReq+0xac>
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	d016      	beq.n	8011ea4 <USBD_StdEPReq+0xd8>
 8011e76:	e02c      	b.n	8011ed2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e78:	7bbb      	ldrb	r3, [r7, #14]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00d      	beq.n	8011e9a <USBD_StdEPReq+0xce>
 8011e7e:	7bbb      	ldrb	r3, [r7, #14]
 8011e80:	2b80      	cmp	r3, #128	; 0x80
 8011e82:	d00a      	beq.n	8011e9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e84:	7bbb      	ldrb	r3, [r7, #14]
 8011e86:	4619      	mov	r1, r3
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f001 f967 	bl	801315c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e8e:	2180      	movs	r1, #128	; 0x80
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f001 f963 	bl	801315c <USBD_LL_StallEP>
 8011e96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011e98:	e020      	b.n	8011edc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fc7a 	bl	8012796 <USBD_CtlError>
              break;
 8011ea2:	e01b      	b.n	8011edc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	885b      	ldrh	r3, [r3, #2]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10e      	bne.n	8011eca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011eac:	7bbb      	ldrb	r3, [r7, #14]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00b      	beq.n	8011eca <USBD_StdEPReq+0xfe>
 8011eb2:	7bbb      	ldrb	r3, [r7, #14]
 8011eb4:	2b80      	cmp	r3, #128	; 0x80
 8011eb6:	d008      	beq.n	8011eca <USBD_StdEPReq+0xfe>
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	88db      	ldrh	r3, [r3, #6]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d104      	bne.n	8011eca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ec0:	7bbb      	ldrb	r3, [r7, #14]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f001 f949 	bl	801315c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 fd2e 	bl	801292c <USBD_CtlSendStatus>

              break;
 8011ed0:	e004      	b.n	8011edc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011ed2:	6839      	ldr	r1, [r7, #0]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 fc5e 	bl	8012796 <USBD_CtlError>
              break;
 8011eda:	bf00      	nop
          }
          break;
 8011edc:	e107      	b.n	80120ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d002      	beq.n	8011ef0 <USBD_StdEPReq+0x124>
 8011eea:	2b03      	cmp	r3, #3
 8011eec:	d016      	beq.n	8011f1c <USBD_StdEPReq+0x150>
 8011eee:	e04b      	b.n	8011f88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ef0:	7bbb      	ldrb	r3, [r7, #14]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00d      	beq.n	8011f12 <USBD_StdEPReq+0x146>
 8011ef6:	7bbb      	ldrb	r3, [r7, #14]
 8011ef8:	2b80      	cmp	r3, #128	; 0x80
 8011efa:	d00a      	beq.n	8011f12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011efc:	7bbb      	ldrb	r3, [r7, #14]
 8011efe:	4619      	mov	r1, r3
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f001 f92b 	bl	801315c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f06:	2180      	movs	r1, #128	; 0x80
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f001 f927 	bl	801315c <USBD_LL_StallEP>
 8011f0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f10:	e040      	b.n	8011f94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fc3e 	bl	8012796 <USBD_CtlError>
              break;
 8011f1a:	e03b      	b.n	8011f94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	885b      	ldrh	r3, [r3, #2]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d136      	bne.n	8011f92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f24:	7bbb      	ldrb	r3, [r7, #14]
 8011f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d004      	beq.n	8011f38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f2e:	7bbb      	ldrb	r3, [r7, #14]
 8011f30:	4619      	mov	r1, r3
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f001 f931 	bl	801319a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 fcf7 	bl	801292c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f3e:	7bbb      	ldrb	r3, [r7, #14]
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff fde2 	bl	8011b0c <USBD_CoreFindEP>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f4c:	7b7b      	ldrb	r3, [r7, #13]
 8011f4e:	2bff      	cmp	r3, #255	; 0xff
 8011f50:	d01f      	beq.n	8011f92 <USBD_StdEPReq+0x1c6>
 8011f52:	7b7b      	ldrb	r3, [r7, #13]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d11c      	bne.n	8011f92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011f58:	7b7a      	ldrb	r2, [r7, #13]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011f60:	7b7a      	ldrb	r2, [r7, #13]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	32ae      	adds	r2, #174	; 0xae
 8011f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d010      	beq.n	8011f92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f70:	7b7a      	ldrb	r2, [r7, #13]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	32ae      	adds	r2, #174	; 0xae
 8011f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	4798      	blx	r3
 8011f82:	4603      	mov	r3, r0
 8011f84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011f86:	e004      	b.n	8011f92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011f88:	6839      	ldr	r1, [r7, #0]
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 fc03 	bl	8012796 <USBD_CtlError>
              break;
 8011f90:	e000      	b.n	8011f94 <USBD_StdEPReq+0x1c8>
              break;
 8011f92:	bf00      	nop
          }
          break;
 8011f94:	e0ab      	b.n	80120ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d002      	beq.n	8011fa8 <USBD_StdEPReq+0x1dc>
 8011fa2:	2b03      	cmp	r3, #3
 8011fa4:	d032      	beq.n	801200c <USBD_StdEPReq+0x240>
 8011fa6:	e097      	b.n	80120d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d007      	beq.n	8011fbe <USBD_StdEPReq+0x1f2>
 8011fae:	7bbb      	ldrb	r3, [r7, #14]
 8011fb0:	2b80      	cmp	r3, #128	; 0x80
 8011fb2:	d004      	beq.n	8011fbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011fb4:	6839      	ldr	r1, [r7, #0]
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fbed 	bl	8012796 <USBD_CtlError>
                break;
 8011fbc:	e091      	b.n	80120e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	da0b      	bge.n	8011fde <USBD_StdEPReq+0x212>
 8011fc6:	7bbb      	ldrb	r3, [r7, #14]
 8011fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fcc:	4613      	mov	r3, r2
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	3310      	adds	r3, #16
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	4413      	add	r3, r2
 8011fda:	3304      	adds	r3, #4
 8011fdc:	e00b      	b.n	8011ff6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011fde:	7bbb      	ldrb	r3, [r7, #14]
 8011fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	4413      	add	r3, r2
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	4413      	add	r3, r2
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2202      	movs	r2, #2
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 fc37 	bl	8012878 <USBD_CtlSendData>
              break;
 801200a:	e06a      	b.n	80120e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801200c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012010:	2b00      	cmp	r3, #0
 8012012:	da11      	bge.n	8012038 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012014:	7bbb      	ldrb	r3, [r7, #14]
 8012016:	f003 020f 	and.w	r2, r3, #15
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	4613      	mov	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	4413      	add	r3, r2
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	440b      	add	r3, r1
 8012026:	3324      	adds	r3, #36	; 0x24
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d117      	bne.n	801205e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 fbb0 	bl	8012796 <USBD_CtlError>
                  break;
 8012036:	e054      	b.n	80120e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012038:	7bbb      	ldrb	r3, [r7, #14]
 801203a:	f003 020f 	and.w	r2, r3, #15
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	4613      	mov	r3, r2
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	440b      	add	r3, r1
 801204a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d104      	bne.n	801205e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012054:	6839      	ldr	r1, [r7, #0]
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 fb9d 	bl	8012796 <USBD_CtlError>
                  break;
 801205c:	e041      	b.n	80120e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801205e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012062:	2b00      	cmp	r3, #0
 8012064:	da0b      	bge.n	801207e <USBD_StdEPReq+0x2b2>
 8012066:	7bbb      	ldrb	r3, [r7, #14]
 8012068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801206c:	4613      	mov	r3, r2
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	4413      	add	r3, r2
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	3310      	adds	r3, #16
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	4413      	add	r3, r2
 801207a:	3304      	adds	r3, #4
 801207c:	e00b      	b.n	8012096 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801207e:	7bbb      	ldrb	r3, [r7, #14]
 8012080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012084:	4613      	mov	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	4413      	add	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	4413      	add	r3, r2
 8012094:	3304      	adds	r3, #4
 8012096:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012098:	7bbb      	ldrb	r3, [r7, #14]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <USBD_StdEPReq+0x2d8>
 801209e:	7bbb      	ldrb	r3, [r7, #14]
 80120a0:	2b80      	cmp	r3, #128	; 0x80
 80120a2:	d103      	bne.n	80120ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	2200      	movs	r2, #0
 80120a8:	601a      	str	r2, [r3, #0]
 80120aa:	e00e      	b.n	80120ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120ac:	7bbb      	ldrb	r3, [r7, #14]
 80120ae:	4619      	mov	r1, r3
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f001 f891 	bl	80131d8 <USBD_LL_IsStallEP>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d003      	beq.n	80120c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2201      	movs	r2, #1
 80120c0:	601a      	str	r2, [r3, #0]
 80120c2:	e002      	b.n	80120ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2202      	movs	r2, #2
 80120ce:	4619      	mov	r1, r3
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 fbd1 	bl	8012878 <USBD_CtlSendData>
              break;
 80120d6:	e004      	b.n	80120e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 fb5b 	bl	8012796 <USBD_CtlError>
              break;
 80120e0:	bf00      	nop
          }
          break;
 80120e2:	e004      	b.n	80120ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 fb55 	bl	8012796 <USBD_CtlError>
          break;
 80120ec:	bf00      	nop
      }
      break;
 80120ee:	e005      	b.n	80120fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fb4f 	bl	8012796 <USBD_CtlError>
      break;
 80120f8:	e000      	b.n	80120fc <USBD_StdEPReq+0x330>
      break;
 80120fa:	bf00      	nop
  }

  return ret;
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
	...

08012108 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012112:	2300      	movs	r3, #0
 8012114:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012116:	2300      	movs	r3, #0
 8012118:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801211a:	2300      	movs	r3, #0
 801211c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	885b      	ldrh	r3, [r3, #2]
 8012122:	0a1b      	lsrs	r3, r3, #8
 8012124:	b29b      	uxth	r3, r3
 8012126:	3b01      	subs	r3, #1
 8012128:	2b06      	cmp	r3, #6
 801212a:	f200 8128 	bhi.w	801237e <USBD_GetDescriptor+0x276>
 801212e:	a201      	add	r2, pc, #4	; (adr r2, 8012134 <USBD_GetDescriptor+0x2c>)
 8012130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012134:	08012151 	.word	0x08012151
 8012138:	08012169 	.word	0x08012169
 801213c:	080121a9 	.word	0x080121a9
 8012140:	0801237f 	.word	0x0801237f
 8012144:	0801237f 	.word	0x0801237f
 8012148:	0801231f 	.word	0x0801231f
 801214c:	0801234b 	.word	0x0801234b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	7c12      	ldrb	r2, [r2, #16]
 801215c:	f107 0108 	add.w	r1, r7, #8
 8012160:	4610      	mov	r0, r2
 8012162:	4798      	blx	r3
 8012164:	60f8      	str	r0, [r7, #12]
      break;
 8012166:	e112      	b.n	801238e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	7c1b      	ldrb	r3, [r3, #16]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d10d      	bne.n	801218c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012178:	f107 0208 	add.w	r2, r7, #8
 801217c:	4610      	mov	r0, r2
 801217e:	4798      	blx	r3
 8012180:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3301      	adds	r3, #1
 8012186:	2202      	movs	r2, #2
 8012188:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801218a:	e100      	b.n	801238e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012194:	f107 0208 	add.w	r2, r7, #8
 8012198:	4610      	mov	r0, r2
 801219a:	4798      	blx	r3
 801219c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	3301      	adds	r3, #1
 80121a2:	2202      	movs	r2, #2
 80121a4:	701a      	strb	r2, [r3, #0]
      break;
 80121a6:	e0f2      	b.n	801238e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	885b      	ldrh	r3, [r3, #2]
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b05      	cmp	r3, #5
 80121b0:	f200 80ac 	bhi.w	801230c <USBD_GetDescriptor+0x204>
 80121b4:	a201      	add	r2, pc, #4	; (adr r2, 80121bc <USBD_GetDescriptor+0xb4>)
 80121b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ba:	bf00      	nop
 80121bc:	080121d5 	.word	0x080121d5
 80121c0:	08012209 	.word	0x08012209
 80121c4:	0801223d 	.word	0x0801223d
 80121c8:	08012271 	.word	0x08012271
 80121cc:	080122a5 	.word	0x080122a5
 80121d0:	080122d9 	.word	0x080122d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00b      	beq.n	80121f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	7c12      	ldrb	r2, [r2, #16]
 80121ec:	f107 0108 	add.w	r1, r7, #8
 80121f0:	4610      	mov	r0, r2
 80121f2:	4798      	blx	r3
 80121f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121f6:	e091      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 facb 	bl	8012796 <USBD_CtlError>
            err++;
 8012200:	7afb      	ldrb	r3, [r7, #11]
 8012202:	3301      	adds	r3, #1
 8012204:	72fb      	strb	r3, [r7, #11]
          break;
 8012206:	e089      	b.n	801231c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00b      	beq.n	801222c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801221a:	689b      	ldr	r3, [r3, #8]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	7c12      	ldrb	r2, [r2, #16]
 8012220:	f107 0108 	add.w	r1, r7, #8
 8012224:	4610      	mov	r0, r2
 8012226:	4798      	blx	r3
 8012228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801222a:	e077      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 fab1 	bl	8012796 <USBD_CtlError>
            err++;
 8012234:	7afb      	ldrb	r3, [r7, #11]
 8012236:	3301      	adds	r3, #1
 8012238:	72fb      	strb	r3, [r7, #11]
          break;
 801223a:	e06f      	b.n	801231c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d00b      	beq.n	8012260 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	687a      	ldr	r2, [r7, #4]
 8012252:	7c12      	ldrb	r2, [r2, #16]
 8012254:	f107 0108 	add.w	r1, r7, #8
 8012258:	4610      	mov	r0, r2
 801225a:	4798      	blx	r3
 801225c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801225e:	e05d      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012260:	6839      	ldr	r1, [r7, #0]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fa97 	bl	8012796 <USBD_CtlError>
            err++;
 8012268:	7afb      	ldrb	r3, [r7, #11]
 801226a:	3301      	adds	r3, #1
 801226c:	72fb      	strb	r3, [r7, #11]
          break;
 801226e:	e055      	b.n	801231c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012276:	691b      	ldr	r3, [r3, #16]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00b      	beq.n	8012294 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	7c12      	ldrb	r2, [r2, #16]
 8012288:	f107 0108 	add.w	r1, r7, #8
 801228c:	4610      	mov	r0, r2
 801228e:	4798      	blx	r3
 8012290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012292:	e043      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012294:	6839      	ldr	r1, [r7, #0]
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f000 fa7d 	bl	8012796 <USBD_CtlError>
            err++;
 801229c:	7afb      	ldrb	r3, [r7, #11]
 801229e:	3301      	adds	r3, #1
 80122a0:	72fb      	strb	r3, [r7, #11]
          break;
 80122a2:	e03b      	b.n	801231c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122aa:	695b      	ldr	r3, [r3, #20]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122b6:	695b      	ldr	r3, [r3, #20]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	7c12      	ldrb	r2, [r2, #16]
 80122bc:	f107 0108 	add.w	r1, r7, #8
 80122c0:	4610      	mov	r0, r2
 80122c2:	4798      	blx	r3
 80122c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122c6:	e029      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fa63 	bl	8012796 <USBD_CtlError>
            err++;
 80122d0:	7afb      	ldrb	r3, [r7, #11]
 80122d2:	3301      	adds	r3, #1
 80122d4:	72fb      	strb	r3, [r7, #11]
          break;
 80122d6:	e021      	b.n	801231c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122de:	699b      	ldr	r3, [r3, #24]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00b      	beq.n	80122fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ea:	699b      	ldr	r3, [r3, #24]
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	7c12      	ldrb	r2, [r2, #16]
 80122f0:	f107 0108 	add.w	r1, r7, #8
 80122f4:	4610      	mov	r0, r2
 80122f6:	4798      	blx	r3
 80122f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122fa:	e00f      	b.n	801231c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fa49 	bl	8012796 <USBD_CtlError>
            err++;
 8012304:	7afb      	ldrb	r3, [r7, #11]
 8012306:	3301      	adds	r3, #1
 8012308:	72fb      	strb	r3, [r7, #11]
          break;
 801230a:	e007      	b.n	801231c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801230c:	6839      	ldr	r1, [r7, #0]
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 fa41 	bl	8012796 <USBD_CtlError>
          err++;
 8012314:	7afb      	ldrb	r3, [r7, #11]
 8012316:	3301      	adds	r3, #1
 8012318:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801231a:	bf00      	nop
      }
      break;
 801231c:	e037      	b.n	801238e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	7c1b      	ldrb	r3, [r3, #16]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d109      	bne.n	801233a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801232e:	f107 0208 	add.w	r2, r7, #8
 8012332:	4610      	mov	r0, r2
 8012334:	4798      	blx	r3
 8012336:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012338:	e029      	b.n	801238e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fa2a 	bl	8012796 <USBD_CtlError>
        err++;
 8012342:	7afb      	ldrb	r3, [r7, #11]
 8012344:	3301      	adds	r3, #1
 8012346:	72fb      	strb	r3, [r7, #11]
      break;
 8012348:	e021      	b.n	801238e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7c1b      	ldrb	r3, [r3, #16]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d10d      	bne.n	801236e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801235a:	f107 0208 	add.w	r2, r7, #8
 801235e:	4610      	mov	r0, r2
 8012360:	4798      	blx	r3
 8012362:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3301      	adds	r3, #1
 8012368:	2207      	movs	r2, #7
 801236a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801236c:	e00f      	b.n	801238e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801236e:	6839      	ldr	r1, [r7, #0]
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 fa10 	bl	8012796 <USBD_CtlError>
        err++;
 8012376:	7afb      	ldrb	r3, [r7, #11]
 8012378:	3301      	adds	r3, #1
 801237a:	72fb      	strb	r3, [r7, #11]
      break;
 801237c:	e007      	b.n	801238e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801237e:	6839      	ldr	r1, [r7, #0]
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 fa08 	bl	8012796 <USBD_CtlError>
      err++;
 8012386:	7afb      	ldrb	r3, [r7, #11]
 8012388:	3301      	adds	r3, #1
 801238a:	72fb      	strb	r3, [r7, #11]
      break;
 801238c:	bf00      	nop
  }

  if (err != 0U)
 801238e:	7afb      	ldrb	r3, [r7, #11]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d11e      	bne.n	80123d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	88db      	ldrh	r3, [r3, #6]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d016      	beq.n	80123ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801239c:	893b      	ldrh	r3, [r7, #8]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d00e      	beq.n	80123c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	88da      	ldrh	r2, [r3, #6]
 80123a6:	893b      	ldrh	r3, [r7, #8]
 80123a8:	4293      	cmp	r3, r2
 80123aa:	bf28      	it	cs
 80123ac:	4613      	movcs	r3, r2
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80123b2:	893b      	ldrh	r3, [r7, #8]
 80123b4:	461a      	mov	r2, r3
 80123b6:	68f9      	ldr	r1, [r7, #12]
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 fa5d 	bl	8012878 <USBD_CtlSendData>
 80123be:	e009      	b.n	80123d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 f9e7 	bl	8012796 <USBD_CtlError>
 80123c8:	e004      	b.n	80123d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 faae 	bl	801292c <USBD_CtlSendStatus>
 80123d0:	e000      	b.n	80123d4 <USBD_GetDescriptor+0x2cc>
    return;
 80123d2:	bf00      	nop
  }
}
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop

080123dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	889b      	ldrh	r3, [r3, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d131      	bne.n	8012452 <USBD_SetAddress+0x76>
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	88db      	ldrh	r3, [r3, #6]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d12d      	bne.n	8012452 <USBD_SetAddress+0x76>
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	885b      	ldrh	r3, [r3, #2]
 80123fa:	2b7f      	cmp	r3, #127	; 0x7f
 80123fc:	d829      	bhi.n	8012452 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	885b      	ldrh	r3, [r3, #2]
 8012402:	b2db      	uxtb	r3, r3
 8012404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012410:	b2db      	uxtb	r3, r3
 8012412:	2b03      	cmp	r3, #3
 8012414:	d104      	bne.n	8012420 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012416:	6839      	ldr	r1, [r7, #0]
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 f9bc 	bl	8012796 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801241e:	e01d      	b.n	801245c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	7bfa      	ldrb	r2, [r7, #15]
 8012424:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012428:	7bfb      	ldrb	r3, [r7, #15]
 801242a:	4619      	mov	r1, r3
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 feff 	bl	8013230 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 fa7a 	bl	801292c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012438:	7bfb      	ldrb	r3, [r7, #15]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d004      	beq.n	8012448 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2202      	movs	r2, #2
 8012442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012446:	e009      	b.n	801245c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012450:	e004      	b.n	801245c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012452:	6839      	ldr	r1, [r7, #0]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 f99e 	bl	8012796 <USBD_CtlError>
  }
}
 801245a:	bf00      	nop
 801245c:	bf00      	nop
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801246e:	2300      	movs	r3, #0
 8012470:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	885b      	ldrh	r3, [r3, #2]
 8012476:	b2da      	uxtb	r2, r3
 8012478:	4b4e      	ldr	r3, [pc, #312]	; (80125b4 <USBD_SetConfig+0x150>)
 801247a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801247c:	4b4d      	ldr	r3, [pc, #308]	; (80125b4 <USBD_SetConfig+0x150>)
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	2b01      	cmp	r3, #1
 8012482:	d905      	bls.n	8012490 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 f985 	bl	8012796 <USBD_CtlError>
    return USBD_FAIL;
 801248c:	2303      	movs	r3, #3
 801248e:	e08c      	b.n	80125aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012496:	b2db      	uxtb	r3, r3
 8012498:	2b02      	cmp	r3, #2
 801249a:	d002      	beq.n	80124a2 <USBD_SetConfig+0x3e>
 801249c:	2b03      	cmp	r3, #3
 801249e:	d029      	beq.n	80124f4 <USBD_SetConfig+0x90>
 80124a0:	e075      	b.n	801258e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80124a2:	4b44      	ldr	r3, [pc, #272]	; (80125b4 <USBD_SetConfig+0x150>)
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d020      	beq.n	80124ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80124aa:	4b42      	ldr	r3, [pc, #264]	; (80125b4 <USBD_SetConfig+0x150>)
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	461a      	mov	r2, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80124b4:	4b3f      	ldr	r3, [pc, #252]	; (80125b4 <USBD_SetConfig+0x150>)
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	4619      	mov	r1, r3
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7fe ffe1 	bl	8011482 <USBD_SetClassConfig>
 80124c0:	4603      	mov	r3, r0
 80124c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80124c4:	7bfb      	ldrb	r3, [r7, #15]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d008      	beq.n	80124dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 f962 	bl	8012796 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2202      	movs	r2, #2
 80124d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80124da:	e065      	b.n	80125a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 fa25 	bl	801292c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2203      	movs	r2, #3
 80124e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80124ea:	e05d      	b.n	80125a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fa1d 	bl	801292c <USBD_CtlSendStatus>
      break;
 80124f2:	e059      	b.n	80125a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80124f4:	4b2f      	ldr	r3, [pc, #188]	; (80125b4 <USBD_SetConfig+0x150>)
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d112      	bne.n	8012522 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2202      	movs	r2, #2
 8012500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012504:	4b2b      	ldr	r3, [pc, #172]	; (80125b4 <USBD_SetConfig+0x150>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	461a      	mov	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801250e:	4b29      	ldr	r3, [pc, #164]	; (80125b4 <USBD_SetConfig+0x150>)
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7fe ffd0 	bl	80114ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 fa06 	bl	801292c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012520:	e042      	b.n	80125a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012522:	4b24      	ldr	r3, [pc, #144]	; (80125b4 <USBD_SetConfig+0x150>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	461a      	mov	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d02a      	beq.n	8012586 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	b2db      	uxtb	r3, r3
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7fe ffbe 	bl	80114ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801253e:	4b1d      	ldr	r3, [pc, #116]	; (80125b4 <USBD_SetConfig+0x150>)
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	461a      	mov	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012548:	4b1a      	ldr	r3, [pc, #104]	; (80125b4 <USBD_SetConfig+0x150>)
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7fe ff97 	bl	8011482 <USBD_SetClassConfig>
 8012554:	4603      	mov	r3, r0
 8012556:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012558:	7bfb      	ldrb	r3, [r7, #15]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00f      	beq.n	801257e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f918 	bl	8012796 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	b2db      	uxtb	r3, r3
 801256c:	4619      	mov	r1, r3
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f7fe ffa3 	bl	80114ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2202      	movs	r2, #2
 8012578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801257c:	e014      	b.n	80125a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f000 f9d4 	bl	801292c <USBD_CtlSendStatus>
      break;
 8012584:	e010      	b.n	80125a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 f9d0 	bl	801292c <USBD_CtlSendStatus>
      break;
 801258c:	e00c      	b.n	80125a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 f900 	bl	8012796 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012596:	4b07      	ldr	r3, [pc, #28]	; (80125b4 <USBD_SetConfig+0x150>)
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	4619      	mov	r1, r3
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7fe ff8c 	bl	80114ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80125a2:	2303      	movs	r3, #3
 80125a4:	73fb      	strb	r3, [r7, #15]
      break;
 80125a6:	bf00      	nop
  }

  return ret;
 80125a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3710      	adds	r7, #16
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	24001330 	.word	0x24001330

080125b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	88db      	ldrh	r3, [r3, #6]
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d004      	beq.n	80125d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f8e2 	bl	8012796 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80125d2:	e023      	b.n	801261c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	2b02      	cmp	r3, #2
 80125de:	dc02      	bgt.n	80125e6 <USBD_GetConfig+0x2e>
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dc03      	bgt.n	80125ec <USBD_GetConfig+0x34>
 80125e4:	e015      	b.n	8012612 <USBD_GetConfig+0x5a>
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d00b      	beq.n	8012602 <USBD_GetConfig+0x4a>
 80125ea:	e012      	b.n	8012612 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3308      	adds	r3, #8
 80125f6:	2201      	movs	r2, #1
 80125f8:	4619      	mov	r1, r3
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 f93c 	bl	8012878 <USBD_CtlSendData>
        break;
 8012600:	e00c      	b.n	801261c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	3304      	adds	r3, #4
 8012606:	2201      	movs	r2, #1
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f934 	bl	8012878 <USBD_CtlSendData>
        break;
 8012610:	e004      	b.n	801261c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012612:	6839      	ldr	r1, [r7, #0]
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f000 f8be 	bl	8012796 <USBD_CtlError>
        break;
 801261a:	bf00      	nop
}
 801261c:	bf00      	nop
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012634:	b2db      	uxtb	r3, r3
 8012636:	3b01      	subs	r3, #1
 8012638:	2b02      	cmp	r3, #2
 801263a:	d81e      	bhi.n	801267a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	88db      	ldrh	r3, [r3, #6]
 8012640:	2b02      	cmp	r3, #2
 8012642:	d004      	beq.n	801264e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 f8a5 	bl	8012796 <USBD_CtlError>
        break;
 801264c:	e01a      	b.n	8012684 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2201      	movs	r2, #1
 8012652:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801265a:	2b00      	cmp	r3, #0
 801265c:	d005      	beq.n	801266a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	f043 0202 	orr.w	r2, r3, #2
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	330c      	adds	r3, #12
 801266e:	2202      	movs	r2, #2
 8012670:	4619      	mov	r1, r3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 f900 	bl	8012878 <USBD_CtlSendData>
      break;
 8012678:	e004      	b.n	8012684 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f000 f88a 	bl	8012796 <USBD_CtlError>
      break;
 8012682:	bf00      	nop
  }
}
 8012684:	bf00      	nop
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	885b      	ldrh	r3, [r3, #2]
 801269a:	2b01      	cmp	r3, #1
 801269c:	d107      	bne.n	80126ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2201      	movs	r2, #1
 80126a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 f940 	bl	801292c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80126ac:	e013      	b.n	80126d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	885b      	ldrh	r3, [r3, #2]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d10b      	bne.n	80126ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	889b      	ldrh	r3, [r3, #4]
 80126ba:	0a1b      	lsrs	r3, r3, #8
 80126bc:	b29b      	uxth	r3, r3
 80126be:	b2da      	uxtb	r2, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 f930 	bl	801292c <USBD_CtlSendStatus>
}
 80126cc:	e003      	b.n	80126d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f860 	bl	8012796 <USBD_CtlError>
}
 80126d6:	bf00      	nop
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
 80126e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	3b01      	subs	r3, #1
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d80b      	bhi.n	801270e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d10c      	bne.n	8012718 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2200      	movs	r2, #0
 8012702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 f910 	bl	801292c <USBD_CtlSendStatus>
      }
      break;
 801270c:	e004      	b.n	8012718 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f840 	bl	8012796 <USBD_CtlError>
      break;
 8012716:	e000      	b.n	801271a <USBD_ClrFeature+0x3c>
      break;
 8012718:	bf00      	nop
  }
}
 801271a:	bf00      	nop
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012722:	b580      	push	{r7, lr}
 8012724:	b084      	sub	sp, #16
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
 801272a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	781a      	ldrb	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	3301      	adds	r3, #1
 801273c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	781a      	ldrb	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	3301      	adds	r3, #1
 801274a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f7ff fa41 	bl	8011bd4 <SWAPBYTE>
 8012752:	4603      	mov	r3, r0
 8012754:	461a      	mov	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3301      	adds	r3, #1
 801275e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	3301      	adds	r3, #1
 8012764:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f7ff fa34 	bl	8011bd4 <SWAPBYTE>
 801276c:	4603      	mov	r3, r0
 801276e:	461a      	mov	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3301      	adds	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	3301      	adds	r3, #1
 801277e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012780:	68f8      	ldr	r0, [r7, #12]
 8012782:	f7ff fa27 	bl	8011bd4 <SWAPBYTE>
 8012786:	4603      	mov	r3, r0
 8012788:	461a      	mov	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	80da      	strh	r2, [r3, #6]
}
 801278e:	bf00      	nop
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b082      	sub	sp, #8
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80127a0:	2180      	movs	r1, #128	; 0x80
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 fcda 	bl	801315c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80127a8:	2100      	movs	r1, #0
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 fcd6 	bl	801315c <USBD_LL_StallEP>
}
 80127b0:	bf00      	nop
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80127c4:	2300      	movs	r3, #0
 80127c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d036      	beq.n	801283c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80127d2:	6938      	ldr	r0, [r7, #16]
 80127d4:	f000 f836 	bl	8012844 <USBD_GetLen>
 80127d8:	4603      	mov	r3, r0
 80127da:	3301      	adds	r3, #1
 80127dc:	b29b      	uxth	r3, r3
 80127de:	005b      	lsls	r3, r3, #1
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80127e6:	7dfb      	ldrb	r3, [r7, #23]
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	4413      	add	r3, r2
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	7812      	ldrb	r2, [r2, #0]
 80127f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80127f2:	7dfb      	ldrb	r3, [r7, #23]
 80127f4:	3301      	adds	r3, #1
 80127f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80127f8:	7dfb      	ldrb	r3, [r7, #23]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	4413      	add	r3, r2
 80127fe:	2203      	movs	r2, #3
 8012800:	701a      	strb	r2, [r3, #0]
  idx++;
 8012802:	7dfb      	ldrb	r3, [r7, #23]
 8012804:	3301      	adds	r3, #1
 8012806:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012808:	e013      	b.n	8012832 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801280a:	7dfb      	ldrb	r3, [r7, #23]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	4413      	add	r3, r2
 8012810:	693a      	ldr	r2, [r7, #16]
 8012812:	7812      	ldrb	r2, [r2, #0]
 8012814:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	3301      	adds	r3, #1
 801281a:	613b      	str	r3, [r7, #16]
    idx++;
 801281c:	7dfb      	ldrb	r3, [r7, #23]
 801281e:	3301      	adds	r3, #1
 8012820:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012822:	7dfb      	ldrb	r3, [r7, #23]
 8012824:	68ba      	ldr	r2, [r7, #8]
 8012826:	4413      	add	r3, r2
 8012828:	2200      	movs	r2, #0
 801282a:	701a      	strb	r2, [r3, #0]
    idx++;
 801282c:	7dfb      	ldrb	r3, [r7, #23]
 801282e:	3301      	adds	r3, #1
 8012830:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d1e7      	bne.n	801280a <USBD_GetString+0x52>
 801283a:	e000      	b.n	801283e <USBD_GetString+0x86>
    return;
 801283c:	bf00      	nop
  }
}
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801284c:	2300      	movs	r3, #0
 801284e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012854:	e005      	b.n	8012862 <USBD_GetLen+0x1e>
  {
    len++;
 8012856:	7bfb      	ldrb	r3, [r7, #15]
 8012858:	3301      	adds	r3, #1
 801285a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	3301      	adds	r3, #1
 8012860:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1f5      	bne.n	8012856 <USBD_GetLen+0x12>
  }

  return len;
 801286a:	7bfb      	ldrb	r3, [r7, #15]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3714      	adds	r7, #20
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2202      	movs	r2, #2
 8012888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	68ba      	ldr	r2, [r7, #8]
 801289c:	2100      	movs	r1, #0
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f000 fce5 	bl	801326e <USBD_LL_Transmit>

  return USBD_OK;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b084      	sub	sp, #16
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	60f8      	str	r0, [r7, #12]
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	2100      	movs	r1, #0
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f000 fcd4 	bl	801326e <USBD_LL_Transmit>

  return USBD_OK;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2203      	movs	r2, #3
 80128e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	68ba      	ldr	r2, [r7, #8]
 80128f8:	2100      	movs	r1, #0
 80128fa:	68f8      	ldr	r0, [r7, #12]
 80128fc:	f000 fcd8 	bl	80132b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012900:	2300      	movs	r3, #0
}
 8012902:	4618      	mov	r0, r3
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801290a:	b580      	push	{r7, lr}
 801290c:	b084      	sub	sp, #16
 801290e:	af00      	add	r7, sp, #0
 8012910:	60f8      	str	r0, [r7, #12]
 8012912:	60b9      	str	r1, [r7, #8]
 8012914:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	68ba      	ldr	r2, [r7, #8]
 801291a:	2100      	movs	r1, #0
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f000 fcc7 	bl	80132b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2204      	movs	r2, #4
 8012938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801293c:	2300      	movs	r3, #0
 801293e:	2200      	movs	r2, #0
 8012940:	2100      	movs	r1, #0
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 fc93 	bl	801326e <USBD_LL_Transmit>

  return USBD_OK;
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2205      	movs	r2, #5
 801295e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012962:	2300      	movs	r3, #0
 8012964:	2200      	movs	r2, #0
 8012966:	2100      	movs	r1, #0
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fca1 	bl	80132b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801296e:	2300      	movs	r3, #0
}
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801297c:	2201      	movs	r2, #1
 801297e:	4913      	ldr	r1, [pc, #76]	; (80129cc <MX_USB_DEVICE_Init+0x54>)
 8012980:	4813      	ldr	r0, [pc, #76]	; (80129d0 <MX_USB_DEVICE_Init+0x58>)
 8012982:	f7fe fd01 	bl	8011388 <USBD_Init>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801298c:	f7ef f992 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012990:	4910      	ldr	r1, [pc, #64]	; (80129d4 <MX_USB_DEVICE_Init+0x5c>)
 8012992:	480f      	ldr	r0, [pc, #60]	; (80129d0 <MX_USB_DEVICE_Init+0x58>)
 8012994:	f7fe fd28 	bl	80113e8 <USBD_RegisterClass>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801299e:	f7ef f989 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80129a2:	490d      	ldr	r1, [pc, #52]	; (80129d8 <MX_USB_DEVICE_Init+0x60>)
 80129a4:	480a      	ldr	r0, [pc, #40]	; (80129d0 <MX_USB_DEVICE_Init+0x58>)
 80129a6:	f7fe fc1f 	bl	80111e8 <USBD_CDC_RegisterInterface>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80129b0:	f7ef f980 	bl	8001cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80129b4:	4806      	ldr	r0, [pc, #24]	; (80129d0 <MX_USB_DEVICE_Init+0x58>)
 80129b6:	f7fe fd4d 	bl	8011454 <USBD_Start>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80129c0:	f7ef f978 	bl	8001cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80129c4:	f7f5 ff58 	bl	8008878 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80129c8:	bf00      	nop
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	240000b0 	.word	0x240000b0
 80129d0:	24001334 	.word	0x24001334
 80129d4:	2400001c 	.word	0x2400001c
 80129d8:	2400009c 	.word	0x2400009c

080129dc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80129e0:	2200      	movs	r2, #0
 80129e2:	4905      	ldr	r1, [pc, #20]	; (80129f8 <CDC_Init_HS+0x1c>)
 80129e4:	4805      	ldr	r0, [pc, #20]	; (80129fc <CDC_Init_HS+0x20>)
 80129e6:	f7fe fc19 	bl	801121c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80129ea:	4905      	ldr	r1, [pc, #20]	; (8012a00 <CDC_Init_HS+0x24>)
 80129ec:	4803      	ldr	r0, [pc, #12]	; (80129fc <CDC_Init_HS+0x20>)
 80129ee:	f7fe fc37 	bl	8011260 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80129f2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	24001e10 	.word	0x24001e10
 80129fc:	24001334 	.word	0x24001334
 8012a00:	24001610 	.word	0x24001610

08012a04 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012a04:	b480      	push	{r7}
 8012a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012a08:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	6039      	str	r1, [r7, #0]
 8012a1e:	71fb      	strb	r3, [r7, #7]
 8012a20:	4613      	mov	r3, r2
 8012a22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012a24:	79fb      	ldrb	r3, [r7, #7]
 8012a26:	2b23      	cmp	r3, #35	; 0x23
 8012a28:	d84a      	bhi.n	8012ac0 <CDC_Control_HS+0xac>
 8012a2a:	a201      	add	r2, pc, #4	; (adr r2, 8012a30 <CDC_Control_HS+0x1c>)
 8012a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a30:	08012ac1 	.word	0x08012ac1
 8012a34:	08012ac1 	.word	0x08012ac1
 8012a38:	08012ac1 	.word	0x08012ac1
 8012a3c:	08012ac1 	.word	0x08012ac1
 8012a40:	08012ac1 	.word	0x08012ac1
 8012a44:	08012ac1 	.word	0x08012ac1
 8012a48:	08012ac1 	.word	0x08012ac1
 8012a4c:	08012ac1 	.word	0x08012ac1
 8012a50:	08012ac1 	.word	0x08012ac1
 8012a54:	08012ac1 	.word	0x08012ac1
 8012a58:	08012ac1 	.word	0x08012ac1
 8012a5c:	08012ac1 	.word	0x08012ac1
 8012a60:	08012ac1 	.word	0x08012ac1
 8012a64:	08012ac1 	.word	0x08012ac1
 8012a68:	08012ac1 	.word	0x08012ac1
 8012a6c:	08012ac1 	.word	0x08012ac1
 8012a70:	08012ac1 	.word	0x08012ac1
 8012a74:	08012ac1 	.word	0x08012ac1
 8012a78:	08012ac1 	.word	0x08012ac1
 8012a7c:	08012ac1 	.word	0x08012ac1
 8012a80:	08012ac1 	.word	0x08012ac1
 8012a84:	08012ac1 	.word	0x08012ac1
 8012a88:	08012ac1 	.word	0x08012ac1
 8012a8c:	08012ac1 	.word	0x08012ac1
 8012a90:	08012ac1 	.word	0x08012ac1
 8012a94:	08012ac1 	.word	0x08012ac1
 8012a98:	08012ac1 	.word	0x08012ac1
 8012a9c:	08012ac1 	.word	0x08012ac1
 8012aa0:	08012ac1 	.word	0x08012ac1
 8012aa4:	08012ac1 	.word	0x08012ac1
 8012aa8:	08012ac1 	.word	0x08012ac1
 8012aac:	08012ac1 	.word	0x08012ac1
 8012ab0:	08012ac1 	.word	0x08012ac1
 8012ab4:	08012ac1 	.word	0x08012ac1
 8012ab8:	08012ac1 	.word	0x08012ac1
 8012abc:	08012ac1 	.word	0x08012ac1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012ac0:	bf00      	nop
  }

  return (USBD_OK);
 8012ac2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	370c      	adds	r7, #12
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	4805      	ldr	r0, [pc, #20]	; (8012af4 <CDC_Receive_HS+0x24>)
 8012ade:	f7fe fbbf 	bl	8011260 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012ae2:	4804      	ldr	r0, [pc, #16]	; (8012af4 <CDC_Receive_HS+0x24>)
 8012ae4:	f7fe fc1a 	bl	801131c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012ae8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3708      	adds	r7, #8
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	24001334 	.word	0x24001334

08012af8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	460b      	mov	r3, r1
 8012b02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012b04:	2300      	movs	r3, #0
 8012b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012b08:	4b0d      	ldr	r3, [pc, #52]	; (8012b40 <CDC_Transmit_HS+0x48>)
 8012b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d001      	beq.n	8012b1e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e00b      	b.n	8012b36 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012b1e:	887b      	ldrh	r3, [r7, #2]
 8012b20:	461a      	mov	r2, r3
 8012b22:	6879      	ldr	r1, [r7, #4]
 8012b24:	4806      	ldr	r0, [pc, #24]	; (8012b40 <CDC_Transmit_HS+0x48>)
 8012b26:	f7fe fb79 	bl	801121c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012b2a:	4805      	ldr	r0, [pc, #20]	; (8012b40 <CDC_Transmit_HS+0x48>)
 8012b2c:	f7fe fbb6 	bl	801129c <USBD_CDC_TransmitPacket>
 8012b30:	4603      	mov	r3, r0
 8012b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8012b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	24001334 	.word	0x24001334

08012b44 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b087      	sub	sp, #28
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	371c      	adds	r7, #28
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
	...

08012b68 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b083      	sub	sp, #12
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	6039      	str	r1, [r7, #0]
 8012b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	2212      	movs	r2, #18
 8012b78:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012b7a:	4b03      	ldr	r3, [pc, #12]	; (8012b88 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	370c      	adds	r7, #12
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr
 8012b88:	240000cc 	.word	0x240000cc

08012b8c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	4603      	mov	r3, r0
 8012b94:	6039      	str	r1, [r7, #0]
 8012b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012b9e:	4b03      	ldr	r3, [pc, #12]	; (8012bac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr
 8012bac:	240000e0 	.word	0x240000e0

08012bb0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	6039      	str	r1, [r7, #0]
 8012bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012bbc:	79fb      	ldrb	r3, [r7, #7]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d105      	bne.n	8012bce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	4907      	ldr	r1, [pc, #28]	; (8012be4 <USBD_HS_ProductStrDescriptor+0x34>)
 8012bc6:	4808      	ldr	r0, [pc, #32]	; (8012be8 <USBD_HS_ProductStrDescriptor+0x38>)
 8012bc8:	f7ff fdf6 	bl	80127b8 <USBD_GetString>
 8012bcc:	e004      	b.n	8012bd8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012bce:	683a      	ldr	r2, [r7, #0]
 8012bd0:	4904      	ldr	r1, [pc, #16]	; (8012be4 <USBD_HS_ProductStrDescriptor+0x34>)
 8012bd2:	4805      	ldr	r0, [pc, #20]	; (8012be8 <USBD_HS_ProductStrDescriptor+0x38>)
 8012bd4:	f7ff fdf0 	bl	80127b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012bd8:	4b02      	ldr	r3, [pc, #8]	; (8012be4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3708      	adds	r7, #8
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	24002610 	.word	0x24002610
 8012be8:	08013fcc 	.word	0x08013fcc

08012bec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	6039      	str	r1, [r7, #0]
 8012bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012bf8:	683a      	ldr	r2, [r7, #0]
 8012bfa:	4904      	ldr	r1, [pc, #16]	; (8012c0c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012bfc:	4804      	ldr	r0, [pc, #16]	; (8012c10 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012bfe:	f7ff fddb 	bl	80127b8 <USBD_GetString>
  return USBD_StrDesc;
 8012c02:	4b02      	ldr	r3, [pc, #8]	; (8012c0c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	24002610 	.word	0x24002610
 8012c10:	08013fe8 	.word	0x08013fe8

08012c14 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	6039      	str	r1, [r7, #0]
 8012c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	221a      	movs	r2, #26
 8012c24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012c26:	f000 f843 	bl	8012cb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012c2a:	4b02      	ldr	r3, [pc, #8]	; (8012c34 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	240000e4 	.word	0x240000e4

08012c38 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	4603      	mov	r3, r0
 8012c40:	6039      	str	r1, [r7, #0]
 8012c42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012c44:	79fb      	ldrb	r3, [r7, #7]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d105      	bne.n	8012c56 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	4907      	ldr	r1, [pc, #28]	; (8012c6c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012c4e:	4808      	ldr	r0, [pc, #32]	; (8012c70 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012c50:	f7ff fdb2 	bl	80127b8 <USBD_GetString>
 8012c54:	e004      	b.n	8012c60 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012c56:	683a      	ldr	r2, [r7, #0]
 8012c58:	4904      	ldr	r1, [pc, #16]	; (8012c6c <USBD_HS_ConfigStrDescriptor+0x34>)
 8012c5a:	4805      	ldr	r0, [pc, #20]	; (8012c70 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012c5c:	f7ff fdac 	bl	80127b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c60:	4b02      	ldr	r3, [pc, #8]	; (8012c6c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3708      	adds	r7, #8
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	24002610 	.word	0x24002610
 8012c70:	08013fec 	.word	0x08013fec

08012c74 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	6039      	str	r1, [r7, #0]
 8012c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c80:	79fb      	ldrb	r3, [r7, #7]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d105      	bne.n	8012c92 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	4907      	ldr	r1, [pc, #28]	; (8012ca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012c8a:	4808      	ldr	r0, [pc, #32]	; (8012cac <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012c8c:	f7ff fd94 	bl	80127b8 <USBD_GetString>
 8012c90:	e004      	b.n	8012c9c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012c92:	683a      	ldr	r2, [r7, #0]
 8012c94:	4904      	ldr	r1, [pc, #16]	; (8012ca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012c96:	4805      	ldr	r0, [pc, #20]	; (8012cac <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012c98:	f7ff fd8e 	bl	80127b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c9c:	4b02      	ldr	r3, [pc, #8]	; (8012ca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	24002610 	.word	0x24002610
 8012cac:	08013ff8 	.word	0x08013ff8

08012cb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012cb6:	4b0f      	ldr	r3, [pc, #60]	; (8012cf4 <Get_SerialNum+0x44>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012cbc:	4b0e      	ldr	r3, [pc, #56]	; (8012cf8 <Get_SerialNum+0x48>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012cc2:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <Get_SerialNum+0x4c>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4413      	add	r3, r2
 8012cce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d009      	beq.n	8012cea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012cd6:	2208      	movs	r2, #8
 8012cd8:	4909      	ldr	r1, [pc, #36]	; (8012d00 <Get_SerialNum+0x50>)
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f000 f814 	bl	8012d08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012ce0:	2204      	movs	r2, #4
 8012ce2:	4908      	ldr	r1, [pc, #32]	; (8012d04 <Get_SerialNum+0x54>)
 8012ce4:	68b8      	ldr	r0, [r7, #8]
 8012ce6:	f000 f80f 	bl	8012d08 <IntToUnicode>
  }
}
 8012cea:	bf00      	nop
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	1ff1e800 	.word	0x1ff1e800
 8012cf8:	1ff1e804 	.word	0x1ff1e804
 8012cfc:	1ff1e808 	.word	0x1ff1e808
 8012d00:	240000e6 	.word	0x240000e6
 8012d04:	240000f6 	.word	0x240000f6

08012d08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b087      	sub	sp, #28
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	4613      	mov	r3, r2
 8012d14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d16:	2300      	movs	r3, #0
 8012d18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	75fb      	strb	r3, [r7, #23]
 8012d1e:	e027      	b.n	8012d70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	0f1b      	lsrs	r3, r3, #28
 8012d24:	2b09      	cmp	r3, #9
 8012d26:	d80b      	bhi.n	8012d40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	0f1b      	lsrs	r3, r3, #28
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	7dfb      	ldrb	r3, [r7, #23]
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4619      	mov	r1, r3
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	440b      	add	r3, r1
 8012d38:	3230      	adds	r2, #48	; 0x30
 8012d3a:	b2d2      	uxtb	r2, r2
 8012d3c:	701a      	strb	r2, [r3, #0]
 8012d3e:	e00a      	b.n	8012d56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	0f1b      	lsrs	r3, r3, #28
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	7dfb      	ldrb	r3, [r7, #23]
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	440b      	add	r3, r1
 8012d50:	3237      	adds	r2, #55	; 0x37
 8012d52:	b2d2      	uxtb	r2, r2
 8012d54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	011b      	lsls	r3, r3, #4
 8012d5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	005b      	lsls	r3, r3, #1
 8012d60:	3301      	adds	r3, #1
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	4413      	add	r3, r2
 8012d66:	2200      	movs	r2, #0
 8012d68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012d6a:	7dfb      	ldrb	r3, [r7, #23]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	75fb      	strb	r3, [r7, #23]
 8012d70:	7dfa      	ldrb	r2, [r7, #23]
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d3d3      	bcc.n	8012d20 <IntToUnicode+0x18>
  }
}
 8012d78:	bf00      	nop
 8012d7a:	bf00      	nop
 8012d7c:	371c      	adds	r7, #28
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr
	...

08012d88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b0b2      	sub	sp, #200	; 0xc8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012d90:	f107 0310 	add.w	r3, r7, #16
 8012d94:	22b8      	movs	r2, #184	; 0xb8
 8012d96:	2100      	movs	r1, #0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f000 fb39 	bl	8013410 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a1a      	ldr	r2, [pc, #104]	; (8012e0c <HAL_PCD_MspInit+0x84>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d12c      	bne.n	8012e02 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012da8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012dac:	f04f 0300 	mov.w	r3, #0
 8012db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012db4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012dbc:	f107 0310 	add.w	r3, r7, #16
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7f6 fd39 	bl	8009838 <HAL_RCCEx_PeriphCLKConfig>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d001      	beq.n	8012dd0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8012dcc:	f7ee ff72 	bl	8001cb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012dd0:	f7f5 fd52 	bl	8008878 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012dd4:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <HAL_PCD_MspInit+0x88>)
 8012dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012dda:	4a0d      	ldr	r2, [pc, #52]	; (8012e10 <HAL_PCD_MspInit+0x88>)
 8012ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012de4:	4b0a      	ldr	r3, [pc, #40]	; (8012e10 <HAL_PCD_MspInit+0x88>)
 8012de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012df2:	2200      	movs	r2, #0
 8012df4:	2100      	movs	r1, #0
 8012df6:	204d      	movs	r0, #77	; 0x4d
 8012df8:	f7f1 faf3 	bl	80043e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012dfc:	204d      	movs	r0, #77	; 0x4d
 8012dfe:	f7f1 fb0a 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012e02:	bf00      	nop
 8012e04:	37c8      	adds	r7, #200	; 0xc8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	40040000 	.word	0x40040000
 8012e10:	58024400 	.word	0x58024400

08012e14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012e28:	4619      	mov	r1, r3
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	f7fe fb5f 	bl	80114ee <USBD_LL_SetupStage>
}
 8012e30:	bf00      	nop
 8012e32:	3708      	adds	r7, #8
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	460b      	mov	r3, r1
 8012e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012e4a:	78fa      	ldrb	r2, [r7, #3]
 8012e4c:	6879      	ldr	r1, [r7, #4]
 8012e4e:	4613      	mov	r3, r2
 8012e50:	00db      	lsls	r3, r3, #3
 8012e52:	4413      	add	r3, r2
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	440b      	add	r3, r1
 8012e58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	78fb      	ldrb	r3, [r7, #3]
 8012e60:	4619      	mov	r1, r3
 8012e62:	f7fe fb99 	bl	8011598 <USBD_LL_DataOutStage>
}
 8012e66:	bf00      	nop
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b082      	sub	sp, #8
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
 8012e76:	460b      	mov	r3, r1
 8012e78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012e80:	78fa      	ldrb	r2, [r7, #3]
 8012e82:	6879      	ldr	r1, [r7, #4]
 8012e84:	4613      	mov	r3, r2
 8012e86:	00db      	lsls	r3, r3, #3
 8012e88:	4413      	add	r3, r2
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	440b      	add	r3, r1
 8012e8e:	3348      	adds	r3, #72	; 0x48
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	78fb      	ldrb	r3, [r7, #3]
 8012e94:	4619      	mov	r1, r3
 8012e96:	f7fe fc32 	bl	80116fe <USBD_LL_DataInStage>
}
 8012e9a:	bf00      	nop
 8012e9c:	3708      	adds	r7, #8
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fe fd6c 	bl	801198e <USBD_LL_SOF>
}
 8012eb6:	bf00      	nop
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d102      	bne.n	8012ed8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	73fb      	strb	r3, [r7, #15]
 8012ed6:	e008      	b.n	8012eea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	691b      	ldr	r3, [r3, #16]
 8012edc:	2b02      	cmp	r3, #2
 8012ede:	d102      	bne.n	8012ee6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	73fb      	strb	r3, [r7, #15]
 8012ee4:	e001      	b.n	8012eea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012ee6:	f7ee fee5 	bl	8001cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ef0:	7bfa      	ldrb	r2, [r7, #15]
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe fd06 	bl	8011906 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7fe fcae 	bl	8011862 <USBD_LL_Reset>
}
 8012f06:	bf00      	nop
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
	...

08012f10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fe fd01 	bl	8011926 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	6812      	ldr	r2, [r2, #0]
 8012f32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012f36:	f043 0301 	orr.w	r3, r3, #1
 8012f3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a1b      	ldr	r3, [r3, #32]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d005      	beq.n	8012f50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f44:	4b04      	ldr	r3, [pc, #16]	; (8012f58 <HAL_PCD_SuspendCallback+0x48>)
 8012f46:	691b      	ldr	r3, [r3, #16]
 8012f48:	4a03      	ldr	r2, [pc, #12]	; (8012f58 <HAL_PCD_SuspendCallback+0x48>)
 8012f4a:	f043 0306 	orr.w	r3, r3, #6
 8012f4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	e000ed00 	.word	0xe000ed00

08012f5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fe fcf7 	bl	801195e <USBD_LL_Resume>
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012f8a:	78fa      	ldrb	r2, [r7, #3]
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe fd4f 	bl	8011a32 <USBD_LL_IsoOUTIncomplete>
}
 8012f94:	bf00      	nop
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fae:	78fa      	ldrb	r2, [r7, #3]
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7fe fd0b 	bl	80119ce <USBD_LL_IsoINIncomplete>
}
 8012fb8:	bf00      	nop
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fe fd61 	bl	8011a96 <USBD_LL_DevConnected>
}
 8012fd4:	bf00      	nop
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fe fd5e 	bl	8011aac <USBD_LL_DevDisconnected>
}
 8012ff0:	bf00      	nop
 8012ff2:	3708      	adds	r7, #8
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d140      	bne.n	801308a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013008:	4a22      	ldr	r2, [pc, #136]	; (8013094 <USBD_LL_Init+0x9c>)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	4a20      	ldr	r2, [pc, #128]	; (8013094 <USBD_LL_Init+0x9c>)
 8013014:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013018:	4b1e      	ldr	r3, [pc, #120]	; (8013094 <USBD_LL_Init+0x9c>)
 801301a:	4a1f      	ldr	r2, [pc, #124]	; (8013098 <USBD_LL_Init+0xa0>)
 801301c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801301e:	4b1d      	ldr	r3, [pc, #116]	; (8013094 <USBD_LL_Init+0x9c>)
 8013020:	2209      	movs	r2, #9
 8013022:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013024:	4b1b      	ldr	r3, [pc, #108]	; (8013094 <USBD_LL_Init+0x9c>)
 8013026:	2202      	movs	r2, #2
 8013028:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801302a:	4b1a      	ldr	r3, [pc, #104]	; (8013094 <USBD_LL_Init+0x9c>)
 801302c:	2200      	movs	r2, #0
 801302e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013030:	4b18      	ldr	r3, [pc, #96]	; (8013094 <USBD_LL_Init+0x9c>)
 8013032:	2202      	movs	r2, #2
 8013034:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013036:	4b17      	ldr	r3, [pc, #92]	; (8013094 <USBD_LL_Init+0x9c>)
 8013038:	2200      	movs	r2, #0
 801303a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801303c:	4b15      	ldr	r3, [pc, #84]	; (8013094 <USBD_LL_Init+0x9c>)
 801303e:	2200      	movs	r2, #0
 8013040:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013042:	4b14      	ldr	r3, [pc, #80]	; (8013094 <USBD_LL_Init+0x9c>)
 8013044:	2200      	movs	r2, #0
 8013046:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8013048:	4b12      	ldr	r3, [pc, #72]	; (8013094 <USBD_LL_Init+0x9c>)
 801304a:	2200      	movs	r2, #0
 801304c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801304e:	4b11      	ldr	r3, [pc, #68]	; (8013094 <USBD_LL_Init+0x9c>)
 8013050:	2200      	movs	r2, #0
 8013052:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013054:	4b0f      	ldr	r3, [pc, #60]	; (8013094 <USBD_LL_Init+0x9c>)
 8013056:	2200      	movs	r2, #0
 8013058:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801305a:	480e      	ldr	r0, [pc, #56]	; (8013094 <USBD_LL_Init+0x9c>)
 801305c:	f7f4 f919 	bl	8007292 <HAL_PCD_Init>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d001      	beq.n	801306a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013066:	f7ee fe25 	bl	8001cb4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801306a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801306e:	4809      	ldr	r0, [pc, #36]	; (8013094 <USBD_LL_Init+0x9c>)
 8013070:	f7f5 fb87 	bl	8008782 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013074:	2280      	movs	r2, #128	; 0x80
 8013076:	2100      	movs	r1, #0
 8013078:	4806      	ldr	r0, [pc, #24]	; (8013094 <USBD_LL_Init+0x9c>)
 801307a:	f7f5 fb3b 	bl	80086f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801307e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8013082:	2101      	movs	r1, #1
 8013084:	4803      	ldr	r0, [pc, #12]	; (8013094 <USBD_LL_Init+0x9c>)
 8013086:	f7f5 fb35 	bl	80086f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3708      	adds	r7, #8
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	24002810 	.word	0x24002810
 8013098:	40040000 	.word	0x40040000

0801309c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f4 fa11 	bl	80074da <HAL_PCD_Start>
 80130b8:	4603      	mov	r3, r0
 80130ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130bc:	7bfb      	ldrb	r3, [r7, #15]
 80130be:	4618      	mov	r0, r3
 80130c0:	f000 f942 	bl	8013348 <USBD_Get_USB_Status>
 80130c4:	4603      	mov	r3, r0
 80130c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
 80130da:	4608      	mov	r0, r1
 80130dc:	4611      	mov	r1, r2
 80130de:	461a      	mov	r2, r3
 80130e0:	4603      	mov	r3, r0
 80130e2:	70fb      	strb	r3, [r7, #3]
 80130e4:	460b      	mov	r3, r1
 80130e6:	70bb      	strb	r3, [r7, #2]
 80130e8:	4613      	mov	r3, r2
 80130ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130f0:	2300      	movs	r3, #0
 80130f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80130fa:	78bb      	ldrb	r3, [r7, #2]
 80130fc:	883a      	ldrh	r2, [r7, #0]
 80130fe:	78f9      	ldrb	r1, [r7, #3]
 8013100:	f7f4 ff11 	bl	8007f26 <HAL_PCD_EP_Open>
 8013104:	4603      	mov	r3, r0
 8013106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013108:	7bfb      	ldrb	r3, [r7, #15]
 801310a:	4618      	mov	r0, r3
 801310c:	f000 f91c 	bl	8013348 <USBD_Get_USB_Status>
 8013110:	4603      	mov	r3, r0
 8013112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013114:	7bbb      	ldrb	r3, [r7, #14]
}
 8013116:	4618      	mov	r0, r3
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801311e:	b580      	push	{r7, lr}
 8013120:	b084      	sub	sp, #16
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	460b      	mov	r3, r1
 8013128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801312a:	2300      	movs	r3, #0
 801312c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013138:	78fa      	ldrb	r2, [r7, #3]
 801313a:	4611      	mov	r1, r2
 801313c:	4618      	mov	r0, r3
 801313e:	f7f4 ff5a 	bl	8007ff6 <HAL_PCD_EP_Close>
 8013142:	4603      	mov	r3, r0
 8013144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f8fd 	bl	8013348 <USBD_Get_USB_Status>
 801314e:	4603      	mov	r3, r0
 8013150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013152:	7bbb      	ldrb	r3, [r7, #14]
}
 8013154:	4618      	mov	r0, r3
 8013156:	3710      	adds	r7, #16
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	460b      	mov	r3, r1
 8013166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013168:	2300      	movs	r3, #0
 801316a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801316c:	2300      	movs	r3, #0
 801316e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013176:	78fa      	ldrb	r2, [r7, #3]
 8013178:	4611      	mov	r1, r2
 801317a:	4618      	mov	r0, r3
 801317c:	f7f5 f814 	bl	80081a8 <HAL_PCD_EP_SetStall>
 8013180:	4603      	mov	r3, r0
 8013182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013184:	7bfb      	ldrb	r3, [r7, #15]
 8013186:	4618      	mov	r0, r3
 8013188:	f000 f8de 	bl	8013348 <USBD_Get_USB_Status>
 801318c:	4603      	mov	r3, r0
 801318e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013190:	7bbb      	ldrb	r3, [r7, #14]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801319a:	b580      	push	{r7, lr}
 801319c:	b084      	sub	sp, #16
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
 80131a2:	460b      	mov	r3, r1
 80131a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131a6:	2300      	movs	r3, #0
 80131a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131aa:	2300      	movs	r3, #0
 80131ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80131b4:	78fa      	ldrb	r2, [r7, #3]
 80131b6:	4611      	mov	r1, r2
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f5 f859 	bl	8008270 <HAL_PCD_EP_ClrStall>
 80131be:	4603      	mov	r3, r0
 80131c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f000 f8bf 	bl	8013348 <USBD_Get_USB_Status>
 80131ca:	4603      	mov	r3, r0
 80131cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3710      	adds	r7, #16
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131d8:	b480      	push	{r7}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	460b      	mov	r3, r1
 80131e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80131ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80131ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	da0b      	bge.n	801320c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80131f4:	78fb      	ldrb	r3, [r7, #3]
 80131f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80131fa:	68f9      	ldr	r1, [r7, #12]
 80131fc:	4613      	mov	r3, r2
 80131fe:	00db      	lsls	r3, r3, #3
 8013200:	4413      	add	r3, r2
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	440b      	add	r3, r1
 8013206:	333e      	adds	r3, #62	; 0x3e
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	e00b      	b.n	8013224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801320c:	78fb      	ldrb	r3, [r7, #3]
 801320e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013212:	68f9      	ldr	r1, [r7, #12]
 8013214:	4613      	mov	r3, r2
 8013216:	00db      	lsls	r3, r3, #3
 8013218:	4413      	add	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	440b      	add	r3, r1
 801321e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013222:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013224:	4618      	mov	r0, r3
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	460b      	mov	r3, r1
 801323a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801323c:	2300      	movs	r3, #0
 801323e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013240:	2300      	movs	r3, #0
 8013242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801324a:	78fa      	ldrb	r2, [r7, #3]
 801324c:	4611      	mov	r1, r2
 801324e:	4618      	mov	r0, r3
 8013250:	f7f4 fe44 	bl	8007edc <HAL_PCD_SetAddress>
 8013254:	4603      	mov	r3, r0
 8013256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013258:	7bfb      	ldrb	r3, [r7, #15]
 801325a:	4618      	mov	r0, r3
 801325c:	f000 f874 	bl	8013348 <USBD_Get_USB_Status>
 8013260:	4603      	mov	r3, r0
 8013262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013264:	7bbb      	ldrb	r3, [r7, #14]
}
 8013266:	4618      	mov	r0, r3
 8013268:	3710      	adds	r7, #16
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b086      	sub	sp, #24
 8013272:	af00      	add	r7, sp, #0
 8013274:	60f8      	str	r0, [r7, #12]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	603b      	str	r3, [r7, #0]
 801327a:	460b      	mov	r3, r1
 801327c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801327e:	2300      	movs	r3, #0
 8013280:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801328c:	7af9      	ldrb	r1, [r7, #11]
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	f7f4 ff4e 	bl	8008132 <HAL_PCD_EP_Transmit>
 8013296:	4603      	mov	r3, r0
 8013298:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801329a:	7dfb      	ldrb	r3, [r7, #23]
 801329c:	4618      	mov	r0, r3
 801329e:	f000 f853 	bl	8013348 <USBD_Get_USB_Status>
 80132a2:	4603      	mov	r3, r0
 80132a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80132a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3718      	adds	r7, #24
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b086      	sub	sp, #24
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	607a      	str	r2, [r7, #4]
 80132ba:	603b      	str	r3, [r7, #0]
 80132bc:	460b      	mov	r3, r1
 80132be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80132ce:	7af9      	ldrb	r1, [r7, #11]
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	f7f4 fed9 	bl	800808a <HAL_PCD_EP_Receive>
 80132d8:	4603      	mov	r3, r0
 80132da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132dc:	7dfb      	ldrb	r3, [r7, #23]
 80132de:	4618      	mov	r0, r3
 80132e0:	f000 f832 	bl	8013348 <USBD_Get_USB_Status>
 80132e4:	4603      	mov	r3, r0
 80132e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80132e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b082      	sub	sp, #8
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
 80132fa:	460b      	mov	r3, r1
 80132fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013304:	78fa      	ldrb	r2, [r7, #3]
 8013306:	4611      	mov	r1, r2
 8013308:	4618      	mov	r0, r3
 801330a:	f7f4 fefa 	bl	8008102 <HAL_PCD_EP_GetRxCount>
 801330e:	4603      	mov	r3, r0
}
 8013310:	4618      	mov	r0, r3
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013320:	4b03      	ldr	r3, [pc, #12]	; (8013330 <USBD_static_malloc+0x18>)
}
 8013322:	4618      	mov	r0, r3
 8013324:	370c      	adds	r7, #12
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
 801332e:	bf00      	nop
 8013330:	24002d1c 	.word	0x24002d1c

08013334 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013348:	b480      	push	{r7}
 801334a:	b085      	sub	sp, #20
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013352:	2300      	movs	r3, #0
 8013354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013356:	79fb      	ldrb	r3, [r7, #7]
 8013358:	2b03      	cmp	r3, #3
 801335a:	d817      	bhi.n	801338c <USBD_Get_USB_Status+0x44>
 801335c:	a201      	add	r2, pc, #4	; (adr r2, 8013364 <USBD_Get_USB_Status+0x1c>)
 801335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013362:	bf00      	nop
 8013364:	08013375 	.word	0x08013375
 8013368:	0801337b 	.word	0x0801337b
 801336c:	08013381 	.word	0x08013381
 8013370:	08013387 	.word	0x08013387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	73fb      	strb	r3, [r7, #15]
    break;
 8013378:	e00b      	b.n	8013392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801337a:	2303      	movs	r3, #3
 801337c:	73fb      	strb	r3, [r7, #15]
    break;
 801337e:	e008      	b.n	8013392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013380:	2301      	movs	r3, #1
 8013382:	73fb      	strb	r3, [r7, #15]
    break;
 8013384:	e005      	b.n	8013392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013386:	2303      	movs	r3, #3
 8013388:	73fb      	strb	r3, [r7, #15]
    break;
 801338a:	e002      	b.n	8013392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801338c:	2303      	movs	r3, #3
 801338e:	73fb      	strb	r3, [r7, #15]
    break;
 8013390:	bf00      	nop
  }
  return usb_status;
 8013392:	7bfb      	ldrb	r3, [r7, #15]
}
 8013394:	4618      	mov	r0, r3
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <__errno>:
 80133a0:	4b01      	ldr	r3, [pc, #4]	; (80133a8 <__errno+0x8>)
 80133a2:	6818      	ldr	r0, [r3, #0]
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	24000100 	.word	0x24000100

080133ac <__libc_init_array>:
 80133ac:	b570      	push	{r4, r5, r6, lr}
 80133ae:	4d0d      	ldr	r5, [pc, #52]	; (80133e4 <__libc_init_array+0x38>)
 80133b0:	4c0d      	ldr	r4, [pc, #52]	; (80133e8 <__libc_init_array+0x3c>)
 80133b2:	1b64      	subs	r4, r4, r5
 80133b4:	10a4      	asrs	r4, r4, #2
 80133b6:	2600      	movs	r6, #0
 80133b8:	42a6      	cmp	r6, r4
 80133ba:	d109      	bne.n	80133d0 <__libc_init_array+0x24>
 80133bc:	4d0b      	ldr	r5, [pc, #44]	; (80133ec <__libc_init_array+0x40>)
 80133be:	4c0c      	ldr	r4, [pc, #48]	; (80133f0 <__libc_init_array+0x44>)
 80133c0:	f000 fdc4 	bl	8013f4c <_init>
 80133c4:	1b64      	subs	r4, r4, r5
 80133c6:	10a4      	asrs	r4, r4, #2
 80133c8:	2600      	movs	r6, #0
 80133ca:	42a6      	cmp	r6, r4
 80133cc:	d105      	bne.n	80133da <__libc_init_array+0x2e>
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80133d4:	4798      	blx	r3
 80133d6:	3601      	adds	r6, #1
 80133d8:	e7ee      	b.n	80133b8 <__libc_init_array+0xc>
 80133da:	f855 3b04 	ldr.w	r3, [r5], #4
 80133de:	4798      	blx	r3
 80133e0:	3601      	adds	r6, #1
 80133e2:	e7f2      	b.n	80133ca <__libc_init_array+0x1e>
 80133e4:	08014140 	.word	0x08014140
 80133e8:	08014140 	.word	0x08014140
 80133ec:	08014140 	.word	0x08014140
 80133f0:	08014144 	.word	0x08014144

080133f4 <memcpy>:
 80133f4:	440a      	add	r2, r1
 80133f6:	4291      	cmp	r1, r2
 80133f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80133fc:	d100      	bne.n	8013400 <memcpy+0xc>
 80133fe:	4770      	bx	lr
 8013400:	b510      	push	{r4, lr}
 8013402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013406:	f803 4f01 	strb.w	r4, [r3, #1]!
 801340a:	4291      	cmp	r1, r2
 801340c:	d1f9      	bne.n	8013402 <memcpy+0xe>
 801340e:	bd10      	pop	{r4, pc}

08013410 <memset>:
 8013410:	4402      	add	r2, r0
 8013412:	4603      	mov	r3, r0
 8013414:	4293      	cmp	r3, r2
 8013416:	d100      	bne.n	801341a <memset+0xa>
 8013418:	4770      	bx	lr
 801341a:	f803 1b01 	strb.w	r1, [r3], #1
 801341e:	e7f9      	b.n	8013414 <memset+0x4>

08013420 <siprintf>:
 8013420:	b40e      	push	{r1, r2, r3}
 8013422:	b500      	push	{lr}
 8013424:	b09c      	sub	sp, #112	; 0x70
 8013426:	ab1d      	add	r3, sp, #116	; 0x74
 8013428:	9002      	str	r0, [sp, #8]
 801342a:	9006      	str	r0, [sp, #24]
 801342c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013430:	4809      	ldr	r0, [pc, #36]	; (8013458 <siprintf+0x38>)
 8013432:	9107      	str	r1, [sp, #28]
 8013434:	9104      	str	r1, [sp, #16]
 8013436:	4909      	ldr	r1, [pc, #36]	; (801345c <siprintf+0x3c>)
 8013438:	f853 2b04 	ldr.w	r2, [r3], #4
 801343c:	9105      	str	r1, [sp, #20]
 801343e:	6800      	ldr	r0, [r0, #0]
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	a902      	add	r1, sp, #8
 8013444:	f000 f868 	bl	8013518 <_svfiprintf_r>
 8013448:	9b02      	ldr	r3, [sp, #8]
 801344a:	2200      	movs	r2, #0
 801344c:	701a      	strb	r2, [r3, #0]
 801344e:	b01c      	add	sp, #112	; 0x70
 8013450:	f85d eb04 	ldr.w	lr, [sp], #4
 8013454:	b003      	add	sp, #12
 8013456:	4770      	bx	lr
 8013458:	24000100 	.word	0x24000100
 801345c:	ffff0208 	.word	0xffff0208

08013460 <__ssputs_r>:
 8013460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013464:	688e      	ldr	r6, [r1, #8]
 8013466:	429e      	cmp	r6, r3
 8013468:	4682      	mov	sl, r0
 801346a:	460c      	mov	r4, r1
 801346c:	4690      	mov	r8, r2
 801346e:	461f      	mov	r7, r3
 8013470:	d838      	bhi.n	80134e4 <__ssputs_r+0x84>
 8013472:	898a      	ldrh	r2, [r1, #12]
 8013474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013478:	d032      	beq.n	80134e0 <__ssputs_r+0x80>
 801347a:	6825      	ldr	r5, [r4, #0]
 801347c:	6909      	ldr	r1, [r1, #16]
 801347e:	eba5 0901 	sub.w	r9, r5, r1
 8013482:	6965      	ldr	r5, [r4, #20]
 8013484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801348c:	3301      	adds	r3, #1
 801348e:	444b      	add	r3, r9
 8013490:	106d      	asrs	r5, r5, #1
 8013492:	429d      	cmp	r5, r3
 8013494:	bf38      	it	cc
 8013496:	461d      	movcc	r5, r3
 8013498:	0553      	lsls	r3, r2, #21
 801349a:	d531      	bpl.n	8013500 <__ssputs_r+0xa0>
 801349c:	4629      	mov	r1, r5
 801349e:	f000 fb55 	bl	8013b4c <_malloc_r>
 80134a2:	4606      	mov	r6, r0
 80134a4:	b950      	cbnz	r0, 80134bc <__ssputs_r+0x5c>
 80134a6:	230c      	movs	r3, #12
 80134a8:	f8ca 3000 	str.w	r3, [sl]
 80134ac:	89a3      	ldrh	r3, [r4, #12]
 80134ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134b2:	81a3      	strh	r3, [r4, #12]
 80134b4:	f04f 30ff 	mov.w	r0, #4294967295
 80134b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134bc:	6921      	ldr	r1, [r4, #16]
 80134be:	464a      	mov	r2, r9
 80134c0:	f7ff ff98 	bl	80133f4 <memcpy>
 80134c4:	89a3      	ldrh	r3, [r4, #12]
 80134c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80134ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ce:	81a3      	strh	r3, [r4, #12]
 80134d0:	6126      	str	r6, [r4, #16]
 80134d2:	6165      	str	r5, [r4, #20]
 80134d4:	444e      	add	r6, r9
 80134d6:	eba5 0509 	sub.w	r5, r5, r9
 80134da:	6026      	str	r6, [r4, #0]
 80134dc:	60a5      	str	r5, [r4, #8]
 80134de:	463e      	mov	r6, r7
 80134e0:	42be      	cmp	r6, r7
 80134e2:	d900      	bls.n	80134e6 <__ssputs_r+0x86>
 80134e4:	463e      	mov	r6, r7
 80134e6:	6820      	ldr	r0, [r4, #0]
 80134e8:	4632      	mov	r2, r6
 80134ea:	4641      	mov	r1, r8
 80134ec:	f000 faa8 	bl	8013a40 <memmove>
 80134f0:	68a3      	ldr	r3, [r4, #8]
 80134f2:	1b9b      	subs	r3, r3, r6
 80134f4:	60a3      	str	r3, [r4, #8]
 80134f6:	6823      	ldr	r3, [r4, #0]
 80134f8:	4433      	add	r3, r6
 80134fa:	6023      	str	r3, [r4, #0]
 80134fc:	2000      	movs	r0, #0
 80134fe:	e7db      	b.n	80134b8 <__ssputs_r+0x58>
 8013500:	462a      	mov	r2, r5
 8013502:	f000 fb97 	bl	8013c34 <_realloc_r>
 8013506:	4606      	mov	r6, r0
 8013508:	2800      	cmp	r0, #0
 801350a:	d1e1      	bne.n	80134d0 <__ssputs_r+0x70>
 801350c:	6921      	ldr	r1, [r4, #16]
 801350e:	4650      	mov	r0, sl
 8013510:	f000 fab0 	bl	8013a74 <_free_r>
 8013514:	e7c7      	b.n	80134a6 <__ssputs_r+0x46>
	...

08013518 <_svfiprintf_r>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	4698      	mov	r8, r3
 801351e:	898b      	ldrh	r3, [r1, #12]
 8013520:	061b      	lsls	r3, r3, #24
 8013522:	b09d      	sub	sp, #116	; 0x74
 8013524:	4607      	mov	r7, r0
 8013526:	460d      	mov	r5, r1
 8013528:	4614      	mov	r4, r2
 801352a:	d50e      	bpl.n	801354a <_svfiprintf_r+0x32>
 801352c:	690b      	ldr	r3, [r1, #16]
 801352e:	b963      	cbnz	r3, 801354a <_svfiprintf_r+0x32>
 8013530:	2140      	movs	r1, #64	; 0x40
 8013532:	f000 fb0b 	bl	8013b4c <_malloc_r>
 8013536:	6028      	str	r0, [r5, #0]
 8013538:	6128      	str	r0, [r5, #16]
 801353a:	b920      	cbnz	r0, 8013546 <_svfiprintf_r+0x2e>
 801353c:	230c      	movs	r3, #12
 801353e:	603b      	str	r3, [r7, #0]
 8013540:	f04f 30ff 	mov.w	r0, #4294967295
 8013544:	e0d1      	b.n	80136ea <_svfiprintf_r+0x1d2>
 8013546:	2340      	movs	r3, #64	; 0x40
 8013548:	616b      	str	r3, [r5, #20]
 801354a:	2300      	movs	r3, #0
 801354c:	9309      	str	r3, [sp, #36]	; 0x24
 801354e:	2320      	movs	r3, #32
 8013550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013554:	f8cd 800c 	str.w	r8, [sp, #12]
 8013558:	2330      	movs	r3, #48	; 0x30
 801355a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013704 <_svfiprintf_r+0x1ec>
 801355e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013562:	f04f 0901 	mov.w	r9, #1
 8013566:	4623      	mov	r3, r4
 8013568:	469a      	mov	sl, r3
 801356a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801356e:	b10a      	cbz	r2, 8013574 <_svfiprintf_r+0x5c>
 8013570:	2a25      	cmp	r2, #37	; 0x25
 8013572:	d1f9      	bne.n	8013568 <_svfiprintf_r+0x50>
 8013574:	ebba 0b04 	subs.w	fp, sl, r4
 8013578:	d00b      	beq.n	8013592 <_svfiprintf_r+0x7a>
 801357a:	465b      	mov	r3, fp
 801357c:	4622      	mov	r2, r4
 801357e:	4629      	mov	r1, r5
 8013580:	4638      	mov	r0, r7
 8013582:	f7ff ff6d 	bl	8013460 <__ssputs_r>
 8013586:	3001      	adds	r0, #1
 8013588:	f000 80aa 	beq.w	80136e0 <_svfiprintf_r+0x1c8>
 801358c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801358e:	445a      	add	r2, fp
 8013590:	9209      	str	r2, [sp, #36]	; 0x24
 8013592:	f89a 3000 	ldrb.w	r3, [sl]
 8013596:	2b00      	cmp	r3, #0
 8013598:	f000 80a2 	beq.w	80136e0 <_svfiprintf_r+0x1c8>
 801359c:	2300      	movs	r3, #0
 801359e:	f04f 32ff 	mov.w	r2, #4294967295
 80135a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135a6:	f10a 0a01 	add.w	sl, sl, #1
 80135aa:	9304      	str	r3, [sp, #16]
 80135ac:	9307      	str	r3, [sp, #28]
 80135ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135b2:	931a      	str	r3, [sp, #104]	; 0x68
 80135b4:	4654      	mov	r4, sl
 80135b6:	2205      	movs	r2, #5
 80135b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135bc:	4851      	ldr	r0, [pc, #324]	; (8013704 <_svfiprintf_r+0x1ec>)
 80135be:	f7ec feaf 	bl	8000320 <memchr>
 80135c2:	9a04      	ldr	r2, [sp, #16]
 80135c4:	b9d8      	cbnz	r0, 80135fe <_svfiprintf_r+0xe6>
 80135c6:	06d0      	lsls	r0, r2, #27
 80135c8:	bf44      	itt	mi
 80135ca:	2320      	movmi	r3, #32
 80135cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135d0:	0711      	lsls	r1, r2, #28
 80135d2:	bf44      	itt	mi
 80135d4:	232b      	movmi	r3, #43	; 0x2b
 80135d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135da:	f89a 3000 	ldrb.w	r3, [sl]
 80135de:	2b2a      	cmp	r3, #42	; 0x2a
 80135e0:	d015      	beq.n	801360e <_svfiprintf_r+0xf6>
 80135e2:	9a07      	ldr	r2, [sp, #28]
 80135e4:	4654      	mov	r4, sl
 80135e6:	2000      	movs	r0, #0
 80135e8:	f04f 0c0a 	mov.w	ip, #10
 80135ec:	4621      	mov	r1, r4
 80135ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135f2:	3b30      	subs	r3, #48	; 0x30
 80135f4:	2b09      	cmp	r3, #9
 80135f6:	d94e      	bls.n	8013696 <_svfiprintf_r+0x17e>
 80135f8:	b1b0      	cbz	r0, 8013628 <_svfiprintf_r+0x110>
 80135fa:	9207      	str	r2, [sp, #28]
 80135fc:	e014      	b.n	8013628 <_svfiprintf_r+0x110>
 80135fe:	eba0 0308 	sub.w	r3, r0, r8
 8013602:	fa09 f303 	lsl.w	r3, r9, r3
 8013606:	4313      	orrs	r3, r2
 8013608:	9304      	str	r3, [sp, #16]
 801360a:	46a2      	mov	sl, r4
 801360c:	e7d2      	b.n	80135b4 <_svfiprintf_r+0x9c>
 801360e:	9b03      	ldr	r3, [sp, #12]
 8013610:	1d19      	adds	r1, r3, #4
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	9103      	str	r1, [sp, #12]
 8013616:	2b00      	cmp	r3, #0
 8013618:	bfbb      	ittet	lt
 801361a:	425b      	neglt	r3, r3
 801361c:	f042 0202 	orrlt.w	r2, r2, #2
 8013620:	9307      	strge	r3, [sp, #28]
 8013622:	9307      	strlt	r3, [sp, #28]
 8013624:	bfb8      	it	lt
 8013626:	9204      	strlt	r2, [sp, #16]
 8013628:	7823      	ldrb	r3, [r4, #0]
 801362a:	2b2e      	cmp	r3, #46	; 0x2e
 801362c:	d10c      	bne.n	8013648 <_svfiprintf_r+0x130>
 801362e:	7863      	ldrb	r3, [r4, #1]
 8013630:	2b2a      	cmp	r3, #42	; 0x2a
 8013632:	d135      	bne.n	80136a0 <_svfiprintf_r+0x188>
 8013634:	9b03      	ldr	r3, [sp, #12]
 8013636:	1d1a      	adds	r2, r3, #4
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	9203      	str	r2, [sp, #12]
 801363c:	2b00      	cmp	r3, #0
 801363e:	bfb8      	it	lt
 8013640:	f04f 33ff 	movlt.w	r3, #4294967295
 8013644:	3402      	adds	r4, #2
 8013646:	9305      	str	r3, [sp, #20]
 8013648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013714 <_svfiprintf_r+0x1fc>
 801364c:	7821      	ldrb	r1, [r4, #0]
 801364e:	2203      	movs	r2, #3
 8013650:	4650      	mov	r0, sl
 8013652:	f7ec fe65 	bl	8000320 <memchr>
 8013656:	b140      	cbz	r0, 801366a <_svfiprintf_r+0x152>
 8013658:	2340      	movs	r3, #64	; 0x40
 801365a:	eba0 000a 	sub.w	r0, r0, sl
 801365e:	fa03 f000 	lsl.w	r0, r3, r0
 8013662:	9b04      	ldr	r3, [sp, #16]
 8013664:	4303      	orrs	r3, r0
 8013666:	3401      	adds	r4, #1
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801366e:	4826      	ldr	r0, [pc, #152]	; (8013708 <_svfiprintf_r+0x1f0>)
 8013670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013674:	2206      	movs	r2, #6
 8013676:	f7ec fe53 	bl	8000320 <memchr>
 801367a:	2800      	cmp	r0, #0
 801367c:	d038      	beq.n	80136f0 <_svfiprintf_r+0x1d8>
 801367e:	4b23      	ldr	r3, [pc, #140]	; (801370c <_svfiprintf_r+0x1f4>)
 8013680:	bb1b      	cbnz	r3, 80136ca <_svfiprintf_r+0x1b2>
 8013682:	9b03      	ldr	r3, [sp, #12]
 8013684:	3307      	adds	r3, #7
 8013686:	f023 0307 	bic.w	r3, r3, #7
 801368a:	3308      	adds	r3, #8
 801368c:	9303      	str	r3, [sp, #12]
 801368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013690:	4433      	add	r3, r6
 8013692:	9309      	str	r3, [sp, #36]	; 0x24
 8013694:	e767      	b.n	8013566 <_svfiprintf_r+0x4e>
 8013696:	fb0c 3202 	mla	r2, ip, r2, r3
 801369a:	460c      	mov	r4, r1
 801369c:	2001      	movs	r0, #1
 801369e:	e7a5      	b.n	80135ec <_svfiprintf_r+0xd4>
 80136a0:	2300      	movs	r3, #0
 80136a2:	3401      	adds	r4, #1
 80136a4:	9305      	str	r3, [sp, #20]
 80136a6:	4619      	mov	r1, r3
 80136a8:	f04f 0c0a 	mov.w	ip, #10
 80136ac:	4620      	mov	r0, r4
 80136ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136b2:	3a30      	subs	r2, #48	; 0x30
 80136b4:	2a09      	cmp	r2, #9
 80136b6:	d903      	bls.n	80136c0 <_svfiprintf_r+0x1a8>
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d0c5      	beq.n	8013648 <_svfiprintf_r+0x130>
 80136bc:	9105      	str	r1, [sp, #20]
 80136be:	e7c3      	b.n	8013648 <_svfiprintf_r+0x130>
 80136c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80136c4:	4604      	mov	r4, r0
 80136c6:	2301      	movs	r3, #1
 80136c8:	e7f0      	b.n	80136ac <_svfiprintf_r+0x194>
 80136ca:	ab03      	add	r3, sp, #12
 80136cc:	9300      	str	r3, [sp, #0]
 80136ce:	462a      	mov	r2, r5
 80136d0:	4b0f      	ldr	r3, [pc, #60]	; (8013710 <_svfiprintf_r+0x1f8>)
 80136d2:	a904      	add	r1, sp, #16
 80136d4:	4638      	mov	r0, r7
 80136d6:	f3af 8000 	nop.w
 80136da:	1c42      	adds	r2, r0, #1
 80136dc:	4606      	mov	r6, r0
 80136de:	d1d6      	bne.n	801368e <_svfiprintf_r+0x176>
 80136e0:	89ab      	ldrh	r3, [r5, #12]
 80136e2:	065b      	lsls	r3, r3, #25
 80136e4:	f53f af2c 	bmi.w	8013540 <_svfiprintf_r+0x28>
 80136e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136ea:	b01d      	add	sp, #116	; 0x74
 80136ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f0:	ab03      	add	r3, sp, #12
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	462a      	mov	r2, r5
 80136f6:	4b06      	ldr	r3, [pc, #24]	; (8013710 <_svfiprintf_r+0x1f8>)
 80136f8:	a904      	add	r1, sp, #16
 80136fa:	4638      	mov	r0, r7
 80136fc:	f000 f87a 	bl	80137f4 <_printf_i>
 8013700:	e7eb      	b.n	80136da <_svfiprintf_r+0x1c2>
 8013702:	bf00      	nop
 8013704:	080140f0 	.word	0x080140f0
 8013708:	080140fa 	.word	0x080140fa
 801370c:	00000000 	.word	0x00000000
 8013710:	08013461 	.word	0x08013461
 8013714:	080140f6 	.word	0x080140f6

08013718 <_printf_common>:
 8013718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801371c:	4616      	mov	r6, r2
 801371e:	4699      	mov	r9, r3
 8013720:	688a      	ldr	r2, [r1, #8]
 8013722:	690b      	ldr	r3, [r1, #16]
 8013724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013728:	4293      	cmp	r3, r2
 801372a:	bfb8      	it	lt
 801372c:	4613      	movlt	r3, r2
 801372e:	6033      	str	r3, [r6, #0]
 8013730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013734:	4607      	mov	r7, r0
 8013736:	460c      	mov	r4, r1
 8013738:	b10a      	cbz	r2, 801373e <_printf_common+0x26>
 801373a:	3301      	adds	r3, #1
 801373c:	6033      	str	r3, [r6, #0]
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	0699      	lsls	r1, r3, #26
 8013742:	bf42      	ittt	mi
 8013744:	6833      	ldrmi	r3, [r6, #0]
 8013746:	3302      	addmi	r3, #2
 8013748:	6033      	strmi	r3, [r6, #0]
 801374a:	6825      	ldr	r5, [r4, #0]
 801374c:	f015 0506 	ands.w	r5, r5, #6
 8013750:	d106      	bne.n	8013760 <_printf_common+0x48>
 8013752:	f104 0a19 	add.w	sl, r4, #25
 8013756:	68e3      	ldr	r3, [r4, #12]
 8013758:	6832      	ldr	r2, [r6, #0]
 801375a:	1a9b      	subs	r3, r3, r2
 801375c:	42ab      	cmp	r3, r5
 801375e:	dc26      	bgt.n	80137ae <_printf_common+0x96>
 8013760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013764:	1e13      	subs	r3, r2, #0
 8013766:	6822      	ldr	r2, [r4, #0]
 8013768:	bf18      	it	ne
 801376a:	2301      	movne	r3, #1
 801376c:	0692      	lsls	r2, r2, #26
 801376e:	d42b      	bmi.n	80137c8 <_printf_common+0xb0>
 8013770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013774:	4649      	mov	r1, r9
 8013776:	4638      	mov	r0, r7
 8013778:	47c0      	blx	r8
 801377a:	3001      	adds	r0, #1
 801377c:	d01e      	beq.n	80137bc <_printf_common+0xa4>
 801377e:	6823      	ldr	r3, [r4, #0]
 8013780:	68e5      	ldr	r5, [r4, #12]
 8013782:	6832      	ldr	r2, [r6, #0]
 8013784:	f003 0306 	and.w	r3, r3, #6
 8013788:	2b04      	cmp	r3, #4
 801378a:	bf08      	it	eq
 801378c:	1aad      	subeq	r5, r5, r2
 801378e:	68a3      	ldr	r3, [r4, #8]
 8013790:	6922      	ldr	r2, [r4, #16]
 8013792:	bf0c      	ite	eq
 8013794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013798:	2500      	movne	r5, #0
 801379a:	4293      	cmp	r3, r2
 801379c:	bfc4      	itt	gt
 801379e:	1a9b      	subgt	r3, r3, r2
 80137a0:	18ed      	addgt	r5, r5, r3
 80137a2:	2600      	movs	r6, #0
 80137a4:	341a      	adds	r4, #26
 80137a6:	42b5      	cmp	r5, r6
 80137a8:	d11a      	bne.n	80137e0 <_printf_common+0xc8>
 80137aa:	2000      	movs	r0, #0
 80137ac:	e008      	b.n	80137c0 <_printf_common+0xa8>
 80137ae:	2301      	movs	r3, #1
 80137b0:	4652      	mov	r2, sl
 80137b2:	4649      	mov	r1, r9
 80137b4:	4638      	mov	r0, r7
 80137b6:	47c0      	blx	r8
 80137b8:	3001      	adds	r0, #1
 80137ba:	d103      	bne.n	80137c4 <_printf_common+0xac>
 80137bc:	f04f 30ff 	mov.w	r0, #4294967295
 80137c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137c4:	3501      	adds	r5, #1
 80137c6:	e7c6      	b.n	8013756 <_printf_common+0x3e>
 80137c8:	18e1      	adds	r1, r4, r3
 80137ca:	1c5a      	adds	r2, r3, #1
 80137cc:	2030      	movs	r0, #48	; 0x30
 80137ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137d2:	4422      	add	r2, r4
 80137d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137dc:	3302      	adds	r3, #2
 80137de:	e7c7      	b.n	8013770 <_printf_common+0x58>
 80137e0:	2301      	movs	r3, #1
 80137e2:	4622      	mov	r2, r4
 80137e4:	4649      	mov	r1, r9
 80137e6:	4638      	mov	r0, r7
 80137e8:	47c0      	blx	r8
 80137ea:	3001      	adds	r0, #1
 80137ec:	d0e6      	beq.n	80137bc <_printf_common+0xa4>
 80137ee:	3601      	adds	r6, #1
 80137f0:	e7d9      	b.n	80137a6 <_printf_common+0x8e>
	...

080137f4 <_printf_i>:
 80137f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137f8:	7e0f      	ldrb	r7, [r1, #24]
 80137fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80137fc:	2f78      	cmp	r7, #120	; 0x78
 80137fe:	4691      	mov	r9, r2
 8013800:	4680      	mov	r8, r0
 8013802:	460c      	mov	r4, r1
 8013804:	469a      	mov	sl, r3
 8013806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801380a:	d807      	bhi.n	801381c <_printf_i+0x28>
 801380c:	2f62      	cmp	r7, #98	; 0x62
 801380e:	d80a      	bhi.n	8013826 <_printf_i+0x32>
 8013810:	2f00      	cmp	r7, #0
 8013812:	f000 80d8 	beq.w	80139c6 <_printf_i+0x1d2>
 8013816:	2f58      	cmp	r7, #88	; 0x58
 8013818:	f000 80a3 	beq.w	8013962 <_printf_i+0x16e>
 801381c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013824:	e03a      	b.n	801389c <_printf_i+0xa8>
 8013826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801382a:	2b15      	cmp	r3, #21
 801382c:	d8f6      	bhi.n	801381c <_printf_i+0x28>
 801382e:	a101      	add	r1, pc, #4	; (adr r1, 8013834 <_printf_i+0x40>)
 8013830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013834:	0801388d 	.word	0x0801388d
 8013838:	080138a1 	.word	0x080138a1
 801383c:	0801381d 	.word	0x0801381d
 8013840:	0801381d 	.word	0x0801381d
 8013844:	0801381d 	.word	0x0801381d
 8013848:	0801381d 	.word	0x0801381d
 801384c:	080138a1 	.word	0x080138a1
 8013850:	0801381d 	.word	0x0801381d
 8013854:	0801381d 	.word	0x0801381d
 8013858:	0801381d 	.word	0x0801381d
 801385c:	0801381d 	.word	0x0801381d
 8013860:	080139ad 	.word	0x080139ad
 8013864:	080138d1 	.word	0x080138d1
 8013868:	0801398f 	.word	0x0801398f
 801386c:	0801381d 	.word	0x0801381d
 8013870:	0801381d 	.word	0x0801381d
 8013874:	080139cf 	.word	0x080139cf
 8013878:	0801381d 	.word	0x0801381d
 801387c:	080138d1 	.word	0x080138d1
 8013880:	0801381d 	.word	0x0801381d
 8013884:	0801381d 	.word	0x0801381d
 8013888:	08013997 	.word	0x08013997
 801388c:	682b      	ldr	r3, [r5, #0]
 801388e:	1d1a      	adds	r2, r3, #4
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	602a      	str	r2, [r5, #0]
 8013894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801389c:	2301      	movs	r3, #1
 801389e:	e0a3      	b.n	80139e8 <_printf_i+0x1f4>
 80138a0:	6820      	ldr	r0, [r4, #0]
 80138a2:	6829      	ldr	r1, [r5, #0]
 80138a4:	0606      	lsls	r6, r0, #24
 80138a6:	f101 0304 	add.w	r3, r1, #4
 80138aa:	d50a      	bpl.n	80138c2 <_printf_i+0xce>
 80138ac:	680e      	ldr	r6, [r1, #0]
 80138ae:	602b      	str	r3, [r5, #0]
 80138b0:	2e00      	cmp	r6, #0
 80138b2:	da03      	bge.n	80138bc <_printf_i+0xc8>
 80138b4:	232d      	movs	r3, #45	; 0x2d
 80138b6:	4276      	negs	r6, r6
 80138b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138bc:	485e      	ldr	r0, [pc, #376]	; (8013a38 <_printf_i+0x244>)
 80138be:	230a      	movs	r3, #10
 80138c0:	e019      	b.n	80138f6 <_printf_i+0x102>
 80138c2:	680e      	ldr	r6, [r1, #0]
 80138c4:	602b      	str	r3, [r5, #0]
 80138c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80138ca:	bf18      	it	ne
 80138cc:	b236      	sxthne	r6, r6
 80138ce:	e7ef      	b.n	80138b0 <_printf_i+0xbc>
 80138d0:	682b      	ldr	r3, [r5, #0]
 80138d2:	6820      	ldr	r0, [r4, #0]
 80138d4:	1d19      	adds	r1, r3, #4
 80138d6:	6029      	str	r1, [r5, #0]
 80138d8:	0601      	lsls	r1, r0, #24
 80138da:	d501      	bpl.n	80138e0 <_printf_i+0xec>
 80138dc:	681e      	ldr	r6, [r3, #0]
 80138de:	e002      	b.n	80138e6 <_printf_i+0xf2>
 80138e0:	0646      	lsls	r6, r0, #25
 80138e2:	d5fb      	bpl.n	80138dc <_printf_i+0xe8>
 80138e4:	881e      	ldrh	r6, [r3, #0]
 80138e6:	4854      	ldr	r0, [pc, #336]	; (8013a38 <_printf_i+0x244>)
 80138e8:	2f6f      	cmp	r7, #111	; 0x6f
 80138ea:	bf0c      	ite	eq
 80138ec:	2308      	moveq	r3, #8
 80138ee:	230a      	movne	r3, #10
 80138f0:	2100      	movs	r1, #0
 80138f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138f6:	6865      	ldr	r5, [r4, #4]
 80138f8:	60a5      	str	r5, [r4, #8]
 80138fa:	2d00      	cmp	r5, #0
 80138fc:	bfa2      	ittt	ge
 80138fe:	6821      	ldrge	r1, [r4, #0]
 8013900:	f021 0104 	bicge.w	r1, r1, #4
 8013904:	6021      	strge	r1, [r4, #0]
 8013906:	b90e      	cbnz	r6, 801390c <_printf_i+0x118>
 8013908:	2d00      	cmp	r5, #0
 801390a:	d04d      	beq.n	80139a8 <_printf_i+0x1b4>
 801390c:	4615      	mov	r5, r2
 801390e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013912:	fb03 6711 	mls	r7, r3, r1, r6
 8013916:	5dc7      	ldrb	r7, [r0, r7]
 8013918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801391c:	4637      	mov	r7, r6
 801391e:	42bb      	cmp	r3, r7
 8013920:	460e      	mov	r6, r1
 8013922:	d9f4      	bls.n	801390e <_printf_i+0x11a>
 8013924:	2b08      	cmp	r3, #8
 8013926:	d10b      	bne.n	8013940 <_printf_i+0x14c>
 8013928:	6823      	ldr	r3, [r4, #0]
 801392a:	07de      	lsls	r6, r3, #31
 801392c:	d508      	bpl.n	8013940 <_printf_i+0x14c>
 801392e:	6923      	ldr	r3, [r4, #16]
 8013930:	6861      	ldr	r1, [r4, #4]
 8013932:	4299      	cmp	r1, r3
 8013934:	bfde      	ittt	le
 8013936:	2330      	movle	r3, #48	; 0x30
 8013938:	f805 3c01 	strble.w	r3, [r5, #-1]
 801393c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013940:	1b52      	subs	r2, r2, r5
 8013942:	6122      	str	r2, [r4, #16]
 8013944:	f8cd a000 	str.w	sl, [sp]
 8013948:	464b      	mov	r3, r9
 801394a:	aa03      	add	r2, sp, #12
 801394c:	4621      	mov	r1, r4
 801394e:	4640      	mov	r0, r8
 8013950:	f7ff fee2 	bl	8013718 <_printf_common>
 8013954:	3001      	adds	r0, #1
 8013956:	d14c      	bne.n	80139f2 <_printf_i+0x1fe>
 8013958:	f04f 30ff 	mov.w	r0, #4294967295
 801395c:	b004      	add	sp, #16
 801395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013962:	4835      	ldr	r0, [pc, #212]	; (8013a38 <_printf_i+0x244>)
 8013964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013968:	6829      	ldr	r1, [r5, #0]
 801396a:	6823      	ldr	r3, [r4, #0]
 801396c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013970:	6029      	str	r1, [r5, #0]
 8013972:	061d      	lsls	r5, r3, #24
 8013974:	d514      	bpl.n	80139a0 <_printf_i+0x1ac>
 8013976:	07df      	lsls	r7, r3, #31
 8013978:	bf44      	itt	mi
 801397a:	f043 0320 	orrmi.w	r3, r3, #32
 801397e:	6023      	strmi	r3, [r4, #0]
 8013980:	b91e      	cbnz	r6, 801398a <_printf_i+0x196>
 8013982:	6823      	ldr	r3, [r4, #0]
 8013984:	f023 0320 	bic.w	r3, r3, #32
 8013988:	6023      	str	r3, [r4, #0]
 801398a:	2310      	movs	r3, #16
 801398c:	e7b0      	b.n	80138f0 <_printf_i+0xfc>
 801398e:	6823      	ldr	r3, [r4, #0]
 8013990:	f043 0320 	orr.w	r3, r3, #32
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	2378      	movs	r3, #120	; 0x78
 8013998:	4828      	ldr	r0, [pc, #160]	; (8013a3c <_printf_i+0x248>)
 801399a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801399e:	e7e3      	b.n	8013968 <_printf_i+0x174>
 80139a0:	0659      	lsls	r1, r3, #25
 80139a2:	bf48      	it	mi
 80139a4:	b2b6      	uxthmi	r6, r6
 80139a6:	e7e6      	b.n	8013976 <_printf_i+0x182>
 80139a8:	4615      	mov	r5, r2
 80139aa:	e7bb      	b.n	8013924 <_printf_i+0x130>
 80139ac:	682b      	ldr	r3, [r5, #0]
 80139ae:	6826      	ldr	r6, [r4, #0]
 80139b0:	6961      	ldr	r1, [r4, #20]
 80139b2:	1d18      	adds	r0, r3, #4
 80139b4:	6028      	str	r0, [r5, #0]
 80139b6:	0635      	lsls	r5, r6, #24
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	d501      	bpl.n	80139c0 <_printf_i+0x1cc>
 80139bc:	6019      	str	r1, [r3, #0]
 80139be:	e002      	b.n	80139c6 <_printf_i+0x1d2>
 80139c0:	0670      	lsls	r0, r6, #25
 80139c2:	d5fb      	bpl.n	80139bc <_printf_i+0x1c8>
 80139c4:	8019      	strh	r1, [r3, #0]
 80139c6:	2300      	movs	r3, #0
 80139c8:	6123      	str	r3, [r4, #16]
 80139ca:	4615      	mov	r5, r2
 80139cc:	e7ba      	b.n	8013944 <_printf_i+0x150>
 80139ce:	682b      	ldr	r3, [r5, #0]
 80139d0:	1d1a      	adds	r2, r3, #4
 80139d2:	602a      	str	r2, [r5, #0]
 80139d4:	681d      	ldr	r5, [r3, #0]
 80139d6:	6862      	ldr	r2, [r4, #4]
 80139d8:	2100      	movs	r1, #0
 80139da:	4628      	mov	r0, r5
 80139dc:	f7ec fca0 	bl	8000320 <memchr>
 80139e0:	b108      	cbz	r0, 80139e6 <_printf_i+0x1f2>
 80139e2:	1b40      	subs	r0, r0, r5
 80139e4:	6060      	str	r0, [r4, #4]
 80139e6:	6863      	ldr	r3, [r4, #4]
 80139e8:	6123      	str	r3, [r4, #16]
 80139ea:	2300      	movs	r3, #0
 80139ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139f0:	e7a8      	b.n	8013944 <_printf_i+0x150>
 80139f2:	6923      	ldr	r3, [r4, #16]
 80139f4:	462a      	mov	r2, r5
 80139f6:	4649      	mov	r1, r9
 80139f8:	4640      	mov	r0, r8
 80139fa:	47d0      	blx	sl
 80139fc:	3001      	adds	r0, #1
 80139fe:	d0ab      	beq.n	8013958 <_printf_i+0x164>
 8013a00:	6823      	ldr	r3, [r4, #0]
 8013a02:	079b      	lsls	r3, r3, #30
 8013a04:	d413      	bmi.n	8013a2e <_printf_i+0x23a>
 8013a06:	68e0      	ldr	r0, [r4, #12]
 8013a08:	9b03      	ldr	r3, [sp, #12]
 8013a0a:	4298      	cmp	r0, r3
 8013a0c:	bfb8      	it	lt
 8013a0e:	4618      	movlt	r0, r3
 8013a10:	e7a4      	b.n	801395c <_printf_i+0x168>
 8013a12:	2301      	movs	r3, #1
 8013a14:	4632      	mov	r2, r6
 8013a16:	4649      	mov	r1, r9
 8013a18:	4640      	mov	r0, r8
 8013a1a:	47d0      	blx	sl
 8013a1c:	3001      	adds	r0, #1
 8013a1e:	d09b      	beq.n	8013958 <_printf_i+0x164>
 8013a20:	3501      	adds	r5, #1
 8013a22:	68e3      	ldr	r3, [r4, #12]
 8013a24:	9903      	ldr	r1, [sp, #12]
 8013a26:	1a5b      	subs	r3, r3, r1
 8013a28:	42ab      	cmp	r3, r5
 8013a2a:	dcf2      	bgt.n	8013a12 <_printf_i+0x21e>
 8013a2c:	e7eb      	b.n	8013a06 <_printf_i+0x212>
 8013a2e:	2500      	movs	r5, #0
 8013a30:	f104 0619 	add.w	r6, r4, #25
 8013a34:	e7f5      	b.n	8013a22 <_printf_i+0x22e>
 8013a36:	bf00      	nop
 8013a38:	08014101 	.word	0x08014101
 8013a3c:	08014112 	.word	0x08014112

08013a40 <memmove>:
 8013a40:	4288      	cmp	r0, r1
 8013a42:	b510      	push	{r4, lr}
 8013a44:	eb01 0402 	add.w	r4, r1, r2
 8013a48:	d902      	bls.n	8013a50 <memmove+0x10>
 8013a4a:	4284      	cmp	r4, r0
 8013a4c:	4623      	mov	r3, r4
 8013a4e:	d807      	bhi.n	8013a60 <memmove+0x20>
 8013a50:	1e43      	subs	r3, r0, #1
 8013a52:	42a1      	cmp	r1, r4
 8013a54:	d008      	beq.n	8013a68 <memmove+0x28>
 8013a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a5e:	e7f8      	b.n	8013a52 <memmove+0x12>
 8013a60:	4402      	add	r2, r0
 8013a62:	4601      	mov	r1, r0
 8013a64:	428a      	cmp	r2, r1
 8013a66:	d100      	bne.n	8013a6a <memmove+0x2a>
 8013a68:	bd10      	pop	{r4, pc}
 8013a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a72:	e7f7      	b.n	8013a64 <memmove+0x24>

08013a74 <_free_r>:
 8013a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a76:	2900      	cmp	r1, #0
 8013a78:	d044      	beq.n	8013b04 <_free_r+0x90>
 8013a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a7e:	9001      	str	r0, [sp, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f1a1 0404 	sub.w	r4, r1, #4
 8013a86:	bfb8      	it	lt
 8013a88:	18e4      	addlt	r4, r4, r3
 8013a8a:	f000 f913 	bl	8013cb4 <__malloc_lock>
 8013a8e:	4a1e      	ldr	r2, [pc, #120]	; (8013b08 <_free_r+0x94>)
 8013a90:	9801      	ldr	r0, [sp, #4]
 8013a92:	6813      	ldr	r3, [r2, #0]
 8013a94:	b933      	cbnz	r3, 8013aa4 <_free_r+0x30>
 8013a96:	6063      	str	r3, [r4, #4]
 8013a98:	6014      	str	r4, [r2, #0]
 8013a9a:	b003      	add	sp, #12
 8013a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aa0:	f000 b90e 	b.w	8013cc0 <__malloc_unlock>
 8013aa4:	42a3      	cmp	r3, r4
 8013aa6:	d908      	bls.n	8013aba <_free_r+0x46>
 8013aa8:	6825      	ldr	r5, [r4, #0]
 8013aaa:	1961      	adds	r1, r4, r5
 8013aac:	428b      	cmp	r3, r1
 8013aae:	bf01      	itttt	eq
 8013ab0:	6819      	ldreq	r1, [r3, #0]
 8013ab2:	685b      	ldreq	r3, [r3, #4]
 8013ab4:	1949      	addeq	r1, r1, r5
 8013ab6:	6021      	streq	r1, [r4, #0]
 8013ab8:	e7ed      	b.n	8013a96 <_free_r+0x22>
 8013aba:	461a      	mov	r2, r3
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	b10b      	cbz	r3, 8013ac4 <_free_r+0x50>
 8013ac0:	42a3      	cmp	r3, r4
 8013ac2:	d9fa      	bls.n	8013aba <_free_r+0x46>
 8013ac4:	6811      	ldr	r1, [r2, #0]
 8013ac6:	1855      	adds	r5, r2, r1
 8013ac8:	42a5      	cmp	r5, r4
 8013aca:	d10b      	bne.n	8013ae4 <_free_r+0x70>
 8013acc:	6824      	ldr	r4, [r4, #0]
 8013ace:	4421      	add	r1, r4
 8013ad0:	1854      	adds	r4, r2, r1
 8013ad2:	42a3      	cmp	r3, r4
 8013ad4:	6011      	str	r1, [r2, #0]
 8013ad6:	d1e0      	bne.n	8013a9a <_free_r+0x26>
 8013ad8:	681c      	ldr	r4, [r3, #0]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	6053      	str	r3, [r2, #4]
 8013ade:	4421      	add	r1, r4
 8013ae0:	6011      	str	r1, [r2, #0]
 8013ae2:	e7da      	b.n	8013a9a <_free_r+0x26>
 8013ae4:	d902      	bls.n	8013aec <_free_r+0x78>
 8013ae6:	230c      	movs	r3, #12
 8013ae8:	6003      	str	r3, [r0, #0]
 8013aea:	e7d6      	b.n	8013a9a <_free_r+0x26>
 8013aec:	6825      	ldr	r5, [r4, #0]
 8013aee:	1961      	adds	r1, r4, r5
 8013af0:	428b      	cmp	r3, r1
 8013af2:	bf04      	itt	eq
 8013af4:	6819      	ldreq	r1, [r3, #0]
 8013af6:	685b      	ldreq	r3, [r3, #4]
 8013af8:	6063      	str	r3, [r4, #4]
 8013afa:	bf04      	itt	eq
 8013afc:	1949      	addeq	r1, r1, r5
 8013afe:	6021      	streq	r1, [r4, #0]
 8013b00:	6054      	str	r4, [r2, #4]
 8013b02:	e7ca      	b.n	8013a9a <_free_r+0x26>
 8013b04:	b003      	add	sp, #12
 8013b06:	bd30      	pop	{r4, r5, pc}
 8013b08:	24002f3c 	.word	0x24002f3c

08013b0c <sbrk_aligned>:
 8013b0c:	b570      	push	{r4, r5, r6, lr}
 8013b0e:	4e0e      	ldr	r6, [pc, #56]	; (8013b48 <sbrk_aligned+0x3c>)
 8013b10:	460c      	mov	r4, r1
 8013b12:	6831      	ldr	r1, [r6, #0]
 8013b14:	4605      	mov	r5, r0
 8013b16:	b911      	cbnz	r1, 8013b1e <sbrk_aligned+0x12>
 8013b18:	f000 f8bc 	bl	8013c94 <_sbrk_r>
 8013b1c:	6030      	str	r0, [r6, #0]
 8013b1e:	4621      	mov	r1, r4
 8013b20:	4628      	mov	r0, r5
 8013b22:	f000 f8b7 	bl	8013c94 <_sbrk_r>
 8013b26:	1c43      	adds	r3, r0, #1
 8013b28:	d00a      	beq.n	8013b40 <sbrk_aligned+0x34>
 8013b2a:	1cc4      	adds	r4, r0, #3
 8013b2c:	f024 0403 	bic.w	r4, r4, #3
 8013b30:	42a0      	cmp	r0, r4
 8013b32:	d007      	beq.n	8013b44 <sbrk_aligned+0x38>
 8013b34:	1a21      	subs	r1, r4, r0
 8013b36:	4628      	mov	r0, r5
 8013b38:	f000 f8ac 	bl	8013c94 <_sbrk_r>
 8013b3c:	3001      	adds	r0, #1
 8013b3e:	d101      	bne.n	8013b44 <sbrk_aligned+0x38>
 8013b40:	f04f 34ff 	mov.w	r4, #4294967295
 8013b44:	4620      	mov	r0, r4
 8013b46:	bd70      	pop	{r4, r5, r6, pc}
 8013b48:	24002f40 	.word	0x24002f40

08013b4c <_malloc_r>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	1ccd      	adds	r5, r1, #3
 8013b52:	f025 0503 	bic.w	r5, r5, #3
 8013b56:	3508      	adds	r5, #8
 8013b58:	2d0c      	cmp	r5, #12
 8013b5a:	bf38      	it	cc
 8013b5c:	250c      	movcc	r5, #12
 8013b5e:	2d00      	cmp	r5, #0
 8013b60:	4607      	mov	r7, r0
 8013b62:	db01      	blt.n	8013b68 <_malloc_r+0x1c>
 8013b64:	42a9      	cmp	r1, r5
 8013b66:	d905      	bls.n	8013b74 <_malloc_r+0x28>
 8013b68:	230c      	movs	r3, #12
 8013b6a:	603b      	str	r3, [r7, #0]
 8013b6c:	2600      	movs	r6, #0
 8013b6e:	4630      	mov	r0, r6
 8013b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b74:	4e2e      	ldr	r6, [pc, #184]	; (8013c30 <_malloc_r+0xe4>)
 8013b76:	f000 f89d 	bl	8013cb4 <__malloc_lock>
 8013b7a:	6833      	ldr	r3, [r6, #0]
 8013b7c:	461c      	mov	r4, r3
 8013b7e:	bb34      	cbnz	r4, 8013bce <_malloc_r+0x82>
 8013b80:	4629      	mov	r1, r5
 8013b82:	4638      	mov	r0, r7
 8013b84:	f7ff ffc2 	bl	8013b0c <sbrk_aligned>
 8013b88:	1c43      	adds	r3, r0, #1
 8013b8a:	4604      	mov	r4, r0
 8013b8c:	d14d      	bne.n	8013c2a <_malloc_r+0xde>
 8013b8e:	6834      	ldr	r4, [r6, #0]
 8013b90:	4626      	mov	r6, r4
 8013b92:	2e00      	cmp	r6, #0
 8013b94:	d140      	bne.n	8013c18 <_malloc_r+0xcc>
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	4631      	mov	r1, r6
 8013b9a:	4638      	mov	r0, r7
 8013b9c:	eb04 0803 	add.w	r8, r4, r3
 8013ba0:	f000 f878 	bl	8013c94 <_sbrk_r>
 8013ba4:	4580      	cmp	r8, r0
 8013ba6:	d13a      	bne.n	8013c1e <_malloc_r+0xd2>
 8013ba8:	6821      	ldr	r1, [r4, #0]
 8013baa:	3503      	adds	r5, #3
 8013bac:	1a6d      	subs	r5, r5, r1
 8013bae:	f025 0503 	bic.w	r5, r5, #3
 8013bb2:	3508      	adds	r5, #8
 8013bb4:	2d0c      	cmp	r5, #12
 8013bb6:	bf38      	it	cc
 8013bb8:	250c      	movcc	r5, #12
 8013bba:	4629      	mov	r1, r5
 8013bbc:	4638      	mov	r0, r7
 8013bbe:	f7ff ffa5 	bl	8013b0c <sbrk_aligned>
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	d02b      	beq.n	8013c1e <_malloc_r+0xd2>
 8013bc6:	6823      	ldr	r3, [r4, #0]
 8013bc8:	442b      	add	r3, r5
 8013bca:	6023      	str	r3, [r4, #0]
 8013bcc:	e00e      	b.n	8013bec <_malloc_r+0xa0>
 8013bce:	6822      	ldr	r2, [r4, #0]
 8013bd0:	1b52      	subs	r2, r2, r5
 8013bd2:	d41e      	bmi.n	8013c12 <_malloc_r+0xc6>
 8013bd4:	2a0b      	cmp	r2, #11
 8013bd6:	d916      	bls.n	8013c06 <_malloc_r+0xba>
 8013bd8:	1961      	adds	r1, r4, r5
 8013bda:	42a3      	cmp	r3, r4
 8013bdc:	6025      	str	r5, [r4, #0]
 8013bde:	bf18      	it	ne
 8013be0:	6059      	strne	r1, [r3, #4]
 8013be2:	6863      	ldr	r3, [r4, #4]
 8013be4:	bf08      	it	eq
 8013be6:	6031      	streq	r1, [r6, #0]
 8013be8:	5162      	str	r2, [r4, r5]
 8013bea:	604b      	str	r3, [r1, #4]
 8013bec:	4638      	mov	r0, r7
 8013bee:	f104 060b 	add.w	r6, r4, #11
 8013bf2:	f000 f865 	bl	8013cc0 <__malloc_unlock>
 8013bf6:	f026 0607 	bic.w	r6, r6, #7
 8013bfa:	1d23      	adds	r3, r4, #4
 8013bfc:	1af2      	subs	r2, r6, r3
 8013bfe:	d0b6      	beq.n	8013b6e <_malloc_r+0x22>
 8013c00:	1b9b      	subs	r3, r3, r6
 8013c02:	50a3      	str	r3, [r4, r2]
 8013c04:	e7b3      	b.n	8013b6e <_malloc_r+0x22>
 8013c06:	6862      	ldr	r2, [r4, #4]
 8013c08:	42a3      	cmp	r3, r4
 8013c0a:	bf0c      	ite	eq
 8013c0c:	6032      	streq	r2, [r6, #0]
 8013c0e:	605a      	strne	r2, [r3, #4]
 8013c10:	e7ec      	b.n	8013bec <_malloc_r+0xa0>
 8013c12:	4623      	mov	r3, r4
 8013c14:	6864      	ldr	r4, [r4, #4]
 8013c16:	e7b2      	b.n	8013b7e <_malloc_r+0x32>
 8013c18:	4634      	mov	r4, r6
 8013c1a:	6876      	ldr	r6, [r6, #4]
 8013c1c:	e7b9      	b.n	8013b92 <_malloc_r+0x46>
 8013c1e:	230c      	movs	r3, #12
 8013c20:	603b      	str	r3, [r7, #0]
 8013c22:	4638      	mov	r0, r7
 8013c24:	f000 f84c 	bl	8013cc0 <__malloc_unlock>
 8013c28:	e7a1      	b.n	8013b6e <_malloc_r+0x22>
 8013c2a:	6025      	str	r5, [r4, #0]
 8013c2c:	e7de      	b.n	8013bec <_malloc_r+0xa0>
 8013c2e:	bf00      	nop
 8013c30:	24002f3c 	.word	0x24002f3c

08013c34 <_realloc_r>:
 8013c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	4680      	mov	r8, r0
 8013c3a:	4614      	mov	r4, r2
 8013c3c:	460e      	mov	r6, r1
 8013c3e:	b921      	cbnz	r1, 8013c4a <_realloc_r+0x16>
 8013c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c44:	4611      	mov	r1, r2
 8013c46:	f7ff bf81 	b.w	8013b4c <_malloc_r>
 8013c4a:	b92a      	cbnz	r2, 8013c58 <_realloc_r+0x24>
 8013c4c:	f7ff ff12 	bl	8013a74 <_free_r>
 8013c50:	4625      	mov	r5, r4
 8013c52:	4628      	mov	r0, r5
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	f000 f838 	bl	8013ccc <_malloc_usable_size_r>
 8013c5c:	4284      	cmp	r4, r0
 8013c5e:	4607      	mov	r7, r0
 8013c60:	d802      	bhi.n	8013c68 <_realloc_r+0x34>
 8013c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c66:	d812      	bhi.n	8013c8e <_realloc_r+0x5a>
 8013c68:	4621      	mov	r1, r4
 8013c6a:	4640      	mov	r0, r8
 8013c6c:	f7ff ff6e 	bl	8013b4c <_malloc_r>
 8013c70:	4605      	mov	r5, r0
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d0ed      	beq.n	8013c52 <_realloc_r+0x1e>
 8013c76:	42bc      	cmp	r4, r7
 8013c78:	4622      	mov	r2, r4
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	bf28      	it	cs
 8013c7e:	463a      	movcs	r2, r7
 8013c80:	f7ff fbb8 	bl	80133f4 <memcpy>
 8013c84:	4631      	mov	r1, r6
 8013c86:	4640      	mov	r0, r8
 8013c88:	f7ff fef4 	bl	8013a74 <_free_r>
 8013c8c:	e7e1      	b.n	8013c52 <_realloc_r+0x1e>
 8013c8e:	4635      	mov	r5, r6
 8013c90:	e7df      	b.n	8013c52 <_realloc_r+0x1e>
	...

08013c94 <_sbrk_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d06      	ldr	r5, [pc, #24]	; (8013cb0 <_sbrk_r+0x1c>)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	f7ee fdc6 	bl	8002830 <_sbrk>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	d102      	bne.n	8013cae <_sbrk_r+0x1a>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	b103      	cbz	r3, 8013cae <_sbrk_r+0x1a>
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	bd38      	pop	{r3, r4, r5, pc}
 8013cb0:	24002f44 	.word	0x24002f44

08013cb4 <__malloc_lock>:
 8013cb4:	4801      	ldr	r0, [pc, #4]	; (8013cbc <__malloc_lock+0x8>)
 8013cb6:	f000 b811 	b.w	8013cdc <__retarget_lock_acquire_recursive>
 8013cba:	bf00      	nop
 8013cbc:	24002f48 	.word	0x24002f48

08013cc0 <__malloc_unlock>:
 8013cc0:	4801      	ldr	r0, [pc, #4]	; (8013cc8 <__malloc_unlock+0x8>)
 8013cc2:	f000 b80c 	b.w	8013cde <__retarget_lock_release_recursive>
 8013cc6:	bf00      	nop
 8013cc8:	24002f48 	.word	0x24002f48

08013ccc <_malloc_usable_size_r>:
 8013ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cd0:	1f18      	subs	r0, r3, #4
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	bfbc      	itt	lt
 8013cd6:	580b      	ldrlt	r3, [r1, r0]
 8013cd8:	18c0      	addlt	r0, r0, r3
 8013cda:	4770      	bx	lr

08013cdc <__retarget_lock_acquire_recursive>:
 8013cdc:	4770      	bx	lr

08013cde <__retarget_lock_release_recursive>:
 8013cde:	4770      	bx	lr

08013ce0 <fmod>:
 8013ce0:	b508      	push	{r3, lr}
 8013ce2:	ed2d 8b04 	vpush	{d8-d9}
 8013ce6:	eeb0 9b40 	vmov.f64	d9, d0
 8013cea:	eeb0 8b41 	vmov.f64	d8, d1
 8013cee:	f000 f81b 	bl	8013d28 <__ieee754_fmod>
 8013cf2:	eeb4 9b48 	vcmp.f64	d9, d8
 8013cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfa:	d60c      	bvs.n	8013d16 <fmod+0x36>
 8013cfc:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8013d20 <fmod+0x40>
 8013d00:	eeb4 8b49 	vcmp.f64	d8, d9
 8013d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d08:	d105      	bne.n	8013d16 <fmod+0x36>
 8013d0a:	f7ff fb49 	bl	80133a0 <__errno>
 8013d0e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013d12:	2321      	movs	r3, #33	; 0x21
 8013d14:	6003      	str	r3, [r0, #0]
 8013d16:	ecbd 8b04 	vpop	{d8-d9}
 8013d1a:	bd08      	pop	{r3, pc}
 8013d1c:	f3af 8000 	nop.w
	...

08013d28 <__ieee754_fmod>:
 8013d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013d2c:	ed8d 1b00 	vstr	d1, [sp]
 8013d30:	e9dd 6500 	ldrd	r6, r5, [sp]
 8013d34:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013d38:	ea57 0306 	orrs.w	r3, r7, r6
 8013d3c:	46b4      	mov	ip, r6
 8013d3e:	d00d      	beq.n	8013d5c <__ieee754_fmod+0x34>
 8013d40:	ee10 9a90 	vmov	r9, s1
 8013d44:	4a7b      	ldr	r2, [pc, #492]	; (8013f34 <__ieee754_fmod+0x20c>)
 8013d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	dc06      	bgt.n	8013d5c <__ieee754_fmod+0x34>
 8013d4e:	4272      	negs	r2, r6
 8013d50:	4879      	ldr	r0, [pc, #484]	; (8013f38 <__ieee754_fmod+0x210>)
 8013d52:	4332      	orrs	r2, r6
 8013d54:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 8013d58:	4282      	cmp	r2, r0
 8013d5a:	d908      	bls.n	8013d6e <__ieee754_fmod+0x46>
 8013d5c:	ed9d 7b00 	vldr	d7, [sp]
 8013d60:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013d64:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8013d68:	b003      	add	sp, #12
 8013d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d6e:	42bb      	cmp	r3, r7
 8013d70:	ee10 ea10 	vmov	lr, s0
 8013d74:	ee10 1a10 	vmov	r1, s0
 8013d78:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 8013d7c:	dc09      	bgt.n	8013d92 <__ieee754_fmod+0x6a>
 8013d7e:	dbf3      	blt.n	8013d68 <__ieee754_fmod+0x40>
 8013d80:	45b6      	cmp	lr, r6
 8013d82:	d3f1      	bcc.n	8013d68 <__ieee754_fmod+0x40>
 8013d84:	d105      	bne.n	8013d92 <__ieee754_fmod+0x6a>
 8013d86:	4b6d      	ldr	r3, [pc, #436]	; (8013f3c <__ieee754_fmod+0x214>)
 8013d88:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 8013d8c:	ed94 0b00 	vldr	d0, [r4]
 8013d90:	e7ea      	b.n	8013d68 <__ieee754_fmod+0x40>
 8013d92:	ea19 0f00 	tst.w	r9, r0
 8013d96:	d14d      	bne.n	8013e34 <__ieee754_fmod+0x10c>
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d144      	bne.n	8013e26 <__ieee754_fmod+0xfe>
 8013d9c:	4868      	ldr	r0, [pc, #416]	; (8013f40 <__ieee754_fmod+0x218>)
 8013d9e:	4672      	mov	r2, lr
 8013da0:	2a00      	cmp	r2, #0
 8013da2:	dc3d      	bgt.n	8013e20 <__ieee754_fmod+0xf8>
 8013da4:	4a64      	ldr	r2, [pc, #400]	; (8013f38 <__ieee754_fmod+0x210>)
 8013da6:	402a      	ands	r2, r5
 8013da8:	2a00      	cmp	r2, #0
 8013daa:	d155      	bne.n	8013e58 <__ieee754_fmod+0x130>
 8013dac:	2f00      	cmp	r7, #0
 8013dae:	d149      	bne.n	8013e44 <__ieee754_fmod+0x11c>
 8013db0:	46b0      	mov	r8, r6
 8013db2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8013db6:	f1b8 0f00 	cmp.w	r8, #0
 8013dba:	dc3f      	bgt.n	8013e3c <__ieee754_fmod+0x114>
 8013dbc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8013f44 <__ieee754_fmod+0x21c>
 8013dc0:	4540      	cmp	r0, r8
 8013dc2:	db4d      	blt.n	8013e60 <__ieee754_fmod+0x138>
 8013dc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013dcc:	f8df e174 	ldr.w	lr, [pc, #372]	; 8013f44 <__ieee754_fmod+0x21c>
 8013dd0:	4572      	cmp	r2, lr
 8013dd2:	db59      	blt.n	8013e88 <__ieee754_fmod+0x160>
 8013dd4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013dd8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8013ddc:	1a80      	subs	r0, r0, r2
 8013dde:	1b5e      	subs	r6, r3, r5
 8013de0:	eba1 070c 	sub.w	r7, r1, ip
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d165      	bne.n	8013eb4 <__ieee754_fmod+0x18c>
 8013de8:	4561      	cmp	r1, ip
 8013dea:	bf38      	it	cc
 8013dec:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8013df0:	2e00      	cmp	r6, #0
 8013df2:	bfa4      	itt	ge
 8013df4:	4639      	movge	r1, r7
 8013df6:	4633      	movge	r3, r6
 8013df8:	ea53 0001 	orrs.w	r0, r3, r1
 8013dfc:	d0c3      	beq.n	8013d86 <__ieee754_fmod+0x5e>
 8013dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013e02:	db6c      	blt.n	8013ede <__ieee754_fmod+0x1b6>
 8013e04:	484f      	ldr	r0, [pc, #316]	; (8013f44 <__ieee754_fmod+0x21c>)
 8013e06:	4282      	cmp	r2, r0
 8013e08:	db6f      	blt.n	8013eea <__ieee754_fmod+0x1c2>
 8013e0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013e0e:	4323      	orrs	r3, r4
 8013e10:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8013e14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e18:	460c      	mov	r4, r1
 8013e1a:	ec45 4b10 	vmov	d0, r4, r5
 8013e1e:	e7a3      	b.n	8013d68 <__ieee754_fmod+0x40>
 8013e20:	3801      	subs	r0, #1
 8013e22:	0052      	lsls	r2, r2, #1
 8013e24:	e7bc      	b.n	8013da0 <__ieee754_fmod+0x78>
 8013e26:	4847      	ldr	r0, [pc, #284]	; (8013f44 <__ieee754_fmod+0x21c>)
 8013e28:	02da      	lsls	r2, r3, #11
 8013e2a:	2a00      	cmp	r2, #0
 8013e2c:	ddba      	ble.n	8013da4 <__ieee754_fmod+0x7c>
 8013e2e:	3801      	subs	r0, #1
 8013e30:	0052      	lsls	r2, r2, #1
 8013e32:	e7fa      	b.n	8013e2a <__ieee754_fmod+0x102>
 8013e34:	1518      	asrs	r0, r3, #20
 8013e36:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013e3a:	e7b3      	b.n	8013da4 <__ieee754_fmod+0x7c>
 8013e3c:	3a01      	subs	r2, #1
 8013e3e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013e42:	e7b8      	b.n	8013db6 <__ieee754_fmod+0x8e>
 8013e44:	4a3f      	ldr	r2, [pc, #252]	; (8013f44 <__ieee754_fmod+0x21c>)
 8013e46:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 8013e4a:	f1b8 0f00 	cmp.w	r8, #0
 8013e4e:	ddb5      	ble.n	8013dbc <__ieee754_fmod+0x94>
 8013e50:	3a01      	subs	r2, #1
 8013e52:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013e56:	e7f8      	b.n	8013e4a <__ieee754_fmod+0x122>
 8013e58:	153a      	asrs	r2, r7, #20
 8013e5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013e5e:	e7ad      	b.n	8013dbc <__ieee754_fmod+0x94>
 8013e60:	eba8 0100 	sub.w	r1, r8, r0
 8013e64:	291f      	cmp	r1, #31
 8013e66:	dc09      	bgt.n	8013e7c <__ieee754_fmod+0x154>
 8013e68:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 8013e6c:	408b      	lsls	r3, r1
 8013e6e:	fa2e f808 	lsr.w	r8, lr, r8
 8013e72:	ea48 0303 	orr.w	r3, r8, r3
 8013e76:	fa0e f101 	lsl.w	r1, lr, r1
 8013e7a:	e7a7      	b.n	8013dcc <__ieee754_fmod+0xa4>
 8013e7c:	4b32      	ldr	r3, [pc, #200]	; (8013f48 <__ieee754_fmod+0x220>)
 8013e7e:	1a1b      	subs	r3, r3, r0
 8013e80:	fa0e f303 	lsl.w	r3, lr, r3
 8013e84:	2100      	movs	r1, #0
 8013e86:	e7a1      	b.n	8013dcc <__ieee754_fmod+0xa4>
 8013e88:	ebae 0c02 	sub.w	ip, lr, r2
 8013e8c:	f1bc 0f1f 	cmp.w	ip, #31
 8013e90:	dc09      	bgt.n	8013ea6 <__ieee754_fmod+0x17e>
 8013e92:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8013e96:	fa07 f70c 	lsl.w	r7, r7, ip
 8013e9a:	fa26 f505 	lsr.w	r5, r6, r5
 8013e9e:	433d      	orrs	r5, r7
 8013ea0:	fa06 fc0c 	lsl.w	ip, r6, ip
 8013ea4:	e79a      	b.n	8013ddc <__ieee754_fmod+0xb4>
 8013ea6:	4d28      	ldr	r5, [pc, #160]	; (8013f48 <__ieee754_fmod+0x220>)
 8013ea8:	1aad      	subs	r5, r5, r2
 8013eaa:	fa06 f505 	lsl.w	r5, r6, r5
 8013eae:	f04f 0c00 	mov.w	ip, #0
 8013eb2:	e793      	b.n	8013ddc <__ieee754_fmod+0xb4>
 8013eb4:	4561      	cmp	r1, ip
 8013eb6:	bf38      	it	cc
 8013eb8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8013ebc:	2e00      	cmp	r6, #0
 8013ebe:	da05      	bge.n	8013ecc <__ieee754_fmod+0x1a4>
 8013ec0:	0fce      	lsrs	r6, r1, #31
 8013ec2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8013ec6:	0049      	lsls	r1, r1, #1
 8013ec8:	3801      	subs	r0, #1
 8013eca:	e788      	b.n	8013dde <__ieee754_fmod+0xb6>
 8013ecc:	ea56 0307 	orrs.w	r3, r6, r7
 8013ed0:	f43f af59 	beq.w	8013d86 <__ieee754_fmod+0x5e>
 8013ed4:	0ffb      	lsrs	r3, r7, #31
 8013ed6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8013eda:	0079      	lsls	r1, r7, #1
 8013edc:	e7f4      	b.n	8013ec8 <__ieee754_fmod+0x1a0>
 8013ede:	0fc8      	lsrs	r0, r1, #31
 8013ee0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013ee4:	0049      	lsls	r1, r1, #1
 8013ee6:	3a01      	subs	r2, #1
 8013ee8:	e789      	b.n	8013dfe <__ieee754_fmod+0xd6>
 8013eea:	1a80      	subs	r0, r0, r2
 8013eec:	2814      	cmp	r0, #20
 8013eee:	dc0c      	bgt.n	8013f0a <__ieee754_fmod+0x1e2>
 8013ef0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8013ef4:	fa03 f202 	lsl.w	r2, r3, r2
 8013ef8:	40c1      	lsrs	r1, r0
 8013efa:	430a      	orrs	r2, r1
 8013efc:	4103      	asrs	r3, r0
 8013efe:	ea43 0104 	orr.w	r1, r3, r4
 8013f02:	4610      	mov	r0, r2
 8013f04:	ec41 0b10 	vmov	d0, r0, r1
 8013f08:	e72e      	b.n	8013d68 <__ieee754_fmod+0x40>
 8013f0a:	281f      	cmp	r0, #31
 8013f0c:	dc07      	bgt.n	8013f1e <__ieee754_fmod+0x1f6>
 8013f0e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8013f12:	40c1      	lsrs	r1, r0
 8013f14:	fa03 f202 	lsl.w	r2, r3, r2
 8013f18:	430a      	orrs	r2, r1
 8013f1a:	4623      	mov	r3, r4
 8013f1c:	e7ef      	b.n	8013efe <__ieee754_fmod+0x1d6>
 8013f1e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8013f22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013f26:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8013f2a:	32e2      	adds	r2, #226	; 0xe2
 8013f2c:	fa43 f202 	asr.w	r2, r3, r2
 8013f30:	e7f3      	b.n	8013f1a <__ieee754_fmod+0x1f2>
 8013f32:	bf00      	nop
 8013f34:	7fefffff 	.word	0x7fefffff
 8013f38:	7ff00000 	.word	0x7ff00000
 8013f3c:	08014128 	.word	0x08014128
 8013f40:	fffffbed 	.word	0xfffffbed
 8013f44:	fffffc02 	.word	0xfffffc02
 8013f48:	fffffbe2 	.word	0xfffffbe2

08013f4c <_init>:
 8013f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4e:	bf00      	nop
 8013f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f52:	bc08      	pop	{r3}
 8013f54:	469e      	mov	lr, r3
 8013f56:	4770      	bx	lr

08013f58 <_fini>:
 8013f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5a:	bf00      	nop
 8013f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f5e:	bc08      	pop	{r3}
 8013f60:	469e      	mov	lr, r3
 8013f62:	4770      	bx	lr
