
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017044  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08017314  08017314  00027314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801751c  0801751c  0002751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017524  08017524  00027524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017528  08017528  00027528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  0801752c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f6c  24000164  08017690  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240030d0  08017690  000330d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   000373e9  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f37  00000000  00000000  0006757b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a98  00000000  00000000  0006d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002830  00000000  00000000  0006ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e4e3  00000000  00000000  00072780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039446  00000000  00000000  000b0c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d62f  00000000  00000000  000ea0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002676d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bce4  00000000  00000000  00267728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080172fc 	.word	0x080172fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	080172fc 	.word	0x080172fc

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f007 f99e 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00d ff1a 	bl	800e540 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00d ff14 	bl	800e540 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f007 f98c 	bl	8007a3c <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000ed0 	.word	0x24000ed0

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f007 f974 	bl	8007a3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00d fef0 	bl	800e540 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00e f8e5 	bl	800e938 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f007 f961 	bl	8007a3c <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000ed0 	.word	0x24000ed0

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f007 f94a 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00d fec6 	bl	800e540 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00d fec0 	bl	800e540 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f007 f938 	bl	8007a3c <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000ed0 	.word	0x24000ed0

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3333 + (3333 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000994 <setServo+0x84>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81b      	bhi.n	8000982 <setServo+0x72>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	0800097b 	.word	0x0800097b
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <setServo+0x88>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00d      	b.n	8000984 <setServo+0x74>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <setServo+0x88>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e009      	b.n	8000984 <setServo+0x74>
		case 3:
			TIM4->CCR2 = 3333;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <setServo+0x88>)
 8000972:	f640 5205 	movw	r2, #3333	; 0xd05
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000978:	e004      	b.n	8000984 <setServo+0x74>
		case 4:
			TIM4->CCR1 = timerVal;
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <setServo+0x88>)
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000980:	e000      	b.n	8000984 <setServo+0x74>

		default:
			break;
 8000982:	bf00      	nop
	}
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	43340000 	.word	0x43340000
 8000994:	45505000 	.word	0x45505000
 8000998:	40000800 	.word	0x40000800

0800099c <setLEDs>:

void setLEDs(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
 80009a6:	e181      	b.n	8000cac <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a8:	4aa1      	ldr	r2, [pc, #644]	; (8000c30 <setLEDs+0x294>)
 80009aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	f200 8177 	bhi.w	8000ca4 <setLEDs+0x308>
 80009b6:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <setLEDs+0x20>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009cd 	.word	0x080009cd
 80009c0:	08000a7d 	.word	0x08000a7d
 80009c4:	08000b2d 	.word	0x08000b2d
 80009c8:	08000bdd 	.word	0x08000bdd
		case 0:
			for (int j = 0; j < 3; j++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
 80009d0:	e042      	b.n	8000a58 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d6:	e039      	b.n	8000a4c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d8:	4996      	ldr	r1, [pc, #600]	; (8000c34 <setLEDs+0x298>)
 80009da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e4:	4413      	add	r3, r2
 80009e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ee:	fa41 f202 	asr.w	r2, r1, r2
 80009f2:	4013      	ands	r3, r2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d013      	beq.n	8000a20 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fa:	00da      	lsls	r2, r3, #3
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	18d1      	adds	r1, r2, r3
 8000a00:	4a8b      	ldr	r2, [pc, #556]	; (8000c30 <setLEDs+0x294>)
 8000a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4413      	add	r3, r2
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	440b      	add	r3, r1
 8000a14:	3308      	adds	r3, #8
 8000a16:	4a88      	ldr	r2, [pc, #544]	; (8000c38 <setLEDs+0x29c>)
 8000a18:	213c      	movs	r1, #60	; 0x3c
 8000a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1e:	e012      	b.n	8000a46 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a22:	00da      	lsls	r2, r3, #3
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	18d1      	adds	r1, r2, r3
 8000a28:	4a81      	ldr	r2, [pc, #516]	; (8000c30 <setLEDs+0x294>)
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4413      	add	r3, r2
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	4a7e      	ldr	r2, [pc, #504]	; (8000c38 <setLEDs+0x29c>)
 8000a40:	211e      	movs	r1, #30
 8000a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	3301      	adds	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	ddc2      	ble.n	80009d8 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a54:	3301      	adds	r3, #1
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	ddb9      	ble.n	80009d2 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a62:	e007      	b.n	8000a74 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a64:	4a74      	ldr	r2, [pc, #464]	; (8000c38 <setLEDs+0x29c>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	3301      	adds	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	2bb1      	cmp	r3, #177	; 0xb1
 8000a78:	ddf4      	ble.n	8000a64 <setLEDs+0xc8>
			}
			break;
 8000a7a:	e114      	b.n	8000ca6 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a80:	e042      	b.n	8000b08 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	e039      	b.n	8000afc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a88:	496a      	ldr	r1, [pc, #424]	; (8000c34 <setLEDs+0x298>)
 8000a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a94:	4413      	add	r3, r2
 8000a96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	6a3a      	ldr	r2, [r7, #32]
 8000a9e:	fa41 f202 	asr.w	r2, r1, r2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d013      	beq.n	8000ad0 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	00da      	lsls	r2, r3, #3
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	18d1      	adds	r1, r2, r3
 8000ab0:	4a5f      	ldr	r2, [pc, #380]	; (8000c30 <setLEDs+0x294>)
 8000ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	4a5d      	ldr	r2, [pc, #372]	; (8000c3c <setLEDs+0x2a0>)
 8000ac8:	213c      	movs	r1, #60	; 0x3c
 8000aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ace:	e012      	b.n	8000af6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	00da      	lsls	r2, r3, #3
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	18d1      	adds	r1, r2, r3
 8000ad8:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <setLEDs+0x294>)
 8000ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	4413      	add	r3, r2
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	3308      	adds	r3, #8
 8000aee:	4a53      	ldr	r2, [pc, #332]	; (8000c3c <setLEDs+0x2a0>)
 8000af0:	211e      	movs	r1, #30
 8000af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	3301      	adds	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	ddc2      	ble.n	8000a88 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	ddb9      	ble.n	8000a82 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	e007      	b.n	8000b24 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <setLEDs+0x2a0>)
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2bb1      	cmp	r3, #177	; 0xb1
 8000b28:	ddf4      	ble.n	8000b14 <setLEDs+0x178>
			}
			break;
 8000b2a:	e0bc      	b.n	8000ca6 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	e042      	b.n	8000bb8 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e039      	b.n	8000bac <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b38:	493e      	ldr	r1, [pc, #248]	; (8000c34 <setLEDs+0x298>)
 8000b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4413      	add	r3, r2
 8000b46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	fa41 f202 	asr.w	r2, r1, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d013      	beq.n	8000b80 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	00da      	lsls	r2, r3, #3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	18d1      	adds	r1, r2, r3
 8000b60:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4413      	add	r3, r2
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <setLEDs+0x2a4>)
 8000b78:	213c      	movs	r1, #60	; 0x3c
 8000b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7e:	e012      	b.n	8000ba6 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	00da      	lsls	r2, r3, #3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	18d1      	adds	r1, r2, r3
 8000b88:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <setLEDs+0x294>)
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	4413      	add	r3, r2
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <setLEDs+0x2a4>)
 8000ba0:	211e      	movs	r1, #30
 8000ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2b07      	cmp	r3, #7
 8000bb0:	ddc2      	ble.n	8000b38 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	ddb9      	ble.n	8000b32 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bbe:	2338      	movs	r3, #56	; 0x38
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	e007      	b.n	8000bd4 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <setLEDs+0x2a4>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2b69      	cmp	r3, #105	; 0x69
 8000bd8:	ddf4      	ble.n	8000bc4 <setLEDs+0x228>
			}
			break;
 8000bda:	e064      	b.n	8000ca6 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e04e      	b.n	8000c80 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	e045      	b.n	8000c74 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be8:	4912      	ldr	r1, [pc, #72]	; (8000c34 <setLEDs+0x298>)
 8000bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	fa41 f202 	asr.w	r2, r1, r2
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01f      	beq.n	8000c48 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	00da      	lsls	r2, r3, #3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	18d1      	adds	r1, r2, r3
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <setLEDs+0x294>)
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	4413      	add	r3, r2
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3308      	adds	r3, #8
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <setLEDs+0x2a8>)
 8000c28:	213c      	movs	r1, #60	; 0x3c
 8000c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2e:	e01e      	b.n	8000c6e <setLEDs+0x2d2>
 8000c30:	08017424 	.word	0x08017424
 8000c34:	24000a60 	.word	0x24000a60
 8000c38:	24000180 	.word	0x24000180
 8000c3c:	24000448 	.word	0x24000448
 8000c40:	24000710 	.word	0x24000710
 8000c44:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	00da      	lsls	r2, r3, #3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	18d1      	adds	r1, r2, r3
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <setLEDs+0x350>)
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <setLEDs+0x354>)
 8000c68:	211e      	movs	r1, #30
 8000c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	ddb6      	ble.n	8000be8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	ddad      	ble.n	8000be2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c86:	2338      	movs	r3, #56	; 0x38
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e007      	b.n	8000c9c <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <setLEDs+0x354>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2100      	movs	r1, #0
 8000c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b69      	cmp	r3, #105	; 0x69
 8000ca0:	ddf4      	ble.n	8000c8c <setLEDs+0x2f0>
			}
			break;
 8000ca2:	e000      	b.n	8000ca6 <setLEDs+0x30a>
		default:
			break;
 8000ca4:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca8:	3301      	adds	r3, #1
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
 8000cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cae:	2b0d      	cmp	r3, #13
 8000cb0:	f77f ae7a 	ble.w	80009a8 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb4:	23b2      	movs	r3, #178	; 0xb2
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <setLEDs+0x358>)
 8000cb8:	210c      	movs	r1, #12
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <setLEDs+0x35c>)
 8000cbc:	f00e fa28 	bl	800f110 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cc0:	23b2      	movs	r3, #178	; 0xb2
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <setLEDs+0x360>)
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <setLEDs+0x364>)
 8000cc8:	f00e fa22 	bl	800f110 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000ccc:	236a      	movs	r3, #106	; 0x6a
 8000cce:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <setLEDs+0x368>)
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <setLEDs+0x36c>)
 8000cd4:	f00e fa1c 	bl	800f110 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd8:	236a      	movs	r3, #106	; 0x6a
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <setLEDs+0x354>)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <setLEDs+0x36c>)
 8000ce0:	f00e fa16 	bl	800f110 <HAL_TIM_PWM_Start_DMA>

}
 8000ce4:	bf00      	nop
 8000ce6:	3738      	adds	r7, #56	; 0x38
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08017424 	.word	0x08017424
 8000cf0:	240008b8 	.word	0x240008b8
 8000cf4:	24000180 	.word	0x24000180
 8000cf8:	240010c4 	.word	0x240010c4
 8000cfc:	24000448 	.word	0x24000448
 8000d00:	24000fe0 	.word	0x24000fe0
 8000d04:	24000710 	.word	0x24000710
 8000d08:	2400102c 	.word	0x2400102c

08000d0c <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoRA_Read_Register+0x48>)
 8000d1e:	f006 fe8d 	bl	8007a3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	2201      	movs	r2, #1
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <LoRA_Read_Register+0x4c>)
 8000d2a:	f00d fc09 	bl	800e540 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2e:	f107 010f 	add.w	r1, r7, #15
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	2201      	movs	r2, #1
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <LoRA_Read_Register+0x4c>)
 8000d38:	f00d fdfe 	bl	800e938 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <LoRA_Read_Register+0x48>)
 8000d44:	f006 fe7a 	bl	8007a3c <HAL_GPIO_WritePin>

	return reg_value;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	58020000 	.word	0x58020000
 8000d58:	24000f58 	.word	0x24000f58

08000d5c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoRA_Write_Register+0x54>)
 8000d7e:	f006 fe5d 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <LoRA_Write_Register+0x58>)
 8000d8a:	f00d fbd9 	bl	800e540 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8e:	1db9      	adds	r1, r7, #6
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2201      	movs	r2, #1
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <LoRA_Write_Register+0x58>)
 8000d96:	f00d fbd3 	bl	800e540 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <LoRA_Write_Register+0x54>)
 8000da2:	f006 fe4b 	bl	8007a3c <HAL_GPIO_WritePin>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58020000 	.word	0x58020000
 8000db4:	24000f58 	.word	0x24000f58

08000db8 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff ffcc 	bl	8000d5c <LoRA_Write_Register>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	17c8      	asrs	r0, r1, #31
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	1355      	asrs	r5, r2, #13
 8000dda:	04d4      	lsls	r4, r2, #19
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <LoRA_set_frequency+0x78>)
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	4620      	mov	r0, r4
 8000de4:	4629      	mov	r1, r5
 8000de6:	f7ff fafb 	bl	80003e0 <__aeabi_uldivmod>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	0c02      	lsrs	r2, r0, #16
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	b2d3      	uxtb	r3, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2006      	movs	r0, #6
 8000e0c:	f7ff ffa6 	bl	8000d5c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	0a02      	lsrs	r2, r0, #8
 8000e1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e22:	0a0b      	lsrs	r3, r1, #8
 8000e24:	b2d3      	uxtb	r3, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	2007      	movs	r0, #7
 8000e2a:	f7ff ff97 	bl	8000d5c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2e:	7a3b      	ldrb	r3, [r7, #8]
 8000e30:	4619      	mov	r1, r3
 8000e32:	2008      	movs	r0, #8
 8000e34:	f7ff ff92 	bl	8000d5c <LoRA_Write_Register>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	01e84800 	.word	0x01e84800

08000e44 <LoRA_idle>:

void LoRA_idle(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e48:	2181      	movs	r1, #129	; 0x81
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff ff86 	bl	8000d5c <LoRA_Write_Register>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5e:	231b      	movs	r3, #27
 8000e60:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b78      	cmp	r3, #120	; 0x78
 8000e66:	d809      	bhi.n	8000e7c <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	3b2d      	subs	r3, #45	; 0x2d
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <LoRA_setOCP+0x60>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1052      	asrs	r2, r2, #1
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e00b      	b.n	8000e94 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2bf0      	cmp	r3, #240	; 0xf0
 8000e80:	d808      	bhi.n	8000e94 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	331e      	adds	r3, #30
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <LoRA_setOCP+0x60>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1092      	asrs	r2, r2, #2
 8000e8e:	17db      	asrs	r3, r3, #31
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	200b      	movs	r0, #11
 8000ea6:	f7ff ff59 	bl	8000d5c <LoRA_Write_Register>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	66666667 	.word	0x66666667

08000eb8 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b11      	cmp	r3, #17
 8000ec4:	dd0f      	ble.n	8000ee6 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b14      	cmp	r3, #20
 8000eca:	dd01      	ble.n	8000ed0 <LoRA_setTxPower+0x18>
        level = 20;
 8000ecc:	2314      	movs	r3, #20
 8000ece:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b03      	subs	r3, #3
 8000ed4:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed6:	2187      	movs	r1, #135	; 0x87
 8000ed8:	204d      	movs	r0, #77	; 0x4d
 8000eda:	f7ff ff3f 	bl	8000d5c <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ede:	208c      	movs	r0, #140	; 0x8c
 8000ee0:	f7ff ffb8 	bl	8000e54 <LoRA_setOCP>
 8000ee4:	e00b      	b.n	8000efe <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	dc01      	bgt.n	8000ef0 <LoRA_setTxPower+0x38>
        level = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ef0:	2184      	movs	r1, #132	; 0x84
 8000ef2:	204d      	movs	r0, #77	; 0x4d
 8000ef4:	f7ff ff32 	bl	8000d5c <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f7ff ffab 	bl	8000e54 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3b02      	subs	r3, #2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	2009      	movs	r0, #9
 8000f14:	f7ff ff22 	bl	8000d5c <LoRA_Write_Register>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f24:	201d      	movs	r0, #29
 8000f26:	f7ff fef1 	bl	8000d0c <LoRA_Read_Register>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4619      	mov	r1, r3
 8000f34:	201d      	movs	r0, #29
 8000f36:	f7ff ff11 	bl	8000d5c <LoRA_Write_Register>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <LoRA_begin+0x64>)
 8000f4e:	f006 fd75 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <LoRA_begin+0x68>)
 8000f5a:	f006 fd6f 	bl	8007a3c <HAL_GPIO_WritePin>

	LoRA_sleep();
 8000f5e:	f7ff ff2b 	bl	8000db8 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <LoRA_begin+0x6c>)
 8000f64:	f7ff ff30 	bl	8000dc8 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f7ff fef6 	bl	8000d5c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	200e      	movs	r0, #14
 8000f74:	f7ff fef2 	bl	8000d5c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f7ff fec7 	bl	8000d0c <LoRA_Read_Register>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f043 0303 	orr.w	r3, r3, #3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	200c      	movs	r0, #12
 8000f8a:	f7ff fee7 	bl	8000d5c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000f8e:	2104      	movs	r1, #4
 8000f90:	2026      	movs	r0, #38	; 0x26
 8000f92:	f7ff fee3 	bl	8000d5c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000f96:	2011      	movs	r0, #17
 8000f98:	f7ff ff8e 	bl	8000eb8 <LoRA_setTxPower>

}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	58020000 	.word	0x58020000
 8000fac:	33bca100 	.word	0x33bca100

08000fb0 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fb4:	f7ff ffb4 	bl	8000f20 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	200d      	movs	r0, #13
 8000fbc:	f7ff fece 	bl	8000d5c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2022      	movs	r0, #34	; 0x22
 8000fc4:	f7ff feca 	bl	8000d5c <LoRA_Write_Register>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LoRA_endPacket>:

void LoRA_endPacket(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000fd0:	2183      	movs	r1, #131	; 0x83
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fec2 	bl	8000d5c <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000fd8:	bf00      	nop
 8000fda:	2012      	movs	r0, #18
 8000fdc:	f7ff fe96 	bl	8000d0c <LoRA_Read_Register>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f7      	beq.n	8000fda <LoRA_endPacket+0xe>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000fea:	2108      	movs	r1, #8
 8000fec:	2012      	movs	r0, #18
 8000fee:	f7ff feb5 	bl	8000d5c <LoRA_Write_Register>

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001000:	2012      	movs	r0, #18
 8001002:	f7ff fe83 	bl	8000d0c <LoRA_Read_Register>
 8001006:	4603      	mov	r3, r0
 8001008:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800100a:	f7ff ff89 	bl	8000f20 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	2012      	movs	r0, #18
 8001016:	f7ff fea1 	bl	8000d5c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d014      	beq.n	800104e <LoRA_parsePacket+0x58>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10f      	bne.n	800104e <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800102e:	2013      	movs	r0, #19
 8001030:	f7ff fe6c 	bl	8000d0c <LoRA_Read_Register>
 8001034:	4603      	mov	r3, r0
 8001036:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001038:	2010      	movs	r0, #16
 800103a:	f7ff fe67 	bl	8000d0c <LoRA_Read_Register>
 800103e:	4603      	mov	r3, r0
 8001040:	4619      	mov	r1, r3
 8001042:	200d      	movs	r0, #13
 8001044:	f7ff fe8a 	bl	8000d5c <LoRA_Write_Register>
		LoRA_idle();
 8001048:	f7ff fefc 	bl	8000e44 <LoRA_idle>
 800104c:	e00d      	b.n	800106a <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff fe5c 	bl	8000d0c <LoRA_Read_Register>
 8001054:	4603      	mov	r3, r0
 8001056:	2b86      	cmp	r3, #134	; 0x86
 8001058:	d007      	beq.n	800106a <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	200d      	movs	r0, #13
 800105e:	f7ff fe7d 	bl	8000d5c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001062:	2186      	movs	r1, #134	; 0x86
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fe79 	bl	8000d5c <LoRA_Write_Register>
	}
	return packetLenght;
 800106a:	687b      	ldr	r3, [r7, #4]

}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 800107c:	f7ff ff98 	bl	8000fb0 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e00a      	b.n	800109c <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fe63 	bl	8000d5c <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff f941 	bl	8000324 <strlen>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8ed      	bhi.n	8001086 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff f93a 	bl	8000324 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	2022      	movs	r0, #34	; 0x22
 80010b8:	f7ff fe50 	bl	8000d5c <LoRA_Write_Register>
    LoRA_endPacket();
 80010bc:	f7ff ff86 	bl	8000fcc <LoRA_endPacket>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80010d0:	4b9d      	ldr	r3, [pc, #628]	; (8001348 <main+0x280>)
 80010d2:	f507 7467 	add.w	r4, r7, #924	; 0x39c
 80010d6:	461d      	mov	r5, r3
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e0:	c403      	stmia	r4!, {r0, r1}
 80010e2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f002 f964 	bl	80033b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 fa4c 	bl	8001584 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010ec:	f000 fac6 	bl	800167c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f001 f82a 	bl	8002148 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f4:	f000 ffc8 	bl	8002088 <MX_DMA_Init>
  MX_SPI3_Init();
 80010f8:	f000 fd46 	bl	8001b88 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80010fc:	f000 fbd6 	bl	80018ac <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001100:	f000 ff76 	bl	8001ff0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001104:	f000 faec 	bl	80016e0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001108:	f000 fe50 	bl	8001dac <MX_TIM4_Init>
  MX_ADC3_Init();
 800110c:	f000 fb60 	bl	80017d0 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001110:	f000 fce4 	bl	8001adc <MX_SPI2_Init>
  MX_I2C2_Init();
 8001114:	f000 fc2e 	bl	8001974 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001118:	f000 fd8c 	bl	8001c34 <MX_TIM2_Init>
  MX_TIM5_Init();
 800111c:	f000 fec2 	bl	8001ea4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001120:	f000 fde0 	bl	8001ce4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001124:	f014 ff36 	bl	8015f94 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001128:	f000 fc82 	bl	8001a30 <MX_SPI1_Init>
  MX_UART4_Init();
 800112c:	f000 ff14 	bl	8001f58 <MX_UART4_Init>
  MX_FATFS_Init();
 8001130:	f012 fcc4 	bl	8013abc <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001134:	f000 fc5e 	bl	80019f4 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001138:	2332      	movs	r3, #50	; 0x32
 800113a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
	const double SPEED = 2.0/2000;
 800113e:	a380      	add	r3, pc, #512	; (adr r3, 8001340 <main+0x278>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
	const double r_offset = 0;
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
	const double g_offset = 1;
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b7c      	ldr	r3, [pc, #496]	; (800134c <main+0x284>)
 800115a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
	const double b_offset = 2;
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800116a:	213c      	movs	r1, #60	; 0x3c
 800116c:	2010      	movs	r0, #16
 800116e:	f7ff fb0d 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001172:	2130      	movs	r1, #48	; 0x30
 8001174:	2011      	movs	r0, #17
 8001176:	f7ff fb09 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800117a:	2104      	movs	r1, #4
 800117c:	2013      	movs	r0, #19
 800117e:	f7ff fb05 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 8001182:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001186:	f002 f9a5 	bl	80034d4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800118a:	21bf      	movs	r1, #191	; 0xbf
 800118c:	201c      	movs	r0, #28
 800118e:	f7ff faa9 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 8001192:	2002      	movs	r0, #2
 8001194:	f002 f99e 	bl	80034d4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001198:	2158      	movs	r1, #88	; 0x58
 800119a:	201b      	movs	r0, #27
 800119c:	f7ff faa2 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80011a0:	21d8      	movs	r1, #216	; 0xd8
 80011a2:	201b      	movs	r0, #27
 80011a4:	f7ff fa9e 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
	uint32_t lastTime = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

	float calOmegaX = 0;
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80011be:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	float calOmegaZ = 0;
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80011d6:	e026      	b.n	8001226 <main+0x15e>
		calOmegaX += LG2_Get_Gyro_X();
 80011d8:	f7ff fb00 	bl	80007dc <LG2_Get_Gyro_X>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80011f0:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80011f4:	f7ff fb22 	bl	800083c <LG2_Get_Gyro_Y>
 80011f8:	eeb0 7a40 	vmov.f32	s14, s0
 80011fc:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001204:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
		calOmegaZ += LG2_Get_Gyro_Z();
 8001208:	f7ff fb4a 	bl	80008a0 <LG2_Get_Gyro_Z>
 800120c:	eeb0 7a40 	vmov.f32	s14, s0
 8001210:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001218:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
	for(int i = 0; i < 500; i++){
 800121c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001220:	3301      	adds	r3, #1
 8001222:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001226:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800122a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800122e:	dbd3      	blt.n	80011d8 <main+0x110>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001230:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001350 <main+0x288>
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001240:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001244:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001248:	ed97 7aff 	vldr	s14, [r7, #1020]	; 0x3fc
 800124c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001350 <main+0x288>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
	calOmegaZ /= 500;
 8001258:	ed97 7afe 	vldr	s14, [r7, #1016]	; 0x3f8
 800125c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001350 <main+0x288>
 8001260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001264:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	4839      	ldr	r0, [pc, #228]	; (8001354 <main+0x28c>)
 800126e:	f006 fbe5 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001272:	20c8      	movs	r0, #200	; 0xc8
 8001274:	f002 f92e 	bl	80034d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	4835      	ldr	r0, [pc, #212]	; (8001354 <main+0x28c>)
 800127e:	f006 fbdd 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001282:	20c8      	movs	r0, #200	; 0xc8
 8001284:	f002 f926 	bl	80034d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	4831      	ldr	r0, [pc, #196]	; (8001354 <main+0x28c>)
 800128e:	f006 fbd5 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001292:	20c8      	movs	r0, #200	; 0xc8
 8001294:	f002 f91e 	bl	80034d4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	2104      	movs	r1, #4
 800129c:	482e      	ldr	r0, [pc, #184]	; (8001358 <main+0x290>)
 800129e:	f006 fbcd 	bl	8007a3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2108      	movs	r1, #8
 80012a6:	482c      	ldr	r0, [pc, #176]	; (8001358 <main+0x290>)
 80012a8:	f006 fbc8 	bl	8007a3c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	482b      	ldr	r0, [pc, #172]	; (800135c <main+0x294>)
 80012b0:	f00d fe12 	bl	800eed8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012b4:	2104      	movs	r1, #4
 80012b6:	4829      	ldr	r0, [pc, #164]	; (800135c <main+0x294>)
 80012b8:	f00d fe0e 	bl	800eed8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012bc:	2108      	movs	r1, #8
 80012be:	4827      	ldr	r0, [pc, #156]	; (800135c <main+0x294>)
 80012c0:	f00d fe0a 	bl	800eed8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012c4:	210c      	movs	r1, #12
 80012c6:	4825      	ldr	r0, [pc, #148]	; (800135c <main+0x294>)
 80012c8:	f00d fe06 	bl	800eed8 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80012cc:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001360 <main+0x298>
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fb1d 	bl	8000910 <setServo>
    setServo(2, 180);
 80012d6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001364 <main+0x29c>
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff fb18 	bl	8000910 <setServo>
    setServo(3, 0);
 80012e0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001368 <main+0x2a0>
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff fb13 	bl	8000910 <setServo>
    setServo(4, 45);
 80012ea:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800136c <main+0x2a4>
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff fb0e 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <main+0x2a8>)
 80012f6:	f7ff fe23 	bl	8000f40 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int receiving = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001300:	f002 f8dc 	bl	80034bc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001314:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001374 <main+0x2ac>
 8001318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131c:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001320:	f002 f8cc 	bl	80034bc <HAL_GetTick>
 8001324:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404

		//write_EEPROM(1, 1);

	     // Start ADC Conversion
		//HAL_Delay(100);
		int packet_lenght = LoRA_parsePacket();
 8001328:	f7ff fe65 	bl	8000ff6 <LoRA_parsePacket>
 800132c:	f8c7 03b8 	str.w	r0, [r7, #952]	; 0x3b8
		char LoRA_data[50];
		if(packet_lenght){
 8001330:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0e3      	beq.n	8001300 <main+0x238>
			for(int i = 0; i < packet_lenght; i++){
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800133e:	e02e      	b.n	800139e <main+0x2d6>
 8001340:	d2f1a9fc 	.word	0xd2f1a9fc
 8001344:	3f50624d 	.word	0x3f50624d
 8001348:	0801737c 	.word	0x0801737c
 800134c:	3ff00000 	.word	0x3ff00000
 8001350:	43fa0000 	.word	0x43fa0000
 8001354:	58020c00 	.word	0x58020c00
 8001358:	58021800 	.word	0x58021800
 800135c:	24001078 	.word	0x24001078
 8001360:	42b40000 	.word	0x42b40000
 8001364:	43340000 	.word	0x43340000
 8001368:	00000000 	.word	0x00000000
 800136c:	42340000 	.word	0x42340000
 8001370:	33bca100 	.word	0x33bca100
 8001374:	447a0000 	.word	0x447a0000
				LoRA_data[i] = LoRA_Read_Register(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fcc7 	bl	8000d0c <LoRA_Read_Register>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001386:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 800138a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < packet_lenght; i++){
 8001394:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800139e:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80013a2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbe6      	blt.n	8001378 <main+0x2b0>
			}
			LoRA_data[packet_lenght] = '\0';
 80013aa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013ae:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80013b2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80013b6:	4413      	add	r3, r2
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
			//LoRA_data[packet_lenght+1] = '';
			char data_gyro[50];
		    //sprintf( data_gyro,  "%d   %d\n", strlen(LoRA_data), packet_lenght);
		    //CDC_Transmit_HS(data_gyro, strlen(data_gyro));

			CDC_Transmit_HS(LoRA_data, packet_lenght);
 80013bc:	463b      	mov	r3, r7
 80013be:	f8d7 13b8 	ldr.w	r1, [r7, #952]	; 0x3b8
 80013c2:	4618      	mov	r0, r3
 80013c4:	f014 fea6 	bl	8016114 <CDC_Transmit_HS>

		    if(strcmp(LoRA_data, "ARM") == 0){
 80013c8:	463b      	mov	r3, r7
 80013ca:	4962      	ldr	r1, [pc, #392]	; (8001554 <main+0x48c>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff9f 	bl	8000310 <strcmp>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10d      	bne.n	80013f4 <main+0x32c>

		    	LED_Color_Data[7][0] = 0;
 80013d8:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <main+0x490>)
 80013da:	2200      	movs	r2, #0
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
		    	LED_Color_Data[7][1] = 255;
 80013de:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <main+0x490>)
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58
		    	LED_Color_Data[7][2] = 0;
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <main+0x490>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	65da      	str	r2, [r3, #92]	; 0x5c
		    	setLEDs();
 80013ea:	f7ff fad7 	bl	800099c <setLEDs>
		    	LoRA_sendPacket("ARM SUCCESS");
 80013ee:	485b      	ldr	r0, [pc, #364]	; (800155c <main+0x494>)
 80013f0:	f7ff fe40 	bl	8001074 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "DISARM") == 0){
 80013f4:	463b      	mov	r3, r7
 80013f6:	495a      	ldr	r1, [pc, #360]	; (8001560 <main+0x498>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff89 	bl	8000310 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10d      	bne.n	8001420 <main+0x358>
		    	LED_Color_Data[7][0] = 255;
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <main+0x490>)
 8001406:	22ff      	movs	r2, #255	; 0xff
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
		    	LED_Color_Data[7][1] = 0;
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <main+0x490>)
 800140c:	2200      	movs	r2, #0
 800140e:	659a      	str	r2, [r3, #88]	; 0x58
		    	LED_Color_Data[7][2] = 0;
 8001410:	4b51      	ldr	r3, [pc, #324]	; (8001558 <main+0x490>)
 8001412:	2200      	movs	r2, #0
 8001414:	65da      	str	r2, [r3, #92]	; 0x5c
		    	setLEDs();
 8001416:	f7ff fac1 	bl	800099c <setLEDs>
		    	LoRA_sendPacket("DISARM SUCCESS");
 800141a:	4852      	ldr	r0, [pc, #328]	; (8001564 <main+0x49c>)
 800141c:	f7ff fe2a 	bl	8001074 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "CONT") == 0){
 8001420:	463b      	mov	r3, r7
 8001422:	4951      	ldr	r1, [pc, #324]	; (8001568 <main+0x4a0>)
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe ff73 	bl	8000310 <strcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f af67 	bne.w	8001300 <main+0x238>

		    	char cont_str[150];
		    	uint8_t CONTS[8];
		    	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001432:	2104      	movs	r1, #4
 8001434:	484d      	ldr	r0, [pc, #308]	; (800156c <main+0x4a4>)
 8001436:	f006 fae9 	bl	8007a0c <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001442:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001446:	701a      	strb	r2, [r3, #0]
		    	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	4848      	ldr	r0, [pc, #288]	; (8001570 <main+0x4a8>)
 800144e:	f006 fadd 	bl	8007a0c <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800145a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800145e:	705a      	strb	r2, [r3, #1]
		    	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001460:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001464:	4842      	ldr	r0, [pc, #264]	; (8001570 <main+0x4a8>)
 8001466:	f006 fad1 	bl	8007a0c <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001472:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001476:	709a      	strb	r2, [r3, #2]
		    	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001478:	2101      	movs	r1, #1
 800147a:	483e      	ldr	r0, [pc, #248]	; (8001574 <main+0x4ac>)
 800147c:	f006 fac6 	bl	8007a0c <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001488:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800148c:	70da      	strb	r2, [r3, #3]
		    	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4839      	ldr	r0, [pc, #228]	; (8001578 <main+0x4b0>)
 8001492:	f006 fabb 	bl	8007a0c <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800149e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80014a2:	711a      	strb	r2, [r3, #4]
		    	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	4833      	ldr	r0, [pc, #204]	; (8001578 <main+0x4b0>)
 80014aa:	f006 faaf 	bl	8007a0c <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014b6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80014ba:	715a      	strb	r2, [r3, #5]
		    	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	482d      	ldr	r0, [pc, #180]	; (8001578 <main+0x4b0>)
 80014c2:	f006 faa3 	bl	8007a0c <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014ce:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80014d2:	719a      	strb	r2, [r3, #6]
		    	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <main+0x4b0>)
 80014da:	f006 fa97 	bl	8007a0c <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014e6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80014ea:	71da      	strb	r2, [r3, #7]

	    		char message[100];
		    	for(int i=0; i<8; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80014f2:	e029      	b.n	8001548 <main+0x480>
		    	{
		    		if(CONTS[i])
 80014f4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014f8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80014fc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <main+0x454>
		    		{
		    			sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 8001508:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001512:	491a      	ldr	r1, [pc, #104]	; (800157c <main+0x4b4>)
 8001514:	4618      	mov	r0, r3
 8001516:	f015 fa91 	bl	8016a3c <siprintf>
 800151a:	e008      	b.n	800152e <main+0x466>
		    		}
		    		else
		    		{
		    			sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 800151c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001526:	4916      	ldr	r1, [pc, #88]	; (8001580 <main+0x4b8>)
 8001528:	4618      	mov	r0, r3
 800152a:	f015 fa87 	bl	8016a3c <siprintf>
		    		}

		    		LoRA_sendPacket(message);
 800152e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd9e 	bl	8001074 <LoRA_sendPacket>
		    		HAL_Delay(100);
 8001538:	2064      	movs	r0, #100	; 0x64
 800153a:	f001 ffcb 	bl	80034d4 <HAL_Delay>
		    	for(int i=0; i<8; i++)
 800153e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001542:	3301      	adds	r3, #1
 8001544:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8001548:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800154c:	2b07      	cmp	r3, #7
 800154e:	ddd1      	ble.n	80014f4 <main+0x42c>
	while (1) {
 8001550:	e6d6      	b.n	8001300 <main+0x238>
 8001552:	bf00      	nop
 8001554:	08017314 	.word	0x08017314
 8001558:	24000a60 	.word	0x24000a60
 800155c:	08017318 	.word	0x08017318
 8001560:	08017324 	.word	0x08017324
 8001564:	0801732c 	.word	0x0801732c
 8001568:	0801733c 	.word	0x0801733c
 800156c:	58020400 	.word	0x58020400
 8001570:	58021400 	.word	0x58021400
 8001574:	58021800 	.word	0x58021800
 8001578:	58021000 	.word	0x58021000
 800157c:	08017344 	.word	0x08017344
 8001580:	08017364 	.word	0x08017364

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	; 0x70
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	224c      	movs	r2, #76	; 0x4c
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f015 fa4a 	bl	8016a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2220      	movs	r2, #32
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f015 fa44 	bl	8016a2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f007 fe43 	bl	8009230 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <SystemClock_Config+0xf4>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <SystemClock_Config+0xf4>)
 80015b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <SystemClock_Config+0xf4>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015ca:	bf00      	nop
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <SystemClock_Config+0xf4>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d8:	d1f8      	bne.n	80015cc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80015da:	2323      	movs	r3, #35	; 0x23
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f4:	2300      	movs	r3, #0
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f8:	2304      	movs	r3, #4
 80015fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80015fc:	230c      	movs	r3, #12
 80015fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001604:	230c      	movs	r3, #12
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800160c:	230c      	movs	r3, #12
 800160e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001610:	2300      	movs	r3, #0
 8001612:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4618      	mov	r0, r3
 800161e:	f007 fe51 	bl	80092c4 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001628:	f000 feea 	bl	8002400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	233f      	movs	r3, #63	; 0x3f
 800162e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2303      	movs	r3, #3
 8001632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001638:	2308      	movs	r3, #8
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f008 fa10 	bl	8009a78 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800165e:	f000 fecf 	bl	8002400 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001662:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f008 fbbb 	bl	8009de4 <HAL_RCC_MCOConfig>
}
 800166e:	bf00      	nop
 8001670:	3770      	adds	r7, #112	; 0x70
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58024800 	.word	0x58024800

0800167c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ae      	sub	sp, #184	; 0xb8
 8001680:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	22b8      	movs	r2, #184	; 0xb8
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f015 f9cf 	bl	8016a2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800168e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800169a:	2304      	movs	r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800169e:	230c      	movs	r3, #12
 80016a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	4618      	mov	r0, r3
 80016ca:	f008 fdcb 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80016d4:	f000 fe94 	bl	8002400 <Error_Handler>
  }
}
 80016d8:	bf00      	nop
 80016da:	37b8      	adds	r7, #184	; 0xb8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2224      	movs	r2, #36	; 0x24
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f015 f997 	bl	8016a2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001700:	4a31      	ldr	r2, [pc, #196]	; (80017c8 <MX_ADC1_Init+0xe8>)
 8001702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001706:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800170a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800171a:	2204      	movs	r2, #4
 800171c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001720:	2200      	movs	r2, #0
 8001722:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001726:	2200      	movs	r2, #0
 8001728:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800172c:	2201      	movs	r2, #1
 800172e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001746:	2200      	movs	r2, #0
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800174c:	2200      	movs	r2, #0
 800174e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175e:	4819      	ldr	r0, [pc, #100]	; (80017c4 <MX_ADC1_Init+0xe4>)
 8001760:	f002 f938 	bl	80039d4 <HAL_ADC_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800176a:	f000 fe49 	bl	8002400 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <MX_ADC1_Init+0xe4>)
 800177a:	f003 f973 	bl	8004a64 <HAL_ADCEx_MultiModeConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001784:	f000 fe3c 	bl	8002400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_ADC1_Init+0xec>)
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178c:	2306      	movs	r3, #6
 800178e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001790:	2303      	movs	r3, #3
 8001792:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001794:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800179a:	2304      	movs	r3, #4
 800179c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_ADC1_Init+0xe4>)
 80017ae:	f002 fb19 	bl	8003de4 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80017b8:	f000 fe22 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3730      	adds	r7, #48	; 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	24000b08 	.word	0x24000b08
 80017c8:	40022000 	.word	0x40022000
 80017cc:	2a000400 	.word	0x2a000400

080017d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2224      	movs	r2, #36	; 0x24
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f015 f925 	bl	8016a2c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <MX_ADC3_Init+0xd0>)
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <MX_ADC3_Init+0xd4>)
 80017e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <MX_ADC3_Init+0xd0>)
 80017ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80017ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_ADC3_Init+0xd0>)
 80017f2:	2208      	movs	r2, #8
 80017f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <MX_ADC3_Init+0xd0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_ADC3_Init+0xd0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001804:	2204      	movs	r2, #4
 8001806:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800180a:	2200      	movs	r2, #0
 800180c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001810:	2200      	movs	r2, #0
 8001812:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001816:	2201      	movs	r2, #1
 8001818:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001838:	2200      	movs	r2, #0
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800183e:	2200      	movs	r2, #0
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800184a:	2200      	movs	r2, #0
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <MX_ADC3_Init+0xd0>)
 8001858:	f002 f8bc 	bl	80039d4 <HAL_ADC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001862:	f000 fdcd 	bl	8002400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_ADC3_Init+0xd8>)
 8001868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800186a:	2306      	movs	r3, #6
 800186c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001876:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001878:	2304      	movs	r3, #4
 800187a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_ADC3_Init+0xd0>)
 800188a:	f002 faab 	bl	8003de4 <HAL_ADC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001894:	f000 fdb4 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	24000b78 	.word	0x24000b78
 80018a4:	58026000 	.word	0x58026000
 80018a8:	04300002 	.word	0x04300002

080018ac <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <MX_FDCAN3_Init+0xc4>)
 80018b4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018d6:	2210      	movs	r2, #16
 80018d8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018dc:	2201      	movs	r2, #1
 80018de:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_FDCAN3_Init+0xc0>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001900:	2201      	movs	r2, #1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800190c:	2200      	movs	r2, #0
 800190e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001912:	2200      	movs	r2, #0
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001918:	2200      	movs	r2, #0
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800191e:	2204      	movs	r2, #4
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001924:	2200      	movs	r2, #0
 8001926:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800192a:	2204      	movs	r2, #4
 800192c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001930:	2200      	movs	r2, #0
 8001932:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001936:	2204      	movs	r2, #4
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800193c:	2200      	movs	r2, #0
 800193e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001942:	2200      	movs	r2, #0
 8001944:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001948:	2200      	movs	r2, #0
 800194a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800194e:	2200      	movs	r2, #0
 8001950:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_FDCAN3_Init+0xc0>)
 8001954:	2204      	movs	r2, #4
 8001956:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_FDCAN3_Init+0xc0>)
 800195a:	f005 fb4b 	bl	8006ff4 <HAL_FDCAN_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001964:	f000 fd4c 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	24000cd8 	.word	0x24000cd8
 8001970:	4000d400 	.word	0x4000d400

08001974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_I2C2_Init+0x74>)
 800197a:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <MX_I2C2_Init+0x78>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_I2C2_Init+0x74>)
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <MX_I2C2_Init+0x7c>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_I2C2_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_I2C2_Init+0x74>)
 800198c:	2201      	movs	r2, #1
 800198e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_I2C2_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_I2C2_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C2_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C2_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ae:	480e      	ldr	r0, [pc, #56]	; (80019e8 <MX_I2C2_Init+0x74>)
 80019b0:	f006 f85e 	bl	8007a70 <HAL_I2C_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019ba:	f000 fd21 	bl	8002400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019be:	2100      	movs	r1, #0
 80019c0:	4809      	ldr	r0, [pc, #36]	; (80019e8 <MX_I2C2_Init+0x74>)
 80019c2:	f006 f8e5 	bl	8007b90 <HAL_I2CEx_ConfigAnalogFilter>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019cc:	f000 fd18 	bl	8002400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_I2C2_Init+0x74>)
 80019d4:	f006 f927 	bl	8007c26 <HAL_I2CEx_ConfigDigitalFilter>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019de:	f000 fd0f 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24000d78 	.word	0x24000d78
 80019ec:	40005800 	.word	0x40005800
 80019f0:	20303e5d 	.word	0x20303e5d

080019f4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <MX_SDMMC2_SD_Init+0x38>)
 80019fc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 8001a0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a10:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <MX_SDMMC2_SD_Init+0x34>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	24000dcc 	.word	0x24000dcc
 8001a2c:	48022400 	.word	0x48022400

08001a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <MX_SPI1_Init+0xa8>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a64:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_SPI1_Init+0xa4>)
 8001ac2:	f00c fc19 	bl	800e2f8 <HAL_SPI_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001acc:	f000 fc98 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	24000e48 	.word	0x24000e48
 8001ad8:	40013000 	.word	0x40013000

08001adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001ae2:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <MX_SPI2_Init+0xa8>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001ae8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001af6:	2207      	movs	r2, #7
 8001af8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b10:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_SPI2_Init+0xa4>)
 8001b6e:	f00c fbc3 	bl	800e2f8 <HAL_SPI_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001b78:	f000 fc42 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	24000ed0 	.word	0x24000ed0
 8001b84:	40003800 	.word	0x40003800

08001b88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <MX_SPI3_Init+0xa8>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001b94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bbc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001bc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_SPI3_Init+0xa4>)
 8001c1a:	f00c fb6d 	bl	800e2f8 <HAL_SPI_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001c24:	f000 fbec 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24000f58 	.word	0x24000f58
 8001c30:	40003c00 	.word	0x40003c00

08001c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	615a      	str	r2, [r3, #20]
 8001c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c6e:	225a      	movs	r2, #90	; 0x5a
 8001c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c7e:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c80:	f00d f8d3 	bl	800ee2a <HAL_TIM_PWM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c8a:	f000 fbb9 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001c9e:	f00e fb59 	bl	8010354 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ca8:	f000 fbaa 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cac:	2360      	movs	r3, #96	; 0x60
 8001cae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001cc4:	f00d fd78 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cce:	f000 fb97 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cd2:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <MX_TIM2_Init+0xac>)
 8001cd4:	f001 f888 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	24000fe0 	.word	0x24000fe0

08001ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	615a      	str	r2, [r3, #20]
 8001d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <MX_TIM3_Init+0xc4>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d1c:	225a      	movs	r2, #90	; 0x5a
 8001d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d2c:	481d      	ldr	r0, [pc, #116]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d2e:	f00d f87c 	bl	800ee2a <HAL_TIM_PWM_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d38:	f000 fb62 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4816      	ldr	r0, [pc, #88]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d4c:	f00e fb02 	bl	8010354 <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d56:	f000 fb53 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5a:	2360      	movs	r3, #96	; 0x60
 8001d5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d72:	f00d fd21 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d7c:	f000 fb40 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d80:	463b      	mov	r3, r7
 8001d82:	2204      	movs	r2, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d88:	f00d fd16 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d92:	f000 fb35 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <MX_TIM3_Init+0xc0>)
 8001d98:	f001 f826 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2400102c 	.word	0x2400102c
 8001da8:	40000400 	.word	0x40000400

08001dac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001dd2:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <MX_TIM4_Init+0xf4>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 22;
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001dd8:	2216      	movs	r2, #22
 8001dda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001de4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001de8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001df6:	4829      	ldr	r0, [pc, #164]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001df8:	f00d f817 	bl	800ee2a <HAL_TIM_PWM_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e02:	f000 fafd 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4821      	ldr	r0, [pc, #132]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e16:	f00e fa9d 	bl	8010354 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e20:	f000 faee 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e24:	2360      	movs	r3, #96	; 0x60
 8001e26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e3c:	f00d fcbc 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e46:	f000 fadb 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4812      	ldr	r0, [pc, #72]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e52:	f00d fcb1 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001e5c:	f000 fad0 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	2208      	movs	r2, #8
 8001e64:	4619      	mov	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e68:	f00d fca6 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001e72:	f000 fac5 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e7e:	f00d fc9b 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001e88:	f000 faba 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM4_Init+0xf0>)
 8001e8e:	f000 ffab 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	24001078 	.word	0x24001078
 8001ea0:	40000800 	.word	0x40000800

08001ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	615a      	str	r2, [r3, #20]
 8001ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001eca:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <MX_TIM5_Init+0xb0>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001edc:	225a      	movs	r2, #90	; 0x5a
 8001ede:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001eee:	f00c ff9c 	bl	800ee2a <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001ef8:	f000 fa82 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4811      	ldr	r0, [pc, #68]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001f0c:	f00e fa22 	bl	8010354 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f16:	f000 fa73 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1a:	2360      	movs	r3, #96	; 0x60
 8001f1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001f32:	f00d fc41 	bl	800f7b8 <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001f3c:	f000 fa60 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <MX_TIM5_Init+0xac>)
 8001f42:	f000 ff51 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240010c4 	.word	0x240010c4
 8001f54:	40000c00 	.word	0x40000c00

08001f58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <MX_UART4_Init+0x94>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001fa2:	f00e fa91 	bl	80104c8 <HAL_UART_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001fac:	f000 fa28 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001fb4:	f00f fb97 	bl	80116e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001fbe:	f000 fa1f 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001fc6:	f00f fbcc 	bl	8011762 <HAL_UARTEx_SetRxFifoThreshold>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001fd0:	f000 fa16 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_UART4_Init+0x90>)
 8001fd6:	f00f fb4d 	bl	8011674 <HAL_UARTEx_DisableFifoMode>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001fe0:	f000 fa0e 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24001368 	.word	0x24001368
 8001fec:	40004c00 	.word	0x40004c00

08001ff0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8001ff6:	4a23      	ldr	r2, [pc, #140]	; (8002084 <MX_USART6_UART_Init+0x94>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_USART6_UART_Init+0x90>)
 8002034:	2200      	movs	r2, #0
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002038:	4811      	ldr	r0, [pc, #68]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800203a:	f00e fa45 	bl	80104c8 <HAL_UART_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002044:	f000 f9dc 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002048:	2100      	movs	r1, #0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800204c:	f00f fb4b 	bl	80116e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002056:	f000 f9d3 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205a:	2100      	movs	r1, #0
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800205e:	f00f fb80 	bl	8011762 <HAL_UARTEx_SetRxFifoThreshold>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002068:	f000 f9ca 	bl	8002400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_USART6_UART_Init+0x90>)
 800206e:	f00f fb01 	bl	8011674 <HAL_UARTEx_DisableFifoMode>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002078:	f000 f9c2 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	240013fc 	.word	0x240013fc
 8002084:	40011400 	.word	0x40011400

08002088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <MX_DMA_Init+0xbc>)
 8002090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002094:	4a2b      	ldr	r2, [pc, #172]	; (8002144 <MX_DMA_Init+0xbc>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <MX_DMA_Init+0xbc>)
 80020a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <MX_DMA_Init+0xbc>)
 80020ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020b2:	4a24      	ldr	r2, [pc, #144]	; (8002144 <MX_DMA_Init+0xbc>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_DMA_Init+0xbc>)
 80020be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	200b      	movs	r0, #11
 80020d0:	f002 fe85 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020d4:	200b      	movs	r0, #11
 80020d6:	f002 fe9c 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	200c      	movs	r0, #12
 80020e0:	f002 fe7d 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020e4:	200c      	movs	r0, #12
 80020e6:	f002 fe94 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	200d      	movs	r0, #13
 80020f0:	f002 fe75 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020f4:	200d      	movs	r0, #13
 80020f6:	f002 fe8c 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	200e      	movs	r0, #14
 8002100:	f002 fe6d 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002104:	200e      	movs	r0, #14
 8002106:	f002 fe84 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	200f      	movs	r0, #15
 8002110:	f002 fe65 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002114:	200f      	movs	r0, #15
 8002116:	f002 fe7c 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2010      	movs	r0, #16
 8002120:	f002 fe5d 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002124:	2010      	movs	r0, #16
 8002126:	f002 fe74 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2046      	movs	r0, #70	; 0x46
 8002130:	f002 fe55 	bl	8004dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002134:	2046      	movs	r0, #70	; 0x46
 8002136:	f002 fe6c 	bl	8004e12 <HAL_NVIC_EnableIRQ>

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400

08002148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800215e:	4ba0      	ldr	r3, [pc, #640]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	4a9e      	ldr	r2, [pc, #632]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216e:	4b9c      	ldr	r3, [pc, #624]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800217c:	4b98      	ldr	r3, [pc, #608]	; (80023e0 <MX_GPIO_Init+0x298>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	4a97      	ldr	r2, [pc, #604]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218c:	4b94      	ldr	r3, [pc, #592]	; (80023e0 <MX_GPIO_Init+0x298>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219a:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <MX_GPIO_Init+0x298>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a8f      	ldr	r2, [pc, #572]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b8:	4b89      	ldr	r3, [pc, #548]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021be:	4a88      	ldr	r2, [pc, #544]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c8:	4b85      	ldr	r3, [pc, #532]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021dc:	4a80      	ldr	r2, [pc, #512]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e6:	4b7e      	ldr	r3, [pc, #504]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a79      	ldr	r2, [pc, #484]	; (80023e0 <MX_GPIO_Init+0x298>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <MX_GPIO_Init+0x298>)
 800221a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002222:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002230:	4b6b      	ldr	r3, [pc, #428]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a6a      	ldr	r2, [pc, #424]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <MX_GPIO_Init+0x298>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2104      	movs	r1, #4
 8002252:	4864      	ldr	r0, [pc, #400]	; (80023e4 <MX_GPIO_Init+0x29c>)
 8002254:	f005 fbf2 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	f248 0106 	movw	r1, #32774	; 0x8006
 800225e:	4862      	ldr	r0, [pc, #392]	; (80023e8 <MX_GPIO_Init+0x2a0>)
 8002260:	f005 fbec 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2130      	movs	r1, #48	; 0x30
 8002268:	4860      	ldr	r0, [pc, #384]	; (80023ec <MX_GPIO_Init+0x2a4>)
 800226a:	f005 fbe7 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2102      	movs	r1, #2
 8002272:	485f      	ldr	r0, [pc, #380]	; (80023f0 <MX_GPIO_Init+0x2a8>)
 8002274:	f005 fbe2 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f240 3101 	movw	r1, #769	; 0x301
 800227e:	485d      	ldr	r0, [pc, #372]	; (80023f4 <MX_GPIO_Init+0x2ac>)
 8002280:	f005 fbdc 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	210c      	movs	r1, #12
 8002288:	485b      	ldr	r0, [pc, #364]	; (80023f8 <MX_GPIO_Init+0x2b0>)
 800228a:	f005 fbd7 	bl	8007a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800228e:	2304      	movs	r3, #4
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	484f      	ldr	r0, [pc, #316]	; (80023e4 <MX_GPIO_Init+0x29c>)
 80022a6:	f005 fa09 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80022aa:	f248 0306 	movw	r3, #32774	; 0x8006
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4849      	ldr	r0, [pc, #292]	; (80023e8 <MX_GPIO_Init+0x2a0>)
 80022c4:	f005 f9fa 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022c8:	2330      	movs	r3, #48	; 0x30
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	4619      	mov	r1, r3
 80022de:	4843      	ldr	r0, [pc, #268]	; (80023ec <MX_GPIO_Init+0x2a4>)
 80022e0:	f005 f9ec 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022e4:	2302      	movs	r3, #2
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	483d      	ldr	r0, [pc, #244]	; (80023f0 <MX_GPIO_Init+0x2a8>)
 80022fc:	f005 f9de 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002300:	2304      	movs	r3, #4
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002308:	2301      	movs	r3, #1
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4837      	ldr	r0, [pc, #220]	; (80023f0 <MX_GPIO_Init+0x2a8>)
 8002314:	f005 f9d2 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002318:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4833      	ldr	r0, [pc, #204]	; (80023fc <MX_GPIO_Init+0x2b4>)
 800232e:	f005 f9c5 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	482c      	ldr	r0, [pc, #176]	; (80023f8 <MX_GPIO_Init+0x2b0>)
 8002346:	f005 f9b9 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 800234a:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	4821      	ldr	r0, [pc, #132]	; (80023e4 <MX_GPIO_Init+0x29c>)
 8002360:	f005 f9ac 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002364:	f240 3301 	movw	r3, #769	; 0x301
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237a:	4619      	mov	r1, r3
 800237c:	481d      	ldr	r0, [pc, #116]	; (80023f4 <MX_GPIO_Init+0x2ac>)
 800237e:	f005 f99d 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002382:	230c      	movs	r3, #12
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4817      	ldr	r0, [pc, #92]	; (80023f8 <MX_GPIO_Init+0x2b0>)
 800239a:	f005 f98f 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800239e:	2310      	movs	r3, #16
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	4811      	ldr	r0, [pc, #68]	; (80023f8 <MX_GPIO_Init+0x2b0>)
 80023b2:	f005 f983 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_GPIO_Init+0x2a0>)
 80023d4:	f005 f972 	bl	80076bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023d8:	bf00      	nop
 80023da:	3738      	adds	r7, #56	; 0x38
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58021000 	.word	0x58021000
 80023e8:	58020000 	.word	0x58020000
 80023ec:	58020800 	.word	0x58020800
 80023f0:	58020400 	.word	0x58020400
 80023f4:	58020c00 	.word	0x58020c00
 80023f8:	58021800 	.word	0x58021800
 80023fc:	58021400 	.word	0x58021400

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_MspInit+0x30>)
 8002414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_MspInit+0x30>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_MspInit+0x30>)
 8002424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	58024400 	.word	0x58024400

08002440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5d      	ldr	r2, [pc, #372]	; (80025d4 <HAL_ADC_MspInit+0x194>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d159      	bne.n	8002516 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002468:	4a5b      	ldr	r2, [pc, #364]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a2:	2303      	movs	r3, #3
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	4619      	mov	r1, r3
 80024b0:	484a      	ldr	r0, [pc, #296]	; (80025dc <HAL_ADC_MspInit+0x19c>)
 80024b2:	f005 f903 	bl	80076bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_ADC_MspInit+0x1a4>)
 80024ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024bc:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024be:	2209      	movs	r2, #9
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024ec:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024f8:	4839      	ldr	r0, [pc, #228]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 80024fa:	f002 fca5 	bl	8004e48 <HAL_DMA_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002504:	f7ff ff7c 	bl	8002400 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 800250c:	659a      	str	r2, [r3, #88]	; 0x58
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_ADC_MspInit+0x1a0>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002514:	e059      	b.n	80025ca <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_ADC_MspInit+0x1a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d154      	bne.n	80025ca <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002526:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_ADC_MspInit+0x198>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800255c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002560:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002564:	f000 ffda 	bl	800351c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_ADC_MspInit+0x1b0>)
 800256c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 8002570:	2273      	movs	r2, #115	; 0x73
 8002572:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 800258a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 8002592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002596:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 800259a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 80025a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80025ae:	480f      	ldr	r0, [pc, #60]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 80025b0:	f002 fc4a 	bl	8004e48 <HAL_DMA_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80025ba:	f7ff ff21 	bl	8002400 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 80025c2:	659a      	str	r2, [r3, #88]	; 0x58
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_ADC_MspInit+0x1ac>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025ca:	bf00      	nop
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40022000 	.word	0x40022000
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58020800 	.word	0x58020800
 80025e0:	24000be8 	.word	0x24000be8
 80025e4:	40020088 	.word	0x40020088
 80025e8:	58026000 	.word	0x58026000
 80025ec:	24000c60 	.word	0x24000c60
 80025f0:	400204b8 	.word	0x400204b8

080025f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0b8      	sub	sp, #224	; 0xe0
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	22b8      	movs	r2, #184	; 0xb8
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f014 fa09 	bl	8016a2c <memset>
  if(hfdcan->Instance==FDCAN3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_FDCAN_MspInit+0xc4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d144      	bne.n	80026ae <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002630:	2300      	movs	r3, #0
 8002632:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4618      	mov	r0, r3
 800263a:	f007 fe13 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002644:	f7ff fedc 	bl	8002400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 800264a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 800265a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_FDCAN_MspInit+0xc8>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002684:	23c0      	movs	r3, #192	; 0xc0
 8002686:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <HAL_FDCAN_MspInit+0xcc>)
 80026aa:	f005 f807 	bl	80076bc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	37e0      	adds	r7, #224	; 0xe0
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	4000d400 	.word	0x4000d400
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58021400 	.word	0x58021400

080026c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0b8      	sub	sp, #224	; 0xe0
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	22b8      	movs	r2, #184	; 0xb8
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f014 f9a1 	bl	8016a2c <memset>
  if(hi2c->Instance==I2C2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_I2C_MspInit+0xc4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d145      	bne.n	8002780 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026f4:	f04f 0208 	mov.w	r2, #8
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f007 fdaa 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002716:	f7ff fe73 	bl	8002400 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_I2C_MspInit+0xc8>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <HAL_I2C_MspInit+0xc8>)
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_I2C_MspInit+0xc8>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002738:	2303      	movs	r3, #3
 800273a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800273e:	2312      	movs	r3, #18
 8002740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002750:	2304      	movs	r3, #4
 8002752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002756:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800275a:	4619      	mov	r1, r3
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 800275e:	f004 ffad 	bl	80076bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_I2C_MspInit+0xc8>)
 8002764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002768:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_I2C_MspInit+0xc8>)
 800276a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800276e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_I2C_MspInit+0xc8>)
 8002774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	37e0      	adds	r7, #224	; 0xe0
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40005800 	.word	0x40005800
 800278c:	58024400 	.word	0x58024400
 8002790:	58021400 	.word	0x58021400

08002794 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0ba      	sub	sp, #232	; 0xe8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	22b8      	movs	r2, #184	; 0xb8
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f014 f939 	bl	8016a2c <memset>
  if(hsd->Instance==SDMMC2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5d      	ldr	r2, [pc, #372]	; (8002934 <HAL_SD_MspInit+0x1a0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 80b3 	bne.w	800292c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80027c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d6:	f107 0318 	add.w	r3, r7, #24
 80027da:	4618      	mov	r0, r3
 80027dc:	f007 fd42 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80027e6:	f7ff fe0b 	bl	8002400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 80027ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80027fa:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 80027fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 800280a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280e:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002818:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 800281a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002826:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 800282e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_SD_MspInit+0x1a4>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002844:	2340      	movs	r3, #64	; 0x40
 8002846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800285c:	230b      	movs	r3, #11
 800285e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002866:	4619      	mov	r1, r3
 8002868:	4834      	ldr	r0, [pc, #208]	; (800293c <HAL_SD_MspInit+0x1a8>)
 800286a:	f004 ff27 	bl	80076bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	2301      	movs	r3, #1
 800287c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002886:	230b      	movs	r3, #11
 8002888:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002890:	4619      	mov	r1, r3
 8002892:	482a      	ldr	r0, [pc, #168]	; (800293c <HAL_SD_MspInit+0x1a8>)
 8002894:	f004 ff12 	bl	80076bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028b2:	230b      	movs	r3, #11
 80028b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028bc:	4619      	mov	r1, r3
 80028be:	4820      	ldr	r0, [pc, #128]	; (8002940 <HAL_SD_MspInit+0x1ac>)
 80028c0:	f004 fefc 	bl	80076bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028de:	230b      	movs	r3, #11
 80028e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4815      	ldr	r0, [pc, #84]	; (8002940 <HAL_SD_MspInit+0x1ac>)
 80028ec:	f004 fee6 	bl	80076bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800290a:	230a      	movs	r3, #10
 800290c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002910:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002914:	4619      	mov	r1, r3
 8002916:	480a      	ldr	r0, [pc, #40]	; (8002940 <HAL_SD_MspInit+0x1ac>)
 8002918:	f004 fed0 	bl	80076bc <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2100      	movs	r1, #0
 8002920:	207c      	movs	r0, #124	; 0x7c
 8002922:	f002 fa5c 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002926:	207c      	movs	r0, #124	; 0x7c
 8002928:	f002 fa73 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800292c:	bf00      	nop
 800292e:	37e8      	adds	r7, #232	; 0xe8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	48022400 	.word	0x48022400
 8002938:	58024400 	.word	0x58024400
 800293c:	58020c00 	.word	0x58020c00
 8002940:	58021800 	.word	0x58021800

08002944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4f      	ldr	r2, [pc, #316]	; (8002aa0 <HAL_SPI_MspInit+0x15c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12e      	bne.n	80029c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002966:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296c:	4a4d      	ldr	r2, [pc, #308]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 800296e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800297c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029a2:	23e0      	movs	r3, #224	; 0xe0
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029b2:	2305      	movs	r3, #5
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	483a      	ldr	r0, [pc, #232]	; (8002aa8 <HAL_SPI_MspInit+0x164>)
 80029be:	f004 fe7d 	bl	80076bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029c2:	e068      	b.n	8002a96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a38      	ldr	r2, [pc, #224]	; (8002aac <HAL_SPI_MspInit+0x168>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12f      	bne.n	8002a2e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d4:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f2:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a24:	4619      	mov	r1, r3
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <HAL_SPI_MspInit+0x16c>)
 8002a28:	f004 fe48 	bl	80076bc <HAL_GPIO_Init>
}
 8002a2c:	e033      	b.n	8002a96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <HAL_SPI_MspInit+0x170>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d12e      	bne.n	8002a96 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_SPI_MspInit+0x160>)
 8002a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a86:	2306      	movs	r3, #6
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <HAL_SPI_MspInit+0x174>)
 8002a92:	f004 fe13 	bl	80076bc <HAL_GPIO_Init>
}
 8002a96:	bf00      	nop
 8002a98:	3738      	adds	r7, #56	; 0x38
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40013000 	.word	0x40013000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58020000 	.word	0x58020000
 8002aac:	40003800 	.word	0x40003800
 8002ab0:	58020400 	.word	0x58020400
 8002ab4:	40003c00 	.word	0x40003c00
 8002ab8:	58020800 	.word	0x58020800

08002abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d15d      	bne.n	8002b9a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ade:	4b8e      	ldr	r3, [pc, #568]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae4:	4a8c      	ldr	r2, [pc, #560]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aee:	4b8a      	ldr	r3, [pc, #552]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	4a85      	ldr	r2, [pc, #532]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0c:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4879      	ldr	r0, [pc, #484]	; (8002d1c <HAL_TIM_PWM_MspInit+0x260>)
 8002b36:	f004 fdc1 	bl	80076bc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002b3a:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b3c:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_TIM_PWM_MspInit+0x268>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002b40:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b42:	2214      	movs	r2, #20
 8002b44:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4c:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b58:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b60:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b68:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b70:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002b7c:	4868      	ldr	r0, [pc, #416]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b7e:	f002 f963 	bl	8004e48 <HAL_DMA_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002b88:	f7ff fc3a 	bl	8002400 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_TIM_PWM_MspInit+0x264>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b98:	e119      	b.n	8002dce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a62      	ldr	r2, [pc, #392]	; (8002d28 <HAL_TIM_PWM_MspInit+0x26c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d16d      	bne.n	8002c80 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002bc2:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_TIM_PWM_MspInit+0x274>)
 8002bc6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002bc8:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bca:	2218      	movs	r2, #24
 8002bcc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002bda:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002bf8:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002c04:	4849      	ldr	r0, [pc, #292]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002c06:	f002 f91f 	bl	8004e48 <HAL_DMA_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002c10:	f7ff fbf6 	bl	8002400 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a45      	ldr	r2, [pc, #276]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
 8002c1a:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_TIM_PWM_MspInit+0x270>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002c20:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c22:	4a45      	ldr	r2, [pc, #276]	; (8002d38 <HAL_TIM_PWM_MspInit+0x27c>)
 8002c24:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c28:	2217      	movs	r2, #23
 8002c2a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c2c:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c2e:	2240      	movs	r2, #64	; 0x40
 8002c30:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c40:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c46:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c4e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5c:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002c62:	4834      	ldr	r0, [pc, #208]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c64:	f002 f8f0 	bl	8004e48 <HAL_DMA_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002c6e:	f7ff fbc7 	bl	8002400 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
 8002c78:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <HAL_TIM_PWM_MspInit+0x278>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c7e:	e0a6      	b.n	8002dce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2d      	ldr	r2, [pc, #180]	; (8002d3c <HAL_TIM_PWM_MspInit+0x280>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d15e      	bne.n	8002d48 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_TIM_PWM_MspInit+0x288>)
 8002cac:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cd6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002cea:	4815      	ldr	r0, [pc, #84]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cec:	f002 f8ac 	bl	8004e48 <HAL_DMA_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002cf6:	f7ff fb83 	bl	8002400 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_TIM_PWM_MspInit+0x284>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	201e      	movs	r0, #30
 8002d0c:	f002 f867 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d10:	201e      	movs	r0, #30
 8002d12:	f002 f87e 	bl	8004e12 <HAL_NVIC_EnableIRQ>
}
 8002d16:	e05a      	b.n	8002dce <HAL_TIM_PWM_MspInit+0x312>
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58020000 	.word	0x58020000
 8002d20:	24001110 	.word	0x24001110
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	24001188 	.word	0x24001188
 8002d30:	40020058 	.word	0x40020058
 8002d34:	24001200 	.word	0x24001200
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	24001278 	.word	0x24001278
 8002d44:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <HAL_TIM_PWM_MspInit+0x31c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d13d      	bne.n	8002dce <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d52:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_TIM_PWM_MspInit+0x320>)
 8002d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_TIM_PWM_MspInit+0x320>)
 8002d5a:	f043 0308 	orr.w	r3, r3, #8
 8002d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_TIM_PWM_MspInit+0x320>)
 8002d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_TIM_PWM_MspInit+0x328>)
 8002d74:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d78:	223a      	movs	r2, #58	; 0x3a
 8002d7a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d96:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002db4:	f002 f848 	bl	8004e48 <HAL_DMA_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002dbe:	f7ff fb1f 	bl	8002400 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc8:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_TIM_PWM_MspInit+0x324>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dce:	bf00      	nop
 8002dd0:	3730      	adds	r7, #48	; 0x30
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40000c00 	.word	0x40000c00
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	240012f0 	.word	0x240012f0
 8002de4:	40020040 	.word	0x40020040

08002de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d120      	bne.n	8002e4c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	4b52      	ldr	r3, [pc, #328]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e10:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e32:	2302      	movs	r3, #2
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	4619      	mov	r1, r3
 8002e44:	4844      	ldr	r0, [pc, #272]	; (8002f58 <HAL_TIM_MspPostInit+0x170>)
 8002e46:	f004 fc39 	bl	80076bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e4a:	e07f      	b.n	8002f4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <HAL_TIM_MspPostInit+0x174>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d11f      	bne.n	8002e96 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e74:	2330      	movs	r3, #48	; 0x30
 8002e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4832      	ldr	r0, [pc, #200]	; (8002f58 <HAL_TIM_MspPostInit+0x170>)
 8002e90:	f004 fc14 	bl	80076bc <HAL_GPIO_Init>
}
 8002e94:	e05a      	b.n	8002f4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a31      	ldr	r2, [pc, #196]	; (8002f60 <HAL_TIM_MspPostInit+0x178>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d131      	bne.n	8002f04 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea6:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002ebe:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4822      	ldr	r0, [pc, #136]	; (8002f64 <HAL_TIM_MspPostInit+0x17c>)
 8002edc:	f004 fbee 	bl	80076bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002eea:	2302      	movs	r3, #2
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4619      	mov	r1, r3
 8002efc:	4819      	ldr	r0, [pc, #100]	; (8002f64 <HAL_TIM_MspPostInit+0x17c>)
 8002efe:	f004 fbdd 	bl	80076bc <HAL_GPIO_Init>
}
 8002f02:	e023      	b.n	8002f4c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIM_MspPostInit+0x180>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d11e      	bne.n	8002f4c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_TIM_MspPostInit+0x16c>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f34:	2302      	movs	r3, #2
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <HAL_TIM_MspPostInit+0x184>)
 8002f48:	f004 fbb8 	bl	80076bc <HAL_GPIO_Init>
}
 8002f4c:	bf00      	nop
 8002f4e:	3730      	adds	r7, #48	; 0x30
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	58024400 	.word	0x58024400
 8002f58:	58020400 	.word	0x58020400
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	58020c00 	.word	0x58020c00
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	58020000 	.word	0x58020000

08002f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ba      	sub	sp, #232	; 0xe8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	22b8      	movs	r2, #184	; 0xb8
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f013 fd4b 	bl	8016a2c <memset>
  if(huart->Instance==UART4)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_UART_MspInit+0x160>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d147      	bne.n	8003030 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002fa0:	f04f 0202 	mov.w	r2, #2
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb2:	f107 0318 	add.w	r3, r7, #24
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f007 f954 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fc2:	f7ff fa1d 	bl	8002400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fcc:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fea:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800301c:	2308      	movs	r3, #8
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003026:	4619      	mov	r1, r3
 8003028:	482b      	ldr	r0, [pc, #172]	; (80030d8 <HAL_UART_MspInit+0x168>)
 800302a:	f004 fb47 	bl	80076bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800302e:	e04a      	b.n	80030c6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_UART_MspInit+0x16c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d145      	bne.n	80030c6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800303a:	f04f 0201 	mov.w	r2, #1
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304c:	f107 0318 	add.w	r3, r7, #24
 8003050:	4618      	mov	r0, r3
 8003052:	f007 f907 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800305c:	f7ff f9d0 	bl	8002400 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003068:	f043 0320 	orr.w	r3, r3, #32
 800306c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_UART_MspInit+0x164>)
 8003090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80030b4:	2307      	movs	r3, #7
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030be:	4619      	mov	r1, r3
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <HAL_UART_MspInit+0x170>)
 80030c2:	f004 fafb 	bl	80076bc <HAL_GPIO_Init>
}
 80030c6:	bf00      	nop
 80030c8:	37e8      	adds	r7, #232	; 0xe8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40004c00 	.word	0x40004c00
 80030d4:	58024400 	.word	0x58024400
 80030d8:	58020400 	.word	0x58020400
 80030dc:	40011400 	.word	0x40011400
 80030e0:	58020800 	.word	0x58020800

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <NMI_Handler+0x4>

080030ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <HardFault_Handler+0x4>

080030f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <MemManage_Handler+0x4>

080030f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <BusFault_Handler+0x4>

080030fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <UsageFault_Handler+0x4>

08003102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003130:	f000 f9b0 	bl	8003494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream0_IRQHandler+0x10>)
 800313e:	f002 fc47 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	24001278 	.word	0x24001278

0800314c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream1_IRQHandler+0x10>)
 8003152:	f002 fc3d 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	24001110 	.word	0x24001110

08003160 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream2_IRQHandler+0x10>)
 8003166:	f002 fc33 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	240012f0 	.word	0x240012f0

08003174 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Stream3_IRQHandler+0x10>)
 800317a:	f002 fc29 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24001188 	.word	0x24001188

08003188 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <DMA1_Stream4_IRQHandler+0x10>)
 800318e:	f002 fc1f 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24001200 	.word	0x24001200

0800319c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <DMA1_Stream5_IRQHandler+0x10>)
 80031a2:	f002 fc15 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	24000be8 	.word	0x24000be8

080031b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM4_IRQHandler+0x10>)
 80031b6:	f00c f9df 	bl	800f578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	24001078 	.word	0x24001078

080031c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA2_Stream7_IRQHandler+0x10>)
 80031ca:	f002 fc01 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000c60 	.word	0x24000c60

080031d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <OTG_HS_IRQHandler+0x10>)
 80031de:	f004 fec7 	bl	8007f70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24002994 	.word	0x24002994

080031ec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <SDMMC2_IRQHandler+0x10>)
 80031f2:	f009 fe8d 	bl	800cf10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	24000dcc 	.word	0x24000dcc

08003200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <_sbrk+0x5c>)
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <_sbrk+0x60>)
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <_sbrk+0x64>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <_sbrk+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003230:	f013 fbc4 	bl	80169bc <__errno>
 8003234:	4603      	mov	r3, r0
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e009      	b.n	8003254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <_sbrk+0x64>)
 8003250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	24050000 	.word	0x24050000
 8003260:	00000800 	.word	0x00000800
 8003264:	24001490 	.word	0x24001490
 8003268:	240030d0 	.word	0x240030d0

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <SystemInit+0xd0>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	4a31      	ldr	r2, [pc, #196]	; (800333c <SystemInit+0xd0>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <SystemInit+0xd4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	2b06      	cmp	r3, #6
 800328a:	d807      	bhi.n	800329c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <SystemInit+0xd4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <SystemInit+0xd4>)
 8003296:	f043 0307 	orr.w	r3, r3, #7
 800329a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800329c:	4b29      	ldr	r3, [pc, #164]	; (8003344 <SystemInit+0xd8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <SystemInit+0xd8>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032a8:	4b26      	ldr	r3, [pc, #152]	; (8003344 <SystemInit+0xd8>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <SystemInit+0xd8>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4924      	ldr	r1, [pc, #144]	; (8003344 <SystemInit+0xd8>)
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <SystemInit+0xdc>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <SystemInit+0xd4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <SystemInit+0xd4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 030f 	bic.w	r3, r3, #15
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <SystemInit+0xd4>)
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <SystemInit+0xd8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <SystemInit+0xd8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <SystemInit+0xd8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <SystemInit+0xd8>)
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <SystemInit+0xe0>)
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <SystemInit+0xd8>)
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <SystemInit+0xe4>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <SystemInit+0xd8>)
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <SystemInit+0xe8>)
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <SystemInit+0xd8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <SystemInit+0xd8>)
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <SystemInit+0xe8>)
 8003304:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <SystemInit+0xd8>)
 8003308:	2200      	movs	r2, #0
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <SystemInit+0xd8>)
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <SystemInit+0xe8>)
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <SystemInit+0xd8>)
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <SystemInit+0xd8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <SystemInit+0xd8>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <SystemInit+0xd8>)
 8003326:	2200      	movs	r2, #0
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <SystemInit+0xec>)
 800332c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003330:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	52002000 	.word	0x52002000
 8003344:	58024400 	.word	0x58024400
 8003348:	eaf6ed7f 	.word	0xeaf6ed7f
 800334c:	02020200 	.word	0x02020200
 8003350:	01ff0000 	.word	0x01ff0000
 8003354:	01010280 	.word	0x01010280
 8003358:	52004000 	.word	0x52004000

0800335c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800335c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003360:	f7ff ff84 	bl	800326c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003366:	490d      	ldr	r1, [pc, #52]	; (800339c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800337c:	4c0a      	ldr	r4, [pc, #40]	; (80033a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800338a:	f013 fb1d 	bl	80169c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800338e:	f7fd fe9b 	bl	80010c8 <main>
  bx  lr
 8003392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003394:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003398:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800339c:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80033a0:	0801752c 	.word	0x0801752c
  ldr r2, =_sbss
 80033a4:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80033a8:	240030d0 	.word	0x240030d0

080033ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <ADC3_IRQHandler>
	...

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b6:	2003      	movs	r0, #3
 80033b8:	f001 fd06 	bl	8004dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033bc:	f006 fd7c 	bl	8009eb8 <HAL_RCC_GetSysClockFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_Init+0x68>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	4913      	ldr	r1, [pc, #76]	; (800341c <HAL_Init+0x6c>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_Init+0x68>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_Init+0x6c>)
 80033e4:	5cd3      	ldrb	r3, [r2, r3]
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_Init+0x70>)
 80033f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <HAL_Init+0x74>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033fa:	200f      	movs	r0, #15
 80033fc:	f000 f814 	bl	8003428 <HAL_InitTick>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e002      	b.n	8003410 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800340a:	f7fe ffff 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	08017494 	.word	0x08017494
 8003420:	24000004 	.word	0x24000004
 8003424:	24000000 	.word	0x24000000

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_InitTick+0x60>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e021      	b.n	8003480 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_InitTick+0x64>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_InitTick+0x60>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344a:	fbb3 f3f1 	udiv	r3, r3, r1
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fceb 	bl	8004e2e <HAL_SYSTICK_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e00e      	b.n	8003480 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0f      	cmp	r3, #15
 8003466:	d80a      	bhi.n	800347e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003468:	2200      	movs	r2, #0
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	f001 fcb5 	bl	8004dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003474:	4a06      	ldr	r2, [pc, #24]	; (8003490 <HAL_InitTick+0x68>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2400000c 	.word	0x2400000c
 800348c:	24000000 	.word	0x24000000
 8003490:	24000008 	.word	0x24000008

08003494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_IncTick+0x20>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_IncTick+0x24>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_IncTick+0x24>)
 80034a6:	6013      	str	r3, [r2, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2400000c 	.word	0x2400000c
 80034b8:	24001494 	.word	0x24001494

080034bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return uwTick;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_GetTick+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	24001494 	.word	0x24001494

080034d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff ffee 	bl	80034bc <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d005      	beq.n	80034fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_Delay+0x44>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034fa:	bf00      	nop
 80034fc:	f7ff ffde 	bl	80034bc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	429a      	cmp	r2, r3
 800350a:	d8f7      	bhi.n	80034fc <HAL_Delay+0x28>
  {
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2400000c 	.word	0x2400000c

0800351c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58000400 	.word	0x58000400

08003548 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	609a      	str	r2, [r3, #8]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3360      	adds	r3, #96	; 0x60
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <LL_ADC_SetOffset+0x60>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10b      	bne.n	80035ec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80035ea:	e00b      	b.n	8003604 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	431a      	orrs	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	58026000 	.word	0x58026000

08003614 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	611a      	str	r2, [r3, #16]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3360      	adds	r3, #96	; 0x60
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
  }
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	58026000 	.word	0x58026000

080036b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <LL_ADC_SetOffsetSaturation+0x40>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10e      	bne.n	80036ea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3360      	adds	r3, #96	; 0x60
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	58026000 	.word	0x58026000

080036fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <LL_ADC_SetOffsetSign+0x40>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10e      	bne.n	800372e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	58026000 	.word	0x58026000

08003740 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3360      	adds	r3, #96	; 0x60
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <LL_ADC_SetOffsetState+0x50>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003772:	e007      	b.n	8003784 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	58026000 	.word	0x58026000

08003794 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3330      	adds	r3, #48	; 0x30
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	4413      	add	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	211f      	movs	r1, #31
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	f003 011f 	and.w	r1, r3, #31
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	431a      	orrs	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3314      	adds	r3, #20
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0d1b      	lsrs	r3, r3, #20
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2107      	movs	r1, #7
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	401a      	ands	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d115      	bne.n	8003884 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0318 	and.w	r3, r3, #24
 800386e:	4914      	ldr	r1, [pc, #80]	; (80038c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003870:	40d9      	lsrs	r1, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	400b      	ands	r3, r1
 8003876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003882:	e014      	b.n	80038ae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003890:	43db      	mvns	r3, r3
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0318 	and.w	r3, r3, #24
 800389a:	4909      	ldr	r1, [pc, #36]	; (80038c0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800389c:	40d9      	lsrs	r1, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	400b      	ands	r3, r1
 80038a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	58026000 	.word	0x58026000
 80038c0:	000fffff 	.word	0x000fffff

080038c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6093      	str	r3, [r2, #8]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	5fffffc0 	.word	0x5fffffc0

080038e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fc:	d101      	bne.n	8003902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <LL_ADC_EnableInternalRegulator+0x24>)
 800391e:	4013      	ands	r3, r2
 8003920:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	6fffffc0 	.word	0x6fffffc0

08003938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394c:	d101      	bne.n	8003952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <LL_ADC_IsEnabled+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_ADC_IsEnabled+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d101      	bne.n	800399e <LL_ADC_REG_IsConversionOngoing+0x18>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d101      	bne.n	80039c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e1ee      	b.n	8003dcc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fe fd1f 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff67 	bl	80038e8 <LL_ADC_IsDeepPowerDownEnabled>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff4d 	bl	80038c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff82 	bl	8003938 <LL_ADC_IsInternalRegulatorEnabled>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d114      	bne.n	8003a64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff66 	bl	8003910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a44:	4b8e      	ldr	r3, [pc, #568]	; (8003c80 <HAL_ADC_Init+0x2ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	4a8e      	ldr	r2, [pc, #568]	; (8003c84 <HAL_ADC_Init+0x2b0>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a56:	e002      	b.n	8003a5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f9      	bne.n	8003a58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff65 	bl	8003938 <LL_ADC_IsInternalRegulatorEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	f043 0210 	orr.w	r2, r3, #16
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff76 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003a9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 8188 	bne.w	8003dba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8184 	bne.w	8003dba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff4a 	bl	8003960 <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d136      	bne.n	8003b40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6c      	ldr	r2, [pc, #432]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_Init+0x112>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10e      	bne.n	8003b04 <HAL_ADC_Init+0x130>
 8003ae6:	4868      	ldr	r0, [pc, #416]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003ae8:	f7ff ff3a 	bl	8003960 <LL_ADC_IsEnabled>
 8003aec:	4604      	mov	r4, r0
 8003aee:	4867      	ldr	r0, [pc, #412]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003af0:	f7ff ff36 	bl	8003960 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_ADC_Init+0x142>
 8003b04:	4862      	ldr	r0, [pc, #392]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003b06:	f7ff ff2b 	bl	8003960 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_ADC_Init+0x2b4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_Init+0x15a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_ADC_Init+0x2b8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Init+0x15e>
 8003b2e:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_ADC_Init+0x2c0>)
 8003b30:	e000      	b.n	8003b34 <HAL_ADC_Init+0x160>
 8003b32:	4a59      	ldr	r2, [pc, #356]	; (8003c98 <HAL_ADC_Init+0x2c4>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7ff fd04 	bl	8003548 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d129      	bne.n	8003b9e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7e5b      	ldrb	r3, [r3, #25]
 8003b4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b54:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003b5a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d013      	beq.n	8003b8c <HAL_ADC_Init+0x1b8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d00d      	beq.n	8003b88 <HAL_ADC_Init+0x1b4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b1c      	cmp	r3, #28
 8003b72:	d007      	beq.n	8003b84 <HAL_ADC_Init+0x1b0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b18      	cmp	r3, #24
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_Init+0x1ac>
 8003b7c:	2318      	movs	r3, #24
 8003b7e:	e006      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b80:	2300      	movs	r3, #0
 8003b82:	e004      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b84:	2310      	movs	r3, #16
 8003b86:	e002      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b88:	2308      	movs	r3, #8
 8003b8a:	e000      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b8c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003b8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e00e      	b.n	8003bbc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7e5b      	ldrb	r3, [r3, #25]
 8003ba2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d106      	bne.n	8003bd4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	045b      	lsls	r3, r3, #17
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d115      	bne.n	8003c26 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_ADC_Init+0x2c8>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	611a      	str	r2, [r3, #16]
 8003c24:	e009      	b.n	8003c3a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_ADC_Init+0x2cc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	69b9      	ldr	r1, [r7, #24]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fea1 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003c44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff feae 	bl	80039ac <LL_ADC_INJ_IsConversionOngoing>
 8003c50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 808e 	bne.w	8003d76 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 808a 	bne.w	8003d76 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_ADC_Init+0x2bc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7e1b      	ldrb	r3, [r3, #24]
 8003c70:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c78:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e018      	b.n	8003cb2 <HAL_ADC_Init+0x2de>
 8003c80:	24000000 	.word	0x24000000
 8003c84:	053e2d63 	.word	0x053e2d63
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022100 	.word	0x40022100
 8003c90:	58026000 	.word	0x58026000
 8003c94:	40022300 	.word	0x40022300
 8003c98:	58026300 	.word	0x58026300
 8003c9c:	fff04007 	.word	0xfff04007
 8003ca0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_ADC_Init+0x400>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d137      	bne.n	8003d40 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3f      	ldr	r2, [pc, #252]	; (8003dd8 <HAL_ADC_Init+0x404>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d116      	bne.n	8003d0e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_ADC_Init+0x408>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	e020      	b.n	8003d50 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <HAL_ADC_Init+0x40c>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0411      	lsls	r1, r2, #16
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d30:	430a      	orrs	r2, r1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e007      	b.n	8003d50 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_ADC_Init+0x404>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fd63 	bl	800483c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d10c      	bne.n	8003d98 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f023 010f 	bic.w	r1, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
 8003d96:	e007      	b.n	8003da8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020f 	bic.w	r2, r2, #15
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	f023 0303 	bic.w	r3, r3, #3
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
 8003db8:	e007      	b.n	8003dca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3724      	adds	r7, #36	; 0x24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}
 8003dd4:	ffffbffc 	.word	0xffffbffc
 8003dd8:	58026000 	.word	0x58026000
 8003ddc:	fc00f81f 	.word	0xfc00f81f
 8003de0:	fc00f81e 	.word	0xfc00f81e

08003de4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b0b9      	sub	sp, #228	; 0xe4
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dfe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4aa9      	ldr	r2, [pc, #676]	; (80040ac <HAL_ADC_ConfigChannel+0x2c8>)
 8003e06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x34>
 8003e12:	2302      	movs	r3, #2
 8003e14:	f000 bcfa 	b.w	800480c <HAL_ADC_ConfigChannel+0xa28>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fdae 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 84de 	bne.w	80047ee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a9e      	ldr	r2, [pc, #632]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d033      	beq.n	8003ea4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x76>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2201      	movs	r2, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	e01d      	b.n	8003e96 <HAL_ADC_ConfigChannel+0xb2>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e004      	b.n	8003e8c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	69d1      	ldr	r1, [r2, #28]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f7ff fc6f 	bl	8003794 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fd63 	bl	8003986 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fd6f 	bl	80039ac <LL_ADC_INJ_IsConversionOngoing>
 8003ece:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8270 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 826b 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7ff fc7a 	bl	80037ec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10d      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	08db      	lsrs	r3, r3, #3
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f1c:	e032      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	; (80040b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x160>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	e01d      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x19c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x186>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	e00a      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x19c>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d048      	beq.n	800401e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6919      	ldr	r1, [r3, #16]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f9c:	f7ff fb08 	bl	80035b0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a42      	ldr	r2, [pc, #264]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d119      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7ff fba0 	bl	80036fc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1f0>
 8003fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x1f2>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7ff fb6e 	bl	80036b8 <LL_ADC_SetOffsetSaturation>
 8003fdc:	e1ee      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d102      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x212>
 8003ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ff4:	e000      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x214>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f7ff fb3b 	bl	8003674 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6919      	ldr	r1, [r3, #16]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7e1b      	ldrb	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x230>
 800400e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004012:	e000      	b.n	8004016 <HAL_ADC_ConfigChannel+0x232>
 8004014:	2300      	movs	r3, #0
 8004016:	461a      	mov	r2, r3
 8004018:	f7ff fb12 	bl	8003640 <LL_ADC_SetDataRightShift>
 800401c:	e1ce      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f040 8181 	bne.w	800432c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff faef 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004036:	4603      	mov	r3, r0
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x272>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fae4 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800404c:	4603      	mov	r3, r0
 800404e:	0e9b      	lsrs	r3, r3, #26
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	e01e      	b.n	8004094 <HAL_ADC_ConfigChannel+0x2b0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fad9 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800407c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e004      	b.n	8004092 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x2d4>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	e01e      	b.n	80040ea <HAL_ADC_ConfigChannel+0x306>
 80040ac:	47ff0000 	.word	0x47ff0000
 80040b0:	58026000 	.word	0x58026000
 80040b4:	5c001000 	.word	0x5c001000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80040cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80040d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80040dc:	2320      	movs	r3, #32
 80040de:	e004      	b.n	80040ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80040e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d106      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fb22 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fa86 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x344>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fa7b 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	f003 021f 	and.w	r2, r3, #31
 8004126:	e01e      	b.n	8004166 <HAL_ADC_ConfigChannel+0x382>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fa70 	bl	8003614 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800414e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004156:	2320      	movs	r3, #32
 8004158:	e004      	b.n	8004164 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800415a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_ADC_ConfigChannel+0x39a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	e018      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3cc>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800419a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80041a2:	2320      	movs	r3, #32
 80041a4:	e004      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80041a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d106      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fabf 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fa23 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x40a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fa18 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	e01e      	b.n	800422c <HAL_ADC_ConfigChannel+0x448>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fa0d 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800420c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800421c:	2320      	movs	r3, #32
 800421e:	e004      	b.n	800422a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x460>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	e014      	b.n	800426e <HAL_ADC_ConfigChannel+0x48a>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e004      	b.n	800426e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004268:	fab3 f383 	clz	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	429a      	cmp	r2, r3
 8004270:	d106      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fa60 	bl	8003740 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2103      	movs	r1, #3
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff f9c4 	bl	8003614 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x4c8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2103      	movs	r1, #3
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f9b9 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 021f 	and.w	r2, r3, #31
 80042aa:	e017      	b.n	80042dc <HAL_ADC_ConfigChannel+0x4f8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2103      	movs	r1, #3
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f9ae 	bl	8003614 <LL_ADC_GetOffsetChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80042ce:	2320      	movs	r3, #32
 80042d0:	e003      	b.n	80042da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x510>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	e011      	b.n	8004318 <HAL_ADC_ConfigChannel+0x534>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004304:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	429a      	cmp	r2, r3
 800431a:	d14f      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	2103      	movs	r1, #3
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fa0b 	bl	8003740 <LL_ADC_SetOffsetState>
 800432a:	e047      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	069b      	lsls	r3, r3, #26
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004372:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	069b      	lsls	r3, r3, #26
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004396:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff facd 	bl	8003960 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 8219 	bne.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7ff fa32 	bl	8003844 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4aa1      	ldr	r2, [pc, #644]	; (800466c <HAL_ADC_ConfigChannel+0x888>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f040 812e 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x630>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b09      	cmp	r3, #9
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e019      	b.n	8004448 <HAL_ADC_ConfigChannel+0x664>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800442c:	2320      	movs	r3, #32
 800442e:	e003      	b.n	8004438 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2b09      	cmp	r3, #9
 8004440:	bf94      	ite	ls
 8004442:	2301      	movls	r3, #1
 8004444:	2300      	movhi	r3, #0
 8004446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004448:	2b00      	cmp	r3, #0
 800444a:	d079      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x684>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0e9b      	lsrs	r3, r3, #26
 800445e:	3301      	adds	r3, #1
 8004460:	069b      	lsls	r3, r3, #26
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004466:	e015      	b.n	8004494 <HAL_ADC_ConfigChannel+0x6b0>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e003      	b.n	800448c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x6d0>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	e017      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x700>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_ADC_ConfigChannel+0x726>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	e018      	b.n	800453c <HAL_ADC_ConfigChannel+0x758>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800453c:	430b      	orrs	r3, r1
 800453e:	e07e      	b.n	800463e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_ADC_ConfigChannel+0x778>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	3301      	adds	r3, #1
 8004554:	069b      	lsls	r3, r3, #26
 8004556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455a:	e015      	b.n	8004588 <HAL_ADC_ConfigChannel+0x7a4>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7c4>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2101      	movs	r1, #1
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	e017      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x7f4>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	61bb      	str	r3, [r7, #24]
  return result;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	e003      	b.n	80045cc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2101      	movs	r1, #1
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	ea42 0103 	orr.w	r1, r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x820>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	3b1e      	subs	r3, #30
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004602:	e01b      	b.n	800463c <HAL_ADC_ConfigChannel+0x858>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
  return result;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e003      	b.n	8004628 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	3b1e      	subs	r3, #30
 8004636:	051b      	lsls	r3, r3, #20
 8004638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800463c:	430b      	orrs	r3, r1
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	4619      	mov	r1, r3
 8004644:	f7ff f8d2 	bl	80037ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f280 80d7 	bge.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <HAL_ADC_ConfigChannel+0x88c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x882>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_ADC_ConfigChannel+0x890>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10a      	bne.n	800467c <HAL_ADC_ConfigChannel+0x898>
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <HAL_ADC_ConfigChannel+0x894>)
 8004668:	e009      	b.n	800467e <HAL_ADC_ConfigChannel+0x89a>
 800466a:	bf00      	nop
 800466c:	47ff0000 	.word	0x47ff0000
 8004670:	40022000 	.word	0x40022000
 8004674:	40022100 	.word	0x40022100
 8004678:	40022300 	.word	0x40022300
 800467c:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe ff88 	bl	8003594 <LL_ADC_GetCommonPathInternalCh>
 8004684:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a62      	ldr	r2, [pc, #392]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_ADC_ConfigChannel+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a61      	ldr	r2, [pc, #388]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10e      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x8d6>
 800469c:	485e      	ldr	r0, [pc, #376]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 800469e:	f7ff f95f 	bl	8003960 <LL_ADC_IsEnabled>
 80046a2:	4604      	mov	r4, r0
 80046a4:	485d      	ldr	r0, [pc, #372]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 80046a6:	f7ff f95b 	bl	8003960 <LL_ADC_IsEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4323      	orrs	r3, r4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e008      	b.n	80046cc <HAL_ADC_ConfigChannel+0x8e8>
 80046ba:	4859      	ldr	r0, [pc, #356]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80046bc:	f7ff f950 	bl	8003960 <LL_ADC_IsEnabled>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8084 	beq.w	80047da <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a53      	ldr	r2, [pc, #332]	; (8004824 <HAL_ADC_ConfigChannel+0xa40>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d132      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x95e>
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d12c      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f040 8086 	bne.w	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a47      	ldr	r2, [pc, #284]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x924>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a46      	ldr	r2, [pc, #280]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x928>
 8004708:	4a47      	ldr	r2, [pc, #284]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 800470a:	e000      	b.n	800470e <HAL_ADC_ConfigChannel+0x92a>
 800470c:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800470e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe ff28 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_ADC_ConfigChannel+0xa48>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_ADC_ConfigChannel+0xa4c>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	3301      	adds	r3, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004732:	e002      	b.n	800473a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	3b01      	subs	r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f9      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004740:	e05e      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_ADC_ConfigChannel+0xa50>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d120      	bne.n	800478e <HAL_ADC_ConfigChannel+0x9aa>
 800474c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11a      	bne.n	800478e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a30      	ldr	r2, [pc, #192]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d14e      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x992>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x996>
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 8004778:	e000      	b.n	800477c <HAL_ADC_ConfigChannel+0x998>
 800477a:	4a26      	ldr	r2, [pc, #152]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 800477c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fef1 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800478c:	e038      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_ADC_ConfigChannel+0xa54>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d133      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800479c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12d      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_ADC_ConfigChannel+0xa3c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d128      	bne.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_ADC_ConfigChannel+0xa34>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x9de>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_ADC_ConfigChannel+0xa38>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x9e2>
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_ADC_ConfigChannel+0xa44>)
 80047c4:	e000      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x9e4>
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <HAL_ADC_ConfigChannel+0xa30>)
 80047c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fe fecb 	bl	800356e <LL_ADC_SetCommonPathInternalCh>
 80047d8:	e012      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80047ec:	e008      	b.n	8004800 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004808:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800480c:	4618      	mov	r0, r3
 800480e:	37e4      	adds	r7, #228	; 0xe4
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}
 8004814:	58026300 	.word	0x58026300
 8004818:	40022000 	.word	0x40022000
 800481c:	40022100 	.word	0x40022100
 8004820:	58026000 	.word	0x58026000
 8004824:	c7520000 	.word	0xc7520000
 8004828:	40022300 	.word	0x40022300
 800482c:	24000000 	.word	0x24000000
 8004830:	053e2d63 	.word	0x053e2d63
 8004834:	c3210000 	.word	0xc3210000
 8004838:	cb840000 	.word	0xcb840000

0800483c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6c      	ldr	r2, [pc, #432]	; (80049fc <ADC_ConfigureBoostMode+0x1c0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <ADC_ConfigureBoostMode+0x1c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6b      	ldr	r2, [pc, #428]	; (8004a00 <ADC_ConfigureBoostMode+0x1c4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <ADC_ConfigureBoostMode+0x30>
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <ADC_ConfigureBoostMode+0x1c8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e008      	b.n	800487e <ADC_ConfigureBoostMode+0x42>
 800486c:	4b66      	ldr	r3, [pc, #408]	; (8004a08 <ADC_ConfigureBoostMode+0x1cc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01c      	beq.n	80048bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004882:	f005 fc93 	bl	800a1ac <HAL_RCC_GetHCLKFreq>
 8004886:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004890:	d010      	beq.n	80048b4 <ADC_ConfigureBoostMode+0x78>
 8004892:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004896:	d873      	bhi.n	8004980 <ADC_ConfigureBoostMode+0x144>
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d002      	beq.n	80048a4 <ADC_ConfigureBoostMode+0x68>
 800489e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a2:	d16d      	bne.n	8004980 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	60fb      	str	r3, [r7, #12]
        break;
 80048b2:	e068      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	60fb      	str	r3, [r7, #12]
        break;
 80048ba:	e064      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80048bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80048c0:	f04f 0100 	mov.w	r1, #0
 80048c4:	f006 fe6e 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048d2:	d051      	beq.n	8004978 <ADC_ConfigureBoostMode+0x13c>
 80048d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80048d8:	d854      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048de:	d047      	beq.n	8004970 <ADC_ConfigureBoostMode+0x134>
 80048e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80048e4:	d84e      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80048ea:	d03d      	beq.n	8004968 <ADC_ConfigureBoostMode+0x12c>
 80048ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80048f0:	d848      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f6:	d033      	beq.n	8004960 <ADC_ConfigureBoostMode+0x124>
 80048f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fc:	d842      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 80048fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004902:	d029      	beq.n	8004958 <ADC_ConfigureBoostMode+0x11c>
 8004904:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004908:	d83c      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800490a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800490e:	d01a      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004910:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004914:	d836      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 8004916:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800491a:	d014      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 800491c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004920:	d830      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d00e      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d82a      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800492e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004932:	d008      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004938:	d824      	bhi.n	8004984 <ADC_ConfigureBoostMode+0x148>
 800493a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800493e:	d002      	beq.n	8004946 <ADC_ConfigureBoostMode+0x10a>
 8004940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004944:	d11e      	bne.n	8004984 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0c9b      	lsrs	r3, r3, #18
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	60fb      	str	r3, [r7, #12]
        break;
 8004956:	e016      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
        break;
 800495e:	e012      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	60fb      	str	r3, [r7, #12]
        break;
 8004966:	e00e      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e00a      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	09db      	lsrs	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e006      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	60fb      	str	r3, [r7, #12]
        break;
 800497e:	e002      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004984:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <ADC_ConfigureBoostMode+0x1d0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d808      	bhi.n	80049a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80049a4:	e025      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <ADC_ConfigureBoostMode+0x1d4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d80a      	bhi.n	80049c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c0:	609a      	str	r2, [r3, #8]
}
 80049c2:	e016      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <ADC_ConfigureBoostMode+0x1d8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d80a      	bhi.n	80049e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	e007      	b.n	80049f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000
 8004a00:	40022100 	.word	0x40022100
 8004a04:	40022300 	.word	0x40022300
 8004a08:	58026300 	.word	0x58026300
 8004a0c:	005f5e10 	.word	0x005f5e10
 8004a10:	00bebc20 	.word	0x00bebc20
 8004a14:	017d7840 	.word	0x017d7840

08004a18 <LL_ADC_IsEnabled>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <LL_ADC_IsEnabled+0x18>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <LL_ADC_IsEnabled+0x1a>
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d101      	bne.n	8004a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b0a3      	sub	sp, #140	; 0x8c
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0c1      	b.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a5e      	ldr	r2, [pc, #376]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d102      	bne.n	8004aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a9c:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e001      	b.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a0      	b.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffb9 	bl	8004a3e <LL_ADC_REG_IsConversionOngoing>
 8004acc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffb2 	bl	8004a3e <LL_ADC_REG_IsConversionOngoing>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8081 	bne.w	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d17c      	bne.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a48      	ldr	r2, [pc, #288]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a46      	ldr	r2, [pc, #280]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004afe:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b00:	e000      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004b02:	4b46      	ldr	r3, [pc, #280]	; (8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b04:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d039      	beq.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a39      	ldr	r2, [pc, #228]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10e      	bne.n	8004b52 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004b34:	4836      	ldr	r0, [pc, #216]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b36:	f7ff ff6f 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4835      	ldr	r0, [pc, #212]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b3e:	f7ff ff6b 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4323      	orrs	r3, r4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e008      	b.n	8004b64 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004b52:	4833      	ldr	r0, [pc, #204]	; (8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b54:	f7ff ff60 	bl	8004a18 <LL_ADC_IsEnabled>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d047      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b80:	e03a      	b.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ba2:	481b      	ldr	r0, [pc, #108]	; (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ba4:	f7ff ff38 	bl	8004a18 <LL_ADC_IsEnabled>
 8004ba8:	4604      	mov	r4, r0
 8004baa:	481a      	ldr	r0, [pc, #104]	; (8004c14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bac:	f7ff ff34 	bl	8004a18 <LL_ADC_IsEnabled>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4323      	orrs	r3, r4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004bc0:	4817      	ldr	r0, [pc, #92]	; (8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004bc2:	f7ff ff29 	bl	8004a18 <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004be0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004be2:	e009      	b.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004bf6:	e000      	b.n	8004bfa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c02:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	378c      	adds	r7, #140	; 0x8c
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40022000 	.word	0x40022000
 8004c14:	40022100 	.word	0x40022100
 8004c18:	40022300 	.word	0x40022300
 8004c1c:	58026300 	.word	0x58026300
 8004c20:	58026000 	.word	0x58026000
 8004c24:	fffff0e0 	.word	0xfffff0e0

08004c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <__NVIC_SetPriorityGrouping+0x40>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <__NVIC_SetPriorityGrouping+0x44>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <__NVIC_SetPriorityGrouping+0x40>)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	60d3      	str	r3, [r2, #12]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000ed00 	.word	0xe000ed00
 8004c6c:	05fa0000 	.word	0x05fa0000

08004c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <__NVIC_GetPriorityGrouping+0x18>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	f003 0307 	and.w	r3, r3, #7
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	db0b      	blt.n	8004cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	f003 021f 	and.w	r2, r3, #31
 8004ca4:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <__NVIC_EnableIRQ+0x38>)
 8004ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2001      	movs	r0, #1
 8004cae:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000e100 	.word	0xe000e100

08004cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	6039      	str	r1, [r7, #0]
 8004cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db0a      	blt.n	8004cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	490c      	ldr	r1, [pc, #48]	; (8004d14 <__NVIC_SetPriority+0x4c>)
 8004ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	440b      	add	r3, r1
 8004cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf0:	e00a      	b.n	8004d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4908      	ldr	r1, [pc, #32]	; (8004d18 <__NVIC_SetPriority+0x50>)
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	0112      	lsls	r2, r2, #4
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	440b      	add	r3, r1
 8004d06:	761a      	strb	r2, [r3, #24]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000e100 	.word	0xe000e100
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f1c3 0307 	rsb	r3, r3, #7
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf28      	it	cs
 8004d3a:	2304      	movcs	r3, #4
 8004d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d902      	bls.n	8004d4c <NVIC_EncodePriority+0x30>
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3b03      	subs	r3, #3
 8004d4a:	e000      	b.n	8004d4e <NVIC_EncodePriority+0x32>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	401a      	ands	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d64:	f04f 31ff 	mov.w	r1, #4294967295
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	43d9      	mvns	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d74:	4313      	orrs	r3, r2
         );
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3724      	adds	r7, #36	; 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d94:	d301      	bcc.n	8004d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00f      	b.n	8004dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <SysTick_Config+0x40>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da2:	210f      	movs	r1, #15
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f7ff ff8e 	bl	8004cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <SysTick_Config+0x40>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <SysTick_Config+0x40>)
 8004db4:	2207      	movs	r2, #7
 8004db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	e000e010 	.word	0xe000e010

08004dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff29 	bl	8004c28 <__NVIC_SetPriorityGrouping>
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	4603      	mov	r3, r0
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dec:	f7ff ff40 	bl	8004c70 <__NVIC_GetPriorityGrouping>
 8004df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	f7ff ff90 	bl	8004d1c <NVIC_EncodePriority>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff5f 	bl	8004cc8 <__NVIC_SetPriority>
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ff33 	bl	8004c8c <__NVIC_EnableIRQ>
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ffa4 	bl	8004d84 <SysTick_Config>
 8004e3c:	4603      	mov	r3, r0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e50:	f7fe fb34 	bl	80034bc <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e314      	b.n	800548a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a66      	ldr	r2, [pc, #408]	; (8005000 <HAL_DMA_Init+0x1b8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04a      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a65      	ldr	r2, [pc, #404]	; (8005004 <HAL_DMA_Init+0x1bc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d045      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a63      	ldr	r2, [pc, #396]	; (8005008 <HAL_DMA_Init+0x1c0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d040      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a62      	ldr	r2, [pc, #392]	; (800500c <HAL_DMA_Init+0x1c4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d03b      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a60      	ldr	r2, [pc, #384]	; (8005010 <HAL_DMA_Init+0x1c8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d036      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a5f      	ldr	r2, [pc, #380]	; (8005014 <HAL_DMA_Init+0x1cc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d031      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5d      	ldr	r2, [pc, #372]	; (8005018 <HAL_DMA_Init+0x1d0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02c      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5c      	ldr	r2, [pc, #368]	; (800501c <HAL_DMA_Init+0x1d4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d027      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a5a      	ldr	r2, [pc, #360]	; (8005020 <HAL_DMA_Init+0x1d8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d022      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a59      	ldr	r2, [pc, #356]	; (8005024 <HAL_DMA_Init+0x1dc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d01d      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a57      	ldr	r2, [pc, #348]	; (8005028 <HAL_DMA_Init+0x1e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a56      	ldr	r2, [pc, #344]	; (800502c <HAL_DMA_Init+0x1e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a54      	ldr	r2, [pc, #336]	; (8005030 <HAL_DMA_Init+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a53      	ldr	r2, [pc, #332]	; (8005034 <HAL_DMA_Init+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	; (8005038 <HAL_DMA_Init+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_DMA_Init+0xb8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a50      	ldr	r2, [pc, #320]	; (800503c <HAL_DMA_Init+0x1f4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <HAL_DMA_Init+0xbc>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_Init+0xbe>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 813c 	beq.w	8005184 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a37      	ldr	r2, [pc, #220]	; (8005000 <HAL_DMA_Init+0x1b8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d04a      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a36      	ldr	r2, [pc, #216]	; (8005004 <HAL_DMA_Init+0x1bc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d045      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a34      	ldr	r2, [pc, #208]	; (8005008 <HAL_DMA_Init+0x1c0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d040      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a33      	ldr	r2, [pc, #204]	; (800500c <HAL_DMA_Init+0x1c4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d03b      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a31      	ldr	r2, [pc, #196]	; (8005010 <HAL_DMA_Init+0x1c8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d036      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_DMA_Init+0x1cc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d031      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2e      	ldr	r2, [pc, #184]	; (8005018 <HAL_DMA_Init+0x1d0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02c      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2d      	ldr	r2, [pc, #180]	; (800501c <HAL_DMA_Init+0x1d4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d027      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	; (8005020 <HAL_DMA_Init+0x1d8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_DMA_Init+0x1dc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01d      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_DMA_Init+0x1e0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_DMA_Init+0x1e4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_DMA_Init+0x1e8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_DMA_Init+0x1ec>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_DMA_Init+0x1f0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_DMA_Init+0x174>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_DMA_Init+0x1f4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <HAL_DMA_Init+0x186>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e007      	b.n	8004fde <HAL_DMA_Init+0x196>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fde:	e02f      	b.n	8005040 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fe0:	f7fe fa6c 	bl	80034bc <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	d928      	bls.n	8005040 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e244      	b.n	800548a <HAL_DMA_Init+0x642>
 8005000:	40020010 	.word	0x40020010
 8005004:	40020028 	.word	0x40020028
 8005008:	40020040 	.word	0x40020040
 800500c:	40020058 	.word	0x40020058
 8005010:	40020070 	.word	0x40020070
 8005014:	40020088 	.word	0x40020088
 8005018:	400200a0 	.word	0x400200a0
 800501c:	400200b8 	.word	0x400200b8
 8005020:	40020410 	.word	0x40020410
 8005024:	40020428 	.word	0x40020428
 8005028:	40020440 	.word	0x40020440
 800502c:	40020458 	.word	0x40020458
 8005030:	40020470 	.word	0x40020470
 8005034:	40020488 	.word	0x40020488
 8005038:	400204a0 	.word	0x400204a0
 800503c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1c8      	bne.n	8004fe0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4b84      	ldr	r3, [pc, #528]	; (800526c <HAL_DMA_Init+0x424>)
 800505a:	4013      	ands	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005066:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005072:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b04      	cmp	r3, #4
 8005092:	d107      	bne.n	80050a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	4313      	orrs	r3, r2
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b28      	cmp	r3, #40	; 0x28
 80050aa:	d903      	bls.n	80050b4 <HAL_DMA_Init+0x26c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b2e      	cmp	r3, #46	; 0x2e
 80050b2:	d91f      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b3e      	cmp	r3, #62	; 0x3e
 80050ba:	d903      	bls.n	80050c4 <HAL_DMA_Init+0x27c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b42      	cmp	r3, #66	; 0x42
 80050c2:	d917      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b46      	cmp	r3, #70	; 0x46
 80050ca:	d903      	bls.n	80050d4 <HAL_DMA_Init+0x28c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b48      	cmp	r3, #72	; 0x48
 80050d2:	d90f      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b4e      	cmp	r3, #78	; 0x4e
 80050da:	d903      	bls.n	80050e4 <HAL_DMA_Init+0x29c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b52      	cmp	r3, #82	; 0x52
 80050e2:	d907      	bls.n	80050f4 <HAL_DMA_Init+0x2ac>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b73      	cmp	r3, #115	; 0x73
 80050ea:	d905      	bls.n	80050f8 <HAL_DMA_Init+0x2b0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b77      	cmp	r3, #119	; 0x77
 80050f2:	d801      	bhi.n	80050f8 <HAL_DMA_Init+0x2b0>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_DMA_Init+0x2b2>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005104:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b04      	cmp	r3, #4
 800512e:	d117      	bne.n	8005160 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fdcc 	bl	8006ce0 <DMA_CheckFifoParam>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2240      	movs	r2, #64	; 0x40
 8005152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e194      	b.n	800548a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 fd07 	bl	8006b7c <DMA_CalcBaseAndBitshift>
 800516e:	4603      	mov	r3, r0
 8005170:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	223f      	movs	r2, #63	; 0x3f
 800517c:	409a      	lsls	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	609a      	str	r2, [r3, #8]
 8005182:	e0ca      	b.n	800531a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a39      	ldr	r2, [pc, #228]	; (8005270 <HAL_DMA_Init+0x428>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <HAL_DMA_Init+0x42c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a36      	ldr	r2, [pc, #216]	; (8005278 <HAL_DMA_Init+0x430>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a35      	ldr	r2, [pc, #212]	; (800527c <HAL_DMA_Init+0x434>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a33      	ldr	r2, [pc, #204]	; (8005280 <HAL_DMA_Init+0x438>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a32      	ldr	r2, [pc, #200]	; (8005284 <HAL_DMA_Init+0x43c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_DMA_Init+0x440>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_Init+0x38c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_DMA_Init+0x444>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Init+0x390>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_Init+0x392>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8094 	beq.w	8005308 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_DMA_Init+0x428>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d021      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_DMA_Init+0x42c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d01c      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <HAL_DMA_Init+0x430>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d017      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <HAL_DMA_Init+0x434>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d012      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_DMA_Init+0x438>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_DMA_Init+0x43c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d008      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a19      	ldr	r2, [pc, #100]	; (8005288 <HAL_DMA_Init+0x440>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <HAL_DMA_Init+0x3e6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_DMA_Init+0x444>)
 800522c:	4293      	cmp	r3, r2
 800522e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_DMA_Init+0x448>)
 800524c:	4013      	ands	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d01d      	beq.n	8005294 <HAL_DMA_Init+0x44c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d102      	bne.n	8005266 <HAL_DMA_Init+0x41e>
 8005260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005264:	e017      	b.n	8005296 <HAL_DMA_Init+0x44e>
 8005266:	2300      	movs	r3, #0
 8005268:	e015      	b.n	8005296 <HAL_DMA_Init+0x44e>
 800526a:	bf00      	nop
 800526c:	fe10803f 	.word	0xfe10803f
 8005270:	58025408 	.word	0x58025408
 8005274:	5802541c 	.word	0x5802541c
 8005278:	58025430 	.word	0x58025430
 800527c:	58025444 	.word	0x58025444
 8005280:	58025458 	.word	0x58025458
 8005284:	5802546c 	.word	0x5802546c
 8005288:	58025480 	.word	0x58025480
 800528c:	58025494 	.word	0x58025494
 8005290:	fffe000f 	.word	0xfffe000f
 8005294:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800529c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	4b6e      	ldr	r3, [pc, #440]	; (8005494 <HAL_DMA_Init+0x64c>)
 80052dc:	4413      	add	r3, r2
 80052de:	4a6e      	ldr	r2, [pc, #440]	; (8005498 <HAL_DMA_Init+0x650>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	009a      	lsls	r2, r3, #2
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fc45 	bl	8006b7c <DMA_CalcBaseAndBitshift>
 80052f2:	4603      	mov	r3, r0
 80052f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2201      	movs	r2, #1
 8005300:	409a      	lsls	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	e008      	b.n	800531a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2240      	movs	r2, #64	; 0x40
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2203      	movs	r2, #3
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0b7      	b.n	800548a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5f      	ldr	r2, [pc, #380]	; (800549c <HAL_DMA_Init+0x654>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d072      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5d      	ldr	r2, [pc, #372]	; (80054a0 <HAL_DMA_Init+0x658>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d06d      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <HAL_DMA_Init+0x65c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d068      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5a      	ldr	r2, [pc, #360]	; (80054a8 <HAL_DMA_Init+0x660>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d063      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a59      	ldr	r2, [pc, #356]	; (80054ac <HAL_DMA_Init+0x664>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d05e      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a57      	ldr	r2, [pc, #348]	; (80054b0 <HAL_DMA_Init+0x668>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d059      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_DMA_Init+0x66c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d054      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_DMA_Init+0x670>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04f      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a53      	ldr	r2, [pc, #332]	; (80054bc <HAL_DMA_Init+0x674>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a51      	ldr	r2, [pc, #324]	; (80054c0 <HAL_DMA_Init+0x678>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a50      	ldr	r2, [pc, #320]	; (80054c4 <HAL_DMA_Init+0x67c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a4e      	ldr	r2, [pc, #312]	; (80054c8 <HAL_DMA_Init+0x680>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4d      	ldr	r2, [pc, #308]	; (80054cc <HAL_DMA_Init+0x684>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4b      	ldr	r2, [pc, #300]	; (80054d0 <HAL_DMA_Init+0x688>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4a      	ldr	r2, [pc, #296]	; (80054d4 <HAL_DMA_Init+0x68c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a48      	ldr	r2, [pc, #288]	; (80054d8 <HAL_DMA_Init+0x690>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a47      	ldr	r2, [pc, #284]	; (80054dc <HAL_DMA_Init+0x694>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a45      	ldr	r2, [pc, #276]	; (80054e0 <HAL_DMA_Init+0x698>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_DMA_Init+0x69c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <HAL_DMA_Init+0x6a0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a41      	ldr	r2, [pc, #260]	; (80054ec <HAL_DMA_Init+0x6a4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <HAL_DMA_Init+0x6a8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	; (80054f4 <HAL_DMA_Init+0x6ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMA_Init+0x5c2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <HAL_DMA_Init+0x6b0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_DMA_Init+0x5c6>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_DMA_Init+0x5c8>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d032      	beq.n	800547a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fcdf 	bl	8006dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d102      	bne.n	8005428 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800543c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_DMA_Init+0x620>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b08      	cmp	r3, #8
 800544c:	d80c      	bhi.n	8005468 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fd5c 	bl	8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	e008      	b.n	800547a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	a7fdabf8 	.word	0xa7fdabf8
 8005498:	cccccccd 	.word	0xcccccccd
 800549c:	40020010 	.word	0x40020010
 80054a0:	40020028 	.word	0x40020028
 80054a4:	40020040 	.word	0x40020040
 80054a8:	40020058 	.word	0x40020058
 80054ac:	40020070 	.word	0x40020070
 80054b0:	40020088 	.word	0x40020088
 80054b4:	400200a0 	.word	0x400200a0
 80054b8:	400200b8 	.word	0x400200b8
 80054bc:	40020410 	.word	0x40020410
 80054c0:	40020428 	.word	0x40020428
 80054c4:	40020440 	.word	0x40020440
 80054c8:	40020458 	.word	0x40020458
 80054cc:	40020470 	.word	0x40020470
 80054d0:	40020488 	.word	0x40020488
 80054d4:	400204a0 	.word	0x400204a0
 80054d8:	400204b8 	.word	0x400204b8
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494

080054fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e226      	b.n	8005966 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_DMA_Start_IT+0x2a>
 8005522:	2302      	movs	r3, #2
 8005524:	e21f      	b.n	8005966 <HAL_DMA_Start_IT+0x46a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	f040 820a 	bne.w	8005950 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a68      	ldr	r2, [pc, #416]	; (80056f0 <HAL_DMA_Start_IT+0x1f4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d04a      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a66      	ldr	r2, [pc, #408]	; (80056f4 <HAL_DMA_Start_IT+0x1f8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d045      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a65      	ldr	r2, [pc, #404]	; (80056f8 <HAL_DMA_Start_IT+0x1fc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d040      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a63      	ldr	r2, [pc, #396]	; (80056fc <HAL_DMA_Start_IT+0x200>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d03b      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a62      	ldr	r2, [pc, #392]	; (8005700 <HAL_DMA_Start_IT+0x204>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d036      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a60      	ldr	r2, [pc, #384]	; (8005704 <HAL_DMA_Start_IT+0x208>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d031      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5f      	ldr	r2, [pc, #380]	; (8005708 <HAL_DMA_Start_IT+0x20c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d02c      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5d      	ldr	r2, [pc, #372]	; (800570c <HAL_DMA_Start_IT+0x210>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d027      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5c      	ldr	r2, [pc, #368]	; (8005710 <HAL_DMA_Start_IT+0x214>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d022      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5a      	ldr	r2, [pc, #360]	; (8005714 <HAL_DMA_Start_IT+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a59      	ldr	r2, [pc, #356]	; (8005718 <HAL_DMA_Start_IT+0x21c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a57      	ldr	r2, [pc, #348]	; (800571c <HAL_DMA_Start_IT+0x220>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a56      	ldr	r2, [pc, #344]	; (8005720 <HAL_DMA_Start_IT+0x224>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a54      	ldr	r2, [pc, #336]	; (8005724 <HAL_DMA_Start_IT+0x228>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a53      	ldr	r2, [pc, #332]	; (8005728 <HAL_DMA_Start_IT+0x22c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_DMA_Start_IT+0xee>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a51      	ldr	r2, [pc, #324]	; (800572c <HAL_DMA_Start_IT+0x230>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <HAL_DMA_Start_IT+0x100>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e007      	b.n	800560c <HAL_DMA_Start_IT+0x110>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f001 f906 	bl	8006824 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <HAL_DMA_Start_IT+0x1f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	; (80056f4 <HAL_DMA_Start_IT+0x1f8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a31      	ldr	r2, [pc, #196]	; (80056f8 <HAL_DMA_Start_IT+0x1fc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a30      	ldr	r2, [pc, #192]	; (80056fc <HAL_DMA_Start_IT+0x200>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_DMA_Start_IT+0x204>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <HAL_DMA_Start_IT+0x208>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2b      	ldr	r2, [pc, #172]	; (8005708 <HAL_DMA_Start_IT+0x20c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <HAL_DMA_Start_IT+0x210>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <HAL_DMA_Start_IT+0x214>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a27      	ldr	r2, [pc, #156]	; (8005714 <HAL_DMA_Start_IT+0x218>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a25      	ldr	r2, [pc, #148]	; (8005718 <HAL_DMA_Start_IT+0x21c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a24      	ldr	r2, [pc, #144]	; (800571c <HAL_DMA_Start_IT+0x220>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_DMA_Start_IT+0x224>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <HAL_DMA_Start_IT+0x228>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_DMA_Start_IT+0x22c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_Start_IT+0x1bc>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_DMA_Start_IT+0x230>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Start_IT+0x1c0>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_Start_IT+0x1c2>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 021e 	bic.w	r2, r3, #30
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0216 	orr.w	r2, r2, #22
 80056d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03e      	beq.n	800575c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0208 	orr.w	r2, r2, #8
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e035      	b.n	800575c <HAL_DMA_Start_IT+0x260>
 80056f0:	40020010 	.word	0x40020010
 80056f4:	40020028 	.word	0x40020028
 80056f8:	40020040 	.word	0x40020040
 80056fc:	40020058 	.word	0x40020058
 8005700:	40020070 	.word	0x40020070
 8005704:	40020088 	.word	0x40020088
 8005708:	400200a0 	.word	0x400200a0
 800570c:	400200b8 	.word	0x400200b8
 8005710:	40020410 	.word	0x40020410
 8005714:	40020428 	.word	0x40020428
 8005718:	40020440 	.word	0x40020440
 800571c:	40020458 	.word	0x40020458
 8005720:	40020470 	.word	0x40020470
 8005724:	40020488 	.word	0x40020488
 8005728:	400204a0 	.word	0x400204a0
 800572c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020e 	bic.w	r2, r3, #14
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 020a 	orr.w	r2, r2, #10
 8005742:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0204 	orr.w	r2, r2, #4
 800575a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a83      	ldr	r2, [pc, #524]	; (8005970 <HAL_DMA_Start_IT+0x474>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d072      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a82      	ldr	r2, [pc, #520]	; (8005974 <HAL_DMA_Start_IT+0x478>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d06d      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a80      	ldr	r2, [pc, #512]	; (8005978 <HAL_DMA_Start_IT+0x47c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d068      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7f      	ldr	r2, [pc, #508]	; (800597c <HAL_DMA_Start_IT+0x480>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d063      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a7d      	ldr	r2, [pc, #500]	; (8005980 <HAL_DMA_Start_IT+0x484>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d05e      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a7c      	ldr	r2, [pc, #496]	; (8005984 <HAL_DMA_Start_IT+0x488>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d059      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a7a      	ldr	r2, [pc, #488]	; (8005988 <HAL_DMA_Start_IT+0x48c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d054      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a79      	ldr	r2, [pc, #484]	; (800598c <HAL_DMA_Start_IT+0x490>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04f      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a77      	ldr	r2, [pc, #476]	; (8005990 <HAL_DMA_Start_IT+0x494>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d04a      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a76      	ldr	r2, [pc, #472]	; (8005994 <HAL_DMA_Start_IT+0x498>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d045      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a74      	ldr	r2, [pc, #464]	; (8005998 <HAL_DMA_Start_IT+0x49c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d040      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a73      	ldr	r2, [pc, #460]	; (800599c <HAL_DMA_Start_IT+0x4a0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d03b      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a71      	ldr	r2, [pc, #452]	; (80059a0 <HAL_DMA_Start_IT+0x4a4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d036      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a70      	ldr	r2, [pc, #448]	; (80059a4 <HAL_DMA_Start_IT+0x4a8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d031      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_DMA_Start_IT+0x4ac>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02c      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6d      	ldr	r2, [pc, #436]	; (80059ac <HAL_DMA_Start_IT+0x4b0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d027      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6b      	ldr	r2, [pc, #428]	; (80059b0 <HAL_DMA_Start_IT+0x4b4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a6a      	ldr	r2, [pc, #424]	; (80059b4 <HAL_DMA_Start_IT+0x4b8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d01d      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a68      	ldr	r2, [pc, #416]	; (80059b8 <HAL_DMA_Start_IT+0x4bc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a67      	ldr	r2, [pc, #412]	; (80059bc <HAL_DMA_Start_IT+0x4c0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	; (80059c0 <HAL_DMA_Start_IT+0x4c4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a64      	ldr	r2, [pc, #400]	; (80059c4 <HAL_DMA_Start_IT+0x4c8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a62      	ldr	r2, [pc, #392]	; (80059c8 <HAL_DMA_Start_IT+0x4cc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_DMA_Start_IT+0x350>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a61      	ldr	r2, [pc, #388]	; (80059cc <HAL_DMA_Start_IT+0x4d0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Start_IT+0x354>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_DMA_Start_IT+0x356>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01a      	beq.n	800588c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005872:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a37      	ldr	r2, [pc, #220]	; (8005970 <HAL_DMA_Start_IT+0x474>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04a      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a36      	ldr	r2, [pc, #216]	; (8005974 <HAL_DMA_Start_IT+0x478>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d045      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a34      	ldr	r2, [pc, #208]	; (8005978 <HAL_DMA_Start_IT+0x47c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a33      	ldr	r2, [pc, #204]	; (800597c <HAL_DMA_Start_IT+0x480>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d03b      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_DMA_Start_IT+0x484>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d036      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_DMA_Start_IT+0x488>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d031      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <HAL_DMA_Start_IT+0x48c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a2d      	ldr	r2, [pc, #180]	; (800598c <HAL_DMA_Start_IT+0x490>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d027      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_DMA_Start_IT+0x494>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <HAL_DMA_Start_IT+0x498>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a28      	ldr	r2, [pc, #160]	; (8005998 <HAL_DMA_Start_IT+0x49c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a27      	ldr	r2, [pc, #156]	; (800599c <HAL_DMA_Start_IT+0x4a0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_DMA_Start_IT+0x4a4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <HAL_DMA_Start_IT+0x4a8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <HAL_DMA_Start_IT+0x4ac>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_DMA_Start_IT+0x430>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a21      	ldr	r2, [pc, #132]	; (80059ac <HAL_DMA_Start_IT+0x4b0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <HAL_DMA_Start_IT+0x442>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e012      	b.n	8005964 <HAL_DMA_Start_IT+0x468>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e009      	b.n	8005964 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005956:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40020010 	.word	0x40020010
 8005974:	40020028 	.word	0x40020028
 8005978:	40020040 	.word	0x40020040
 800597c:	40020058 	.word	0x40020058
 8005980:	40020070 	.word	0x40020070
 8005984:	40020088 	.word	0x40020088
 8005988:	400200a0 	.word	0x400200a0
 800598c:	400200b8 	.word	0x400200b8
 8005990:	40020410 	.word	0x40020410
 8005994:	40020428 	.word	0x40020428
 8005998:	40020440 	.word	0x40020440
 800599c:	40020458 	.word	0x40020458
 80059a0:	40020470 	.word	0x40020470
 80059a4:	40020488 	.word	0x40020488
 80059a8:	400204a0 	.word	0x400204a0
 80059ac:	400204b8 	.word	0x400204b8
 80059b0:	58025408 	.word	0x58025408
 80059b4:	5802541c 	.word	0x5802541c
 80059b8:	58025430 	.word	0x58025430
 80059bc:	58025444 	.word	0x58025444
 80059c0:	58025458 	.word	0x58025458
 80059c4:	5802546c 	.word	0x5802546c
 80059c8:	58025480 	.word	0x58025480
 80059cc:	58025494 	.word	0x58025494

080059d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059dc:	4b67      	ldr	r3, [pc, #412]	; (8005b7c <HAL_DMA_IRQHandler+0x1ac>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a67      	ldr	r2, [pc, #412]	; (8005b80 <HAL_DMA_IRQHandler+0x1b0>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	0a9b      	lsrs	r3, r3, #10
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5f      	ldr	r2, [pc, #380]	; (8005b84 <HAL_DMA_IRQHandler+0x1b4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5d      	ldr	r2, [pc, #372]	; (8005b88 <HAL_DMA_IRQHandler+0x1b8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5c      	ldr	r2, [pc, #368]	; (8005b8c <HAL_DMA_IRQHandler+0x1bc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5a      	ldr	r2, [pc, #360]	; (8005b90 <HAL_DMA_IRQHandler+0x1c0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a59      	ldr	r2, [pc, #356]	; (8005b94 <HAL_DMA_IRQHandler+0x1c4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a57      	ldr	r2, [pc, #348]	; (8005b98 <HAL_DMA_IRQHandler+0x1c8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a56      	ldr	r2, [pc, #344]	; (8005b9c <HAL_DMA_IRQHandler+0x1cc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a54      	ldr	r2, [pc, #336]	; (8005ba0 <HAL_DMA_IRQHandler+0x1d0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a53      	ldr	r2, [pc, #332]	; (8005ba4 <HAL_DMA_IRQHandler+0x1d4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a51      	ldr	r2, [pc, #324]	; (8005ba8 <HAL_DMA_IRQHandler+0x1d8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a50      	ldr	r2, [pc, #320]	; (8005bac <HAL_DMA_IRQHandler+0x1dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4d      	ldr	r2, [pc, #308]	; (8005bb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a4b      	ldr	r2, [pc, #300]	; (8005bb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a4a      	ldr	r2, [pc, #296]	; (8005bbc <HAL_DMA_IRQHandler+0x1ec>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xd2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a48      	ldr	r2, [pc, #288]	; (8005bc0 <HAL_DMA_IRQHandler+0x1f0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_DMA_IRQHandler+0xd6>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <HAL_DMA_IRQHandler+0xd8>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 842b 	beq.w	8006304 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a2 	beq.w	8005c08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <HAL_DMA_IRQHandler+0x1b4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d04a      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <HAL_DMA_IRQHandler+0x1b8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d045      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <HAL_DMA_IRQHandler+0x1bc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d040      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <HAL_DMA_IRQHandler+0x1c0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d03b      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a28      	ldr	r2, [pc, #160]	; (8005b94 <HAL_DMA_IRQHandler+0x1c4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d036      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a27      	ldr	r2, [pc, #156]	; (8005b98 <HAL_DMA_IRQHandler+0x1c8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d031      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <HAL_DMA_IRQHandler+0x1cc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d02c      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <HAL_DMA_IRQHandler+0x1d0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d027      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <HAL_DMA_IRQHandler+0x1d4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d022      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <HAL_DMA_IRQHandler+0x1d8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d01d      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <HAL_DMA_IRQHandler+0x1dc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <HAL_DMA_IRQHandler+0x1e0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <HAL_DMA_IRQHandler+0x1e4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <HAL_DMA_IRQHandler+0x1e8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_DMA_IRQHandler+0x1ec>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x194>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_DMA_IRQHandler+0x1f0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d12f      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x1f4>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	e02e      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x208>
 8005b7a:	bf00      	nop
 8005b7c:	24000000 	.word	0x24000000
 8005b80:	1b4e81b5 	.word	0x1b4e81b5
 8005b84:	40020010 	.word	0x40020010
 8005b88:	40020028 	.word	0x40020028
 8005b8c:	40020040 	.word	0x40020040
 8005b90:	40020058 	.word	0x40020058
 8005b94:	40020070 	.word	0x40020070
 8005b98:	40020088 	.word	0x40020088
 8005b9c:	400200a0 	.word	0x400200a0
 8005ba0:	400200b8 	.word	0x400200b8
 8005ba4:	40020410 	.word	0x40020410
 8005ba8:	40020428 	.word	0x40020428
 8005bac:	40020440 	.word	0x40020440
 8005bb0:	40020458 	.word	0x40020458
 8005bb4:	40020470 	.word	0x40020470
 8005bb8:	40020488 	.word	0x40020488
 8005bbc:	400204a0 	.word	0x400204a0
 8005bc0:	400204b8 	.word	0x400204b8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bf14      	ite	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	2300      	moveq	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	f043 0201 	orr.w	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d06e      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a69      	ldr	r2, [pc, #420]	; (8005dc8 <HAL_DMA_IRQHandler+0x3f8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04a      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a67      	ldr	r2, [pc, #412]	; (8005dcc <HAL_DMA_IRQHandler+0x3fc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d045      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a66      	ldr	r2, [pc, #408]	; (8005dd0 <HAL_DMA_IRQHandler+0x400>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a64      	ldr	r2, [pc, #400]	; (8005dd4 <HAL_DMA_IRQHandler+0x404>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03b      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a63      	ldr	r2, [pc, #396]	; (8005dd8 <HAL_DMA_IRQHandler+0x408>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d036      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a61      	ldr	r2, [pc, #388]	; (8005ddc <HAL_DMA_IRQHandler+0x40c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a60      	ldr	r2, [pc, #384]	; (8005de0 <HAL_DMA_IRQHandler+0x410>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d02c      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a5e      	ldr	r2, [pc, #376]	; (8005de4 <HAL_DMA_IRQHandler+0x414>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5d      	ldr	r2, [pc, #372]	; (8005de8 <HAL_DMA_IRQHandler+0x418>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5b      	ldr	r2, [pc, #364]	; (8005dec <HAL_DMA_IRQHandler+0x41c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01d      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a5a      	ldr	r2, [pc, #360]	; (8005df0 <HAL_DMA_IRQHandler+0x420>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a58      	ldr	r2, [pc, #352]	; (8005df4 <HAL_DMA_IRQHandler+0x424>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a57      	ldr	r2, [pc, #348]	; (8005df8 <HAL_DMA_IRQHandler+0x428>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a55      	ldr	r2, [pc, #340]	; (8005dfc <HAL_DMA_IRQHandler+0x42c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a54      	ldr	r2, [pc, #336]	; (8005e00 <HAL_DMA_IRQHandler+0x430>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2ee>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	; (8005e04 <HAL_DMA_IRQHandler+0x434>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_DMA_IRQHandler+0x304>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bf14      	ite	ne
 8005ccc:	2301      	movne	r3, #1
 8005cce:	2300      	moveq	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e003      	b.n	8005cdc <HAL_DMA_IRQHandler+0x30c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f043 0202 	orr.w	r2, r3, #2
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	2204      	movs	r2, #4
 8005d06:	409a      	lsls	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 808f 	beq.w	8005e30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2c      	ldr	r2, [pc, #176]	; (8005dc8 <HAL_DMA_IRQHandler+0x3f8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <HAL_DMA_IRQHandler+0x3fc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <HAL_DMA_IRQHandler+0x400>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <HAL_DMA_IRQHandler+0x404>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <HAL_DMA_IRQHandler+0x408>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <HAL_DMA_IRQHandler+0x40c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a23      	ldr	r2, [pc, #140]	; (8005de0 <HAL_DMA_IRQHandler+0x410>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_DMA_IRQHandler+0x414>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <HAL_DMA_IRQHandler+0x418>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <HAL_DMA_IRQHandler+0x41c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <HAL_DMA_IRQHandler+0x420>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_DMA_IRQHandler+0x424>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_DMA_IRQHandler+0x428>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <HAL_DMA_IRQHandler+0x42c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <HAL_DMA_IRQHandler+0x430>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_IRQHandler+0x3e2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_DMA_IRQHandler+0x434>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d12a      	bne.n	8005e08 <HAL_DMA_IRQHandler+0x438>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	e023      	b.n	8005e10 <HAL_DMA_IRQHandler+0x440>
 8005dc8:	40020010 	.word	0x40020010
 8005dcc:	40020028 	.word	0x40020028
 8005dd0:	40020040 	.word	0x40020040
 8005dd4:	40020058 	.word	0x40020058
 8005dd8:	40020070 	.word	0x40020070
 8005ddc:	40020088 	.word	0x40020088
 8005de0:	400200a0 	.word	0x400200a0
 8005de4:	400200b8 	.word	0x400200b8
 8005de8:	40020410 	.word	0x40020410
 8005dec:	40020428 	.word	0x40020428
 8005df0:	40020440 	.word	0x40020440
 8005df4:	40020458 	.word	0x40020458
 8005df8:	40020470 	.word	0x40020470
 8005dfc:	40020488 	.word	0x40020488
 8005e00:	400204a0 	.word	0x400204a0
 8005e04:	400204b8 	.word	0x400204b8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00d      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f043 0204 	orr.w	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2210      	movs	r2, #16
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a6 	beq.w	8005f92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a85      	ldr	r2, [pc, #532]	; (8006060 <HAL_DMA_IRQHandler+0x690>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a83      	ldr	r2, [pc, #524]	; (8006064 <HAL_DMA_IRQHandler+0x694>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a82      	ldr	r2, [pc, #520]	; (8006068 <HAL_DMA_IRQHandler+0x698>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a80      	ldr	r2, [pc, #512]	; (800606c <HAL_DMA_IRQHandler+0x69c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7f      	ldr	r2, [pc, #508]	; (8006070 <HAL_DMA_IRQHandler+0x6a0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a7d      	ldr	r2, [pc, #500]	; (8006074 <HAL_DMA_IRQHandler+0x6a4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7c      	ldr	r2, [pc, #496]	; (8006078 <HAL_DMA_IRQHandler+0x6a8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a7a      	ldr	r2, [pc, #488]	; (800607c <HAL_DMA_IRQHandler+0x6ac>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a79      	ldr	r2, [pc, #484]	; (8006080 <HAL_DMA_IRQHandler+0x6b0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a77      	ldr	r2, [pc, #476]	; (8006084 <HAL_DMA_IRQHandler+0x6b4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a76      	ldr	r2, [pc, #472]	; (8006088 <HAL_DMA_IRQHandler+0x6b8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a74      	ldr	r2, [pc, #464]	; (800608c <HAL_DMA_IRQHandler+0x6bc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a73      	ldr	r2, [pc, #460]	; (8006090 <HAL_DMA_IRQHandler+0x6c0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a71      	ldr	r2, [pc, #452]	; (8006094 <HAL_DMA_IRQHandler+0x6c4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a70      	ldr	r2, [pc, #448]	; (8006098 <HAL_DMA_IRQHandler+0x6c8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x516>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a6e      	ldr	r2, [pc, #440]	; (800609c <HAL_DMA_IRQHandler+0x6cc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10a      	bne.n	8005efc <HAL_DMA_IRQHandler+0x52c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bf14      	ite	ne
 8005ef4:	2301      	movne	r3, #1
 8005ef6:	2300      	moveq	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	e009      	b.n	8005f10 <HAL_DMA_IRQHandler+0x540>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf14      	ite	ne
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	2300      	moveq	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d03e      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d108      	bne.n	8005f52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d024      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	e01f      	b.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	e016      	b.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d107      	bne.n	8005f82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0208 	bic.w	r2, r2, #8
 8005f80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	409a      	lsls	r2, r3
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8110 	beq.w	80061c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <HAL_DMA_IRQHandler+0x690>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04a      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <HAL_DMA_IRQHandler+0x694>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d045      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_DMA_IRQHandler+0x698>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d040      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <HAL_DMA_IRQHandler+0x69c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d03b      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	; (8006070 <HAL_DMA_IRQHandler+0x6a0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d036      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_DMA_IRQHandler+0x6a4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d031      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <HAL_DMA_IRQHandler+0x6a8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02c      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_DMA_IRQHandler+0x6ac>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d027      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_DMA_IRQHandler+0x6b0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <HAL_DMA_IRQHandler+0x6b4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <HAL_DMA_IRQHandler+0x6b8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_DMA_IRQHandler+0x6bc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <HAL_DMA_IRQHandler+0x6c0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a19      	ldr	r2, [pc, #100]	; (8006094 <HAL_DMA_IRQHandler+0x6c4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a17      	ldr	r2, [pc, #92]	; (8006098 <HAL_DMA_IRQHandler+0x6c8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_DMA_IRQHandler+0x678>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a16      	ldr	r2, [pc, #88]	; (800609c <HAL_DMA_IRQHandler+0x6cc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d12b      	bne.n	80060a0 <HAL_DMA_IRQHandler+0x6d0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf14      	ite	ne
 8006056:	2301      	movne	r3, #1
 8006058:	2300      	moveq	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	e02a      	b.n	80060b4 <HAL_DMA_IRQHandler+0x6e4>
 800605e:	bf00      	nop
 8006060:	40020010 	.word	0x40020010
 8006064:	40020028 	.word	0x40020028
 8006068:	40020040 	.word	0x40020040
 800606c:	40020058 	.word	0x40020058
 8006070:	40020070 	.word	0x40020070
 8006074:	40020088 	.word	0x40020088
 8006078:	400200a0 	.word	0x400200a0
 800607c:	400200b8 	.word	0x400200b8
 8006080:	40020410 	.word	0x40020410
 8006084:	40020428 	.word	0x40020428
 8006088:	40020440 	.word	0x40020440
 800608c:	40020458 	.word	0x40020458
 8006090:	40020470 	.word	0x40020470
 8006094:	40020488 	.word	0x40020488
 8006098:	400204a0 	.word	0x400204a0
 800609c:	400204b8 	.word	0x400204b8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf14      	ite	ne
 80060ae:	2301      	movne	r3, #1
 80060b0:	2300      	moveq	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8087 	beq.w	80061c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2220      	movs	r2, #32
 80060c4:	409a      	lsls	r2, r3
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d139      	bne.n	800614a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0216 	bic.w	r2, r2, #22
 80060e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <HAL_DMA_IRQHandler+0x736>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0208 	bic.w	r2, r2, #8
 8006114:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	223f      	movs	r2, #63	; 0x3f
 8006120:	409a      	lsls	r2, r3
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 834a 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
          }
          return;
 8006148:	e344      	b.n	80067d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d108      	bne.n	8006178 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	2b00      	cmp	r3, #0
 800616c:	d02c      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
 8006176:	e027      	b.n	80061c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d023      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	e01e      	b.n	80061c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10f      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0210 	bic.w	r2, r2, #16
 80061a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8306 	beq.w	80067de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8088 	beq.w	80062f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2204      	movs	r2, #4
 80061e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a7a      	ldr	r2, [pc, #488]	; (80063d8 <HAL_DMA_IRQHandler+0xa08>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d04a      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a79      	ldr	r2, [pc, #484]	; (80063dc <HAL_DMA_IRQHandler+0xa0c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d045      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a77      	ldr	r2, [pc, #476]	; (80063e0 <HAL_DMA_IRQHandler+0xa10>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d040      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a76      	ldr	r2, [pc, #472]	; (80063e4 <HAL_DMA_IRQHandler+0xa14>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d03b      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a74      	ldr	r2, [pc, #464]	; (80063e8 <HAL_DMA_IRQHandler+0xa18>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d036      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a73      	ldr	r2, [pc, #460]	; (80063ec <HAL_DMA_IRQHandler+0xa1c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d031      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a71      	ldr	r2, [pc, #452]	; (80063f0 <HAL_DMA_IRQHandler+0xa20>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d02c      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a70      	ldr	r2, [pc, #448]	; (80063f4 <HAL_DMA_IRQHandler+0xa24>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d027      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a6e      	ldr	r2, [pc, #440]	; (80063f8 <HAL_DMA_IRQHandler+0xa28>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d022      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a6d      	ldr	r2, [pc, #436]	; (80063fc <HAL_DMA_IRQHandler+0xa2c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d01d      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_DMA_IRQHandler+0xa30>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6a      	ldr	r2, [pc, #424]	; (8006404 <HAL_DMA_IRQHandler+0xa34>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a68      	ldr	r2, [pc, #416]	; (8006408 <HAL_DMA_IRQHandler+0xa38>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00e      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_DMA_IRQHandler+0xa3c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d009      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a65      	ldr	r2, [pc, #404]	; (8006410 <HAL_DMA_IRQHandler+0xa40>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_DMA_IRQHandler+0x8b8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a64      	ldr	r2, [pc, #400]	; (8006414 <HAL_DMA_IRQHandler+0xa44>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d108      	bne.n	800629a <HAL_DMA_IRQHandler+0x8ca>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e007      	b.n	80062aa <HAL_DMA_IRQHandler+0x8da>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d307      	bcc.n	80062c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f2      	bne.n	80062aa <HAL_DMA_IRQHandler+0x8da>
 80062c4:	e000      	b.n	80062c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80062c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2203      	movs	r2, #3
 80062da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80062de:	e003      	b.n	80062e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8272 	beq.w	80067de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
 8006302:	e26c      	b.n	80067de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a43      	ldr	r2, [pc, #268]	; (8006418 <HAL_DMA_IRQHandler+0xa48>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a42      	ldr	r2, [pc, #264]	; (800641c <HAL_DMA_IRQHandler+0xa4c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d01d      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a40      	ldr	r2, [pc, #256]	; (8006420 <HAL_DMA_IRQHandler+0xa50>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3f      	ldr	r2, [pc, #252]	; (8006424 <HAL_DMA_IRQHandler+0xa54>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a3d      	ldr	r2, [pc, #244]	; (8006428 <HAL_DMA_IRQHandler+0xa58>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a3c      	ldr	r2, [pc, #240]	; (800642c <HAL_DMA_IRQHandler+0xa5c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a3a      	ldr	r2, [pc, #232]	; (8006430 <HAL_DMA_IRQHandler+0xa60>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_DMA_IRQHandler+0x984>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a39      	ldr	r2, [pc, #228]	; (8006434 <HAL_DMA_IRQHandler+0xa64>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <HAL_DMA_IRQHandler+0x988>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_DMA_IRQHandler+0x98a>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 823f 	beq.w	80067de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2204      	movs	r2, #4
 8006372:	409a      	lsls	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80cd 	beq.w	8006518 <HAL_DMA_IRQHandler+0xb48>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80c7 	beq.w	8006518 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2204      	movs	r2, #4
 8006394:	409a      	lsls	r2, r3
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d049      	beq.n	8006438 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8210 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c0:	e20a      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8206 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d4:	e200      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe08>
 80063d6:	bf00      	nop
 80063d8:	40020010 	.word	0x40020010
 80063dc:	40020028 	.word	0x40020028
 80063e0:	40020040 	.word	0x40020040
 80063e4:	40020058 	.word	0x40020058
 80063e8:	40020070 	.word	0x40020070
 80063ec:	40020088 	.word	0x40020088
 80063f0:	400200a0 	.word	0x400200a0
 80063f4:	400200b8 	.word	0x400200b8
 80063f8:	40020410 	.word	0x40020410
 80063fc:	40020428 	.word	0x40020428
 8006400:	40020440 	.word	0x40020440
 8006404:	40020458 	.word	0x40020458
 8006408:	40020470 	.word	0x40020470
 800640c:	40020488 	.word	0x40020488
 8006410:	400204a0 	.word	0x400204a0
 8006414:	400204b8 	.word	0x400204b8
 8006418:	58025408 	.word	0x58025408
 800641c:	5802541c 	.word	0x5802541c
 8006420:	58025430 	.word	0x58025430
 8006424:	58025444 	.word	0x58025444
 8006428:	58025458 	.word	0x58025458
 800642c:	5802546c 	.word	0x5802546c
 8006430:	58025480 	.word	0x58025480
 8006434:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d160      	bne.n	8006504 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a7f      	ldr	r2, [pc, #508]	; (8006644 <HAL_DMA_IRQHandler+0xc74>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d04a      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a7d      	ldr	r2, [pc, #500]	; (8006648 <HAL_DMA_IRQHandler+0xc78>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d045      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a7c      	ldr	r2, [pc, #496]	; (800664c <HAL_DMA_IRQHandler+0xc7c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d040      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a7a      	ldr	r2, [pc, #488]	; (8006650 <HAL_DMA_IRQHandler+0xc80>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d03b      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a79      	ldr	r2, [pc, #484]	; (8006654 <HAL_DMA_IRQHandler+0xc84>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d036      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a77      	ldr	r2, [pc, #476]	; (8006658 <HAL_DMA_IRQHandler+0xc88>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d031      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a76      	ldr	r2, [pc, #472]	; (800665c <HAL_DMA_IRQHandler+0xc8c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d02c      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a74      	ldr	r2, [pc, #464]	; (8006660 <HAL_DMA_IRQHandler+0xc90>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d027      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a73      	ldr	r2, [pc, #460]	; (8006664 <HAL_DMA_IRQHandler+0xc94>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d022      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a71      	ldr	r2, [pc, #452]	; (8006668 <HAL_DMA_IRQHandler+0xc98>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01d      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a70      	ldr	r2, [pc, #448]	; (800666c <HAL_DMA_IRQHandler+0xc9c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d018      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a6e      	ldr	r2, [pc, #440]	; (8006670 <HAL_DMA_IRQHandler+0xca0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6d      	ldr	r2, [pc, #436]	; (8006674 <HAL_DMA_IRQHandler+0xca4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00e      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a6b      	ldr	r2, [pc, #428]	; (8006678 <HAL_DMA_IRQHandler+0xca8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a6a      	ldr	r2, [pc, #424]	; (800667c <HAL_DMA_IRQHandler+0xcac>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <HAL_DMA_IRQHandler+0xb12>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a68      	ldr	r2, [pc, #416]	; (8006680 <HAL_DMA_IRQHandler+0xcb0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d108      	bne.n	80064f4 <HAL_DMA_IRQHandler+0xb24>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0208 	bic.w	r2, r2, #8
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e007      	b.n	8006504 <HAL_DMA_IRQHandler+0xb34>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8165 	beq.w	80067d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006516:	e15f      	b.n	80067d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2202      	movs	r2, #2
 8006522:	409a      	lsls	r2, r3
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80c5 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xce8>
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80bf 	beq.w	80066b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2202      	movs	r2, #2
 8006544:	409a      	lsls	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d018      	beq.n	8006586 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 813a 	beq.w	80067dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006570:	e134      	b.n	80067dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8130 	beq.w	80067dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006584:	e12a      	b.n	80067dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	f040 8089 	bne.w	80066a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <HAL_DMA_IRQHandler+0xc74>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d04a      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a29      	ldr	r2, [pc, #164]	; (8006648 <HAL_DMA_IRQHandler+0xc78>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d045      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a28      	ldr	r2, [pc, #160]	; (800664c <HAL_DMA_IRQHandler+0xc7c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d040      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a26      	ldr	r2, [pc, #152]	; (8006650 <HAL_DMA_IRQHandler+0xc80>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d03b      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a25      	ldr	r2, [pc, #148]	; (8006654 <HAL_DMA_IRQHandler+0xc84>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d036      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a23      	ldr	r2, [pc, #140]	; (8006658 <HAL_DMA_IRQHandler+0xc88>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d031      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a22      	ldr	r2, [pc, #136]	; (800665c <HAL_DMA_IRQHandler+0xc8c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d02c      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a20      	ldr	r2, [pc, #128]	; (8006660 <HAL_DMA_IRQHandler+0xc90>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d027      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <HAL_DMA_IRQHandler+0xc94>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <HAL_DMA_IRQHandler+0xc98>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	; (800666c <HAL_DMA_IRQHandler+0xc9c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HAL_DMA_IRQHandler+0xca0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a19      	ldr	r2, [pc, #100]	; (8006674 <HAL_DMA_IRQHandler+0xca4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a17      	ldr	r2, [pc, #92]	; (8006678 <HAL_DMA_IRQHandler+0xca8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <HAL_DMA_IRQHandler+0xcac>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_DMA_IRQHandler+0xc62>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <HAL_DMA_IRQHandler+0xcb0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d128      	bne.n	8006684 <HAL_DMA_IRQHandler+0xcb4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0214 	bic.w	r2, r2, #20
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e027      	b.n	8006694 <HAL_DMA_IRQHandler+0xcc4>
 8006644:	40020010 	.word	0x40020010
 8006648:	40020028 	.word	0x40020028
 800664c:	40020040 	.word	0x40020040
 8006650:	40020058 	.word	0x40020058
 8006654:	40020070 	.word	0x40020070
 8006658:	40020088 	.word	0x40020088
 800665c:	400200a0 	.word	0x400200a0
 8006660:	400200b8 	.word	0x400200b8
 8006664:	40020410 	.word	0x40020410
 8006668:	40020428 	.word	0x40020428
 800666c:	40020440 	.word	0x40020440
 8006670:	40020458 	.word	0x40020458
 8006674:	40020470 	.word	0x40020470
 8006678:	40020488 	.word	0x40020488
 800667c:	400204a0 	.word	0x400204a0
 8006680:	400204b8 	.word	0x400204b8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 020a 	bic.w	r2, r2, #10
 8006692:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8097 	beq.w	80067dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066b6:	e091      	b.n	80067dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2208      	movs	r2, #8
 80066c2:	409a      	lsls	r2, r3
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8088 	beq.w	80067de <HAL_DMA_IRQHandler+0xe0e>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8082 	beq.w	80067de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a41      	ldr	r2, [pc, #260]	; (80067e4 <HAL_DMA_IRQHandler+0xe14>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d04a      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <HAL_DMA_IRQHandler+0xe18>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d045      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3e      	ldr	r2, [pc, #248]	; (80067ec <HAL_DMA_IRQHandler+0xe1c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d040      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a3c      	ldr	r2, [pc, #240]	; (80067f0 <HAL_DMA_IRQHandler+0xe20>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d03b      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a3b      	ldr	r2, [pc, #236]	; (80067f4 <HAL_DMA_IRQHandler+0xe24>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d036      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <HAL_DMA_IRQHandler+0xe28>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d031      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a38      	ldr	r2, [pc, #224]	; (80067fc <HAL_DMA_IRQHandler+0xe2c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d02c      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a36      	ldr	r2, [pc, #216]	; (8006800 <HAL_DMA_IRQHandler+0xe30>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d027      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a35      	ldr	r2, [pc, #212]	; (8006804 <HAL_DMA_IRQHandler+0xe34>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a33      	ldr	r2, [pc, #204]	; (8006808 <HAL_DMA_IRQHandler+0xe38>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01d      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a32      	ldr	r2, [pc, #200]	; (800680c <HAL_DMA_IRQHandler+0xe3c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d018      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a30      	ldr	r2, [pc, #192]	; (8006810 <HAL_DMA_IRQHandler+0xe40>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <HAL_DMA_IRQHandler+0xe44>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2d      	ldr	r2, [pc, #180]	; (8006818 <HAL_DMA_IRQHandler+0xe48>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <HAL_DMA_IRQHandler+0xe4c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_DMA_IRQHandler+0xdaa>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <HAL_DMA_IRQHandler+0xe50>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <HAL_DMA_IRQHandler+0xdbc>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 021c 	bic.w	r2, r2, #28
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e007      	b.n	800679c <HAL_DMA_IRQHandler+0xdcc>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 020e 	bic.w	r2, r2, #14
 800679a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
 80067d2:	e004      	b.n	80067de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80067d4:	bf00      	nop
 80067d6:	e002      	b.n	80067de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d8:	bf00      	nop
 80067da:	e000      	b.n	80067de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8

08006824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006836:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7f      	ldr	r2, [pc, #508]	; (8006a40 <DMA_SetConfig+0x21c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d072      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7d      	ldr	r2, [pc, #500]	; (8006a44 <DMA_SetConfig+0x220>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d06d      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a7c      	ldr	r2, [pc, #496]	; (8006a48 <DMA_SetConfig+0x224>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d068      	beq.n	800692e <DMA_SetConfig+0x10a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a7a      	ldr	r2, [pc, #488]	; (8006a4c <DMA_SetConfig+0x228>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d063      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a79      	ldr	r2, [pc, #484]	; (8006a50 <DMA_SetConfig+0x22c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d05e      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a77      	ldr	r2, [pc, #476]	; (8006a54 <DMA_SetConfig+0x230>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d059      	beq.n	800692e <DMA_SetConfig+0x10a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a76      	ldr	r2, [pc, #472]	; (8006a58 <DMA_SetConfig+0x234>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d054      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a74      	ldr	r2, [pc, #464]	; (8006a5c <DMA_SetConfig+0x238>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d04f      	beq.n	800692e <DMA_SetConfig+0x10a>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a73      	ldr	r2, [pc, #460]	; (8006a60 <DMA_SetConfig+0x23c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d04a      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a71      	ldr	r2, [pc, #452]	; (8006a64 <DMA_SetConfig+0x240>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d045      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a70      	ldr	r2, [pc, #448]	; (8006a68 <DMA_SetConfig+0x244>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d040      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a6e      	ldr	r2, [pc, #440]	; (8006a6c <DMA_SetConfig+0x248>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d03b      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a6d      	ldr	r2, [pc, #436]	; (8006a70 <DMA_SetConfig+0x24c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d036      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a6b      	ldr	r2, [pc, #428]	; (8006a74 <DMA_SetConfig+0x250>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d031      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a6a      	ldr	r2, [pc, #424]	; (8006a78 <DMA_SetConfig+0x254>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d02c      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a68      	ldr	r2, [pc, #416]	; (8006a7c <DMA_SetConfig+0x258>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d027      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a67      	ldr	r2, [pc, #412]	; (8006a80 <DMA_SetConfig+0x25c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d022      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a65      	ldr	r2, [pc, #404]	; (8006a84 <DMA_SetConfig+0x260>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01d      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a64      	ldr	r2, [pc, #400]	; (8006a88 <DMA_SetConfig+0x264>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d018      	beq.n	800692e <DMA_SetConfig+0x10a>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a62      	ldr	r2, [pc, #392]	; (8006a8c <DMA_SetConfig+0x268>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a61      	ldr	r2, [pc, #388]	; (8006a90 <DMA_SetConfig+0x26c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00e      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5f      	ldr	r2, [pc, #380]	; (8006a94 <DMA_SetConfig+0x270>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <DMA_SetConfig+0x10a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a5e      	ldr	r2, [pc, #376]	; (8006a98 <DMA_SetConfig+0x274>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <DMA_SetConfig+0x10a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a5c      	ldr	r2, [pc, #368]	; (8006a9c <DMA_SetConfig+0x278>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d101      	bne.n	8006932 <DMA_SetConfig+0x10e>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <DMA_SetConfig+0x110>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006940:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006952:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a39      	ldr	r2, [pc, #228]	; (8006a40 <DMA_SetConfig+0x21c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <DMA_SetConfig+0x220>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a36      	ldr	r2, [pc, #216]	; (8006a48 <DMA_SetConfig+0x224>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a35      	ldr	r2, [pc, #212]	; (8006a4c <DMA_SetConfig+0x228>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a33      	ldr	r2, [pc, #204]	; (8006a50 <DMA_SetConfig+0x22c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <DMA_SetConfig+0x230>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a30      	ldr	r2, [pc, #192]	; (8006a58 <DMA_SetConfig+0x234>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <DMA_SetConfig+0x238>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2d      	ldr	r2, [pc, #180]	; (8006a60 <DMA_SetConfig+0x23c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <DMA_SetConfig+0x240>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <DMA_SetConfig+0x244>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <DMA_SetConfig+0x248>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <DMA_SetConfig+0x24c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a26      	ldr	r2, [pc, #152]	; (8006a74 <DMA_SetConfig+0x250>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a24      	ldr	r2, [pc, #144]	; (8006a78 <DMA_SetConfig+0x254>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <DMA_SetConfig+0x1d0>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <DMA_SetConfig+0x258>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d101      	bne.n	80069f8 <DMA_SetConfig+0x1d4>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <DMA_SetConfig+0x1d6>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d059      	beq.n	8006ab2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	223f      	movs	r2, #63	; 0x3f
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d138      	bne.n	8006aa0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a3e:	e086      	b.n	8006b4e <DMA_SetConfig+0x32a>
 8006a40:	40020010 	.word	0x40020010
 8006a44:	40020028 	.word	0x40020028
 8006a48:	40020040 	.word	0x40020040
 8006a4c:	40020058 	.word	0x40020058
 8006a50:	40020070 	.word	0x40020070
 8006a54:	40020088 	.word	0x40020088
 8006a58:	400200a0 	.word	0x400200a0
 8006a5c:	400200b8 	.word	0x400200b8
 8006a60:	40020410 	.word	0x40020410
 8006a64:	40020428 	.word	0x40020428
 8006a68:	40020440 	.word	0x40020440
 8006a6c:	40020458 	.word	0x40020458
 8006a70:	40020470 	.word	0x40020470
 8006a74:	40020488 	.word	0x40020488
 8006a78:	400204a0 	.word	0x400204a0
 8006a7c:	400204b8 	.word	0x400204b8
 8006a80:	58025408 	.word	0x58025408
 8006a84:	5802541c 	.word	0x5802541c
 8006a88:	58025430 	.word	0x58025430
 8006a8c:	58025444 	.word	0x58025444
 8006a90:	58025458 	.word	0x58025458
 8006a94:	5802546c 	.word	0x5802546c
 8006a98:	58025480 	.word	0x58025480
 8006a9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	60da      	str	r2, [r3, #12]
}
 8006ab0:	e04d      	b.n	8006b4e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <DMA_SetConfig+0x338>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d022      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <DMA_SetConfig+0x33c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <DMA_SetConfig+0x340>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <DMA_SetConfig+0x344>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <DMA_SetConfig+0x348>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a21      	ldr	r2, [pc, #132]	; (8006b70 <DMA_SetConfig+0x34c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <DMA_SetConfig+0x350>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <DMA_SetConfig+0x2de>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <DMA_SetConfig+0x354>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <DMA_SetConfig+0x2e2>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <DMA_SetConfig+0x2e4>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d020      	beq.n	8006b4e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2201      	movs	r2, #1
 8006b16:	409a      	lsls	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d108      	bne.n	8006b3e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	60da      	str	r2, [r3, #12]
}
 8006b3c:	e007      	b.n	8006b4e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	58025408 	.word	0x58025408
 8006b60:	5802541c 	.word	0x5802541c
 8006b64:	58025430 	.word	0x58025430
 8006b68:	58025444 	.word	0x58025444
 8006b6c:	58025458 	.word	0x58025458
 8006b70:	5802546c 	.word	0x5802546c
 8006b74:	58025480 	.word	0x58025480
 8006b78:	58025494 	.word	0x58025494

08006b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a42      	ldr	r2, [pc, #264]	; (8006c94 <DMA_CalcBaseAndBitshift+0x118>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d04a      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a41      	ldr	r2, [pc, #260]	; (8006c98 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d045      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a3f      	ldr	r2, [pc, #252]	; (8006c9c <DMA_CalcBaseAndBitshift+0x120>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d040      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a3e      	ldr	r2, [pc, #248]	; (8006ca0 <DMA_CalcBaseAndBitshift+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d03b      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a3c      	ldr	r2, [pc, #240]	; (8006ca4 <DMA_CalcBaseAndBitshift+0x128>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d036      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3b      	ldr	r2, [pc, #236]	; (8006ca8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d031      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a39      	ldr	r2, [pc, #228]	; (8006cac <DMA_CalcBaseAndBitshift+0x130>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d02c      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a38      	ldr	r2, [pc, #224]	; (8006cb0 <DMA_CalcBaseAndBitshift+0x134>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d027      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a36      	ldr	r2, [pc, #216]	; (8006cb4 <DMA_CalcBaseAndBitshift+0x138>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d022      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a35      	ldr	r2, [pc, #212]	; (8006cb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d01d      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <DMA_CalcBaseAndBitshift+0x140>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d018      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <DMA_CalcBaseAndBitshift+0x144>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d013      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a30      	ldr	r2, [pc, #192]	; (8006cc4 <DMA_CalcBaseAndBitshift+0x148>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2f      	ldr	r2, [pc, #188]	; (8006cc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d009      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <DMA_CalcBaseAndBitshift+0x150>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <DMA_CalcBaseAndBitshift+0xa8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x154>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d101      	bne.n	8006c28 <DMA_CalcBaseAndBitshift+0xac>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <DMA_CalcBaseAndBitshift+0xae>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d024      	beq.n	8006c78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	3b10      	subs	r3, #16
 8006c36:	4a27      	ldr	r2, [pc, #156]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x158>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006c48:	5cd3      	ldrb	r3, [r2, r3]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d908      	bls.n	8006c68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4b1f      	ldr	r3, [pc, #124]	; (8006cdc <DMA_CalcBaseAndBitshift+0x160>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	1d1a      	adds	r2, r3, #4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	659a      	str	r2, [r3, #88]	; 0x58
 8006c66:	e00d      	b.n	8006c84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <DMA_CalcBaseAndBitshift+0x160>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6593      	str	r3, [r2, #88]	; 0x58
 8006c76:	e005      	b.n	8006c84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40020010 	.word	0x40020010
 8006c98:	40020028 	.word	0x40020028
 8006c9c:	40020040 	.word	0x40020040
 8006ca0:	40020058 	.word	0x40020058
 8006ca4:	40020070 	.word	0x40020070
 8006ca8:	40020088 	.word	0x40020088
 8006cac:	400200a0 	.word	0x400200a0
 8006cb0:	400200b8 	.word	0x400200b8
 8006cb4:	40020410 	.word	0x40020410
 8006cb8:	40020428 	.word	0x40020428
 8006cbc:	40020440 	.word	0x40020440
 8006cc0:	40020458 	.word	0x40020458
 8006cc4:	40020470 	.word	0x40020470
 8006cc8:	40020488 	.word	0x40020488
 8006ccc:	400204a0 	.word	0x400204a0
 8006cd0:	400204b8 	.word	0x400204b8
 8006cd4:	aaaaaaab 	.word	0xaaaaaaab
 8006cd8:	080174a4 	.word	0x080174a4
 8006cdc:	fffffc00 	.word	0xfffffc00

08006ce0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d120      	bne.n	8006d36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d858      	bhi.n	8006dae <DMA_CheckFifoParam+0xce>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <DMA_CheckFifoParam+0x24>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d27 	.word	0x08006d27
 8006d0c:	08006d15 	.word	0x08006d15
 8006d10:	08006daf 	.word	0x08006daf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d048      	beq.n	8006db2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d24:	e045      	b.n	8006db2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d2e:	d142      	bne.n	8006db6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d34:	e03f      	b.n	8006db6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d123      	bne.n	8006d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d838      	bhi.n	8006dba <DMA_CheckFifoParam+0xda>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <DMA_CheckFifoParam+0x70>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d67 	.word	0x08006d67
 8006d58:	08006d61 	.word	0x08006d61
 8006d5c:	08006d79 	.word	0x08006d79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
        break;
 8006d64:	e030      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d025      	beq.n	8006dbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d76:	e022      	b.n	8006dbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d80:	d11f      	bne.n	8006dc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d86:	e01c      	b.n	8006dc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d902      	bls.n	8006d96 <DMA_CheckFifoParam+0xb6>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d003      	beq.n	8006d9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d94:	e018      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	73fb      	strb	r3, [r7, #15]
        break;
 8006d9a:	e015      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dac:	e00b      	b.n	8006dc6 <DMA_CheckFifoParam+0xe6>
        break;
 8006dae:	bf00      	nop
 8006db0:	e00a      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006db2:	bf00      	nop
 8006db4:	e008      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006db6:	bf00      	nop
 8006db8:	e006      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dba:	bf00      	nop
 8006dbc:	e004      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <DMA_CheckFifoParam+0xe8>
    break;
 8006dc6:	bf00      	nop
    }
  }

  return status;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop

08006dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a38      	ldr	r2, [pc, #224]	; (8006ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a36      	ldr	r2, [pc, #216]	; (8006ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a35      	ldr	r2, [pc, #212]	; (8006ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a33      	ldr	r2, [pc, #204]	; (8006ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a32      	ldr	r2, [pc, #200]	; (8006edc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2d      	ldr	r2, [pc, #180]	; (8006ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01a      	beq.n	8006e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b08      	subs	r3, #8
 8006e48:	4a28      	ldr	r2, [pc, #160]	; (8006eec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	091b      	lsrs	r3, r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a24      	ldr	r2, [pc, #144]	; (8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e74:	e024      	b.n	8006ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	3b10      	subs	r3, #16
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d806      	bhi.n	8006e9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4a1b      	ldr	r2, [pc, #108]	; (8006f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d902      	bls.n	8006e9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4b18      	ldr	r3, [pc, #96]	; (8006f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a16      	ldr	r2, [pc, #88]	; (8006f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006eb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ec0:	bf00      	nop
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	58025408 	.word	0x58025408
 8006ed0:	5802541c 	.word	0x5802541c
 8006ed4:	58025430 	.word	0x58025430
 8006ed8:	58025444 	.word	0x58025444
 8006edc:	58025458 	.word	0x58025458
 8006ee0:	5802546c 	.word	0x5802546c
 8006ee4:	58025480 	.word	0x58025480
 8006ee8:	58025494 	.word	0x58025494
 8006eec:	cccccccd 	.word	0xcccccccd
 8006ef0:	16009600 	.word	0x16009600
 8006ef4:	58025880 	.word	0x58025880
 8006ef8:	aaaaaaab 	.word	0xaaaaaaab
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	4002040f 	.word	0x4002040f
 8006f04:	10008200 	.word	0x10008200
 8006f08:	40020880 	.word	0x40020880

08006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d04a      	beq.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d847      	bhi.n	8006fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d022      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d01d      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d018      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00e      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d009      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f94:	671a      	str	r2, [r3, #112]	; 0x70
 8006f96:	e009      	b.n	8006fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4b14      	ldr	r3, [pc, #80]	; (8006fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006faa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	58025408 	.word	0x58025408
 8006fc8:	5802541c 	.word	0x5802541c
 8006fcc:	58025430 	.word	0x58025430
 8006fd0:	58025444 	.word	0x58025444
 8006fd4:	58025458 	.word	0x58025458
 8006fd8:	5802546c 	.word	0x5802546c
 8006fdc:	58025480 	.word	0x58025480
 8006fe0:	58025494 	.word	0x58025494
 8006fe4:	1600963f 	.word	0x1600963f
 8006fe8:	58025940 	.word	0x58025940
 8006fec:	1000823f 	.word	0x1000823f
 8006ff0:	40020940 	.word	0x40020940

08006ff4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b098      	sub	sp, #96	; 0x60
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ffc:	4a84      	ldr	r2, [pc, #528]	; (8007210 <HAL_FDCAN_Init+0x21c>)
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	4611      	mov	r1, r2
 8007004:	224c      	movs	r2, #76	; 0x4c
 8007006:	4618      	mov	r0, r3
 8007008:	f00f fd02 	bl	8016a10 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e1c6      	b.n	80073a4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a7e      	ldr	r2, [pc, #504]	; (8007214 <HAL_FDCAN_Init+0x220>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d106      	bne.n	800702e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007028:	461a      	mov	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb fad6 	bl	80025f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0210 	bic.w	r2, r2, #16
 8007056:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007058:	f7fc fa30 	bl	80034bc <HAL_GetTick>
 800705c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800705e:	e014      	b.n	800708a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007060:	f7fc fa2c 	bl	80034bc <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b0a      	cmp	r3, #10
 800706c:	d90d      	bls.n	800708a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007074:	f043 0201 	orr.w	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2203      	movs	r2, #3
 8007082:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e18c      	b.n	80073a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d0e3      	beq.n	8007060 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a8:	f7fc fa08 	bl	80034bc <HAL_GetTick>
 80070ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80070ae:	e014      	b.n	80070da <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80070b0:	f7fc fa04 	bl	80034bc <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b0a      	cmp	r3, #10
 80070bc:	d90d      	bls.n	80070da <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c4:	f043 0201 	orr.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2203      	movs	r2, #3
 80070d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e164      	b.n	80073a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0e3      	beq.n	80070b0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0202 	orr.w	r2, r2, #2
 80070f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7c1b      	ldrb	r3, [r3, #16]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d108      	bne.n	8007112 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710e:	619a      	str	r2, [r3, #24]
 8007110:	e007      	b.n	8007122 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007120:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7c5b      	ldrb	r3, [r3, #17]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d108      	bne.n	800713c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007138:	619a      	str	r2, [r3, #24]
 800713a:	e007      	b.n	800714c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800714a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	7c9b      	ldrb	r3, [r3, #18]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d108      	bne.n	8007166 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007162:	619a      	str	r2, [r3, #24]
 8007164:	e007      	b.n	8007176 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007174:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800719a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0210 	bic.w	r2, r2, #16
 80071aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d108      	bne.n	80071c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0204 	orr.w	r2, r2, #4
 80071c2:	619a      	str	r2, [r3, #24]
 80071c4:	e030      	b.n	8007228 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02c      	beq.n	8007228 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d020      	beq.n	8007218 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0210 	orr.w	r2, r2, #16
 80071f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d114      	bne.n	8007228 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0220 	orr.w	r2, r2, #32
 800720c:	619a      	str	r2, [r3, #24]
 800720e:	e00b      	b.n	8007228 <HAL_FDCAN_Init+0x234>
 8007210:	0801739c 	.word	0x0801739c
 8007214:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0220 	orr.w	r2, r2, #32
 8007226:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	3b01      	subs	r3, #1
 800722e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	3b01      	subs	r3, #1
 8007236:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007238:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007240:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	3b01      	subs	r3, #1
 800724a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007250:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007252:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800725c:	d115      	bne.n	800728a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	3b01      	subs	r3, #1
 800726a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800726c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	3b01      	subs	r3, #1
 8007274:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007276:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	3b01      	subs	r3, #1
 8007280:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007286:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007288:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	4413      	add	r3, r2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d011      	beq.n	80072da <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80072be:	f023 0107 	bic.w	r1, r3, #7
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3360      	adds	r3, #96	; 0x60
 80072ca:	443b      	add	r3, r7
 80072cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d011      	beq.n	8007306 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80072ea:	f023 0107 	bic.w	r1, r3, #7
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	3360      	adds	r3, #96	; 0x60
 80072f6:	443b      	add	r3, r7
 80072f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	2b00      	cmp	r3, #0
 800730c:	d012      	beq.n	8007334 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007316:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	3360      	adds	r3, #96	; 0x60
 8007322:	443b      	add	r3, r7
 8007324:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007328:	011a      	lsls	r2, r3, #4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	2b00      	cmp	r3, #0
 800733a:	d012      	beq.n	8007362 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007344:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	3360      	adds	r3, #96	; 0x60
 8007350:	443b      	add	r3, r7
 8007352:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007356:	021a      	lsls	r2, r3, #8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a11      	ldr	r2, [pc, #68]	; (80073ac <HAL_FDCAN_Init+0x3b8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d107      	bne.n	800737c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f022 0203 	bic.w	r2, r2, #3
 800737a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f80b 	bl	80073b0 <FDCAN_CalcultateRamBlockAddresses>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80073a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3760      	adds	r7, #96	; 0x60
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	4000a000 	.word	0x4000a000

080073b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80073c6:	4ba7      	ldr	r3, [pc, #668]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	0091      	lsls	r1, r2, #2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	430b      	orrs	r3, r1
 80073d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	041a      	lsls	r2, r3, #16
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	4413      	add	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007406:	4b97      	ldr	r3, [pc, #604]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007408:	4013      	ands	r3, r2
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	0091      	lsls	r1, r2, #2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	430b      	orrs	r3, r1
 8007414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	041a      	lsls	r2, r3, #16
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4413      	add	r3, r2
 800743e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007448:	4b86      	ldr	r3, [pc, #536]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	0091      	lsls	r1, r2, #2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6812      	ldr	r2, [r2, #0]
 8007454:	430b      	orrs	r3, r1
 8007456:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007462:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	041a      	lsls	r2, r3, #16
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800747e:	fb02 f303 	mul.w	r3, r2, r3
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	4413      	add	r3, r2
 8007486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007490:	4b74      	ldr	r3, [pc, #464]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007492:	4013      	ands	r3, r2
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	0091      	lsls	r1, r2, #2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	430b      	orrs	r3, r1
 800749e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	041a      	lsls	r2, r3, #16
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80074d8:	4b62      	ldr	r3, [pc, #392]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80074da:	4013      	ands	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	0091      	lsls	r1, r2, #2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	430b      	orrs	r3, r1
 80074e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007504:	4b57      	ldr	r3, [pc, #348]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007506:	4013      	ands	r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	0091      	lsls	r1, r2, #2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	430b      	orrs	r3, r1
 8007512:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800751e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007526:	041a      	lsls	r2, r3, #16
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4413      	add	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007546:	4b47      	ldr	r3, [pc, #284]	; (8007664 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007548:	4013      	ands	r3, r2
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	0091      	lsls	r1, r2, #2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	430b      	orrs	r3, r1
 8007554:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007560:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007568:	041a      	lsls	r2, r3, #16
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800757c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	061a      	lsls	r2, r3, #24
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007594:	4b34      	ldr	r3, [pc, #208]	; (8007668 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007596:	4413      	add	r3, r2
 8007598:	009a      	lsls	r2, r3, #2
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	441a      	add	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80075ca:	fb01 f303 	mul.w	r3, r1, r3
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	441a      	add	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80075e2:	fb01 f303 	mul.w	r3, r1, r3
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	441a      	add	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	441a      	add	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	441a      	add	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	4a04      	ldr	r2, [pc, #16]	; (800766c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d915      	bls.n	800768c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007660:	e006      	b.n	8007670 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007662:	bf00      	nop
 8007664:	ffff0003 	.word	0xffff0003
 8007668:	10002b00 	.word	0x10002b00
 800766c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2203      	movs	r2, #3
 8007684:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e010      	b.n	80076ae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e005      	b.n	80076a0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3304      	adds	r3, #4
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d3f3      	bcc.n	8007694 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	; 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076ca:	4b86      	ldr	r3, [pc, #536]	; (80078e4 <HAL_GPIO_Init+0x228>)
 80076cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ce:	e18c      	b.n	80079ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	2101      	movs	r1, #1
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	4013      	ands	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 817e 	beq.w	80079e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d005      	beq.n	8007700 <HAL_GPIO_Init+0x44>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d130      	bne.n	8007762 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	2203      	movs	r2, #3
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4013      	ands	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4313      	orrs	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007736:	2201      	movs	r2, #1
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	f003 0201 	and.w	r2, r3, #1
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d017      	beq.n	800779e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	2203      	movs	r2, #3
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	4313      	orrs	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d123      	bne.n	80077f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	08da      	lsrs	r2, r3, #3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3208      	adds	r2, #8
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	220f      	movs	r2, #15
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	08da      	lsrs	r2, r3, #3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3208      	adds	r2, #8
 80077ec:	69b9      	ldr	r1, [r7, #24]
 80077ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	2203      	movs	r2, #3
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4013      	ands	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f003 0203 	and.w	r2, r3, #3
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80d8 	beq.w	80079e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007834:	4b2c      	ldr	r3, [pc, #176]	; (80078e8 <HAL_GPIO_Init+0x22c>)
 8007836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800783a:	4a2b      	ldr	r2, [pc, #172]	; (80078e8 <HAL_GPIO_Init+0x22c>)
 800783c:	f043 0302 	orr.w	r3, r3, #2
 8007840:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007844:	4b28      	ldr	r3, [pc, #160]	; (80078e8 <HAL_GPIO_Init+0x22c>)
 8007846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007852:	4a26      	ldr	r2, [pc, #152]	; (80078ec <HAL_GPIO_Init+0x230>)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	089b      	lsrs	r3, r3, #2
 8007858:	3302      	adds	r3, #2
 800785a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	220f      	movs	r2, #15
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	43db      	mvns	r3, r3
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	4013      	ands	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a1d      	ldr	r2, [pc, #116]	; (80078f0 <HAL_GPIO_Init+0x234>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d04a      	beq.n	8007914 <HAL_GPIO_Init+0x258>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a1c      	ldr	r2, [pc, #112]	; (80078f4 <HAL_GPIO_Init+0x238>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d02b      	beq.n	80078de <HAL_GPIO_Init+0x222>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <HAL_GPIO_Init+0x23c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d025      	beq.n	80078da <HAL_GPIO_Init+0x21e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <HAL_GPIO_Init+0x240>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01f      	beq.n	80078d6 <HAL_GPIO_Init+0x21a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a19      	ldr	r2, [pc, #100]	; (8007900 <HAL_GPIO_Init+0x244>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d019      	beq.n	80078d2 <HAL_GPIO_Init+0x216>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a18      	ldr	r2, [pc, #96]	; (8007904 <HAL_GPIO_Init+0x248>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_GPIO_Init+0x212>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a17      	ldr	r2, [pc, #92]	; (8007908 <HAL_GPIO_Init+0x24c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00d      	beq.n	80078ca <HAL_GPIO_Init+0x20e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <HAL_GPIO_Init+0x250>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <HAL_GPIO_Init+0x20a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <HAL_GPIO_Init+0x254>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d101      	bne.n	80078c2 <HAL_GPIO_Init+0x206>
 80078be:	2309      	movs	r3, #9
 80078c0:	e029      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078c2:	230a      	movs	r3, #10
 80078c4:	e027      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078c6:	2307      	movs	r3, #7
 80078c8:	e025      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e023      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078ce:	2305      	movs	r3, #5
 80078d0:	e021      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078d2:	2304      	movs	r3, #4
 80078d4:	e01f      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078d6:	2303      	movs	r3, #3
 80078d8:	e01d      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078da:	2302      	movs	r3, #2
 80078dc:	e01b      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078de:	2301      	movs	r3, #1
 80078e0:	e019      	b.n	8007916 <HAL_GPIO_Init+0x25a>
 80078e2:	bf00      	nop
 80078e4:	58000080 	.word	0x58000080
 80078e8:	58024400 	.word	0x58024400
 80078ec:	58000400 	.word	0x58000400
 80078f0:	58020000 	.word	0x58020000
 80078f4:	58020400 	.word	0x58020400
 80078f8:	58020800 	.word	0x58020800
 80078fc:	58020c00 	.word	0x58020c00
 8007900:	58021000 	.word	0x58021000
 8007904:	58021400 	.word	0x58021400
 8007908:	58021800 	.word	0x58021800
 800790c:	58021c00 	.word	0x58021c00
 8007910:	58022400 	.word	0x58022400
 8007914:	2300      	movs	r3, #0
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	f002 0203 	and.w	r2, r2, #3
 800791c:	0092      	lsls	r2, r2, #2
 800791e:	4093      	lsls	r3, r2
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	4313      	orrs	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007926:	4938      	ldr	r1, [pc, #224]	; (8007a08 <HAL_GPIO_Init+0x34c>)
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	3302      	adds	r3, #2
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	43db      	mvns	r3, r3
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	4013      	ands	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800795a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	43db      	mvns	r3, r3
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	4013      	ands	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	43db      	mvns	r3, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	4013      	ands	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	43db      	mvns	r3, r3
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4013      	ands	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	3301      	adds	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f47f ae6b 	bne.w	80076d0 <HAL_GPIO_Init+0x14>
  }
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	3724      	adds	r7, #36	; 0x24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	58000400 	.word	0x58000400

08007a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	887b      	ldrh	r3, [r7, #2]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
 8007a28:	e001      	b.n	8007a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	807b      	strh	r3, [r7, #2]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a4c:	787b      	ldrb	r3, [r7, #1]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a52:	887a      	ldrh	r2, [r7, #2]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a58:	e003      	b.n	8007a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a5a:	887b      	ldrh	r3, [r7, #2]
 8007a5c:	041a      	lsls	r2, r3, #16
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	619a      	str	r2, [r3, #24]
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e07f      	b.n	8007b82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7fa fe14 	bl	80026c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2224      	movs	r2, #36	; 0x24
 8007aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ac0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ad0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d107      	bne.n	8007aea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	e006      	b.n	8007af8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007af6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d104      	bne.n	8007b0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <HAL_I2C_Init+0x11c>)
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69d9      	ldr	r1, [r3, #28]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	02008000 	.word	0x02008000

08007b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d138      	bne.n	8007c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e032      	b.n	8007c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6819      	ldr	r1, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e000      	b.n	8007c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c18:	2302      	movs	r3, #2
  }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	d139      	bne.n	8007cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e033      	b.n	8007cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2224      	movs	r2, #36	; 0x24
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0201 	bic.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0201 	orr.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc0:	b08f      	sub	sp, #60	; 0x3c
 8007cc2:	af0a      	add	r7, sp, #40	; 0x28
 8007cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e116      	b.n	8007efe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f00e fb5a 	bl	80163a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00a fc9f 	bl	8012652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	687e      	ldr	r6, [r7, #4]
 8007d1c:	466d      	mov	r5, sp
 8007d1e:	f106 0410 	add.w	r4, r6, #16
 8007d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d32:	1d33      	adds	r3, r6, #4
 8007d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d36:	6838      	ldr	r0, [r7, #0]
 8007d38:	f00a fb6a 	bl	8012410 <USB_CoreInit>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e0d7      	b.n	8007efe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2100      	movs	r1, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f00a fc8d 	bl	8012674 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
 8007d5e:	e04a      	b.n	8007df6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	333d      	adds	r3, #61	; 0x3d
 8007d70:	2201      	movs	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	333c      	adds	r3, #60	; 0x3c
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d88:	7bfa      	ldrb	r2, [r7, #15]
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	b298      	uxth	r0, r3
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	3356      	adds	r3, #86	; 0x56
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	3340      	adds	r3, #64	; 0x40
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3344      	adds	r3, #68	; 0x44
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3348      	adds	r3, #72	; 0x48
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ddc:	7bfa      	ldrb	r2, [r7, #15]
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	334c      	adds	r3, #76	; 0x4c
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	3301      	adds	r3, #1
 8007df4:	73fb      	strb	r3, [r7, #15]
 8007df6:	7bfa      	ldrb	r2, [r7, #15]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3af      	bcc.n	8007d60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
 8007e04:	e044      	b.n	8007e90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e06:	7bfa      	ldrb	r2, [r7, #15]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e1c:	7bfa      	ldrb	r2, [r7, #15]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007e2e:	7bfa      	ldrb	r2, [r7, #15]
 8007e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e32:	7bfa      	ldrb	r2, [r7, #15]
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007e48:	7bfa      	ldrb	r2, [r7, #15]
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007e5e:	7bfa      	ldrb	r2, [r7, #15]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e74:	7bfa      	ldrb	r2, [r7, #15]
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	7bfa      	ldrb	r2, [r7, #15]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d3b5      	bcc.n	8007e06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	687e      	ldr	r6, [r7, #4]
 8007ea2:	466d      	mov	r5, sp
 8007ea4:	f106 0410 	add.w	r4, r6, #16
 8007ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007eb8:	1d33      	adds	r3, r6, #4
 8007eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ebc:	6838      	ldr	r0, [r7, #0]
 8007ebe:	f00a fc25 	bl	801270c <USB_DevInit>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d005      	beq.n	8007ed4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e014      	b.n	8007efe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d102      	bne.n	8007ef2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f96f 	bl	80091d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f00b fc67 	bl	80137ca <USB_DevDisconnect>

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_PCD_Start+0x1c>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e022      	b.n	8007f68 <HAL_PCD_Start+0x62>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d105      	bne.n	8007f4a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f00a fb6e 	bl	8012630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f00b fc15 	bl	8013788 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b08d      	sub	sp, #52	; 0x34
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f00b fcd3 	bl	8013932 <USB_GetMode>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 84b7 	bne.w	8008902 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f00b fc37 	bl	801380c <USB_ReadInterrupts>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 84ad 	beq.w	8008900 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	0a1b      	lsrs	r3, r3, #8
 8007fb0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f00b fc24 	bl	801380c <USB_ReadInterrupts>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d107      	bne.n	8007fde <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695a      	ldr	r2, [r3, #20]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f002 0202 	and.w	r2, r2, #2
 8007fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f00b fc12 	bl	801380c <USB_ReadInterrupts>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b10      	cmp	r3, #16
 8007ff0:	d161      	bne.n	80080b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0210 	bic.w	r2, r2, #16
 8008000:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	0c5b      	lsrs	r3, r3, #17
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	2b02      	cmp	r3, #2
 800802c:	d124      	bne.n	8008078 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008034:	4013      	ands	r3, r2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d035      	beq.n	80080a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	091b      	lsrs	r3, r3, #4
 8008042:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	6a38      	ldr	r0, [r7, #32]
 800804e:	f00b fa49 	bl	80134e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805e:	441a      	add	r2, r3
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	091b      	lsrs	r3, r3, #4
 800806c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008070:	441a      	add	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	615a      	str	r2, [r3, #20]
 8008076:	e016      	b.n	80080a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	0c5b      	lsrs	r3, r3, #17
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	2b06      	cmp	r3, #6
 8008082:	d110      	bne.n	80080a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800808a:	2208      	movs	r2, #8
 800808c:	4619      	mov	r1, r3
 800808e:	6a38      	ldr	r0, [r7, #32]
 8008090:	f00b fa28 	bl	80134e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080a0:	441a      	add	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0210 	orr.w	r2, r2, #16
 80080b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f00b fba6 	bl	801380c <USB_ReadInterrupts>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080ca:	f040 80a7 	bne.w	800821c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f00b fbab 	bl	8013832 <USB_ReadDevAllOutEpInterrupt>
 80080dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80080de:	e099      	b.n	8008214 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 808e 	beq.w	8008208 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f00b fbcf 	bl	801389a <USB_ReadDevOutEPInterrupt>
 80080fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00c      	beq.n	8008122 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	461a      	mov	r2, r3
 8008116:	2301      	movs	r3, #1
 8008118:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800811a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fed1 	bl	8008ec4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00c      	beq.n	8008146 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	461a      	mov	r2, r3
 800813a:	2308      	movs	r3, #8
 800813c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800813e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 ffa7 	bl	8009094 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815c:	461a      	mov	r2, r3
 800815e:	2310      	movs	r3, #16
 8008160:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d030      	beq.n	80081ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d109      	bne.n	800818c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800818a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	78db      	ldrb	r3, [r3, #3]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d108      	bne.n	80081bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2200      	movs	r2, #0
 80081ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f00e f9ec 	bl	8016594 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	461a      	mov	r2, r3
 80081ca:	2302      	movs	r3, #2
 80081cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	461a      	mov	r2, r3
 80081e6:	2320      	movs	r3, #32
 80081e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	461a      	mov	r2, r3
 8008202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008206:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	3301      	adds	r3, #1
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	f47f af62 	bne.w	80080e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f00b faf3 	bl	801380c <USB_ReadInterrupts>
 8008226:	4603      	mov	r3, r0
 8008228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800822c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008230:	f040 80db 	bne.w	80083ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f00b fb14 	bl	8013866 <USB_ReadDevAllInEpInterrupt>
 800823e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008244:	e0cd      	b.n	80083e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80c2 	beq.w	80083d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f00b fb3a 	bl	80138d6 <USB_ReadDevInEPInterrupt>
 8008262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d057      	beq.n	800831e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	2201      	movs	r2, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	43db      	mvns	r3, r3
 8008288:	69f9      	ldr	r1, [r7, #28]
 800828a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800828e:	4013      	ands	r3, r2
 8008290:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829e:	461a      	mov	r2, r3
 80082a0:	2301      	movs	r3, #1
 80082a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d132      	bne.n	8008312 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b0:	4613      	mov	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	3348      	adds	r3, #72	; 0x48
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c2:	4613      	mov	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4403      	add	r3, r0
 80082cc:	3344      	adds	r3, #68	; 0x44
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4419      	add	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	4613      	mov	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4403      	add	r3, r0
 80082e0:	3348      	adds	r3, #72	; 0x48
 80082e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d113      	bne.n	8008312 <HAL_PCD_IRQHandler+0x3a2>
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ee:	4613      	mov	r3, r2
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	334c      	adds	r3, #76	; 0x4c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d108      	bne.n	8008312 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800830a:	461a      	mov	r2, r3
 800830c:	2101      	movs	r1, #1
 800830e:	f00b fb43 	bl	8013998 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	b2db      	uxtb	r3, r3
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f00e f8b6 	bl	801648a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f003 0308 	and.w	r3, r3, #8
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	461a      	mov	r2, r3
 8008336:	2308      	movs	r3, #8
 8008338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	461a      	mov	r2, r3
 8008352:	2310      	movs	r3, #16
 8008354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d008      	beq.n	8008372 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	461a      	mov	r2, r3
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d023      	beq.n	80083c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800837c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837e:	6a38      	ldr	r0, [r7, #32]
 8008380:	f00a fb22 	bl	80129c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	4613      	mov	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	3338      	adds	r3, #56	; 0x38
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	3304      	adds	r3, #4
 8008396:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d108      	bne.n	80083b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2200      	movs	r2, #0
 80083a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f00e f903 	bl	80165b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	2302      	movs	r3, #2
 80083c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80083ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fcea 	bl	8008daa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	3301      	adds	r3, #1
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f47f af2e 	bne.w	8008246 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f00b fa0c 	bl	801380c <USB_ReadInterrupts>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fe:	d122      	bne.n	8008446 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800841a:	2b01      	cmp	r3, #1
 800841c:	d108      	bne.n	8008430 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fef5 	bl	8009218 <HAL_PCDEx_LPM_Callback>
 800842e:	e002      	b.n	8008436 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f00e f8a1 	bl	8016578 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f00b f9de 	bl	801380c <USB_ReadInterrupts>
 8008450:	4603      	mov	r3, r0
 8008452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800845a:	d112      	bne.n	8008482 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b01      	cmp	r3, #1
 800846a:	d102      	bne.n	8008472 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f00e f85d 	bl	801652c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	695a      	ldr	r2, [r3, #20]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008480:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f00b f9c0 	bl	801380c <USB_ReadInterrupts>
 800848c:	4603      	mov	r3, r0
 800848e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008496:	d121      	bne.n	80084dc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80084a6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d111      	bne.n	80084d6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c0:	089b      	lsrs	r3, r3, #2
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80084cc:	2101      	movs	r1, #1
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fea2 	bl	8009218 <HAL_PCDEx_LPM_Callback>
 80084d4:	e002      	b.n	80084dc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f00e f828 	bl	801652c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f00b f993 	bl	801380c <USB_ReadInterrupts>
 80084e6:	4603      	mov	r3, r0
 80084e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f0:	f040 80b7 	bne.w	8008662 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2110      	movs	r1, #16
 800850e:	4618      	mov	r0, r3
 8008510:	f00a fa5a 	bl	80129c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008514:	2300      	movs	r3, #0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008518:	e046      	b.n	80085a8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	461a      	mov	r2, r3
 8008528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800852c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800854c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	461a      	mov	r2, r3
 800855c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008560:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008580:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	3301      	adds	r3, #1
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d3b3      	bcc.n	800851a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085de:	f043 030b 	orr.w	r3, r3, #11
 80085e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f4:	f043 030b 	orr.w	r3, r3, #11
 80085f8:	6453      	str	r3, [r2, #68]	; 0x44
 80085fa:	e015      	b.n	8008628 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	695a      	ldr	r2, [r3, #20]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	4619      	mov	r1, r3
 800860c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008610:	4313      	orrs	r3, r2
 8008612:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008622:	f043 030b 	orr.w	r3, r3, #11
 8008626:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008636:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800863a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800864c:	461a      	mov	r2, r3
 800864e:	f00b f9a3 	bl	8013998 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695a      	ldr	r2, [r3, #20]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f00b f8d0 	bl	801380c <USB_ReadInterrupts>
 800866c:	4603      	mov	r3, r0
 800866e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008676:	d124      	bne.n	80086c2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f00b f967 	bl	8013950 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f00a fa1b 	bl	8012ac2 <USB_GetDevSpeed>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681c      	ldr	r4, [r3, #0]
 8008698:	f001 fd88 	bl	800a1ac <HAL_RCC_GetHCLKFreq>
 800869c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	4620      	mov	r0, r4
 80086a8:	f009 ff20 	bl	80124ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f00d ff14 	bl	80164da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695a      	ldr	r2, [r3, #20]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f00b f8a0 	bl	801380c <USB_ReadInterrupts>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d10a      	bne.n	80086ec <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f00d fef1 	bl	80164be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695a      	ldr	r2, [r3, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f002 0208 	and.w	r2, r2, #8
 80086ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f00b f88b 	bl	801380c <USB_ReadInterrupts>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fc:	2b80      	cmp	r3, #128	; 0x80
 80086fe:	d122      	bne.n	8008746 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800870c:	2301      	movs	r3, #1
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
 8008710:	e014      	b.n	800873c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	4613      	mov	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d105      	bne.n	8008736 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	b2db      	uxtb	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fb09 	bl	8008d48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	3301      	adds	r3, #1
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008742:	429a      	cmp	r2, r3
 8008744:	d3e5      	bcc.n	8008712 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f00b f85e 	bl	801380c <USB_ReadInterrupts>
 8008750:	4603      	mov	r3, r0
 8008752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875a:	d13b      	bne.n	80087d4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800875c:	2301      	movs	r3, #1
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
 8008760:	e02b      	b.n	80087ba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008776:	4613      	mov	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	3340      	adds	r3, #64	; 0x40
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d115      	bne.n	80087b4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008788:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800878a:	2b00      	cmp	r3, #0
 800878c:	da12      	bge.n	80087b4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	333f      	adds	r3, #63	; 0x3f
 800879e:	2201      	movs	r2, #1
 80087a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 faca 	bl	8008d48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	3301      	adds	r3, #1
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d3ce      	bcc.n	8008762 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80087d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f00b f817 	bl	801380c <USB_ReadInterrupts>
 80087de:	4603      	mov	r3, r0
 80087e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e8:	d155      	bne.n	8008896 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087ea:	2301      	movs	r3, #1
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
 80087ee:	e045      	b.n	800887c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d12e      	bne.n	8008876 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008818:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800881a:	2b00      	cmp	r3, #0
 800881c:	da2b      	bge.n	8008876 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800882a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800882e:	429a      	cmp	r2, r3
 8008830:	d121      	bne.n	8008876 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008844:	2201      	movs	r2, #1
 8008846:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008872:	6053      	str	r3, [r2, #4]
            break;
 8008874:	e007      	b.n	8008886 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	3301      	adds	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	429a      	cmp	r2, r3
 8008884:	d3b4      	bcc.n	80087f0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695a      	ldr	r2, [r3, #20]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f00a ffb6 	bl	801380c <USB_ReadInterrupts>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088aa:	d10a      	bne.n	80088c2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f00d fe95 	bl	80165dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695a      	ldr	r2, [r3, #20]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80088c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f00a ffa0 	bl	801380c <USB_ReadInterrupts>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d115      	bne.n	8008902 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f00d fe85 	bl	80165f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6859      	ldr	r1, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	e000      	b.n	8008902 <HAL_PCD_IRQHandler+0x992>
      return;
 8008900:	bf00      	nop
    }
  }
}
 8008902:	3734      	adds	r7, #52	; 0x34
 8008904:	46bd      	mov	sp, r7
 8008906:	bd90      	pop	{r4, r7, pc}

08008908 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <HAL_PCD_SetAddress+0x1a>
 800891e:	2302      	movs	r3, #2
 8008920:	e013      	b.n	800894a <HAL_PCD_SetAddress+0x42>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f00a fefe 	bl	801373c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	4603      	mov	r3, r0
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	460b      	mov	r3, r1
 8008966:	803b      	strh	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da0f      	bge.n	8008998 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	4613      	mov	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	3338      	adds	r3, #56	; 0x38
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	3304      	adds	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	705a      	strb	r2, [r3, #1]
 8008996:	e00f      	b.n	80089b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	f003 020f 	and.w	r2, r3, #15
 800899e:	4613      	mov	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	3304      	adds	r3, #4
 80089b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089c4:	883a      	ldrh	r2, [r7, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	78ba      	ldrb	r2, [r7, #2]
 80089ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80089e2:	78bb      	ldrb	r3, [r7, #2]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d102      	bne.n	80089ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_PCD_EP_Open+0xaa>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e00e      	b.n	8008a1a <HAL_PCD_EP_Open+0xc8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68f9      	ldr	r1, [r7, #12]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00a f87e 	bl	8012b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da0f      	bge.n	8008a56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	3338      	adds	r3, #56	; 0x38
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	705a      	strb	r2, [r3, #1]
 8008a54:	e00f      	b.n	8008a76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_PCD_EP_Close+0x6e>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e00e      	b.n	8008aae <HAL_PCD_EP_Close+0x8c>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68f9      	ldr	r1, [r7, #12]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f00a f8bc 	bl	8012c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	3304      	adds	r3, #4
 8008ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2200      	movs	r2, #0
 8008af0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2200      	movs	r2, #0
 8008af6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d102      	bne.n	8008b12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6818      	ldr	r0, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	f00a f958 	bl	8012dd4 <USB_EPStartXfer>

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	f003 020f 	and.w	r2, r3, #15
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008b50:	681b      	ldr	r3, [r3, #0]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	603b      	str	r3, [r7, #0]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	f003 020f 	and.w	r2, r3, #15
 8008b74:	4613      	mov	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	3338      	adds	r3, #56	; 0x38
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	3304      	adds	r3, #4
 8008b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2200      	movs	r2, #0
 8008b96:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d102      	bne.n	8008bb8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	f00a f905 	bl	8012dd4 <USB_EPStartXfer>

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	f003 020f 	and.w	r2, r3, #15
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d901      	bls.n	8008bf2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e050      	b.n	8008c94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da0f      	bge.n	8008c1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	4613      	mov	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	3338      	adds	r3, #56	; 0x38
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3304      	adds	r3, #4
 8008c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	705a      	strb	r2, [r3, #1]
 8008c18:	e00d      	b.n	8008c36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_PCD_EP_SetStall+0x82>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e01e      	b.n	8008c94 <HAL_PCD_EP_SetStall+0xc0>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f00a fc95 	bl	8013594 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	b2d9      	uxtb	r1, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c84:	461a      	mov	r2, r3
 8008c86:	f00a fe87 	bl	8013998 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	f003 020f 	and.w	r2, r3, #15
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d901      	bls.n	8008cba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e042      	b.n	8008d40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	da0f      	bge.n	8008ce2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	f003 020f 	and.w	r2, r3, #15
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	3338      	adds	r3, #56	; 0x38
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	705a      	strb	r2, [r3, #1]
 8008ce0:	e00f      	b.n	8008d02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	f003 020f 	and.w	r2, r3, #15
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_PCD_EP_ClrStall+0x86>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e00e      	b.n	8008d40 <HAL_PCD_EP_ClrStall+0xa4>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f00a fc9d 	bl	8013670 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da0c      	bge.n	8008d76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	f003 020f 	and.w	r2, r3, #15
 8008d62:	4613      	mov	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	3338      	adds	r3, #56	; 0x38
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	3304      	adds	r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	e00c      	b.n	8008d90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	f003 020f 	and.w	r2, r3, #15
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f00a fabc 	bl	8013314 <USB_EPStopXfer>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b08a      	sub	sp, #40	; 0x28
 8008dae:	af02      	add	r7, sp, #8
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	3338      	adds	r3, #56	; 0x38
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	3304      	adds	r3, #4
 8008dd0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d901      	bls.n	8008de2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e06c      	b.n	8008ebc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d902      	bls.n	8008dfe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	3303      	adds	r3, #3
 8008e02:	089b      	lsrs	r3, r3, #2
 8008e04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e06:	e02b      	b.n	8008e60 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d902      	bls.n	8008e24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3303      	adds	r3, #3
 8008e28:	089b      	lsrs	r3, r3, #2
 8008e2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	68d9      	ldr	r1, [r3, #12]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4603      	mov	r3, r0
 8008e42:	6978      	ldr	r0, [r7, #20]
 8008e44:	f00a fb10 	bl	8013468 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	441a      	add	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	695a      	ldr	r2, [r3, #20]
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d809      	bhi.n	8008e8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	695a      	ldr	r2, [r3, #20]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d203      	bcs.n	8008e8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1be      	bne.n	8008e08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	691a      	ldr	r2, [r3, #16]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d811      	bhi.n	8008eba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f003 030f 	and.w	r3, r3, #15
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	6939      	ldr	r1, [r7, #16]
 8008eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	333c      	adds	r3, #60	; 0x3c
 8008edc:	3304      	adds	r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d17b      	bne.n	8008ff2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d015      	beq.n	8008f30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	4a61      	ldr	r2, [pc, #388]	; (800908c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	f240 80b9 	bls.w	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80b3 	beq.w	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	461a      	mov	r2, r3
 8008f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f2c:	6093      	str	r3, [r2, #8]
 8008f2e:	e0a7      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	461a      	mov	r2, r3
 8008f48:	2320      	movs	r3, #32
 8008f4a:	6093      	str	r3, [r2, #8]
 8008f4c:	e098      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8093 	bne.w	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	4a4b      	ldr	r2, [pc, #300]	; (800908c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d90f      	bls.n	8008f82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00a      	beq.n	8008f82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f7e:	6093      	str	r3, [r2, #8]
 8008f80:	e07e      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	3304      	adds	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	0159      	lsls	r1, r3, #5
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	440b      	add	r3, r1
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d114      	bne.n	8008fe4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2101      	movs	r1, #1
 8008fd0:	f00a fce2 	bl	8013998 <USB_EP0_OutStart>
 8008fd4:	e006      	b.n	8008fe4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	441a      	add	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f00d fa32 	bl	8016454 <HAL_PCD_DataOutStageCallback>
 8008ff0:	e046      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d124      	bne.n	8009044 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	461a      	mov	r2, r3
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	6093      	str	r3, [r2, #8]
 8009018:	e032      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	461a      	mov	r2, r3
 8009032:	2320      	movs	r3, #32
 8009034:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f00d fa09 	bl	8016454 <HAL_PCD_DataOutStageCallback>
 8009042:	e01d      	b.n	8009080 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d114      	bne.n	8009074 <PCD_EP_OutXfrComplete_int+0x1b0>
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	4613      	mov	r3, r2
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	440b      	add	r3, r1
 8009058:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800906c:	461a      	mov	r2, r3
 800906e:	2100      	movs	r1, #0
 8009070:	f00a fc92 	bl	8013998 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f00d f9ea 	bl	8016454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	4f54300a 	.word	0x4f54300a
 8009090:	4f54310a 	.word	0x4f54310a

08009094 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	333c      	adds	r3, #60	; 0x3c
 80090ac:	3304      	adds	r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <PCD_EP_OutSetupPacket_int+0x88>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d90e      	bls.n	80090e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f00d f9a1 	bl	8016430 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <PCD_EP_OutSetupPacket_int+0x88>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d90c      	bls.n	8009110 <PCD_EP_OutSetupPacket_int+0x7c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d108      	bne.n	8009110 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009108:	461a      	mov	r2, r3
 800910a:	2101      	movs	r1, #1
 800910c:	f00a fc44 	bl	8013998 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	4f54300a 	.word	0x4f54300a

08009120 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
 800912c:	4613      	mov	r3, r2
 800912e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d107      	bne.n	800914e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800913e:	883b      	ldrh	r3, [r7, #0]
 8009140:	0419      	lsls	r1, r3, #16
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	430a      	orrs	r2, r1
 800914a:	629a      	str	r2, [r3, #40]	; 0x28
 800914c:	e028      	b.n	80091a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4413      	add	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	e00d      	b.n	800917e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	3340      	adds	r3, #64	; 0x40
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	3301      	adds	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	3b01      	subs	r3, #1
 8009184:	429a      	cmp	r2, r3
 8009186:	d3ec      	bcc.n	8009162 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009188:	883b      	ldrh	r3, [r7, #0]
 800918a:	0418      	lsls	r0, r3, #16
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	3b01      	subs	r3, #1
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4302      	orrs	r2, r0
 8009198:	3340      	adds	r3, #64	; 0x40
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	887a      	ldrh	r2, [r7, #2]
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <HAL_PCDEx_ActivateLPM+0x44>)
 8009200:	4313      	orrs	r3, r2
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	10000003 	.word	0x10000003

08009218 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009238:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b04      	cmp	r3, #4
 8009242:	d00a      	beq.n	800925a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d001      	beq.n	8009256 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e01f      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	e01d      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800925a:	4b11      	ldr	r3, [pc, #68]	; (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f023 0207 	bic.w	r2, r3, #7
 8009262:	490f      	ldr	r1, [pc, #60]	; (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4313      	orrs	r3, r2
 8009268:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800926a:	f7fa f927 	bl	80034bc <HAL_GetTick>
 800926e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009270:	e009      	b.n	8009286 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009272:	f7fa f923 	bl	80034bc <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009280:	d901      	bls.n	8009286 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e007      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800928e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009292:	d1ee      	bne.n	8009272 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	58024800 	.word	0x58024800

080092a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80092ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092b2:	60d3      	str	r3, [r2, #12]
}
 80092b4:	bf00      	nop
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	58024800 	.word	0x58024800

080092c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	; 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e3c8      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8087 	beq.w	80093f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092e4:	4b88      	ldr	r3, [pc, #544]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092ee:	4b86      	ldr	r3, [pc, #536]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	2b10      	cmp	r3, #16
 80092f8:	d007      	beq.n	800930a <HAL_RCC_OscConfig+0x46>
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	2b18      	cmp	r3, #24
 80092fe:	d110      	bne.n	8009322 <HAL_RCC_OscConfig+0x5e>
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	2b02      	cmp	r3, #2
 8009308:	d10b      	bne.n	8009322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800930a:	4b7f      	ldr	r3, [pc, #508]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d06c      	beq.n	80093f0 <HAL_RCC_OscConfig+0x12c>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d168      	bne.n	80093f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e3a2      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932a:	d106      	bne.n	800933a <HAL_RCC_OscConfig+0x76>
 800932c:	4b76      	ldr	r3, [pc, #472]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a75      	ldr	r2, [pc, #468]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e02e      	b.n	8009398 <HAL_RCC_OscConfig+0xd4>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10c      	bne.n	800935c <HAL_RCC_OscConfig+0x98>
 8009342:	4b71      	ldr	r3, [pc, #452]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a70      	ldr	r2, [pc, #448]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4b6e      	ldr	r3, [pc, #440]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a6d      	ldr	r2, [pc, #436]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	e01d      	b.n	8009398 <HAL_RCC_OscConfig+0xd4>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009364:	d10c      	bne.n	8009380 <HAL_RCC_OscConfig+0xbc>
 8009366:	4b68      	ldr	r3, [pc, #416]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a67      	ldr	r2, [pc, #412]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800936c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4b65      	ldr	r3, [pc, #404]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a64      	ldr	r2, [pc, #400]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	e00b      	b.n	8009398 <HAL_RCC_OscConfig+0xd4>
 8009380:	4b61      	ldr	r3, [pc, #388]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a60      	ldr	r2, [pc, #384]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	4b5e      	ldr	r3, [pc, #376]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a5d      	ldr	r2, [pc, #372]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d013      	beq.n	80093c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a0:	f7fa f88c 	bl	80034bc <HAL_GetTick>
 80093a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093a6:	e008      	b.n	80093ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093a8:	f7fa f888 	bl	80034bc <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b64      	cmp	r3, #100	; 0x64
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e356      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093ba:	4b53      	ldr	r3, [pc, #332]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0f0      	beq.n	80093a8 <HAL_RCC_OscConfig+0xe4>
 80093c6:	e014      	b.n	80093f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c8:	f7fa f878 	bl	80034bc <HAL_GetTick>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093d0:	f7fa f874 	bl	80034bc <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b64      	cmp	r3, #100	; 0x64
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e342      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093e2:	4b49      	ldr	r3, [pc, #292]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1f0      	bne.n	80093d0 <HAL_RCC_OscConfig+0x10c>
 80093ee:	e000      	b.n	80093f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 808c 	beq.w	8009518 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009400:	4b41      	ldr	r3, [pc, #260]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009408:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800940a:	4b3f      	ldr	r3, [pc, #252]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d007      	beq.n	8009426 <HAL_RCC_OscConfig+0x162>
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	2b18      	cmp	r3, #24
 800941a:	d137      	bne.n	800948c <HAL_RCC_OscConfig+0x1c8>
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d132      	bne.n	800948c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009426:	4b38      	ldr	r3, [pc, #224]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <HAL_RCC_OscConfig+0x17a>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e314      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800943e:	4b32      	ldr	r3, [pc, #200]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f023 0219 	bic.w	r2, r3, #25
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	492f      	ldr	r1, [pc, #188]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800944c:	4313      	orrs	r3, r2
 800944e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009450:	f7fa f834 	bl	80034bc <HAL_GetTick>
 8009454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009456:	e008      	b.n	800946a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009458:	f7fa f830 	bl	80034bc <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e2fe      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800946a:	4b27      	ldr	r3, [pc, #156]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009476:	4b24      	ldr	r3, [pc, #144]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	061b      	lsls	r3, r3, #24
 8009484:	4920      	ldr	r1, [pc, #128]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009486:	4313      	orrs	r3, r2
 8009488:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800948a:	e045      	b.n	8009518 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d026      	beq.n	80094e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009494:	4b1c      	ldr	r3, [pc, #112]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f023 0219 	bic.w	r2, r3, #25
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	4919      	ldr	r1, [pc, #100]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a6:	f7fa f809 	bl	80034bc <HAL_GetTick>
 80094aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ac:	e008      	b.n	80094c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ae:	f7fa f805 	bl	80034bc <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d901      	bls.n	80094c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e2d3      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0f0      	beq.n	80094ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	061b      	lsls	r3, r3, #24
 80094da:	490b      	ldr	r1, [pc, #44]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	604b      	str	r3, [r1, #4]
 80094e0:	e01a      	b.n	8009518 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a08      	ldr	r2, [pc, #32]	; (8009508 <HAL_RCC_OscConfig+0x244>)
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7f9 ffe5 	bl	80034bc <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80094f4:	e00a      	b.n	800950c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094f6:	f7f9 ffe1 	bl	80034bc <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d903      	bls.n	800950c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e2af      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
 8009508:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800950c:	4b96      	ldr	r3, [pc, #600]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1ee      	bne.n	80094f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d06a      	beq.n	80095fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009524:	4b90      	ldr	r3, [pc, #576]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800952c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800952e:	4b8e      	ldr	r3, [pc, #568]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b08      	cmp	r3, #8
 8009538:	d007      	beq.n	800954a <HAL_RCC_OscConfig+0x286>
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b18      	cmp	r3, #24
 800953e:	d11b      	bne.n	8009578 <HAL_RCC_OscConfig+0x2b4>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 0303 	and.w	r3, r3, #3
 8009546:	2b01      	cmp	r3, #1
 8009548:	d116      	bne.n	8009578 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800954a:	4b87      	ldr	r3, [pc, #540]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <HAL_RCC_OscConfig+0x29e>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d001      	beq.n	8009562 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e282      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009562:	4b81      	ldr	r3, [pc, #516]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	061b      	lsls	r3, r3, #24
 8009570:	497d      	ldr	r1, [pc, #500]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009572:	4313      	orrs	r3, r2
 8009574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009576:	e040      	b.n	80095fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d023      	beq.n	80095c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009580:	4b79      	ldr	r3, [pc, #484]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a78      	ldr	r2, [pc, #480]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958c:	f7f9 ff96 	bl	80034bc <HAL_GetTick>
 8009590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009594:	f7f9 ff92 	bl	80034bc <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e260      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095a6:	4b70      	ldr	r3, [pc, #448]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095b2:	4b6d      	ldr	r3, [pc, #436]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	061b      	lsls	r3, r3, #24
 80095c0:	4969      	ldr	r1, [pc, #420]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60cb      	str	r3, [r1, #12]
 80095c6:	e018      	b.n	80095fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80095c8:	4b67      	ldr	r3, [pc, #412]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a66      	ldr	r2, [pc, #408]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d4:	f7f9 ff72 	bl	80034bc <HAL_GetTick>
 80095d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80095da:	e008      	b.n	80095ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095dc:	f7f9 ff6e 	bl	80034bc <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e23c      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80095ee:	4b5e      	ldr	r3, [pc, #376]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f0      	bne.n	80095dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d036      	beq.n	8009674 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d019      	beq.n	8009642 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800960e:	4b56      	ldr	r3, [pc, #344]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009612:	4a55      	ldr	r2, [pc, #340]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800961a:	f7f9 ff4f 	bl	80034bc <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009622:	f7f9 ff4b 	bl	80034bc <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e219      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009634:	4b4c      	ldr	r3, [pc, #304]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x35e>
 8009640:	e018      	b.n	8009674 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009642:	4b49      	ldr	r3, [pc, #292]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009646:	4a48      	ldr	r2, [pc, #288]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964e:	f7f9 ff35 	bl	80034bc <HAL_GetTick>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009654:	e008      	b.n	8009668 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009656:	f7f9 ff31 	bl	80034bc <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d901      	bls.n	8009668 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e1ff      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009668:	4b3f      	ldr	r3, [pc, #252]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800966a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1f0      	bne.n	8009656 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d036      	beq.n	80096ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d019      	beq.n	80096bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009688:	4b37      	ldr	r3, [pc, #220]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a36      	ldr	r2, [pc, #216]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800968e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009692:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009694:	f7f9 ff12 	bl	80034bc <HAL_GetTick>
 8009698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800969c:	f7f9 ff0e 	bl	80034bc <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e1dc      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096ae:	4b2e      	ldr	r3, [pc, #184]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0f0      	beq.n	800969c <HAL_RCC_OscConfig+0x3d8>
 80096ba:	e018      	b.n	80096ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096bc:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a29      	ldr	r2, [pc, #164]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80096c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096c8:	f7f9 fef8 	bl	80034bc <HAL_GetTick>
 80096cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096d0:	f7f9 fef4 	bl	80034bc <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e1c2      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096e2:	4b21      	ldr	r3, [pc, #132]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f0      	bne.n	80096d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8086 	beq.w	8009808 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80096fc:	4b1b      	ldr	r3, [pc, #108]	; (800976c <HAL_RCC_OscConfig+0x4a8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1a      	ldr	r2, [pc, #104]	; (800976c <HAL_RCC_OscConfig+0x4a8>)
 8009702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009708:	f7f9 fed8 	bl	80034bc <HAL_GetTick>
 800970c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800970e:	e008      	b.n	8009722 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009710:	f7f9 fed4 	bl	80034bc <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b64      	cmp	r3, #100	; 0x64
 800971c:	d901      	bls.n	8009722 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e1a2      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <HAL_RCC_OscConfig+0x4a8>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0f0      	beq.n	8009710 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d106      	bne.n	8009744 <HAL_RCC_OscConfig+0x480>
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	6713      	str	r3, [r2, #112]	; 0x70
 8009742:	e032      	b.n	80097aa <HAL_RCC_OscConfig+0x4e6>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d111      	bne.n	8009770 <HAL_RCC_OscConfig+0x4ac>
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800974e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009750:	4a05      	ldr	r2, [pc, #20]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 8009752:	f023 0301 	bic.w	r3, r3, #1
 8009756:	6713      	str	r3, [r2, #112]	; 0x70
 8009758:	4b03      	ldr	r3, [pc, #12]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800975a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975c:	4a02      	ldr	r2, [pc, #8]	; (8009768 <HAL_RCC_OscConfig+0x4a4>)
 800975e:	f023 0304 	bic.w	r3, r3, #4
 8009762:	6713      	str	r3, [r2, #112]	; 0x70
 8009764:	e021      	b.n	80097aa <HAL_RCC_OscConfig+0x4e6>
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	58024800 	.word	0x58024800
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b05      	cmp	r3, #5
 8009776:	d10c      	bne.n	8009792 <HAL_RCC_OscConfig+0x4ce>
 8009778:	4b83      	ldr	r3, [pc, #524]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800977a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977c:	4a82      	ldr	r2, [pc, #520]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800977e:	f043 0304 	orr.w	r3, r3, #4
 8009782:	6713      	str	r3, [r2, #112]	; 0x70
 8009784:	4b80      	ldr	r3, [pc, #512]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009788:	4a7f      	ldr	r2, [pc, #508]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800978a:	f043 0301 	orr.w	r3, r3, #1
 800978e:	6713      	str	r3, [r2, #112]	; 0x70
 8009790:	e00b      	b.n	80097aa <HAL_RCC_OscConfig+0x4e6>
 8009792:	4b7d      	ldr	r3, [pc, #500]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	4a7c      	ldr	r2, [pc, #496]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	6713      	str	r3, [r2, #112]	; 0x70
 800979e:	4b7a      	ldr	r3, [pc, #488]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	4a79      	ldr	r2, [pc, #484]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80097a4:	f023 0304 	bic.w	r3, r3, #4
 80097a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d015      	beq.n	80097de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b2:	f7f9 fe83 	bl	80034bc <HAL_GetTick>
 80097b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097b8:	e00a      	b.n	80097d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ba:	f7f9 fe7f 	bl	80034bc <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e14b      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097d0:	4b6d      	ldr	r3, [pc, #436]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80097d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0ee      	beq.n	80097ba <HAL_RCC_OscConfig+0x4f6>
 80097dc:	e014      	b.n	8009808 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097de:	f7f9 fe6d 	bl	80034bc <HAL_GetTick>
 80097e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097e4:	e00a      	b.n	80097fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e6:	f7f9 fe69 	bl	80034bc <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e135      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097fc:	4b62      	ldr	r3, [pc, #392]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1ee      	bne.n	80097e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 812a 	beq.w	8009a66 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009812:	4b5d      	ldr	r3, [pc, #372]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800981a:	2b18      	cmp	r3, #24
 800981c:	f000 80ba 	beq.w	8009994 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b02      	cmp	r3, #2
 8009826:	f040 8095 	bne.w	8009954 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800982a:	4b57      	ldr	r3, [pc, #348]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a56      	ldr	r2, [pc, #344]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009836:	f7f9 fe41 	bl	80034bc <HAL_GetTick>
 800983a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800983c:	e008      	b.n	8009850 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800983e:	f7f9 fe3d 	bl	80034bc <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e10b      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009850:	4b4d      	ldr	r3, [pc, #308]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f0      	bne.n	800983e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800985c:	4b4a      	ldr	r3, [pc, #296]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800985e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009860:	4b4a      	ldr	r3, [pc, #296]	; (800998c <HAL_RCC_OscConfig+0x6c8>)
 8009862:	4013      	ands	r3, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800986c:	0112      	lsls	r2, r2, #4
 800986e:	430a      	orrs	r2, r1
 8009870:	4945      	ldr	r1, [pc, #276]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	628b      	str	r3, [r1, #40]	; 0x28
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987a:	3b01      	subs	r3, #1
 800987c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	3b01      	subs	r3, #1
 8009886:	025b      	lsls	r3, r3, #9
 8009888:	b29b      	uxth	r3, r3
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	3b01      	subs	r3, #1
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989e:	3b01      	subs	r3, #1
 80098a0:	061b      	lsls	r3, r3, #24
 80098a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098a6:	4938      	ldr	r1, [pc, #224]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80098ac:	4b36      	ldr	r3, [pc, #216]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a35      	ldr	r2, [pc, #212]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098b2:	f023 0301 	bic.w	r3, r3, #1
 80098b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098b8:	4b33      	ldr	r3, [pc, #204]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098bc:	4b34      	ldr	r3, [pc, #208]	; (8009990 <HAL_RCC_OscConfig+0x6cc>)
 80098be:	4013      	ands	r3, r2
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80098c4:	00d2      	lsls	r2, r2, #3
 80098c6:	4930      	ldr	r1, [pc, #192]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098c8:	4313      	orrs	r3, r2
 80098ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80098cc:	4b2e      	ldr	r3, [pc, #184]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	f023 020c 	bic.w	r2, r3, #12
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	492b      	ldr	r1, [pc, #172]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80098de:	4b2a      	ldr	r3, [pc, #168]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	f023 0202 	bic.w	r2, r3, #2
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ea:	4927      	ldr	r1, [pc, #156]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80098f0:	4b25      	ldr	r3, [pc, #148]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	4a24      	ldr	r2, [pc, #144]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fc:	4b22      	ldr	r3, [pc, #136]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a21      	ldr	r2, [pc, #132]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009908:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800990e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009914:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a1b      	ldr	r2, [pc, #108]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009920:	4b19      	ldr	r3, [pc, #100]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a18      	ldr	r2, [pc, #96]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800992a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800992c:	f7f9 fdc6 	bl	80034bc <HAL_GetTick>
 8009930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009934:	f7f9 fdc2 	bl	80034bc <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e090      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0f0      	beq.n	8009934 <HAL_RCC_OscConfig+0x670>
 8009952:	e088      	b.n	8009a66 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009954:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a0b      	ldr	r2, [pc, #44]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800995a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800995e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009960:	f7f9 fdac 	bl	80034bc <HAL_GetTick>
 8009964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009966:	e008      	b.n	800997a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009968:	f7f9 fda8 	bl	80034bc <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b02      	cmp	r3, #2
 8009974:	d901      	bls.n	800997a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e076      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <HAL_RCC_OscConfig+0x6c4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f0      	bne.n	8009968 <HAL_RCC_OscConfig+0x6a4>
 8009986:	e06e      	b.n	8009a66 <HAL_RCC_OscConfig+0x7a2>
 8009988:	58024400 	.word	0x58024400
 800998c:	fffffc0c 	.word	0xfffffc0c
 8009990:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009994:	4b36      	ldr	r3, [pc, #216]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800999a:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d031      	beq.n	8009a0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f003 0203 	and.w	r2, r3, #3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d12a      	bne.n	8009a0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	091b      	lsrs	r3, r3, #4
 80099ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d122      	bne.n	8009a0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d11a      	bne.n	8009a0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	0a5b      	lsrs	r3, r3, #9
 80099da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d111      	bne.n	8009a0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d108      	bne.n	8009a0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	0e1b      	lsrs	r3, r3, #24
 80099fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d001      	beq.n	8009a10 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e02b      	b.n	8009a68 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a10:	4b17      	ldr	r3, [pc, #92]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	08db      	lsrs	r3, r3, #3
 8009a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d01f      	beq.n	8009a66 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a26:	4b12      	ldr	r3, [pc, #72]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	4a11      	ldr	r2, [pc, #68]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a2c:	f023 0301 	bic.w	r3, r3, #1
 8009a30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a32:	f7f9 fd43 	bl	80034bc <HAL_GetTick>
 8009a36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a38:	bf00      	nop
 8009a3a:	f7f9 fd3f 	bl	80034bc <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d0f9      	beq.n	8009a3a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a46:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <HAL_RCC_OscConfig+0x7b0>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a52:	00d2      	lsls	r2, r2, #3
 8009a54:	4906      	ldr	r1, [pc, #24]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	4a04      	ldr	r2, [pc, #16]	; (8009a70 <HAL_RCC_OscConfig+0x7ac>)
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3730      	adds	r7, #48	; 0x30
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	58024400 	.word	0x58024400
 8009a74:	ffff0007 	.word	0xffff0007

08009a78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e19c      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a8c:	4b8a      	ldr	r3, [pc, #552]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d910      	bls.n	8009abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a9a:	4b87      	ldr	r3, [pc, #540]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f023 020f 	bic.w	r2, r3, #15
 8009aa2:	4985      	ldr	r1, [pc, #532]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aaa:	4b83      	ldr	r3, [pc, #524]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 030f 	and.w	r3, r3, #15
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d001      	beq.n	8009abc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e184      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d010      	beq.n	8009aea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	4b7b      	ldr	r3, [pc, #492]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d908      	bls.n	8009aea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ad8:	4b78      	ldr	r3, [pc, #480]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	4975      	ldr	r1, [pc, #468]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d010      	beq.n	8009b18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695a      	ldr	r2, [r3, #20]
 8009afa:	4b70      	ldr	r3, [pc, #448]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d908      	bls.n	8009b18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b06:	4b6d      	ldr	r3, [pc, #436]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	496a      	ldr	r1, [pc, #424]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0310 	and.w	r3, r3, #16
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d010      	beq.n	8009b46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699a      	ldr	r2, [r3, #24]
 8009b28:	4b64      	ldr	r3, [pc, #400]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d908      	bls.n	8009b46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b34:	4b61      	ldr	r3, [pc, #388]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	495e      	ldr	r1, [pc, #376]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d010      	beq.n	8009b74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	4b59      	ldr	r3, [pc, #356]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d908      	bls.n	8009b74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b62:	4b56      	ldr	r3, [pc, #344]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	4953      	ldr	r1, [pc, #332]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d010      	beq.n	8009ba2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	4b4d      	ldr	r3, [pc, #308]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d908      	bls.n	8009ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b90:	4b4a      	ldr	r3, [pc, #296]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	f023 020f 	bic.w	r2, r3, #15
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	4947      	ldr	r1, [pc, #284]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d055      	beq.n	8009c5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bae:	4b43      	ldr	r3, [pc, #268]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	4940      	ldr	r1, [pc, #256]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d107      	bne.n	8009bd8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bc8:	4b3c      	ldr	r3, [pc, #240]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d121      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e0f6      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d107      	bne.n	8009bf0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009be0:	4b36      	ldr	r3, [pc, #216]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d115      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e0ea      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d107      	bne.n	8009c08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bf8:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d109      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0de      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c08:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e0d6      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c18:	4b28      	ldr	r3, [pc, #160]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f023 0207 	bic.w	r2, r3, #7
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	4925      	ldr	r1, [pc, #148]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c2a:	f7f9 fc47 	bl	80034bc <HAL_GetTick>
 8009c2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c30:	e00a      	b.n	8009c48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c32:	f7f9 fc43 	bl	80034bc <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d901      	bls.n	8009c48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e0be      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c48:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d1eb      	bne.n	8009c32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d208      	bcs.n	8009c88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c76:	4b11      	ldr	r3, [pc, #68]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f023 020f 	bic.w	r2, r3, #15
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	490e      	ldr	r1, [pc, #56]	; (8009cbc <HAL_RCC_ClockConfig+0x244>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c88:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d214      	bcs.n	8009cc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c96:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f023 020f 	bic.w	r2, r3, #15
 8009c9e:	4906      	ldr	r1, [pc, #24]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ca6:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <HAL_RCC_ClockConfig+0x240>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d005      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e086      	b.n	8009dc6 <HAL_RCC_ClockConfig+0x34e>
 8009cb8:	52002000 	.word	0x52002000
 8009cbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d010      	beq.n	8009cee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	4b3f      	ldr	r3, [pc, #252]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d208      	bcs.n	8009cee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cdc:	4b3c      	ldr	r3, [pc, #240]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	4939      	ldr	r1, [pc, #228]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d010      	beq.n	8009d1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695a      	ldr	r2, [r3, #20]
 8009cfe:	4b34      	ldr	r3, [pc, #208]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d208      	bcs.n	8009d1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d0a:	4b31      	ldr	r3, [pc, #196]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	492e      	ldr	r1, [pc, #184]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0310 	and.w	r3, r3, #16
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d010      	beq.n	8009d4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	4b28      	ldr	r3, [pc, #160]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d208      	bcs.n	8009d4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d38:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	4922      	ldr	r1, [pc, #136]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d010      	beq.n	8009d78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	69da      	ldr	r2, [r3, #28]
 8009d5a:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d208      	bcs.n	8009d78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d66:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	4917      	ldr	r1, [pc, #92]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009d78:	f000 f89e 	bl	8009eb8 <HAL_RCC_GetSysClockFreq>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	4912      	ldr	r1, [pc, #72]	; (8009dd4 <HAL_RCC_ClockConfig+0x35c>)
 8009d8a:	5ccb      	ldrb	r3, [r1, r3]
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	fa22 f303 	lsr.w	r3, r2, r3
 8009d94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d96:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <HAL_RCC_ClockConfig+0x358>)
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	4a0d      	ldr	r2, [pc, #52]	; (8009dd4 <HAL_RCC_ClockConfig+0x35c>)
 8009da0:	5cd3      	ldrb	r3, [r2, r3]
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dac:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <HAL_RCC_ClockConfig+0x360>)
 8009dae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <HAL_RCC_ClockConfig+0x364>)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009db6:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <HAL_RCC_ClockConfig+0x368>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f9 fb34 	bl	8003428 <HAL_InitTick>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	08017494 	.word	0x08017494
 8009dd8:	24000004 	.word	0x24000004
 8009ddc:	24000000 	.word	0x24000000
 8009de0:	24000008 	.word	0x24000008

08009de4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	; 0x30
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d12a      	bne.n	8009e4c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009df6:	4b2d      	ldr	r3, [pc, #180]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dfc:	4a2b      	ldr	r2, [pc, #172]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009dfe:	f043 0301 	orr.w	r3, r3, #1
 8009e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e06:	4b29      	ldr	r3, [pc, #164]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009e26:	2300      	movs	r3, #0
 8009e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009e2a:	f107 031c 	add.w	r3, r7, #28
 8009e2e:	4619      	mov	r1, r3
 8009e30:	481f      	ldr	r0, [pc, #124]	; (8009eb0 <HAL_RCC_MCOConfig+0xcc>)
 8009e32:	f7fd fc43 	bl	80076bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009e36:	4b1d      	ldr	r3, [pc, #116]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	430b      	orrs	r3, r1
 8009e44:	4919      	ldr	r1, [pc, #100]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009e4a:	e02a      	b.n	8009ea2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009e4c:	4b17      	ldr	r3, [pc, #92]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e52:	4a16      	ldr	r2, [pc, #88]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e54:	f043 0304 	orr.w	r3, r3, #4
 8009e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e5c:	4b13      	ldr	r3, [pc, #76]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e70:	2302      	movs	r3, #2
 8009e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e74:	2303      	movs	r3, #3
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009e80:	f107 031c 	add.w	r3, r7, #28
 8009e84:	4619      	mov	r1, r3
 8009e86:	480b      	ldr	r0, [pc, #44]	; (8009eb4 <HAL_RCC_MCOConfig+0xd0>)
 8009e88:	f7fd fc18 	bl	80076bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	01d9      	lsls	r1, r3, #7
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	4903      	ldr	r1, [pc, #12]	; (8009eac <HAL_RCC_MCOConfig+0xc8>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	610b      	str	r3, [r1, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	3730      	adds	r7, #48	; 0x30
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	58020000 	.word	0x58020000
 8009eb4:	58020800 	.word	0x58020800

08009eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b089      	sub	sp, #36	; 0x24
 8009ebc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ebe:	4bb3      	ldr	r3, [pc, #716]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ec6:	2b18      	cmp	r3, #24
 8009ec8:	f200 8155 	bhi.w	800a176 <HAL_RCC_GetSysClockFreq+0x2be>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009f39 	.word	0x08009f39
 8009ed8:	0800a177 	.word	0x0800a177
 8009edc:	0800a177 	.word	0x0800a177
 8009ee0:	0800a177 	.word	0x0800a177
 8009ee4:	0800a177 	.word	0x0800a177
 8009ee8:	0800a177 	.word	0x0800a177
 8009eec:	0800a177 	.word	0x0800a177
 8009ef0:	0800a177 	.word	0x0800a177
 8009ef4:	08009f5f 	.word	0x08009f5f
 8009ef8:	0800a177 	.word	0x0800a177
 8009efc:	0800a177 	.word	0x0800a177
 8009f00:	0800a177 	.word	0x0800a177
 8009f04:	0800a177 	.word	0x0800a177
 8009f08:	0800a177 	.word	0x0800a177
 8009f0c:	0800a177 	.word	0x0800a177
 8009f10:	0800a177 	.word	0x0800a177
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	0800a177 	.word	0x0800a177
 8009f1c:	0800a177 	.word	0x0800a177
 8009f20:	0800a177 	.word	0x0800a177
 8009f24:	0800a177 	.word	0x0800a177
 8009f28:	0800a177 	.word	0x0800a177
 8009f2c:	0800a177 	.word	0x0800a177
 8009f30:	0800a177 	.word	0x0800a177
 8009f34:	08009f6b 	.word	0x08009f6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f38:	4b94      	ldr	r3, [pc, #592]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f44:	4b91      	ldr	r3, [pc, #580]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	08db      	lsrs	r3, r3, #3
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	4a90      	ldr	r2, [pc, #576]	; (800a190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f50:	fa22 f303 	lsr.w	r3, r2, r3
 8009f54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f56:	e111      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f58:	4b8d      	ldr	r3, [pc, #564]	; (800a190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f5a:	61bb      	str	r3, [r7, #24]
      break;
 8009f5c:	e10e      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f5e:	4b8d      	ldr	r3, [pc, #564]	; (800a194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f60:	61bb      	str	r3, [r7, #24]
      break;
 8009f62:	e10b      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f64:	4b8c      	ldr	r3, [pc, #560]	; (800a198 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f66:	61bb      	str	r3, [r7, #24]
      break;
 8009f68:	e108      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f6a:	4b88      	ldr	r3, [pc, #544]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f74:	4b85      	ldr	r3, [pc, #532]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	091b      	lsrs	r3, r3, #4
 8009f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f80:	4b82      	ldr	r3, [pc, #520]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f8a:	4b80      	ldr	r3, [pc, #512]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f8e:	08db      	lsrs	r3, r3, #3
 8009f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	ee07 3a90 	vmov	s15, r3
 8009f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80e1 	beq.w	800a170 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	f000 8083 	beq.w	800a0bc <HAL_RCC_GetSysClockFreq+0x204>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	f200 80a1 	bhi.w	800a100 <HAL_RCC_GetSysClockFreq+0x248>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_RCC_GetSysClockFreq+0x114>
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d056      	beq.n	800a078 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009fca:	e099      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fcc:	4b6f      	ldr	r3, [pc, #444]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d02d      	beq.n	800a034 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fd8:	4b6c      	ldr	r3, [pc, #432]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	08db      	lsrs	r3, r3, #3
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	4a6b      	ldr	r2, [pc, #428]	; (800a190 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	ee07 3a90 	vmov	s15, r3
 8009ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b62      	ldr	r3, [pc, #392]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a02 	vldr	s12, [r7, #8]
 800a016:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a032:	e087      	b.n	800a144 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a1a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b51      	ldr	r3, [pc, #324]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a02 	vldr	s12, [r7, #8]
 800a05a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a076:	e065      	b.n	800a144 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a1a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08a:	4b40      	ldr	r3, [pc, #256]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a09e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0ba:	e043      	b.n	800a144 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a1a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ce:	4b2f      	ldr	r3, [pc, #188]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0fe:	e021      	b.n	800a144 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a1a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a112:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11a:	ee07 3a90 	vmov	s15, r3
 800a11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a122:	ed97 6a02 	vldr	s12, [r7, #8]
 800a126:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a19c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a142:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a144:	4b11      	ldr	r3, [pc, #68]	; (800a18c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a148:	0a5b      	lsrs	r3, r3, #9
 800a14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14e:	3301      	adds	r3, #1
 800a150:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	ee07 3a90 	vmov	s15, r3
 800a158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a15c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a168:	ee17 3a90 	vmov	r3, s15
 800a16c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a16e:	e005      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	61bb      	str	r3, [r7, #24]
      break;
 800a174:	e002      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a176:	4b07      	ldr	r3, [pc, #28]	; (800a194 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a178:	61bb      	str	r3, [r7, #24]
      break;
 800a17a:	bf00      	nop
  }

  return sysclockfreq;
 800a17c:	69bb      	ldr	r3, [r7, #24]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	03d09000 	.word	0x03d09000
 800a194:	003d0900 	.word	0x003d0900
 800a198:	02faf080 	.word	0x02faf080
 800a19c:	46000000 	.word	0x46000000
 800a1a0:	4c742400 	.word	0x4c742400
 800a1a4:	4a742400 	.word	0x4a742400
 800a1a8:	4c3ebc20 	.word	0x4c3ebc20

0800a1ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a1b2:	f7ff fe81 	bl	8009eb8 <HAL_RCC_GetSysClockFreq>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	4b10      	ldr	r3, [pc, #64]	; (800a1fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	490f      	ldr	r1, [pc, #60]	; (800a200 <HAL_RCC_GetHCLKFreq+0x54>)
 800a1c4:	5ccb      	ldrb	r3, [r1, r3]
 800a1c6:	f003 031f 	and.w	r3, r3, #31
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1d0:	4b0a      	ldr	r3, [pc, #40]	; (800a1fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	f003 030f 	and.w	r3, r3, #15
 800a1d8:	4a09      	ldr	r2, [pc, #36]	; (800a200 <HAL_RCC_GetHCLKFreq+0x54>)
 800a1da:	5cd3      	ldrb	r3, [r2, r3]
 800a1dc:	f003 031f 	and.w	r3, r3, #31
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e6:	4a07      	ldr	r2, [pc, #28]	; (800a204 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1ea:	4a07      	ldr	r2, [pc, #28]	; (800a208 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a1f0:	4b04      	ldr	r3, [pc, #16]	; (800a204 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	58024400 	.word	0x58024400
 800a200:	08017494 	.word	0x08017494
 800a204:	24000004 	.word	0x24000004
 800a208:	24000000 	.word	0x24000000

0800a20c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a210:	f7ff ffcc 	bl	800a1ac <HAL_RCC_GetHCLKFreq>
 800a214:	4602      	mov	r2, r0
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	091b      	lsrs	r3, r3, #4
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	4904      	ldr	r1, [pc, #16]	; (800a234 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a222:	5ccb      	ldrb	r3, [r1, r3]
 800a224:	f003 031f 	and.w	r3, r3, #31
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	58024400 	.word	0x58024400
 800a234:	08017494 	.word	0x08017494

0800a238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a23c:	f7ff ffb6 	bl	800a1ac <HAL_RCC_GetHCLKFreq>
 800a240:	4602      	mov	r2, r0
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	4904      	ldr	r1, [pc, #16]	; (800a260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a24e:	5ccb      	ldrb	r3, [r1, r3]
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a258:	4618      	mov	r0, r3
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	58024400 	.word	0x58024400
 800a260:	08017494 	.word	0x08017494

0800a264 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a268:	b0c6      	sub	sp, #280	; 0x118
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a276:	2300      	movs	r3, #0
 800a278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a288:	2500      	movs	r5, #0
 800a28a:	ea54 0305 	orrs.w	r3, r4, r5
 800a28e:	d049      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a29a:	d02f      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a29c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2a0:	d828      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2a6:	d01a      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ac:	d822      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b6:	d007      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2b8:	e01c      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ba:	4bab      	ldr	r3, [pc, #684]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	4aaa      	ldr	r2, [pc, #680]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2c6:	e01a      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f002 fa49 	bl	800c768 <RCCEx_PLL2_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e2:	3328      	adds	r3, #40	; 0x28
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 faf0 	bl	800c8cc <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a306:	4b98      	ldr	r3, [pc, #608]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a314:	4a94      	ldr	r2, [pc, #592]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6513      	str	r3, [r2, #80]	; 0x50
 800a31a:	e003      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a320:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a330:	f04f 0900 	mov.w	r9, #0
 800a334:	ea58 0309 	orrs.w	r3, r8, r9
 800a338:	d047      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a340:	2b04      	cmp	r3, #4
 800a342:	d82a      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a361 	.word	0x0800a361
 800a350:	0800a36f 	.word	0x0800a36f
 800a354:	0800a385 	.word	0x0800a385
 800a358:	0800a3a3 	.word	0x0800a3a3
 800a35c:	0800a3a3 	.word	0x0800a3a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a360:	4b81      	ldr	r3, [pc, #516]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	4a80      	ldr	r2, [pc, #512]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a36c:	e01a      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	3308      	adds	r3, #8
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f002 f9f6 	bl	800c768 <RCCEx_PLL2_Config>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a382:	e00f      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a388:	3328      	adds	r3, #40	; 0x28
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f002 fa9d 	bl	800c8cc <RCCEx_PLL3_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a398:	e004      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3a0:	e000      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3ac:	4b6e      	ldr	r3, [pc, #440]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b0:	f023 0107 	bic.w	r1, r3, #7
 800a3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	4a6b      	ldr	r2, [pc, #428]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6513      	str	r3, [r2, #80]	; 0x50
 800a3c0:	e003      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a3d6:	f04f 0b00 	mov.w	fp, #0
 800a3da:	ea5a 030b 	orrs.w	r3, sl, fp
 800a3de:	d05b      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a3e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a3ec:	d03b      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a3ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a3f2:	d834      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a3f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3f8:	d037      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a3fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3fe:	d82e      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a400:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a404:	d033      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a406:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a40a:	d828      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a40c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a410:	d01a      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a416:	d822      	bhi.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a41c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a420:	d007      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a422:	e01c      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a424:	4b50      	ldr	r3, [pc, #320]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	4a4f      	ldr	r2, [pc, #316]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a42a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a42e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a430:	e01e      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a436:	3308      	adds	r3, #8
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f002 f994 	bl	800c768 <RCCEx_PLL2_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a446:	e013      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a44c:	3328      	adds	r3, #40	; 0x28
 800a44e:	2100      	movs	r1, #0
 800a450:	4618      	mov	r0, r3
 800a452:	f002 fa3b 	bl	800c8cc <RCCEx_PLL3_Config>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a45c:	e008      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a464:	e004      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a466:	bf00      	nop
 800a468:	e002      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a46a:	bf00      	nop
 800a46c:	e000      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10b      	bne.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a478:	4b3b      	ldr	r3, [pc, #236]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a488:	4a37      	ldr	r2, [pc, #220]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a48a:	430b      	orrs	r3, r1
 800a48c:	6593      	str	r3, [r2, #88]	; 0x58
 800a48e:	e003      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a490:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a494:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a4a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	d05d      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a4c4:	d03b      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a4c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a4ca:	d834      	bhi.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4d0:	d037      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a4d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4d6:	d82e      	bhi.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a4dc:	d033      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a4de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a4e2:	d828      	bhi.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4e8:	d01a      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a4ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ee:	d822      	bhi.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a4f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a4f8:	d007      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a4fa:	e01c      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	4a19      	ldr	r2, [pc, #100]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a508:	e01e      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a50e:	3308      	adds	r3, #8
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f002 f928 	bl	800c768 <RCCEx_PLL2_Config>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a51e:	e013      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	3328      	adds	r3, #40	; 0x28
 800a526:	2100      	movs	r1, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f002 f9cf 	bl	800c8cc <RCCEx_PLL3_Config>
 800a52e:	4603      	mov	r3, r0
 800a530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a534:	e008      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a53c:	e004      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a53e:	bf00      	nop
 800a540:	e002      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a542:	bf00      	nop
 800a544:	e000      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a546:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10d      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a554:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a560:	4a01      	ldr	r2, [pc, #4]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a562:	430b      	orrs	r3, r1
 800a564:	6593      	str	r3, [r2, #88]	; 0x58
 800a566:	e005      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a570:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a580:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a584:	2300      	movs	r3, #0
 800a586:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a58a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d03a      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a59a:	2b30      	cmp	r3, #48	; 0x30
 800a59c:	d01f      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	d819      	bhi.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d00c      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d815      	bhi.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d019      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d111      	bne.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b2:	4baa      	ldr	r3, [pc, #680]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	4aa9      	ldr	r2, [pc, #676]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5be:	e011      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f002 f8cd 	bl	800c768 <RCCEx_PLL2_Config>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5d4:	e006      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5dc:	e002      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a5ec:	4b9b      	ldr	r3, [pc, #620]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fa:	4a98      	ldr	r2, [pc, #608]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a600:	e003      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a606:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a620:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d051      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a634:	d035      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a63a:	d82e      	bhi.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a63c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a640:	d031      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a646:	d828      	bhi.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a64c:	d01a      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a652:	d822      	bhi.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d007      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a65e:	e01c      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a660:	4b7e      	ldr	r3, [pc, #504]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	4a7d      	ldr	r2, [pc, #500]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a66a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a66c:	e01c      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a672:	3308      	adds	r3, #8
 800a674:	2100      	movs	r1, #0
 800a676:	4618      	mov	r0, r3
 800a678:	f002 f876 	bl	800c768 <RCCEx_PLL2_Config>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a682:	e011      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a688:	3328      	adds	r3, #40	; 0x28
 800a68a:	2100      	movs	r1, #0
 800a68c:	4618      	mov	r0, r3
 800a68e:	f002 f91d 	bl	800c8cc <RCCEx_PLL3_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a698:	e006      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6a0:	e002      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a6a2:	bf00      	nop
 800a6a4:	e000      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a6a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6b0:	4b6a      	ldr	r3, [pc, #424]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6be:	4a67      	ldr	r2, [pc, #412]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	6513      	str	r3, [r2, #80]	; 0x50
 800a6c4:	e003      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a6da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	d053      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6f8:	d033      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a6fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6fe:	d82c      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a704:	d02f      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a70a:	d826      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a70c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a710:	d02b      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a716:	d820      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a71c:	d012      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a71e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a722:	d81a      	bhi.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d022      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72c:	d115      	bne.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	3308      	adds	r3, #8
 800a734:	2101      	movs	r1, #1
 800a736:	4618      	mov	r0, r3
 800a738:	f002 f816 	bl	800c768 <RCCEx_PLL2_Config>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a742:	e015      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a748:	3328      	adds	r3, #40	; 0x28
 800a74a:	2101      	movs	r1, #1
 800a74c:	4618      	mov	r0, r3
 800a74e:	f002 f8bd 	bl	800c8cc <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a758:	e00a      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a760:	e006      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a762:	bf00      	nop
 800a764:	e004      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a766:	bf00      	nop
 800a768:	e002      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a76a:	bf00      	nop
 800a76c:	e000      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a778:	4b38      	ldr	r3, [pc, #224]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a786:	4a35      	ldr	r2, [pc, #212]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a788:	430b      	orrs	r3, r1
 800a78a:	6513      	str	r3, [r2, #80]	; 0x50
 800a78c:	e003      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a792:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a7a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	d058      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7c2:	d033      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a7c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7c8:	d82c      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ce:	d02f      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d826      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a7d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7da:	d02b      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a7dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7e0:	d820      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a7e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7e6:	d012      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ec:	d81a      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d022      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7f6:	d115      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	2101      	movs	r1, #1
 800a800:	4618      	mov	r0, r3
 800a802:	f001 ffb1 	bl	800c768 <RCCEx_PLL2_Config>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a80c:	e015      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	3328      	adds	r3, #40	; 0x28
 800a814:	2101      	movs	r1, #1
 800a816:	4618      	mov	r0, r3
 800a818:	f002 f858 	bl	800c8cc <RCCEx_PLL3_Config>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a822:	e00a      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a82a:	e006      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a82c:	bf00      	nop
 800a82e:	e004      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a830:	bf00      	nop
 800a832:	e002      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a834:	bf00      	nop
 800a836:	e000      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a83a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10e      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a846:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a852:	4a02      	ldr	r2, [pc, #8]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a854:	430b      	orrs	r3, r1
 800a856:	6593      	str	r3, [r2, #88]	; 0x58
 800a858:	e006      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a87e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d037      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a892:	d00e      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a898:	d816      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d018      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a89e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a2:	d111      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a4:	4bc4      	ldr	r3, [pc, #784]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	4ac3      	ldr	r2, [pc, #780]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8b0:	e00f      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 ff54 	bl	800c768 <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8c6:	e004      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8ce:	e000      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8da:	4bb7      	ldr	r3, [pc, #732]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e8:	4ab3      	ldr	r2, [pc, #716]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	6513      	str	r3, [r2, #80]	; 0x50
 800a8ee:	e003      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a90e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a912:	460b      	mov	r3, r1
 800a914:	4313      	orrs	r3, r2
 800a916:	d039      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d81c      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a939 	.word	0x0800a939
 800a930:	0800a947 	.word	0x0800a947
 800a934:	0800a965 	.word	0x0800a965
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a938:	4b9f      	ldr	r3, [pc, #636]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4a9e      	ldr	r2, [pc, #632]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a93e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a944:	e00f      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94a:	3308      	adds	r3, #8
 800a94c:	2102      	movs	r1, #2
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 ff0a 	bl	800c768 <RCCEx_PLL2_Config>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a95a:	e004      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a962:	e000      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a966:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a96e:	4b92      	ldr	r3, [pc, #584]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a972:	f023 0103 	bic.w	r1, r3, #3
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a97c:	4a8e      	ldr	r2, [pc, #568]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a97e:	430b      	orrs	r3, r1
 800a980:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a982:	e003      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a984:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a988:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a99c:	2300      	movs	r3, #0
 800a99e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f000 8099 	beq.w	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9ae:	4b83      	ldr	r3, [pc, #524]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a82      	ldr	r2, [pc, #520]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9ba:	f7f8 fd7f 	bl	80034bc <HAL_GetTick>
 800a9be:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c2:	e00b      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9c4:	f7f8 fd7a 	bl	80034bc <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b64      	cmp	r3, #100	; 0x64
 800a9d2:	d903      	bls.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9da:	e005      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9dc:	4b77      	ldr	r3, [pc, #476]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0ed      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d173      	bne.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9f0:	4b71      	ldr	r3, [pc, #452]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9fc:	4053      	eors	r3, r2
 800a9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d015      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa06:	4b6c      	ldr	r3, [pc, #432]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa12:	4b69      	ldr	r3, [pc, #420]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa16:	4a68      	ldr	r2, [pc, #416]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa1e:	4b66      	ldr	r3, [pc, #408]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa22:	4a65      	ldr	r2, [pc, #404]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa2a:	4a63      	ldr	r2, [pc, #396]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aa30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa3e:	d118      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa40:	f7f8 fd3c 	bl	80034bc <HAL_GetTick>
 800aa44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa48:	e00d      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa4a:	f7f8 fd37 	bl	80034bc <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d903      	bls.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800aa64:	e005      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa66:	4b54      	ldr	r3, [pc, #336]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0eb      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aa72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d129      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa8a:	d10e      	bne.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aa8c:	4b4a      	ldr	r3, [pc, #296]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa9c:	091a      	lsrs	r2, r3, #4
 800aa9e:	4b48      	ldr	r3, [pc, #288]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	4a45      	ldr	r2, [pc, #276]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6113      	str	r3, [r2, #16]
 800aaa8:	e005      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aaaa:	4b43      	ldr	r3, [pc, #268]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	4a42      	ldr	r2, [pc, #264]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aab0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aab4:	6113      	str	r3, [r2, #16]
 800aab6:	4b40      	ldr	r3, [pc, #256]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aab8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac6:	4a3c      	ldr	r2, [pc, #240]	; (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6713      	str	r3, [r2, #112]	; 0x70
 800aacc:	e008      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800aad6:	e003      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aadc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f002 0301 	and.w	r3, r2, #1
 800aaec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aaf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800aafa:	460b      	mov	r3, r1
 800aafc:	4313      	orrs	r3, r2
 800aafe:	f000 808f 	beq.w	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab08:	2b28      	cmp	r3, #40	; 0x28
 800ab0a:	d871      	bhi.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab0c:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab12:	bf00      	nop
 800ab14:	0800abf9 	.word	0x0800abf9
 800ab18:	0800abf1 	.word	0x0800abf1
 800ab1c:	0800abf1 	.word	0x0800abf1
 800ab20:	0800abf1 	.word	0x0800abf1
 800ab24:	0800abf1 	.word	0x0800abf1
 800ab28:	0800abf1 	.word	0x0800abf1
 800ab2c:	0800abf1 	.word	0x0800abf1
 800ab30:	0800abf1 	.word	0x0800abf1
 800ab34:	0800abc5 	.word	0x0800abc5
 800ab38:	0800abf1 	.word	0x0800abf1
 800ab3c:	0800abf1 	.word	0x0800abf1
 800ab40:	0800abf1 	.word	0x0800abf1
 800ab44:	0800abf1 	.word	0x0800abf1
 800ab48:	0800abf1 	.word	0x0800abf1
 800ab4c:	0800abf1 	.word	0x0800abf1
 800ab50:	0800abf1 	.word	0x0800abf1
 800ab54:	0800abdb 	.word	0x0800abdb
 800ab58:	0800abf1 	.word	0x0800abf1
 800ab5c:	0800abf1 	.word	0x0800abf1
 800ab60:	0800abf1 	.word	0x0800abf1
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800abf1 	.word	0x0800abf1
 800ab6c:	0800abf1 	.word	0x0800abf1
 800ab70:	0800abf1 	.word	0x0800abf1
 800ab74:	0800abf9 	.word	0x0800abf9
 800ab78:	0800abf1 	.word	0x0800abf1
 800ab7c:	0800abf1 	.word	0x0800abf1
 800ab80:	0800abf1 	.word	0x0800abf1
 800ab84:	0800abf1 	.word	0x0800abf1
 800ab88:	0800abf1 	.word	0x0800abf1
 800ab8c:	0800abf1 	.word	0x0800abf1
 800ab90:	0800abf1 	.word	0x0800abf1
 800ab94:	0800abf9 	.word	0x0800abf9
 800ab98:	0800abf1 	.word	0x0800abf1
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800abf1 	.word	0x0800abf1
 800aba4:	0800abf1 	.word	0x0800abf1
 800aba8:	0800abf1 	.word	0x0800abf1
 800abac:	0800abf1 	.word	0x0800abf1
 800abb0:	0800abf1 	.word	0x0800abf1
 800abb4:	0800abf9 	.word	0x0800abf9
 800abb8:	58024400 	.word	0x58024400
 800abbc:	58024800 	.word	0x58024800
 800abc0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	3308      	adds	r3, #8
 800abca:	2101      	movs	r1, #1
 800abcc:	4618      	mov	r0, r3
 800abce:	f001 fdcb 	bl	800c768 <RCCEx_PLL2_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abd8:	e00f      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abde:	3328      	adds	r3, #40	; 0x28
 800abe0:	2101      	movs	r1, #1
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 fe72 	bl	800c8cc <RCCEx_PLL3_Config>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abee:	e004      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abf6:	e000      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800abf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac02:	4bbf      	ldr	r3, [pc, #764]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac10:	4abb      	ldr	r2, [pc, #748]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac12:	430b      	orrs	r3, r1
 800ac14:	6553      	str	r3, [r2, #84]	; 0x54
 800ac16:	e003      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f002 0302 	and.w	r3, r2, #2
 800ac2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac30:	2300      	movs	r3, #0
 800ac32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	d041      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d824      	bhi.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac9d 	.word	0x0800ac9d
 800ac54:	0800ac69 	.word	0x0800ac69
 800ac58:	0800ac7f 	.word	0x0800ac7f
 800ac5c:	0800ac9d 	.word	0x0800ac9d
 800ac60:	0800ac9d 	.word	0x0800ac9d
 800ac64:	0800ac9d 	.word	0x0800ac9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	2101      	movs	r1, #1
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 fd79 	bl	800c768 <RCCEx_PLL2_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac7c:	e00f      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	3328      	adds	r3, #40	; 0x28
 800ac84:	2101      	movs	r1, #1
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fe20 	bl	800c8cc <RCCEx_PLL3_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac92:	e004      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac9a:	e000      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ac9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10a      	bne.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aca6:	4b96      	ldr	r3, [pc, #600]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acaa:	f023 0107 	bic.w	r1, r3, #7
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb4:	4a92      	ldr	r2, [pc, #584]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800acb6:	430b      	orrs	r3, r1
 800acb8:	6553      	str	r3, [r2, #84]	; 0x54
 800acba:	e003      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f002 0304 	and.w	r3, r2, #4
 800acd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800acd4:	2300      	movs	r3, #0
 800acd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800acde:	460b      	mov	r3, r1
 800ace0:	4313      	orrs	r3, r2
 800ace2:	d044      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ace4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	2b05      	cmp	r3, #5
 800acee:	d825      	bhi.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800acf0:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800acf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf6:	bf00      	nop
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad11 	.word	0x0800ad11
 800ad00:	0800ad27 	.word	0x0800ad27
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad45 	.word	0x0800ad45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	3308      	adds	r3, #8
 800ad16:	2101      	movs	r1, #1
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 fd25 	bl	800c768 <RCCEx_PLL2_Config>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad24:	e00f      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2a:	3328      	adds	r3, #40	; 0x28
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f001 fdcc 	bl	800c8cc <RCCEx_PLL3_Config>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad3a:	e004      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad42:	e000      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ad44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10b      	bne.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad4e:	4b6c      	ldr	r3, [pc, #432]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad52:	f023 0107 	bic.w	r1, r3, #7
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5e:	4a68      	ldr	r2, [pc, #416]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ad60:	430b      	orrs	r3, r1
 800ad62:	6593      	str	r3, [r2, #88]	; 0x58
 800ad64:	e003      	b.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f002 0320 	and.w	r3, r2, #32
 800ad7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ad84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	d055      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad9a:	d033      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ad9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ada0:	d82c      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ada2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada6:	d02f      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ada8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adac:	d826      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adb2:	d02b      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800adb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adb8:	d820      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adbe:	d012      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800adc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc4:	d81a      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d022      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800adca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adce:	d115      	bne.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	3308      	adds	r3, #8
 800add6:	2100      	movs	r1, #0
 800add8:	4618      	mov	r0, r3
 800adda:	f001 fcc5 	bl	800c768 <RCCEx_PLL2_Config>
 800adde:	4603      	mov	r3, r0
 800ade0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ade4:	e015      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ade6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adea:	3328      	adds	r3, #40	; 0x28
 800adec:	2102      	movs	r1, #2
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 fd6c 	bl	800c8cc <RCCEx_PLL3_Config>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800adfa:	e00a      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae02:	e006      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae04:	bf00      	nop
 800ae06:	e004      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ae10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae1a:	4b39      	ldr	r3, [pc, #228]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2a:	4a35      	ldr	r2, [pc, #212]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	6553      	str	r3, [r2, #84]	; 0x54
 800ae30:	e003      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ae46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d058      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae66:	d033      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ae68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae6c:	d82c      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae72:	d02f      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ae74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae78:	d826      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae7e:	d02b      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ae80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae84:	d820      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae8a:	d012      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ae8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae90:	d81a      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d022      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ae96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae9a:	d115      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea0:	3308      	adds	r3, #8
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 fc5f 	bl	800c768 <RCCEx_PLL2_Config>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aeb0:	e015      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb6:	3328      	adds	r3, #40	; 0x28
 800aeb8:	2102      	movs	r1, #2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 fd06 	bl	800c8cc <RCCEx_PLL3_Config>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aec6:	e00a      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aece:	e006      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aed0:	bf00      	nop
 800aed2:	e004      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aed4:	bf00      	nop
 800aed6:	e002      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aed8:	bf00      	nop
 800aeda:	e000      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aedc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10e      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800aeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aef6:	4a02      	ldr	r2, [pc, #8]	; (800af00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aef8:	430b      	orrs	r3, r1
 800aefa:	6593      	str	r3, [r2, #88]	; 0x58
 800aefc:	e006      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800aefe:	bf00      	nop
 800af00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800af18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af1c:	2300      	movs	r3, #0
 800af1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800af26:	460b      	mov	r3, r1
 800af28:	4313      	orrs	r3, r2
 800af2a:	d055      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af38:	d033      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800af3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800af3e:	d82c      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af44:	d02f      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800af46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af4a:	d826      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af50:	d02b      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800af52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800af56:	d820      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af5c:	d012      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800af5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af62:	d81a      	bhi.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d022      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800af68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af6c:	d115      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	3308      	adds	r3, #8
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f001 fbf6 	bl	800c768 <RCCEx_PLL2_Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af82:	e015      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af88:	3328      	adds	r3, #40	; 0x28
 800af8a:	2102      	movs	r1, #2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 fc9d 	bl	800c8cc <RCCEx_PLL3_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af98:	e00a      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afa0:	e006      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afa2:	bf00      	nop
 800afa4:	e004      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afa6:	bf00      	nop
 800afa8:	e002      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afaa:	bf00      	nop
 800afac:	e000      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800afae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10b      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afb8:	4ba0      	ldr	r3, [pc, #640]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afc8:	4a9c      	ldr	r2, [pc, #624]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afca:	430b      	orrs	r3, r1
 800afcc:	6593      	str	r3, [r2, #88]	; 0x58
 800afce:	e003      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f002 0308 	and.w	r3, r2, #8
 800afe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afe8:	2300      	movs	r3, #0
 800afea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aff2:	460b      	mov	r3, r1
 800aff4:	4313      	orrs	r3, r2
 800aff6:	d01e      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b004:	d10c      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00a:	3328      	adds	r3, #40	; 0x28
 800b00c:	2102      	movs	r1, #2
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 fc5c 	bl	800c8cc <RCCEx_PLL3_Config>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b020:	4b86      	ldr	r3, [pc, #536]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b024:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b030:	4a82      	ldr	r2, [pc, #520]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b032:	430b      	orrs	r3, r1
 800b034:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f002 0310 	and.w	r3, r2, #16
 800b042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b046:	2300      	movs	r3, #0
 800b048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b04c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b050:	460b      	mov	r3, r1
 800b052:	4313      	orrs	r3, r2
 800b054:	d01e      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b062:	d10c      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	3328      	adds	r3, #40	; 0x28
 800b06a:	2102      	movs	r1, #2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f001 fc2d 	bl	800c8cc <RCCEx_PLL3_Config>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b07e:	4b6f      	ldr	r3, [pc, #444]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b082:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b08e:	4a6b      	ldr	r2, [pc, #428]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b090:	430b      	orrs	r3, r1
 800b092:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b0a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	d03e      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b0b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0bc:	d022      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b0be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0c2:	d81b      	bhi.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0cc:	d00b      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b0ce:	e015      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fb45 	bl	800c768 <RCCEx_PLL2_Config>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b0e4:	e00f      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	3328      	adds	r3, #40	; 0x28
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 fbec 	bl	800c8cc <RCCEx_PLL3_Config>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b0fa:	e004      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b102:	e000      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b104:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10b      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b10e:	4b4b      	ldr	r3, [pc, #300]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b112:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b11e:	4a47      	ldr	r2, [pc, #284]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b120:	430b      	orrs	r3, r1
 800b122:	6593      	str	r3, [r2, #88]	; 0x58
 800b124:	e003      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b12a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b13a:	673b      	str	r3, [r7, #112]	; 0x70
 800b13c:	2300      	movs	r3, #0
 800b13e:	677b      	str	r3, [r7, #116]	; 0x74
 800b140:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b144:	460b      	mov	r3, r1
 800b146:	4313      	orrs	r3, r2
 800b148:	d03b      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b156:	d01f      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b15c:	d818      	bhi.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b15e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b162:	d003      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b168:	d007      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b16a:	e011      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b16c:	4b33      	ldr	r3, [pc, #204]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	4a32      	ldr	r2, [pc, #200]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b178:	e00f      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17e:	3328      	adds	r3, #40	; 0x28
 800b180:	2101      	movs	r1, #1
 800b182:	4618      	mov	r0, r3
 800b184:	f001 fba2 	bl	800c8cc <RCCEx_PLL3_Config>
 800b188:	4603      	mov	r3, r0
 800b18a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b18e:	e004      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b196:	e000      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b19a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10b      	bne.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1a2:	4b26      	ldr	r3, [pc, #152]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b2:	4a22      	ldr	r2, [pc, #136]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1b4:	430b      	orrs	r3, r1
 800b1b6:	6553      	str	r3, [r2, #84]	; 0x54
 800b1b8:	e003      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b1ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d034      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ec:	d007      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b1ee:	e011      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1f0:	4b12      	ldr	r3, [pc, #72]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	4a11      	ldr	r2, [pc, #68]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b1fc:	e00e      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b202:	3308      	adds	r3, #8
 800b204:	2102      	movs	r1, #2
 800b206:	4618      	mov	r0, r3
 800b208:	f001 faae 	bl	800c768 <RCCEx_PLL2_Config>
 800b20c:	4603      	mov	r3, r0
 800b20e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10d      	bne.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b232:	4a02      	ldr	r2, [pc, #8]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b234:	430b      	orrs	r3, r1
 800b236:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b238:	e006      	b.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b23a:	bf00      	nop
 800b23c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b244:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b254:	663b      	str	r3, [r7, #96]	; 0x60
 800b256:	2300      	movs	r3, #0
 800b258:	667b      	str	r3, [r7, #100]	; 0x64
 800b25a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b25e:	460b      	mov	r3, r1
 800b260:	4313      	orrs	r3, r2
 800b262:	d00c      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b268:	3328      	adds	r3, #40	; 0x28
 800b26a:	2102      	movs	r1, #2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f001 fb2d 	bl	800c8cc <RCCEx_PLL3_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b28a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b28c:	2300      	movs	r3, #0
 800b28e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b290:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d036      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2a4:	d018      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b2a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2aa:	d811      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b0:	d014      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b6:	d80b      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d011      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b2bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c0:	d106      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c2:	4bb7      	ldr	r3, [pc, #732]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	4ab6      	ldr	r2, [pc, #728]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2d6:	e004      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b2d8:	bf00      	nop
 800b2da:	e002      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b2e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2ea:	4bad      	ldr	r3, [pc, #692]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f8:	4aa9      	ldr	r2, [pc, #676]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2fa:	430b      	orrs	r3, r1
 800b2fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b2fe:	e003      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b300:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b304:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b314:	653b      	str	r3, [r7, #80]	; 0x50
 800b316:	2300      	movs	r3, #0
 800b318:	657b      	str	r3, [r7, #84]	; 0x54
 800b31a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b31e:	460b      	mov	r3, r1
 800b320:	4313      	orrs	r3, r2
 800b322:	d009      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b324:	4b9e      	ldr	r3, [pc, #632]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b328:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b332:	4a9b      	ldr	r2, [pc, #620]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b334:	430b      	orrs	r3, r1
 800b336:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b344:	64bb      	str	r3, [r7, #72]	; 0x48
 800b346:	2300      	movs	r3, #0
 800b348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b34a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b34e:	460b      	mov	r3, r1
 800b350:	4313      	orrs	r3, r2
 800b352:	d009      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b354:	4b92      	ldr	r3, [pc, #584]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b362:	4a8f      	ldr	r2, [pc, #572]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b364:	430b      	orrs	r3, r1
 800b366:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b374:	643b      	str	r3, [r7, #64]	; 0x40
 800b376:	2300      	movs	r3, #0
 800b378:	647b      	str	r3, [r7, #68]	; 0x44
 800b37a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b37e:	460b      	mov	r3, r1
 800b380:	4313      	orrs	r3, r2
 800b382:	d00e      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b384:	4b86      	ldr	r3, [pc, #536]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	4a85      	ldr	r2, [pc, #532]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b38a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b38e:	6113      	str	r3, [r2, #16]
 800b390:	4b83      	ldr	r3, [pc, #524]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b392:	6919      	ldr	r1, [r3, #16]
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b39c:	4a80      	ldr	r2, [pc, #512]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b3ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	d009      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3be:	4b78      	ldr	r3, [pc, #480]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3cc:	4a74      	ldr	r2, [pc, #464]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b3de:	633b      	str	r3, [r7, #48]	; 0x30
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	d00a      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3ee:	4b6c      	ldr	r3, [pc, #432]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fe:	4a68      	ldr	r2, [pc, #416]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b400:	430b      	orrs	r3, r1
 800b402:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	2100      	movs	r1, #0
 800b40e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b416:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b41a:	460b      	mov	r3, r1
 800b41c:	4313      	orrs	r3, r2
 800b41e:	d011      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b424:	3308      	adds	r3, #8
 800b426:	2100      	movs	r1, #0
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 f99d 	bl	800c768 <RCCEx_PLL2_Config>
 800b42e:	4603      	mov	r3, r0
 800b430:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d003      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b43c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	2100      	movs	r1, #0
 800b44e:	6239      	str	r1, [r7, #32]
 800b450:	f003 0302 	and.w	r3, r3, #2
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
 800b456:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b45a:	460b      	mov	r3, r1
 800b45c:	4313      	orrs	r3, r2
 800b45e:	d011      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b464:	3308      	adds	r3, #8
 800b466:	2101      	movs	r1, #1
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 f97d 	bl	800c768 <RCCEx_PLL2_Config>
 800b46e:	4603      	mov	r3, r0
 800b470:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b474:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b47c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b480:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48c:	2100      	movs	r1, #0
 800b48e:	61b9      	str	r1, [r7, #24]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	61fb      	str	r3, [r7, #28]
 800b496:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b49a:	460b      	mov	r3, r1
 800b49c:	4313      	orrs	r3, r2
 800b49e:	d011      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	2102      	movs	r1, #2
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 f95d 	bl	800c768 <RCCEx_PLL2_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	6139      	str	r1, [r7, #16]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	d011      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e4:	3328      	adds	r3, #40	; 0x28
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f001 f9ef 	bl	800c8cc <RCCEx_PLL3_Config>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b4f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	2100      	movs	r1, #0
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	f003 0310 	and.w	r3, r3, #16
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b51a:	460b      	mov	r3, r1
 800b51c:	4313      	orrs	r3, r2
 800b51e:	d011      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b524:	3328      	adds	r3, #40	; 0x28
 800b526:	2101      	movs	r1, #1
 800b528:	4618      	mov	r0, r3
 800b52a:	f001 f9cf 	bl	800c8cc <RCCEx_PLL3_Config>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b540:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	2100      	movs	r1, #0
 800b54e:	6039      	str	r1, [r7, #0]
 800b550:	f003 0320 	and.w	r3, r3, #32
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b55a:	460b      	mov	r3, r1
 800b55c:	4313      	orrs	r3, r2
 800b55e:	d011      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	3328      	adds	r3, #40	; 0x28
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f001 f9af 	bl	800c8cc <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b57c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b584:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e000      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
}
 800b592:	4618      	mov	r0, r3
 800b594:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b598:	46bd      	mov	sp, r7
 800b59a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b59e:	bf00      	nop
 800b5a0:	58024400 	.word	0x58024400

0800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b090      	sub	sp, #64	; 0x40
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	f040 8094 	bne.w	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b5bc:	4b9b      	ldr	r3, [pc, #620]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	f200 8087 	bhi.w	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b5ce:	a201      	add	r2, pc, #4	; (adr r2, 800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d4:	0800b5e9 	.word	0x0800b5e9
 800b5d8:	0800b611 	.word	0x0800b611
 800b5dc:	0800b639 	.word	0x0800b639
 800b5e0:	0800b6d5 	.word	0x0800b6d5
 800b5e4:	0800b661 	.word	0x0800b661
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5e8:	4b90      	ldr	r3, [pc, #576]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5f4:	d108      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 ff62 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b604:	f000 bc93 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b60c:	f000 bc8f 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b610:	4b86      	ldr	r3, [pc, #536]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b61c:	d108      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b61e:	f107 0318 	add.w	r3, r7, #24
 800b622:	4618      	mov	r0, r3
 800b624:	f000 fca6 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b62c:	f000 bc7f 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b634:	f000 bc7b 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b638:	4b7c      	ldr	r3, [pc, #496]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b644:	d108      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b646:	f107 030c 	add.w	r3, r7, #12
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fde6 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b654:	f000 bc6b 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65c:	f000 bc67 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b660:	4b72      	ldr	r3, [pc, #456]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b668:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b66a:	4b70      	ldr	r3, [pc, #448]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b04      	cmp	r3, #4
 800b674:	d10c      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b67c:	4b6b      	ldr	r3, [pc, #428]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	08db      	lsrs	r3, r3, #3
 800b682:	f003 0303 	and.w	r3, r3, #3
 800b686:	4a6a      	ldr	r2, [pc, #424]	; (800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
 800b68c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b68e:	e01f      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b690:	4b66      	ldr	r3, [pc, #408]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b69c:	d106      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6a4:	d102      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6a6:	4b63      	ldr	r3, [pc, #396]	; (800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6aa:	e011      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6ac:	4b5f      	ldr	r3, [pc, #380]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b8:	d106      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6c2:	4b5d      	ldr	r3, [pc, #372]	; (800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c6:	e003      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6cc:	f000 bc2f 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6d0:	f000 bc2d 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6d4:	4b59      	ldr	r3, [pc, #356]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d8:	f000 bc29 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e0:	f000 bc25 	b.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	f040 80a7 	bne.w	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b6f2:	4b4e      	ldr	r3, [pc, #312]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b6fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b702:	d054      	beq.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b70a:	f200 808b 	bhi.w	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b714:	f000 8083 	beq.w	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b71e:	f200 8081 	bhi.w	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b728:	d02f      	beq.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b730:	d878      	bhi.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b73e:	d012      	beq.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b740:	e070      	b.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b742:	4b3a      	ldr	r3, [pc, #232]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b74e:	d107      	bne.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b754:	4618      	mov	r0, r3
 800b756:	f000 feb5 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b75e:	e3e6      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b764:	e3e3      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b766:	4b31      	ldr	r3, [pc, #196]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b76e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b772:	d107      	bne.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b774:	f107 0318 	add.w	r3, r7, #24
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 fbfb 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b782:	e3d4      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b784:	2300      	movs	r3, #0
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b788:	e3d1      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b78a:	4b28      	ldr	r3, [pc, #160]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b796:	d107      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fd3d 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a6:	e3c2      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ac:	e3bf      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7ae:	4b1f      	ldr	r3, [pc, #124]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7b8:	4b1c      	ldr	r3, [pc, #112]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	d10c      	bne.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d109      	bne.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ca:	4b18      	ldr	r3, [pc, #96]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	4a16      	ldr	r2, [pc, #88]	; (800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7dc:	e01e      	b.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7de:	4b13      	ldr	r3, [pc, #76]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ea:	d106      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7f2:	d102      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7f8:	e010      	b.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7fa:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b806:	d106      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b80e:	d102      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b810:	4b09      	ldr	r3, [pc, #36]	; (800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b814:	e002      	b.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b81a:	e388      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b81c:	e387      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b822:	e384      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b828:	e381      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
 800b830:	03d09000 	.word	0x03d09000
 800b834:	003d0900 	.word	0x003d0900
 800b838:	02faf080 	.word	0x02faf080
 800b83c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b844:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b848:	430b      	orrs	r3, r1
 800b84a:	f040 809c 	bne.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b84e:	4b9e      	ldr	r3, [pc, #632]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b852:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b856:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b85e:	d054      	beq.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b866:	f200 808b 	bhi.w	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b870:	f000 8083 	beq.w	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b87a:	f200 8081 	bhi.w	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b884:	d02f      	beq.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b88c:	d878      	bhi.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	2b00      	cmp	r3, #0
 800b892:	d004      	beq.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b89a:	d012      	beq.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b89c:	e070      	b.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b89e:	4b8a      	ldr	r3, [pc, #552]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8aa:	d107      	bne.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fe07 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ba:	e338      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8c0:	e335      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8c2:	4b81      	ldr	r3, [pc, #516]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8ce:	d107      	bne.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d0:	f107 0318 	add.w	r3, r7, #24
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fb4d 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8de:	e326      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e4:	e323      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8e6:	4b78      	ldr	r3, [pc, #480]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f2:	d107      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f4:	f107 030c 	add.w	r3, r7, #12
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f000 fc8f 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b902:	e314      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b908:	e311      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b90a:	4b6f      	ldr	r3, [pc, #444]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b90e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b912:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b914:	4b6c      	ldr	r3, [pc, #432]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d10c      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b926:	4b68      	ldr	r3, [pc, #416]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	08db      	lsrs	r3, r3, #3
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	4a66      	ldr	r2, [pc, #408]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b938:	e01e      	b.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b93a:	4b63      	ldr	r3, [pc, #396]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d106      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b94e:	d102      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b950:	4b5f      	ldr	r3, [pc, #380]	; (800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b954:	e010      	b.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b956:	4b5c      	ldr	r3, [pc, #368]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b962:	d106      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b96a:	d102      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b96c:	4b59      	ldr	r3, [pc, #356]	; (800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b970:	e002      	b.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b976:	e2da      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b978:	e2d9      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b97a:	4b57      	ldr	r3, [pc, #348]	; (800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b97e:	e2d6      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b984:	e2d3      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b98e:	430b      	orrs	r3, r1
 800b990:	f040 80a7 	bne.w	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b994:	4b4c      	ldr	r3, [pc, #304]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b998:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b99c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9a4:	d055      	beq.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9ac:	f200 8096 	bhi.w	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9b6:	f000 8084 	beq.w	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9c0:	f200 808c 	bhi.w	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ca:	d030      	beq.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9d2:	f200 8083 	bhi.w	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9e2:	d012      	beq.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b9e4:	e07a      	b.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9e6:	4b38      	ldr	r3, [pc, #224]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9f2:	d107      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 fd63 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba02:	e294      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba08:	e291      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba0a:	4b2f      	ldr	r3, [pc, #188]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba16:	d107      	bne.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba18:	f107 0318 	add.w	r3, r7, #24
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 faa9 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba26:	e282      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba2c:	e27f      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba2e:	4b26      	ldr	r3, [pc, #152]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3a:	d107      	bne.n	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba3c:	f107 030c 	add.w	r3, r7, #12
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 fbeb 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba4a:	e270      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba50:	e26d      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba52:	4b1d      	ldr	r3, [pc, #116]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba5c:	4b1a      	ldr	r3, [pc, #104]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d10c      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ba68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d109      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba6e:	4b16      	ldr	r3, [pc, #88]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	08db      	lsrs	r3, r3, #3
 800ba74:	f003 0303 	and.w	r3, r3, #3
 800ba78:	4a14      	ldr	r2, [pc, #80]	; (800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ba7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba80:	e01e      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba82:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba8e:	d106      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ba90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba96:	d102      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba98:	4b0d      	ldr	r3, [pc, #52]	; (800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba9c:	e010      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba9e:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baaa:	d106      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800baac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab2:	d102      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab8:	e002      	b.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800babe:	e236      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bac0:	e235      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bac2:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac6:	e232      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bac8:	58024400 	.word	0x58024400
 800bacc:	03d09000 	.word	0x03d09000
 800bad0:	003d0900 	.word	0x003d0900
 800bad4:	02faf080 	.word	0x02faf080
 800bad8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae0:	e225      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bae6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800baea:	430b      	orrs	r3, r1
 800baec:	f040 8085 	bne.w	800bbfa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800baf0:	4b9c      	ldr	r3, [pc, #624]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800baf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800baf8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb00:	d06b      	beq.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb08:	d874      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb10:	d056      	beq.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb18:	d86c      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb20:	d03b      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb28:	d864      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb30:	d021      	beq.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb38:	d85c      	bhi.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d004      	beq.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb46:	d004      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bb48:	e054      	b.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bb4a:	f7fe fb5f 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 800bb4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb50:	e1ed      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb52:	4b84      	ldr	r3, [pc, #528]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb5e:	d107      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb60:	f107 0318 	add.w	r3, r7, #24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 fa05 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb6e:	e1de      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb74:	e1db      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb76:	4b7b      	ldr	r3, [pc, #492]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb82:	d107      	bne.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fb47 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb92:	e1cc      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb98:	e1c9      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb9a:	4b72      	ldr	r3, [pc, #456]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0304 	and.w	r3, r3, #4
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	d109      	bne.n	800bbba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bba6:	4b6f      	ldr	r3, [pc, #444]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	08db      	lsrs	r3, r3, #3
 800bbac:	f003 0303 	and.w	r3, r3, #3
 800bbb0:	4a6d      	ldr	r2, [pc, #436]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bbb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb8:	e1b9      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbbe:	e1b6      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bbc0:	4b68      	ldr	r3, [pc, #416]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbcc:	d102      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bbce:	4b67      	ldr	r3, [pc, #412]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbd2:	e1ac      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd8:	e1a9      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bbda:	4b62      	ldr	r3, [pc, #392]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbe6:	d102      	bne.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bbe8:	4b61      	ldr	r3, [pc, #388]	; (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbec:	e19f      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf2:	e19c      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	e199      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bbfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbfe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bc02:	430b      	orrs	r3, r1
 800bc04:	d173      	bne.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bc06:	4b57      	ldr	r3, [pc, #348]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc0e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc16:	d02f      	beq.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1e:	d863      	bhi.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc2c:	d012      	beq.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bc2e:	e05b      	b.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc30:	4b4c      	ldr	r3, [pc, #304]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc3c:	d107      	bne.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc3e:	f107 0318 	add.w	r3, r7, #24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 f996 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc4c:	e16f      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc52:	e16c      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc54:	4b43      	ldr	r3, [pc, #268]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc60:	d107      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 fad8 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc70:	e15d      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc76:	e15a      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc78:	4b3a      	ldr	r3, [pc, #232]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc82:	4b38      	ldr	r3, [pc, #224]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0304 	and.w	r3, r3, #4
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d10c      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d109      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc94:	4b33      	ldr	r3, [pc, #204]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	08db      	lsrs	r3, r3, #3
 800bc9a:	f003 0303 	and.w	r3, r3, #3
 800bc9e:	4a32      	ldr	r2, [pc, #200]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bca0:	fa22 f303 	lsr.w	r3, r2, r3
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca6:	e01e      	b.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bca8:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb4:	d106      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcbc:	d102      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcbe:	4b2b      	ldr	r3, [pc, #172]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc2:	e010      	b.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcc4:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd0:	d106      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd8:	d102      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcda:	4b25      	ldr	r3, [pc, #148]	; (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcde:	e002      	b.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bce4:	e123      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bce6:	e122      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcec:	e11f      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bcee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcf2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bcf6:	430b      	orrs	r3, r1
 800bcf8:	d13c      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bcfa:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd02:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d004      	beq.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd10:	d012      	beq.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bd12:	e023      	b.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd14:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd20:	d107      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fbcc 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd30:	e0fd      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd36:	e0fa      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd38:	4b0a      	ldr	r3, [pc, #40]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd44:	d107      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd46:	f107 0318 	add.w	r3, r7, #24
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f912 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd54:	e0eb      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd5a:	e0e8      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd60:	e0e5      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd62:	bf00      	nop
 800bd64:	58024400 	.word	0x58024400
 800bd68:	03d09000 	.word	0x03d09000
 800bd6c:	003d0900 	.word	0x003d0900
 800bd70:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bd74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd78:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bd7c:	430b      	orrs	r3, r1
 800bd7e:	f040 8085 	bne.w	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bd82:	4b6d      	ldr	r3, [pc, #436]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bd8a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd92:	d06b      	beq.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd9a:	d874      	bhi.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda2:	d056      	beq.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdaa:	d86c      	bhi.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdb2:	d03b      	beq.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bdba:	d864      	bhi.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc2:	d021      	beq.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdca:	d85c      	bhi.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d004      	beq.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd8:	d004      	beq.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bdda:	e054      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bddc:	f000 f8b4 	bl	800bf48 <HAL_RCCEx_GetD3PCLK1Freq>
 800bde0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bde2:	e0a4      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bde4:	4b54      	ldr	r3, [pc, #336]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdf0:	d107      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf2:	f107 0318 	add.w	r3, r7, #24
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 f8bc 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be00:	e095      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be06:	e092      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be08:	4b4b      	ldr	r3, [pc, #300]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be14:	d107      	bne.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f9fe 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be24:	e083      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be2a:	e080      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be2c:	4b42      	ldr	r3, [pc, #264]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0304 	and.w	r3, r3, #4
 800be34:	2b04      	cmp	r3, #4
 800be36:	d109      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be38:	4b3f      	ldr	r3, [pc, #252]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	08db      	lsrs	r3, r3, #3
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	4a3e      	ldr	r2, [pc, #248]	; (800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800be44:	fa22 f303 	lsr.w	r3, r2, r3
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be4a:	e070      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be50:	e06d      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800be52:	4b39      	ldr	r3, [pc, #228]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be5e:	d102      	bne.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800be60:	4b37      	ldr	r3, [pc, #220]	; (800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be64:	e063      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6a:	e060      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be6c:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be78:	d102      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800be7a:	4b32      	ldr	r3, [pc, #200]	; (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7e:	e056      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be84:	e053      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be8a:	e050      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800be8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be90:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800be94:	430b      	orrs	r3, r1
 800be96:	d148      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800be98:	4b27      	ldr	r3, [pc, #156]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bea0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bea8:	d02a      	beq.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb0:	d838      	bhi.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d004      	beq.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bebe:	d00d      	beq.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bec0:	e030      	b.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bec2:	4b1d      	ldr	r3, [pc, #116]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bed0:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed4:	e02b      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beda:	e028      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bedc:	4b16      	ldr	r3, [pc, #88]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bee8:	d107      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800beea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fae8 	bl	800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef8:	e019      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befe:	e016      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf00:	4b0d      	ldr	r3, [pc, #52]	; (800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf0c:	d107      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf0e:	f107 0318 	add.w	r3, r7, #24
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f82e 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf1c:	e007      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf22:	e004      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	e001      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3740      	adds	r7, #64	; 0x40
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	58024400 	.word	0x58024400
 800bf3c:	03d09000 	.word	0x03d09000
 800bf40:	003d0900 	.word	0x003d0900
 800bf44:	02faf080 	.word	0x02faf080

0800bf48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bf4c:	f7fe f92e 	bl	800a1ac <HAL_RCC_GetHCLKFreq>
 800bf50:	4602      	mov	r2, r0
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	f003 0307 	and.w	r3, r3, #7
 800bf5c:	4904      	ldr	r1, [pc, #16]	; (800bf70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bf5e:	5ccb      	ldrb	r3, [r1, r3]
 800bf60:	f003 031f 	and.w	r3, r3, #31
 800bf64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	08017494 	.word	0x08017494

0800bf74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b089      	sub	sp, #36	; 0x24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf7c:	4ba1      	ldr	r3, [pc, #644]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf80:	f003 0303 	and.w	r3, r3, #3
 800bf84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bf86:	4b9f      	ldr	r3, [pc, #636]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	0b1b      	lsrs	r3, r3, #12
 800bf8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bf92:	4b9c      	ldr	r3, [pc, #624]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf96:	091b      	lsrs	r3, r3, #4
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bf9e:	4b99      	ldr	r3, [pc, #612]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa2:	08db      	lsrs	r3, r3, #3
 800bfa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	fb02 f303 	mul.w	r3, r2, r3
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8111 	beq.w	800c1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	f000 8083 	beq.w	800c0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	f200 80a1 	bhi.w	800c114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d056      	beq.n	800c08c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bfde:	e099      	b.n	800c114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfe0:	4b88      	ldr	r3, [pc, #544]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 0320 	and.w	r3, r3, #32
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02d      	beq.n	800c048 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfec:	4b85      	ldr	r3, [pc, #532]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	08db      	lsrs	r3, r3, #3
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	4a84      	ldr	r2, [pc, #528]	; (800c208 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bff8:	fa22 f303 	lsr.w	r3, r2, r3
 800bffc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	ee07 3a90 	vmov	s15, r3
 800c004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	ee07 3a90 	vmov	s15, r3
 800c00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c016:	4b7b      	ldr	r3, [pc, #492]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c026:	ed97 6a03 	vldr	s12, [r7, #12]
 800c02a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c046:	e087      	b.n	800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c210 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05a:	4b6a      	ldr	r3, [pc, #424]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c06e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c08a:	e065      	b.n	800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c096:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c09e:	4b59      	ldr	r3, [pc, #356]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ce:	e043      	b.n	800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e2:	4b48      	ldr	r3, [pc, #288]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ea:	ee07 3a90 	vmov	s15, r3
 800c0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c112:	e021      	b.n	800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c11e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c126:	4b37      	ldr	r3, [pc, #220]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12e:	ee07 3a90 	vmov	s15, r3
 800c132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c136:	ed97 6a03 	vldr	s12, [r7, #12]
 800c13a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c20c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c156:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c158:	4b2a      	ldr	r3, [pc, #168]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15c:	0a5b      	lsrs	r3, r3, #9
 800c15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c162:	ee07 3a90 	vmov	s15, r3
 800c166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c172:	edd7 6a07 	vldr	s13, [r7, #28]
 800c176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c17e:	ee17 2a90 	vmov	r2, s15
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c186:	4b1f      	ldr	r3, [pc, #124]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c190:	ee07 3a90 	vmov	s15, r3
 800c194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c19c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ac:	ee17 2a90 	vmov	r2, s15
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c1b4:	4b13      	ldr	r3, [pc, #76]	; (800c204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b8:	0e1b      	lsrs	r3, r3, #24
 800c1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1da:	ee17 2a90 	vmov	r2, s15
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c1e2:	e008      	b.n	800c1f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	609a      	str	r2, [r3, #8]
}
 800c1f6:	bf00      	nop
 800c1f8:	3724      	adds	r7, #36	; 0x24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	58024400 	.word	0x58024400
 800c208:	03d09000 	.word	0x03d09000
 800c20c:	46000000 	.word	0x46000000
 800c210:	4c742400 	.word	0x4c742400
 800c214:	4a742400 	.word	0x4a742400
 800c218:	4c3ebc20 	.word	0x4c3ebc20

0800c21c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b089      	sub	sp, #36	; 0x24
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c224:	4ba1      	ldr	r3, [pc, #644]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c228:	f003 0303 	and.w	r3, r3, #3
 800c22c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c22e:	4b9f      	ldr	r3, [pc, #636]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	0d1b      	lsrs	r3, r3, #20
 800c234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c238:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c23a:	4b9c      	ldr	r3, [pc, #624]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c246:	4b99      	ldr	r3, [pc, #612]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c24a:	08db      	lsrs	r3, r3, #3
 800c24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	fb02 f303 	mul.w	r3, r2, r3
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	f000 8111 	beq.w	800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	f000 8083 	beq.w	800c378 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b02      	cmp	r3, #2
 800c276:	f200 80a1 	bhi.w	800c3bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d056      	beq.n	800c334 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c286:	e099      	b.n	800c3bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c288:	4b88      	ldr	r3, [pc, #544]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0320 	and.w	r3, r3, #32
 800c290:	2b00      	cmp	r3, #0
 800c292:	d02d      	beq.n	800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c294:	4b85      	ldr	r3, [pc, #532]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	08db      	lsrs	r3, r3, #3
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	4a84      	ldr	r2, [pc, #528]	; (800c4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	ee07 3a90 	vmov	s15, r3
 800c2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2be:	4b7b      	ldr	r3, [pc, #492]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c2ee:	e087      	b.n	800c400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c4b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c302:	4b6a      	ldr	r3, [pc, #424]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c312:	ed97 6a03 	vldr	s12, [r7, #12]
 800c316:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c332:	e065      	b.n	800c400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c4bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c346:	4b59      	ldr	r3, [pc, #356]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c356:	ed97 6a03 	vldr	s12, [r7, #12]
 800c35a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c376:	e043      	b.n	800c400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c382:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38a:	4b48      	ldr	r3, [pc, #288]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c39e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3ba:	e021      	b.n	800c400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c4bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ce:	4b37      	ldr	r3, [pc, #220]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c400:	4b2a      	ldr	r3, [pc, #168]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c404:	0a5b      	lsrs	r3, r3, #9
 800c406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c426:	ee17 2a90 	vmov	r2, s15
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c42e:	4b1f      	ldr	r3, [pc, #124]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	0c1b      	lsrs	r3, r3, #16
 800c434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c438:	ee07 3a90 	vmov	s15, r3
 800c43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c444:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c448:	edd7 6a07 	vldr	s13, [r7, #28]
 800c44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c454:	ee17 2a90 	vmov	r2, s15
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c45c:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c460:	0e1b      	lsrs	r3, r3, #24
 800c462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c472:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c476:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c482:	ee17 2a90 	vmov	r2, s15
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c48a:	e008      	b.n	800c49e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	609a      	str	r2, [r3, #8]
}
 800c49e:	bf00      	nop
 800c4a0:	3724      	adds	r7, #36	; 0x24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	03d09000 	.word	0x03d09000
 800c4b4:	46000000 	.word	0x46000000
 800c4b8:	4c742400 	.word	0x4c742400
 800c4bc:	4a742400 	.word	0x4a742400
 800c4c0:	4c3ebc20 	.word	0x4c3ebc20

0800c4c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b089      	sub	sp, #36	; 0x24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4cc:	4ba0      	ldr	r3, [pc, #640]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	f003 0303 	and.w	r3, r3, #3
 800c4d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c4d6:	4b9e      	ldr	r3, [pc, #632]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	091b      	lsrs	r3, r3, #4
 800c4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c4e2:	4b9b      	ldr	r3, [pc, #620]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c4ec:	4b98      	ldr	r3, [pc, #608]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f0:	08db      	lsrs	r3, r3, #3
 800c4f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c504:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 8111 	beq.w	800c732 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	2b02      	cmp	r3, #2
 800c514:	f000 8083 	beq.w	800c61e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	f200 80a1 	bhi.w	800c662 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d056      	beq.n	800c5da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c52c:	e099      	b.n	800c662 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c52e:	4b88      	ldr	r3, [pc, #544]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0320 	and.w	r3, r3, #32
 800c536:	2b00      	cmp	r3, #0
 800c538:	d02d      	beq.n	800c596 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53a:	4b85      	ldr	r3, [pc, #532]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	08db      	lsrs	r3, r3, #3
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	4a83      	ldr	r2, [pc, #524]	; (800c754 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c546:	fa22 f303 	lsr.w	r3, r2, r3
 800c54a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	ee07 3a90 	vmov	s15, r3
 800c552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	ee07 3a90 	vmov	s15, r3
 800c55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c564:	4b7a      	ldr	r3, [pc, #488]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c574:	ed97 6a03 	vldr	s12, [r7, #12]
 800c578:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c590:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c594:	e087      	b.n	800c6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	ee07 3a90 	vmov	s15, r3
 800c59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c75c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c5a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5a8:	4b69      	ldr	r3, [pc, #420]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5d8:	e065      	b.n	800c6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c760 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c5e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ec:	4b58      	ldr	r3, [pc, #352]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f4:	ee07 3a90 	vmov	s15, r3
 800c5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c600:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c61c:	e043      	b.n	800c6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	ee07 3a90 	vmov	s15, r3
 800c624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c628:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c764 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c62c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c630:	4b47      	ldr	r3, [pc, #284]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c638:	ee07 3a90 	vmov	s15, r3
 800c63c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c640:	ed97 6a03 	vldr	s12, [r7, #12]
 800c644:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c64c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c65c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c660:	e021      	b.n	800c6a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	ee07 3a90 	vmov	s15, r3
 800c668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c75c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c674:	4b36      	ldr	r3, [pc, #216]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c67c:	ee07 3a90 	vmov	s15, r3
 800c680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c684:	ed97 6a03 	vldr	s12, [r7, #12]
 800c688:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c68c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c6a6:	4b2a      	ldr	r3, [pc, #168]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6aa:	0a5b      	lsrs	r3, r3, #9
 800c6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b0:	ee07 3a90 	vmov	s15, r3
 800c6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6cc:	ee17 2a90 	vmov	r2, s15
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c6d4:	4b1e      	ldr	r3, [pc, #120]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	0c1b      	lsrs	r3, r3, #16
 800c6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6fa:	ee17 2a90 	vmov	r2, s15
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c702:	4b13      	ldr	r3, [pc, #76]	; (800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c706:	0e1b      	lsrs	r3, r3, #24
 800c708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70c:	ee07 3a90 	vmov	s15, r3
 800c710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c71c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c728:	ee17 2a90 	vmov	r2, s15
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c730:	e008      	b.n	800c744 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	609a      	str	r2, [r3, #8]
}
 800c744:	bf00      	nop
 800c746:	3724      	adds	r7, #36	; 0x24
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	58024400 	.word	0x58024400
 800c754:	03d09000 	.word	0x03d09000
 800c758:	46000000 	.word	0x46000000
 800c75c:	4c742400 	.word	0x4c742400
 800c760:	4a742400 	.word	0x4a742400
 800c764:	4c3ebc20 	.word	0x4c3ebc20

0800c768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c776:	4b53      	ldr	r3, [pc, #332]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d101      	bne.n	800c786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e099      	b.n	800c8ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c786:	4b4f      	ldr	r3, [pc, #316]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a4e      	ldr	r2, [pc, #312]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c78c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c792:	f7f6 fe93 	bl	80034bc <HAL_GetTick>
 800c796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c798:	e008      	b.n	800c7ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c79a:	f7f6 fe8f 	bl	80034bc <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d901      	bls.n	800c7ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e086      	b.n	800c8ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c7ac:	4b45      	ldr	r3, [pc, #276]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f0      	bne.n	800c79a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c7b8:	4b42      	ldr	r3, [pc, #264]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	031b      	lsls	r3, r3, #12
 800c7c6:	493f      	ldr	r1, [pc, #252]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	628b      	str	r3, [r1, #40]	; 0x28
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	025b      	lsls	r3, r3, #9
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	041b      	lsls	r3, r3, #16
 800c7ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	061b      	lsls	r3, r3, #24
 800c7f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7fc:	4931      	ldr	r1, [pc, #196]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c7fe:	4313      	orrs	r3, r2
 800c800:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c802:	4b30      	ldr	r3, [pc, #192]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	492d      	ldr	r1, [pc, #180]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c810:	4313      	orrs	r3, r2
 800c812:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c814:	4b2b      	ldr	r3, [pc, #172]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c818:	f023 0220 	bic.w	r2, r3, #32
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	4928      	ldr	r1, [pc, #160]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c822:	4313      	orrs	r3, r2
 800c824:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c826:	4b27      	ldr	r3, [pc, #156]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	4a26      	ldr	r2, [pc, #152]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c82c:	f023 0310 	bic.w	r3, r3, #16
 800c830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c832:	4b24      	ldr	r3, [pc, #144]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c836:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <RCCEx_PLL2_Config+0x160>)
 800c838:	4013      	ands	r3, r2
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	69d2      	ldr	r2, [r2, #28]
 800c83e:	00d2      	lsls	r2, r2, #3
 800c840:	4920      	ldr	r1, [pc, #128]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c842:	4313      	orrs	r3, r2
 800c844:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c846:	4b1f      	ldr	r3, [pc, #124]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84a:	4a1e      	ldr	r2, [pc, #120]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c84c:	f043 0310 	orr.w	r3, r3, #16
 800c850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d106      	bne.n	800c866 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c858:	4b1a      	ldr	r3, [pc, #104]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	4a19      	ldr	r2, [pc, #100]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c85e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c862:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c864:	e00f      	b.n	800c886 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d106      	bne.n	800c87a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c86c:	4b15      	ldr	r3, [pc, #84]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	4a14      	ldr	r2, [pc, #80]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c876:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c878:	e005      	b.n	800c886 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c87a:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87e:	4a11      	ldr	r2, [pc, #68]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c884:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a0e      	ldr	r2, [pc, #56]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c88c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c892:	f7f6 fe13 	bl	80034bc <HAL_GetTick>
 800c896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c898:	e008      	b.n	800c8ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c89a:	f7f6 fe0f 	bl	80034bc <HAL_GetTick>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d901      	bls.n	800c8ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e006      	b.n	800c8ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c8ac:	4b05      	ldr	r3, [pc, #20]	; (800c8c4 <RCCEx_PLL2_Config+0x15c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0f0      	beq.n	800c89a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	ffff0007 	.word	0xffff0007

0800c8cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8da:	4b53      	ldr	r3, [pc, #332]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8de:	f003 0303 	and.w	r3, r3, #3
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d101      	bne.n	800c8ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e099      	b.n	800ca1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c8ea:	4b4f      	ldr	r3, [pc, #316]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a4e      	ldr	r2, [pc, #312]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c8f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8f6:	f7f6 fde1 	bl	80034bc <HAL_GetTick>
 800c8fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8fc:	e008      	b.n	800c910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c8fe:	f7f6 fddd 	bl	80034bc <HAL_GetTick>
 800c902:	4602      	mov	r2, r0
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	2b02      	cmp	r3, #2
 800c90a:	d901      	bls.n	800c910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c90c:	2303      	movs	r3, #3
 800c90e:	e086      	b.n	800ca1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c910:	4b45      	ldr	r3, [pc, #276]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f0      	bne.n	800c8fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c91c:	4b42      	ldr	r3, [pc, #264]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c920:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	051b      	lsls	r3, r3, #20
 800c92a:	493f      	ldr	r1, [pc, #252]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	628b      	str	r3, [r1, #40]	; 0x28
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	3b01      	subs	r3, #1
 800c936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	3b01      	subs	r3, #1
 800c940:	025b      	lsls	r3, r3, #9
 800c942:	b29b      	uxth	r3, r3
 800c944:	431a      	orrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	041b      	lsls	r3, r3, #16
 800c94e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c952:	431a      	orrs	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	3b01      	subs	r3, #1
 800c95a:	061b      	lsls	r3, r3, #24
 800c95c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c960:	4931      	ldr	r1, [pc, #196]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c962:	4313      	orrs	r3, r2
 800c964:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c966:	4b30      	ldr	r3, [pc, #192]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	492d      	ldr	r1, [pc, #180]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c974:	4313      	orrs	r3, r2
 800c976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c978:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	4928      	ldr	r1, [pc, #160]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c986:	4313      	orrs	r3, r2
 800c988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c98a:	4b27      	ldr	r3, [pc, #156]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98e:	4a26      	ldr	r2, [pc, #152]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c996:	4b24      	ldr	r3, [pc, #144]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <RCCEx_PLL3_Config+0x160>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	69d2      	ldr	r2, [r2, #28]
 800c9a2:	00d2      	lsls	r2, r2, #3
 800c9a4:	4920      	ldr	r1, [pc, #128]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c9aa:	4b1f      	ldr	r3, [pc, #124]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d106      	bne.n	800c9ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	4a19      	ldr	r2, [pc, #100]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c9c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9c8:	e00f      	b.n	800c9ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d106      	bne.n	800c9de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c9d0:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d4:	4a14      	ldr	r2, [pc, #80]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c9da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9dc:	e005      	b.n	800c9ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c9de:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e2:	4a11      	ldr	r2, [pc, #68]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c9e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a0e      	ldr	r2, [pc, #56]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800c9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9f6:	f7f6 fd61 	bl	80034bc <HAL_GetTick>
 800c9fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9fc:	e008      	b.n	800ca10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c9fe:	f7f6 fd5d 	bl	80034bc <HAL_GetTick>
 800ca02:	4602      	mov	r2, r0
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d901      	bls.n	800ca10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	e006      	b.n	800ca1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <RCCEx_PLL3_Config+0x15c>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0f0      	beq.n	800c9fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	58024400 	.word	0x58024400
 800ca2c:	ffff0007 	.word	0xffff0007

0800ca30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08a      	sub	sp, #40	; 0x28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e075      	b.n	800cb2e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d105      	bne.n	800ca5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7f5 fe9d 	bl	8002794 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2204      	movs	r2, #4
 800ca5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f868 	bl	800cb38 <HAL_SD_InitCard>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e05d      	b.n	800cb2e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ca72:	f107 0308 	add.w	r3, r7, #8
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fdaf 	bl	800d5dc <HAL_SD_GetCardStatus>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e052      	b.n	800cb2e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ca88:	7e3b      	ldrb	r3, [r7, #24]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ca8e:	7e7b      	ldrb	r3, [r7, #25]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d10a      	bne.n	800cab2 <HAL_SD_Init+0x82>
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d102      	bne.n	800caa8 <HAL_SD_Init+0x78>
 800caa2:	6a3b      	ldr	r3, [r7, #32]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caae:	659a      	str	r2, [r3, #88]	; 0x58
 800cab0:	e00b      	b.n	800caca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d104      	bne.n	800cac4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cac0:	659a      	str	r2, [r3, #88]	; 0x58
 800cac2:	e002      	b.n	800caca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fe6d 	bl	800d7b0 <HAL_SD_ConfigWideBusOperation>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e026      	b.n	800cb2e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cae0:	f7f6 fcec 	bl	80034bc <HAL_GetTick>
 800cae4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cae6:	e011      	b.n	800cb0c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cae8:	f7f6 fce8 	bl	80034bc <HAL_GetTick>
 800caec:	4602      	mov	r2, r0
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf6:	d109      	bne.n	800cb0c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cafe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e010      	b.n	800cb2e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 ff61 	bl	800d9d4 <HAL_SD_GetCardState>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d1e7      	bne.n	800cae8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3728      	adds	r7, #40	; 0x28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b08d      	sub	sp, #52	; 0x34
 800cb3c:	af02      	add	r7, sp, #8
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb54:	f04f 0100 	mov.w	r1, #0
 800cb58:	f7fe fd24 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb5c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d109      	bne.n	800cb78 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb72:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e070      	b.n	800cc5a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	0a1b      	lsrs	r3, r3, #8
 800cb7c:	4a39      	ldr	r2, [pc, #228]	; (800cc64 <HAL_SD_InitCard+0x12c>)
 800cb7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb82:	091b      	lsrs	r3, r3, #4
 800cb84:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681c      	ldr	r4, [r3, #0]
 800cb8a:	466a      	mov	r2, sp
 800cb8c:	f107 0318 	add.w	r3, r7, #24
 800cb90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb94:	e882 0003 	stmia.w	r2, {r0, r1}
 800cb98:	f107 030c 	add.w	r3, r7, #12
 800cb9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f004 fe6c 	bl	801187c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f004 feaf 	bl	801190c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbba:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbbe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d007      	beq.n	800cbd6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cbc6:	4a28      	ldr	r2, [pc, #160]	; (800cc68 <HAL_SD_InitCard+0x130>)
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbce:	3301      	adds	r3, #1
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7f6 fc7f 	bl	80034d4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 ffea 	bl	800dbb0 <SD_PowerON>
 800cbdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00b      	beq.n	800cbfc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e02e      	b.n	800cc5a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 ff09 	bl	800da14 <SD_InitCard>
 800cc02:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00b      	beq.n	800cc22 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e01b      	b.n	800cc5a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f004 ff04 	bl	8011a38 <SDMMC_CmdBlockLength>
 800cc30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00f      	beq.n	800cc58 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a0b      	ldr	r2, [pc, #44]	; (800cc6c <HAL_SD_InitCard+0x134>)
 800cc3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	372c      	adds	r7, #44	; 0x2c
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd90      	pop	{r4, r7, pc}
 800cc62:	bf00      	nop
 800cc64:	014f8b59 	.word	0x014f8b59
 800cc68:	00012110 	.word	0x00012110
 800cc6c:	1fe00fff 	.word	0x1fe00fff

0800cc70 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	; 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d107      	bne.n	800cc98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e08d      	b.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	f040 8086 	bne.w	800cdb2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d907      	bls.n	800ccca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e074      	b.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2203      	movs	r2, #3
 800ccce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	025a      	lsls	r2, r3, #9
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d002      	beq.n	800ccf6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	025b      	lsls	r3, r3, #9
 800ccf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	025b      	lsls	r3, r3, #9
 800cd00:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd02:	2390      	movs	r3, #144	; 0x90
 800cd04:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd06:	2302      	movs	r3, #2
 800cd08:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f107 0210 	add.w	r2, r7, #16
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f004 fe5f 	bl	80119e0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd30:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d90a      	bls.n	800cd5e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2282      	movs	r2, #130	; 0x82
 800cd4c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd54:	4618      	mov	r0, r3
 800cd56:	f004 feb5 	bl	8011ac4 <SDMMC_CmdReadMultiBlock>
 800cd5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd5c:	e009      	b.n	800cd72 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2281      	movs	r2, #129	; 0x81
 800cd62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f004 fe87 	bl	8011a7e <SDMMC_CmdReadSingleBlock>
 800cd70:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d012      	beq.n	800cd9e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a0f      	ldr	r2, [pc, #60]	; (800cdbc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cd7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	431a      	orrs	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e00a      	b.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cdac:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e000      	b.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cdb2:	2302      	movs	r3, #2
  }
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3730      	adds	r7, #48	; 0x30
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	1fe00fff 	.word	0x1fe00fff

0800cdc0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08c      	sub	sp, #48	; 0x30
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d107      	bne.n	800cde8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cddc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e08d      	b.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	f040 8086 	bne.w	800cf02 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	441a      	add	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d907      	bls.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e074      	b.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2203      	movs	r2, #3
 800ce1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2200      	movs	r2, #0
 800ce28:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	025a      	lsls	r2, r3, #9
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d002      	beq.n	800ce46 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	025b      	lsls	r3, r3, #9
 800ce44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce46:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	025b      	lsls	r3, r3, #9
 800ce50:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce52:	2390      	movs	r3, #144	; 0x90
 800ce54:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ce56:	2300      	movs	r3, #0
 800ce58:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f107 0210 	add.w	r2, r7, #16
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f004 fdb7 	bl	80119e0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce80:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d90a      	bls.n	800ceae <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	22a0      	movs	r2, #160	; 0xa0
 800ce9c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cea4:	4618      	mov	r0, r3
 800cea6:	f004 fe53 	bl	8011b50 <SDMMC_CmdWriteMultiBlock>
 800ceaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ceac:	e009      	b.n	800cec2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2290      	movs	r2, #144	; 0x90
 800ceb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceba:	4618      	mov	r0, r3
 800cebc:	f004 fe25 	bl	8011b0a <SDMMC_CmdWriteSingleBlock>
 800cec0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d012      	beq.n	800ceee <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a0f      	ldr	r2, [pc, #60]	; (800cf0c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cece:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	431a      	orrs	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e00a      	b.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cefc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e000      	b.n	800cf04 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cf02:	2302      	movs	r3, #2
  }
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3730      	adds	r7, #48	; 0x30
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	1fe00fff 	.word	0x1fe00fff

0800cf10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d008      	beq.n	800cf3e <HAL_SD_IRQHandler+0x2e>
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f003 0308 	and.w	r3, r3, #8
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f001 f926 	bl	800e188 <SD_Read_IT>
 800cf3c:	e19a      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 80ac 	beq.w	800d0a6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf56:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	4b59      	ldr	r3, [pc, #356]	; (800d0c8 <HAL_SD_IRQHandler+0x1b8>)
 800cf64:	400b      	ands	r3, r1
 800cf66:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cf76:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf86:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f003 0308 	and.w	r3, r3, #8
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d038      	beq.n	800d004 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f003 0302 	and.w	r3, r3, #2
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <HAL_SD_IRQHandler+0x96>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f003 0320 	and.w	r3, r3, #32
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d011      	beq.n	800cfca <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f004 fdf4 	bl	8011b98 <SDMMC_CmdStopTransfer>
 800cfb0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f95b 	bl	800d280 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a3f      	ldr	r2, [pc, #252]	; (800d0cc <HAL_SD_IRQHandler+0x1bc>)
 800cfd0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d104      	bne.n	800cff4 <HAL_SD_IRQHandler+0xe4>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d003      	beq.n	800cffc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f006 fdf5 	bl	8013be4 <HAL_SD_RxCpltCallback>
 800cffa:	e13b      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f006 fde7 	bl	8013bd0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d002:	e137      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 8132 	beq.w	800d274 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2200      	movs	r2, #0
 800d016:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2200      	movs	r2, #0
 800d01e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2200      	movs	r2, #0
 800d026:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d104      	bne.n	800d03c <HAL_SD_IRQHandler+0x12c>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d011      	beq.n	800d060 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	f004 fda9 	bl	8011b98 <SDMMC_CmdStopTransfer>
 800d046:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d008      	beq.n	800d060 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	431a      	orrs	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f910 	bl	800d280 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f003 0310 	and.w	r3, r3, #16
 800d074:	2b00      	cmp	r3, #0
 800d076:	d104      	bne.n	800d082 <HAL_SD_IRQHandler+0x172>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f003 0320 	and.w	r3, r3, #32
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f006 fda4 	bl	8013bd0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <HAL_SD_IRQHandler+0x18e>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f003 0302 	and.w	r3, r3, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 80eb 	beq.w	800d274 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f006 fda0 	bl	8013be4 <HAL_SD_RxCpltCallback>
}
 800d0a4:	e0e6      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00d      	beq.n	800d0d0 <HAL_SD_IRQHandler+0x1c0>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f003 0308 	and.w	r3, r3, #8
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d008      	beq.n	800d0d0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 f8a8 	bl	800e214 <SD_Write_IT>
 800d0c4:	e0d6      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
 800d0c6:	bf00      	nop
 800d0c8:	ffff3ec5 	.word	0xffff3ec5
 800d0cc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 809d 	beq.w	800d21a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e6:	f003 0302 	and.w	r3, r3, #2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d005      	beq.n	800d0fa <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f2:	f043 0202 	orr.w	r2, r3, #2
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d100:	f003 0308 	and.w	r3, r3, #8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d005      	beq.n	800d114 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10c:	f043 0208 	orr.w	r2, r3, #8
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11a:	f003 0320 	and.w	r3, r3, #32
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d005      	beq.n	800d12e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d126:	f043 0220 	orr.w	r2, r3, #32
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d134:	f003 0310 	and.w	r3, r3, #16
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d005      	beq.n	800d148 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d140:	f043 0210 	orr.w	r2, r3, #16
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a4b      	ldr	r2, [pc, #300]	; (800d27c <HAL_SD_IRQHandler+0x36c>)
 800d14e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d15e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68da      	ldr	r2, [r3, #12]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d16e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d17e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68da      	ldr	r2, [r3, #12]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d18e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f004 fcff 	bl	8011b98 <SDMMC_CmdStopTransfer>
 800d19a:	4602      	mov	r2, r0
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1b4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f003 0308 	and.w	r3, r3, #8
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f851 	bl	800d280 <HAL_SD_ErrorCallback>
}
 800d1de:	e049      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d044      	beq.n	800d274 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d040      	beq.n	800d274 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d200:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2200      	movs	r2, #0
 800d208:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f834 	bl	800d280 <HAL_SD_ErrorCallback>
}
 800d218:	e02c      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d025      	beq.n	800d274 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d230:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10c      	bne.n	800d25a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f003 0320 	and.w	r3, r3, #32
 800d246:	2b00      	cmp	r3, #0
 800d248:	d003      	beq.n	800d252 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f001 f84a 	bl	800e2e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d250:	e010      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f001 f832 	bl	800e2bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d258:	e00c      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f003 0320 	and.w	r3, r3, #32
 800d260:	2b00      	cmp	r3, #0
 800d262:	d003      	beq.n	800d26c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f001 f833 	bl	800e2d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d26a:	e003      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f001 f81b 	bl	800e2a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d272:	e7ff      	b.n	800d274 <HAL_SD_IRQHandler+0x364>
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	18000f3a 	.word	0x18000f3a

0800d280 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2a2:	0f9b      	lsrs	r3, r3, #30
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ae:	0e9b      	lsrs	r3, r3, #26
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	f003 030f 	and.w	r3, r3, #15
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2c0:	0e1b      	lsrs	r3, r3, #24
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d2:	0c1b      	lsrs	r3, r3, #16
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2de:	0a1b      	lsrs	r3, r3, #8
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2f4:	0d1b      	lsrs	r3, r3, #20
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d300:	0c1b      	lsrs	r3, r3, #16
 800d302:	b2db      	uxtb	r3, r3
 800d304:	f003 030f 	and.w	r3, r3, #15
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d312:	0bdb      	lsrs	r3, r3, #15
 800d314:	b2db      	uxtb	r3, r3
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d324:	0b9b      	lsrs	r3, r3, #14
 800d326:	b2db      	uxtb	r3, r3
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d336:	0b5b      	lsrs	r3, r3, #13
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d348:	0b1b      	lsrs	r3, r3, #12
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2200      	movs	r2, #0
 800d35a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d163      	bne.n	800d42c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d368:	009a      	lsls	r2, r3, #2
 800d36a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d36e:	4013      	ands	r3, r2
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d374:	0f92      	lsrs	r2, r2, #30
 800d376:	431a      	orrs	r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d380:	0edb      	lsrs	r3, r3, #27
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0307 	and.w	r3, r3, #7
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d392:	0e1b      	lsrs	r3, r3, #24
 800d394:	b2db      	uxtb	r3, r3
 800d396:	f003 0307 	and.w	r3, r3, #7
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a4:	0d5b      	lsrs	r3, r3, #21
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 0307 	and.w	r3, r3, #7
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b6:	0c9b      	lsrs	r3, r3, #18
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f003 0307 	and.w	r3, r3, #7
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c8:	0bdb      	lsrs	r3, r3, #15
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	f003 0307 	and.w	r3, r3, #7
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	7e1b      	ldrb	r3, [r3, #24]
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 0307 	and.w	r3, r3, #7
 800d3ea:	3302      	adds	r3, #2
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d3f6:	fb03 f202 	mul.w	r2, r3, r2
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	7a1b      	ldrb	r3, [r3, #8]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f003 030f 	and.w	r3, r3, #15
 800d408:	2201      	movs	r2, #1
 800d40a:	409a      	lsls	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d418:	0a52      	lsrs	r2, r2, #9
 800d41a:	fb03 f202 	mul.w	r2, r3, r2
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d428:	655a      	str	r2, [r3, #84]	; 0x54
 800d42a:	e031      	b.n	800d490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d430:	2b01      	cmp	r3, #1
 800d432:	d11d      	bne.n	800d470 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d438:	041b      	lsls	r3, r3, #16
 800d43a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d442:	0c1b      	lsrs	r3, r3, #16
 800d444:	431a      	orrs	r2, r3
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	3301      	adds	r3, #1
 800d450:	029a      	lsls	r2, r3, #10
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d464:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	655a      	str	r2, [r3, #84]	; 0x54
 800d46e:	e00f      	b.n	800d490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a58      	ldr	r2, [pc, #352]	; (800d5d8 <HAL_SD_GetCardCSD+0x344>)
 800d476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e09d      	b.n	800d5cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d494:	0b9b      	lsrs	r3, r3, #14
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4a6:	09db      	lsrs	r3, r3, #7
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4c8:	0fdb      	lsrs	r3, r3, #31
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4d4:	0f5b      	lsrs	r3, r3, #29
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	f003 0303 	and.w	r3, r3, #3
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4e6:	0e9b      	lsrs	r3, r3, #26
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 0307 	and.w	r3, r3, #7
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4f8:	0d9b      	lsrs	r3, r3, #22
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	f003 030f 	and.w	r3, r3, #15
 800d500:	b2da      	uxtb	r2, r3
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d50a:	0d5b      	lsrs	r3, r3, #21
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	b2da      	uxtb	r2, r3
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d526:	0c1b      	lsrs	r3, r3, #16
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d53a:	0bdb      	lsrs	r3, r3, #15
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	b2da      	uxtb	r2, r3
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d54e:	0b9b      	lsrs	r3, r3, #14
 800d550:	b2db      	uxtb	r3, r3
 800d552:	f003 0301 	and.w	r3, r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d562:	0b5b      	lsrs	r3, r3, #13
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d576:	0b1b      	lsrs	r3, r3, #12
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d58a:	0a9b      	lsrs	r3, r3, #10
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	b2da      	uxtb	r2, r3
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59e:	0a1b      	lsrs	r3, r3, #8
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b2:	085b      	lsrs	r3, r3, #1
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	1fe00fff 	.word	0x1fe00fff

0800d5dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b094      	sub	sp, #80	; 0x50
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b03      	cmp	r3, #3
 800d5f6:	d101      	bne.n	800d5fc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e0a7      	b.n	800d74c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d5fc:	f107 0308 	add.w	r3, r7, #8
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fb62 	bl	800dccc <SD_SendSDStatus>
 800d608:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d011      	beq.n	800d634 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a4f      	ldr	r2, [pc, #316]	; (800d754 <HAL_SD_GetCardStatus+0x178>)
 800d616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d61c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d61e:	431a      	orrs	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d632:	e070      	b.n	800d716 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	099b      	lsrs	r3, r3, #6
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	095b      	lsrs	r3, r3, #5
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	f003 0301 	and.w	r3, r3, #1
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	0a1b      	lsrs	r3, r3, #8
 800d658:	b29b      	uxth	r3, r3
 800d65a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d65e:	b29a      	uxth	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	0e1b      	lsrs	r3, r3, #24
 800d664:	b29b      	uxth	r3, r3
 800d666:	4313      	orrs	r3, r2
 800d668:	b29a      	uxth	r2, r3
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	061a      	lsls	r2, r3, #24
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	021b      	lsls	r3, r3, #8
 800d676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d67a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	0a1b      	lsrs	r3, r3, #8
 800d680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d684:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	0e1b      	lsrs	r3, r3, #24
 800d68a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	b2da      	uxtb	r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	0a1b      	lsrs	r3, r3, #8
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	0d1b      	lsrs	r3, r3, #20
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 030f 	and.w	r3, r3, #15
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	0c1b      	lsrs	r3, r3, #16
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	0a9b      	lsrs	r3, r3, #10
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	0a1b      	lsrs	r3, r3, #8
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0303 	and.w	r3, r3, #3
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	091b      	lsrs	r3, r3, #4
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 030f 	and.w	r3, r3, #15
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	b2db      	uxtb	r3, r3
 800d702:	f003 030f 	and.w	r3, r3, #15
 800d706:	b2da      	uxtb	r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	0e1b      	lsrs	r3, r3, #24
 800d710:	b2da      	uxtb	r2, r3
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d71e:	4618      	mov	r0, r3
 800d720:	f004 f98a 	bl	8011a38 <SDMMC_CmdBlockLength>
 800d724:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00d      	beq.n	800d748 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a08      	ldr	r2, [pc, #32]	; (800d754 <HAL_SD_GetCardStatus+0x178>)
 800d732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d738:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d748:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3750      	adds	r7, #80	; 0x50
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	1fe00fff 	.word	0x1fe00fff

0800d758 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b08d      	sub	sp, #52	; 0x34
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d02e      	beq.n	800d82e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7d6:	d106      	bne.n	800d7e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	635a      	str	r2, [r3, #52]	; 0x34
 800d7e4:	e029      	b.n	800d83a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7ec:	d10a      	bne.n	800d804 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fb64 	bl	800debc <SD_WideBus_Enable>
 800d7f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	431a      	orrs	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	635a      	str	r2, [r3, #52]	; 0x34
 800d802:	e01a      	b.n	800d83a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10a      	bne.n	800d820 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fba1 	bl	800df52 <SD_WideBus_Disable>
 800d810:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	431a      	orrs	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	635a      	str	r2, [r3, #52]	; 0x34
 800d81e:	e00c      	b.n	800d83a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d824:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	635a      	str	r2, [r3, #52]	; 0x34
 800d82c:	e005      	b.n	800d83a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d832:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d007      	beq.n	800d852 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a5f      	ldr	r2, [pc, #380]	; (800d9c4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d848:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d850:	e096      	b.n	800d980 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d852:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d856:	f04f 0100 	mov.w	r1, #0
 800d85a:	f7fd fea3 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d85e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 8083 	beq.w	800d96e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695a      	ldr	r2, [r3, #20]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4950      	ldr	r1, [pc, #320]	; (800d9c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d886:	fba1 1303 	umull	r1, r3, r1, r3
 800d88a:	0e1b      	lsrs	r3, r3, #24
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d303      	bcc.n	800d898 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	61bb      	str	r3, [r7, #24]
 800d896:	e05a      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8a0:	d103      	bne.n	800d8aa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	61bb      	str	r3, [r7, #24]
 800d8a8:	e051      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8b2:	d126      	bne.n	800d902 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10e      	bne.n	800d8da <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4a43      	ldr	r2, [pc, #268]	; (800d9cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d906      	bls.n	800d8d2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	4a40      	ldr	r2, [pc, #256]	; (800d9c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d8c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d8cc:	0e5b      	lsrs	r3, r3, #25
 800d8ce:	61bb      	str	r3, [r7, #24]
 800d8d0:	e03d      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	e039      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	69fa      	ldr	r2, [r7, #28]
 800d8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e6:	4a39      	ldr	r2, [pc, #228]	; (800d9cc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d906      	bls.n	800d8fa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	4a36      	ldr	r2, [pc, #216]	; (800d9c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f4:	0e5b      	lsrs	r3, r3, #25
 800d8f6:	61bb      	str	r3, [r7, #24]
 800d8f8:	e029      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	61bb      	str	r3, [r7, #24]
 800d900:	e025      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10e      	bne.n	800d928 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	4a30      	ldr	r2, [pc, #192]	; (800d9d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d906      	bls.n	800d920 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	4a2c      	ldr	r2, [pc, #176]	; (800d9c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d916:	fba2 2303 	umull	r2, r3, r2, r3
 800d91a:	0e1b      	lsrs	r3, r3, #24
 800d91c:	61bb      	str	r3, [r7, #24]
 800d91e:	e016      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	61bb      	str	r3, [r7, #24]
 800d926:	e012      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	69fa      	ldr	r2, [r7, #28]
 800d930:	fbb2 f3f3 	udiv	r3, r2, r3
 800d934:	4a26      	ldr	r2, [pc, #152]	; (800d9d0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d906      	bls.n	800d948 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	4a22      	ldr	r2, [pc, #136]	; (800d9c8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d93e:	fba2 2303 	umull	r2, r3, r2, r3
 800d942:	0e1b      	lsrs	r3, r3, #24
 800d944:	61bb      	str	r3, [r7, #24]
 800d946:	e002      	b.n	800d94e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	695b      	ldr	r3, [r3, #20]
 800d94c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681c      	ldr	r4, [r3, #0]
 800d952:	466a      	mov	r2, sp
 800d954:	f107 0314 	add.w	r3, r7, #20
 800d958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d95c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d960:	f107 0308 	add.w	r3, r7, #8
 800d964:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d966:	4620      	mov	r0, r4
 800d968:	f003 ff88 	bl	801187c <SDMMC_Init>
 800d96c:	e008      	b.n	800d980 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d988:	4618      	mov	r0, r3
 800d98a:	f004 f855 	bl	8011a38 <SDMMC_CmdBlockLength>
 800d98e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00c      	beq.n	800d9b0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a0a      	ldr	r2, [pc, #40]	; (800d9c4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d99c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	372c      	adds	r7, #44	; 0x2c
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd90      	pop	{r4, r7, pc}
 800d9c4:	1fe00fff 	.word	0x1fe00fff
 800d9c8:	55e63b89 	.word	0x55e63b89
 800d9cc:	02faf080 	.word	0x02faf080
 800d9d0:	017d7840 	.word	0x017d7840

0800d9d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d9e0:	f107 030c 	add.w	r3, r7, #12
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa40 	bl	800de6c <SD_SendStatus>
 800d9ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d005      	beq.n	800da00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	0a5b      	lsrs	r3, r3, #9
 800da04:	f003 030f 	and.w	r3, r3, #15
 800da08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800da0a:	693b      	ldr	r3, [r7, #16]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b090      	sub	sp, #64	; 0x40
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800da20:	f7f5 fd4c 	bl	80034bc <HAL_GetTick>
 800da24:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f003 ff7f 	bl	801192e <SDMMC_GetPowerState>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d102      	bne.n	800da3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da3a:	e0b5      	b.n	800dba8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da40:	2b03      	cmp	r3, #3
 800da42:	d02e      	beq.n	800daa2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4618      	mov	r0, r3
 800da4a:	f004 f9ca 	bl	8011de2 <SDMMC_CmdSendCID>
 800da4e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <SD_InitCard+0x46>
    {
      return errorstate;
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	e0a6      	b.n	800dba8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2100      	movs	r1, #0
 800da60:	4618      	mov	r0, r3
 800da62:	f003 ffaa 	bl	80119ba <SDMMC_GetResponse>
 800da66:	4602      	mov	r2, r0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2104      	movs	r1, #4
 800da72:	4618      	mov	r0, r3
 800da74:	f003 ffa1 	bl	80119ba <SDMMC_GetResponse>
 800da78:	4602      	mov	r2, r0
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2108      	movs	r1, #8
 800da84:	4618      	mov	r0, r3
 800da86:	f003 ff98 	bl	80119ba <SDMMC_GetResponse>
 800da8a:	4602      	mov	r2, r0
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	210c      	movs	r1, #12
 800da96:	4618      	mov	r0, r3
 800da98:	f003 ff8f 	bl	80119ba <SDMMC_GetResponse>
 800da9c:	4602      	mov	r2, r0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	d01d      	beq.n	800dae6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800daaa:	e019      	b.n	800dae0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f107 020a 	add.w	r2, r7, #10
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f004 f9d2 	bl	8011e60 <SDMMC_CmdSetRelAdd>
 800dabc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800dac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac6:	e06f      	b.n	800dba8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dac8:	f7f5 fcf8 	bl	80034bc <HAL_GetTick>
 800dacc:	4602      	mov	r2, r0
 800dace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	f241 3287 	movw	r2, #4999	; 0x1387
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d902      	bls.n	800dae0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dada:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dade:	e063      	b.n	800dba8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dae0:	897b      	ldrh	r3, [r7, #10]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0e2      	beq.n	800daac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daea:	2b03      	cmp	r3, #3
 800daec:	d036      	beq.n	800db5c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800daee:	897b      	ldrh	r3, [r7, #10]
 800daf0:	461a      	mov	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafe:	041b      	lsls	r3, r3, #16
 800db00:	4619      	mov	r1, r3
 800db02:	4610      	mov	r0, r2
 800db04:	f004 f98c 	bl	8011e20 <SDMMC_CmdSendCSD>
 800db08:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <SD_InitCard+0x100>
    {
      return errorstate;
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	e049      	b.n	800dba8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f003 ff4d 	bl	80119ba <SDMMC_GetResponse>
 800db20:	4602      	mov	r2, r0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2104      	movs	r1, #4
 800db2c:	4618      	mov	r0, r3
 800db2e:	f003 ff44 	bl	80119ba <SDMMC_GetResponse>
 800db32:	4602      	mov	r2, r0
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2108      	movs	r1, #8
 800db3e:	4618      	mov	r0, r3
 800db40:	f003 ff3b 	bl	80119ba <SDMMC_GetResponse>
 800db44:	4602      	mov	r2, r0
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	210c      	movs	r1, #12
 800db50:	4618      	mov	r0, r3
 800db52:	f003 ff32 	bl	80119ba <SDMMC_GetResponse>
 800db56:	4602      	mov	r2, r0
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2104      	movs	r1, #4
 800db62:	4618      	mov	r0, r3
 800db64:	f003 ff29 	bl	80119ba <SDMMC_GetResponse>
 800db68:	4603      	mov	r3, r0
 800db6a:	0d1a      	lsrs	r2, r3, #20
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db70:	f107 030c 	add.w	r3, r7, #12
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fb8c 	bl	800d294 <HAL_SD_GetCardCSD>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db86:	e00f      	b.n	800dba8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db90:	041b      	lsls	r3, r3, #16
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f004 f83b 	bl	8011c10 <SDMMC_CmdSelDesel>
 800db9a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <SD_InitCard+0x192>
  {
    return errorstate;
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	e000      	b.n	800dba8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3740      	adds	r7, #64	; 0x40
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f004 f844 	bl	8011c56 <SDMMC_CmdGoIdleState>
 800dbce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <SD_PowerON+0x2a>
  {
    return errorstate;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	e072      	b.n	800dcc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f004 f857 	bl	8011c92 <SDMMC_CmdOperCond>
 800dbe4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbec:	d10d      	bne.n	800dc0a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f004 f82c 	bl	8011c56 <SDMMC_CmdGoIdleState>
 800dbfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d004      	beq.n	800dc10 <SD_PowerON+0x60>
    {
      return errorstate;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	e05a      	b.n	800dcc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d137      	bne.n	800dc88 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f004 f857 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800dc24:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d02d      	beq.n	800dc88 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc30:	e046      	b.n	800dcc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2100      	movs	r1, #0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f004 f84a 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800dc3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <SD_PowerON+0x9a>
    {
      return errorstate;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	e03a      	b.n	800dcc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	491e      	ldr	r1, [pc, #120]	; (800dcc8 <SD_PowerON+0x118>)
 800dc50:	4618      	mov	r0, r3
 800dc52:	f004 f861 	bl	8011d18 <SDMMC_CmdAppOperCommand>
 800dc56:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc62:	e02d      	b.n	800dcc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f003 fea5 	bl	80119ba <SDMMC_GetResponse>
 800dc70:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	0fdb      	lsrs	r3, r3, #31
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d101      	bne.n	800dc7e <SD_PowerON+0xce>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e000      	b.n	800dc80 <SD_PowerON+0xd0>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	613b      	str	r3, [r7, #16]

    count++;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	3301      	adds	r3, #1
 800dc86:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d802      	bhi.n	800dc98 <SD_PowerON+0xe8>
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d0cc      	beq.n	800dc32 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d902      	bls.n	800dca8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dca6:	e00b      	b.n	800dcc0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	c1100000 	.word	0xc1100000

0800dccc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08c      	sub	sp, #48	; 0x30
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dcd6:	f7f5 fbf1 	bl	80034bc <HAL_GetTick>
 800dcda:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2100      	movs	r1, #0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f003 fe67 	bl	80119ba <SDMMC_GetResponse>
 800dcec:	4603      	mov	r3, r0
 800dcee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcf6:	d102      	bne.n	800dcfe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dcf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcfc:	e0b0      	b.n	800de60 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2140      	movs	r1, #64	; 0x40
 800dd04:	4618      	mov	r0, r3
 800dd06:	f003 fe97 	bl	8011a38 <SDMMC_CmdBlockLength>
 800dd0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dd1a:	6a3b      	ldr	r3, [r7, #32]
 800dd1c:	e0a0      	b.n	800de60 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd26:	041b      	lsls	r3, r3, #16
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f003 ffd1 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800dd30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d005      	beq.n	800dd44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	e08d      	b.n	800de60 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd44:	f04f 33ff 	mov.w	r3, #4294967295
 800dd48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800dd4a:	2340      	movs	r3, #64	; 0x40
 800dd4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800dd4e:	2360      	movs	r3, #96	; 0x60
 800dd50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dd52:	2302      	movs	r3, #2
 800dd54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f107 0208 	add.w	r2, r7, #8
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f003 fe39 	bl	80119e0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f004 f8b9 	bl	8011eea <SDMMC_CmdStatusRegister>
 800dd78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d02b      	beq.n	800ddd8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	e069      	b.n	800de60 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d013      	beq.n	800ddc2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd9e:	e00d      	b.n	800ddbc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f003 fd93 	bl	80118d0 <SDMMC_ReadFIFO>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	601a      	str	r2, [r3, #0]
        pData++;
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	3301      	adds	r3, #1
 800ddba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	2b07      	cmp	r3, #7
 800ddc0:	d9ee      	bls.n	800dda0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ddc2:	f7f5 fb7b 	bl	80034bc <HAL_GetTick>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd0:	d102      	bne.n	800ddd8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ddd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddd6:	e043      	b.n	800de60 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddde:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0d2      	beq.n	800dd8c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddec:	f003 0308 	and.w	r3, r3, #8
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	e033      	b.n	800de60 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfe:	f003 0302 	and.w	r3, r3, #2
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de06:	2302      	movs	r3, #2
 800de08:	e02a      	b.n	800de60 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de10:	f003 0320 	and.w	r3, r3, #32
 800de14:	2b00      	cmp	r3, #0
 800de16:	d017      	beq.n	800de48 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800de18:	2320      	movs	r3, #32
 800de1a:	e021      	b.n	800de60 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f003 fd55 	bl	80118d0 <SDMMC_ReadFIFO>
 800de26:	4602      	mov	r2, r0
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	601a      	str	r2, [r3, #0]
    pData++;
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	3304      	adds	r3, #4
 800de30:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800de32:	f7f5 fb43 	bl	80034bc <HAL_GetTick>
 800de36:	4602      	mov	r2, r0
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de40:	d102      	bne.n	800de48 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de46:	e00b      	b.n	800de60 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e2      	bne.n	800de1c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a03      	ldr	r2, [pc, #12]	; (800de68 <SD_SendSDStatus+0x19c>)
 800de5c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3730      	adds	r7, #48	; 0x30
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	18000f3a 	.word	0x18000f3a

0800de6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800de7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de80:	e018      	b.n	800deb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8a:	041b      	lsls	r3, r3, #16
 800de8c:	4619      	mov	r1, r3
 800de8e:	4610      	mov	r0, r2
 800de90:	f004 f808 	bl	8011ea4 <SDMMC_CmdSendStatus>
 800de94:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	e009      	b.n	800deb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2100      	movs	r1, #0
 800dea6:	4618      	mov	r0, r3
 800dea8:	f003 fd87 	bl	80119ba <SDMMC_GetResponse>
 800deac:	4602      	mov	r2, r0
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dec4:	2300      	movs	r3, #0
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	2300      	movs	r3, #0
 800deca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2100      	movs	r1, #0
 800ded2:	4618      	mov	r0, r3
 800ded4:	f003 fd71 	bl	80119ba <SDMMC_GetResponse>
 800ded8:	4603      	mov	r3, r0
 800deda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dee2:	d102      	bne.n	800deea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dee8:	e02f      	b.n	800df4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800deea:	f107 030c 	add.w	r3, r7, #12
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f879 	bl	800dfe8 <SD_FindSCR>
 800def6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	e023      	b.n	800df4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d01c      	beq.n	800df46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df14:	041b      	lsls	r3, r3, #16
 800df16:	4619      	mov	r1, r3
 800df18:	4610      	mov	r0, r2
 800df1a:	f003 feda 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800df1e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	e00f      	b.n	800df4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2102      	movs	r1, #2
 800df30:	4618      	mov	r0, r3
 800df32:	f003 ff11 	bl	8011d58 <SDMMC_CmdBusWidth>
 800df36:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	e003      	b.n	800df4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800df42:	2300      	movs	r3, #0
 800df44:	e001      	b.n	800df4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b086      	sub	sp, #24
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800df5a:	2300      	movs	r3, #0
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f003 fd26 	bl	80119ba <SDMMC_GetResponse>
 800df6e:	4603      	mov	r3, r0
 800df70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df78:	d102      	bne.n	800df80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df7e:	e02f      	b.n	800dfe0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df80:	f107 030c 	add.w	r3, r7, #12
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 f82e 	bl	800dfe8 <SD_FindSCR>
 800df8c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	e023      	b.n	800dfe0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d01c      	beq.n	800dfdc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfaa:	041b      	lsls	r3, r3, #16
 800dfac:	4619      	mov	r1, r3
 800dfae:	4610      	mov	r0, r2
 800dfb0:	f003 fe8f 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800dfb4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	e00f      	b.n	800dfe0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f003 fec6 	bl	8011d58 <SDMMC_CmdBusWidth>
 800dfcc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	e003      	b.n	800dfe0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e001      	b.n	800dfe0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3718      	adds	r7, #24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08e      	sub	sp, #56	; 0x38
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dff2:	f7f5 fa63 	bl	80034bc <HAL_GetTick>
 800dff6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dffc:	2300      	movs	r3, #0
 800dffe:	60bb      	str	r3, [r7, #8]
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2108      	movs	r1, #8
 800e00e:	4618      	mov	r0, r3
 800e010:	f003 fd12 	bl	8011a38 <SDMMC_CmdBlockLength>
 800e014:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	e0ad      	b.n	800e17c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e028:	041b      	lsls	r3, r3, #16
 800e02a:	4619      	mov	r1, r3
 800e02c:	4610      	mov	r0, r2
 800e02e:	f003 fe50 	bl	8011cd2 <SDMMC_CmdAppCommand>
 800e032:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	e09e      	b.n	800e17c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e03e:	f04f 33ff 	mov.w	r3, #4294967295
 800e042:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e044:	2308      	movs	r3, #8
 800e046:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e048:	2330      	movs	r3, #48	; 0x30
 800e04a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e04c:	2302      	movs	r3, #2
 800e04e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e050:	2300      	movs	r3, #0
 800e052:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e054:	2301      	movs	r3, #1
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f107 0210 	add.w	r2, r7, #16
 800e060:	4611      	mov	r1, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f003 fcbc 	bl	80119e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f003 fe96 	bl	8011d9e <SDMMC_CmdSendSCR>
 800e072:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	2b00      	cmp	r3, #0
 800e078:	d027      	beq.n	800e0ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07c:	e07e      	b.n	800e17c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d113      	bne.n	800e0b4 <SD_FindSCR+0xcc>
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d110      	bne.n	800e0b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4618      	mov	r0, r3
 800e098:	f003 fc1a 	bl	80118d0 <SDMMC_ReadFIFO>
 800e09c:	4603      	mov	r3, r0
 800e09e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f003 fc13 	bl	80118d0 <SDMMC_ReadFIFO>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	60fb      	str	r3, [r7, #12]
      index++;
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e0b4:	f7f5 fa02 	bl	80034bc <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c2:	d102      	bne.n	800e0ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0c8:	e058      	b.n	800e17c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0d0:	f240 532a 	movw	r3, #1322	; 0x52a
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0d1      	beq.n	800e07e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e0:	f003 0308 	and.w	r3, r3, #8
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d005      	beq.n	800e0f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2208      	movs	r2, #8
 800e0ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	e043      	b.n	800e17c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0fa:	f003 0302 	and.w	r3, r3, #2
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d005      	beq.n	800e10e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2202      	movs	r2, #2
 800e108:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e10a:	2302      	movs	r3, #2
 800e10c:	e036      	b.n	800e17c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d005      	beq.n	800e128 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2220      	movs	r2, #32
 800e122:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e124:	2320      	movs	r3, #32
 800e126:	e029      	b.n	800e17c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a15      	ldr	r2, [pc, #84]	; (800e184 <SD_FindSCR+0x19c>)
 800e12e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	061a      	lsls	r2, r3, #24
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	021b      	lsls	r3, r3, #8
 800e138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e13c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	0a1b      	lsrs	r3, r3, #8
 800e142:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e146:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	0e1b      	lsrs	r3, r3, #24
 800e14c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e150:	601a      	str	r2, [r3, #0]
    scr++;
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	3304      	adds	r3, #4
 800e156:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	061a      	lsls	r2, r3, #24
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	021b      	lsls	r3, r3, #8
 800e160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e164:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	0a1b      	lsrs	r3, r3, #8
 800e16a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e16e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	0e1b      	lsrs	r3, r3, #24
 800e174:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3738      	adds	r7, #56	; 0x38
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	18000f3a 	.word	0x18000f3a

0800e188 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e194:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19a:	2b1f      	cmp	r3, #31
 800e19c:	d936      	bls.n	800e20c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e19e:	2300      	movs	r3, #0
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	e027      	b.n	800e1f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f003 fb91 	bl	80118d0 <SDMMC_ReadFIFO>
 800e1ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	0a1b      	lsrs	r3, r3, #8
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	0c1b      	lsrs	r3, r3, #16
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	0e1b      	lsrs	r3, r3, #24
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b07      	cmp	r3, #7
 800e1f8:	d9d4      	bls.n	800e1a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	f1a3 0220 	sub.w	r2, r3, #32
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e20c:	bf00      	nop
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	2b1f      	cmp	r3, #31
 800e228:	d93a      	bls.n	800e2a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e22a:	2300      	movs	r3, #0
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	e02b      	b.n	800e288 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3301      	adds	r3, #1
 800e23a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	021a      	lsls	r2, r3, #8
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4313      	orrs	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	3301      	adds	r3, #1
 800e24c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	041a      	lsls	r2, r3, #16
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4313      	orrs	r3, r2
 800e258:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3301      	adds	r3, #1
 800e25e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	061a      	lsls	r2, r3, #24
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4313      	orrs	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	3301      	adds	r3, #1
 800e270:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f107 020c 	add.w	r2, r7, #12
 800e27a:	4611      	mov	r1, r2
 800e27c:	4618      	mov	r0, r3
 800e27e:	f003 fb34 	bl	80118ea <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	3301      	adds	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	d9d0      	bls.n	800e230 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	f1a3 0220 	sub.w	r2, r3, #32
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	621a      	str	r2, [r3, #32]
  }
}
 800e2a0:	bf00      	nop
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	e10f      	b.n	800e52a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a87      	ldr	r2, [pc, #540]	; (800e534 <HAL_SPI_Init+0x23c>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d00f      	beq.n	800e33a <HAL_SPI_Init+0x42>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a86      	ldr	r2, [pc, #536]	; (800e538 <HAL_SPI_Init+0x240>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d00a      	beq.n	800e33a <HAL_SPI_Init+0x42>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a84      	ldr	r2, [pc, #528]	; (800e53c <HAL_SPI_Init+0x244>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d005      	beq.n	800e33a <HAL_SPI_Init+0x42>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	2b0f      	cmp	r3, #15
 800e334:	d901      	bls.n	800e33a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e0f7      	b.n	800e52a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fd5a 	bl	800edf4 <SPI_GetPacketSize>
 800e340:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a7b      	ldr	r2, [pc, #492]	; (800e534 <HAL_SPI_Init+0x23c>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d00c      	beq.n	800e366 <HAL_SPI_Init+0x6e>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a79      	ldr	r2, [pc, #484]	; (800e538 <HAL_SPI_Init+0x240>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d007      	beq.n	800e366 <HAL_SPI_Init+0x6e>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a78      	ldr	r2, [pc, #480]	; (800e53c <HAL_SPI_Init+0x244>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d002      	beq.n	800e366 <HAL_SPI_Init+0x6e>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b08      	cmp	r3, #8
 800e364:	d811      	bhi.n	800e38a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e36a:	4a72      	ldr	r2, [pc, #456]	; (800e534 <HAL_SPI_Init+0x23c>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d009      	beq.n	800e384 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a70      	ldr	r2, [pc, #448]	; (800e538 <HAL_SPI_Init+0x240>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d004      	beq.n	800e384 <HAL_SPI_Init+0x8c>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a6f      	ldr	r2, [pc, #444]	; (800e53c <HAL_SPI_Init+0x244>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d104      	bne.n	800e38e <HAL_SPI_Init+0x96>
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b10      	cmp	r3, #16
 800e388:	d901      	bls.n	800e38e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e0cd      	b.n	800e52a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e394:	b2db      	uxtb	r3, r3
 800e396:	2b00      	cmp	r3, #0
 800e398:	d106      	bne.n	800e3a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f7f4 face 	bl	8002944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2202      	movs	r2, #2
 800e3ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f022 0201 	bic.w	r2, r2, #1
 800e3be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e3ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e3d4:	d119      	bne.n	800e40a <HAL_SPI_Init+0x112>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3de:	d103      	bne.n	800e3e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d008      	beq.n	800e3fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10c      	bne.n	800e40a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e3f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3f8:	d107      	bne.n	800e40a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e408:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00f      	beq.n	800e436 <HAL_SPI_Init+0x13e>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	2b06      	cmp	r3, #6
 800e41c:	d90b      	bls.n	800e436 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	430a      	orrs	r2, r1
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	e007      	b.n	800e446 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e444:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	69da      	ldr	r2, [r3, #28]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44e:	431a      	orrs	r2, r3
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	431a      	orrs	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e458:	ea42 0103 	orr.w	r1, r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68da      	ldr	r2, [r3, #12]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	430a      	orrs	r2, r1
 800e466:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e476:	431a      	orrs	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	699b      	ldr	r3, [r3, #24]
 800e47c:	431a      	orrs	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	431a      	orrs	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	431a      	orrs	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e49a:	431a      	orrs	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a6:	ea42 0103 	orr.w	r1, r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d113      	bne.n	800e4e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f022 0201 	bic.w	r2, r2, #1
 800e4f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00a      	beq.n	800e518 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	430a      	orrs	r2, r1
 800e516:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	40013000 	.word	0x40013000
 800e538:	40003800 	.word	0x40003800
 800e53c:	40003c00 	.word	0x40003c00

0800e540 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08a      	sub	sp, #40	; 0x28
 800e544:	af02      	add	r7, sp, #8
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	603b      	str	r3, [r7, #0]
 800e54c:	4613      	mov	r3, r2
 800e54e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3320      	adds	r3, #32
 800e556:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e562:	2b01      	cmp	r3, #1
 800e564:	d101      	bne.n	800e56a <HAL_SPI_Transmit+0x2a>
 800e566:	2302      	movs	r3, #2
 800e568:	e1e1      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e572:	f7f4 ffa3 	bl	80034bc <HAL_GetTick>
 800e576:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b01      	cmp	r3, #1
 800e582:	d007      	beq.n	800e594 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e584:	2302      	movs	r3, #2
 800e586:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e590:	7efb      	ldrb	r3, [r7, #27]
 800e592:	e1cc      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d002      	beq.n	800e5a0 <HAL_SPI_Transmit+0x60>
 800e59a:	88fb      	ldrh	r3, [r7, #6]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d107      	bne.n	800e5b0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e5ac:	7efb      	ldrb	r3, [r7, #27]
 800e5ae:	e1be      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2203      	movs	r2, #3
 800e5b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	88fa      	ldrh	r2, [r7, #6]
 800e5ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	88fa      	ldrh	r2, [r7, #6]
 800e5d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e600:	d108      	bne.n	800e614 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	e009      	b.n	800e628 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e626:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	4b96      	ldr	r3, [pc, #600]	; (800e888 <HAL_SPI_Transmit+0x348>)
 800e630:	4013      	ands	r3, r2
 800e632:	88f9      	ldrh	r1, [r7, #6]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	6812      	ldr	r2, [r2, #0]
 800e638:	430b      	orrs	r3, r1
 800e63a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f042 0201 	orr.w	r2, r2, #1
 800e64a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e654:	d107      	bne.n	800e666 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e664:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	2b0f      	cmp	r3, #15
 800e66c:	d947      	bls.n	800e6fe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e66e:	e03f      	b.n	800e6f0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	695b      	ldr	r3, [r3, #20]
 800e676:	f003 0302 	and.w	r3, r3, #2
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d114      	bne.n	800e6a8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6812      	ldr	r2, [r2, #0]
 800e688:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e68e:	1d1a      	adds	r2, r3, #4
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	3b01      	subs	r3, #1
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e6a6:	e023      	b.n	800e6f0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6a8:	f7f4 ff08 	bl	80034bc <HAL_GetTick>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d803      	bhi.n	800e6c0 <HAL_SPI_Transmit+0x180>
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6be:	d102      	bne.n	800e6c6 <HAL_SPI_Transmit+0x186>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d114      	bne.n	800e6f0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f000 fac6 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	e11e      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1b9      	bne.n	800e670 <HAL_SPI_Transmit+0x130>
 800e6fc:	e0f1      	b.n	800e8e2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	2b07      	cmp	r3, #7
 800e704:	f240 80e6 	bls.w	800e8d4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e708:	e05d      	b.n	800e7c6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	695b      	ldr	r3, [r3, #20]
 800e710:	f003 0302 	and.w	r3, r3, #2
 800e714:	2b02      	cmp	r3, #2
 800e716:	d132      	bne.n	800e77e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e71e:	b29b      	uxth	r3, r3
 800e720:	2b01      	cmp	r3, #1
 800e722:	d918      	bls.n	800e756 <HAL_SPI_Transmit+0x216>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d014      	beq.n	800e756 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e748:	b29b      	uxth	r3, r3
 800e74a:	3b02      	subs	r3, #2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e754:	e037      	b.n	800e7c6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e75a:	881a      	ldrh	r2, [r3, #0]
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e764:	1c9a      	adds	r2, r3, #2
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b01      	subs	r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e77c:	e023      	b.n	800e7c6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e77e:	f7f4 fe9d 	bl	80034bc <HAL_GetTick>
 800e782:	4602      	mov	r2, r0
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d803      	bhi.n	800e796 <HAL_SPI_Transmit+0x256>
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e794:	d102      	bne.n	800e79c <HAL_SPI_Transmit+0x25c>
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d114      	bne.n	800e7c6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f000 fa5b 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e0b3      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d19b      	bne.n	800e70a <HAL_SPI_Transmit+0x1ca>
 800e7d2:	e086      	b.n	800e8e2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d154      	bne.n	800e88c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d918      	bls.n	800e820 <HAL_SPI_Transmit+0x2e0>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f2:	2b40      	cmp	r3, #64	; 0x40
 800e7f4:	d914      	bls.n	800e820 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6812      	ldr	r2, [r2, #0]
 800e800:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e806:	1d1a      	adds	r2, r3, #4
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e812:	b29b      	uxth	r3, r3
 800e814:	3b04      	subs	r3, #4
 800e816:	b29a      	uxth	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e81e:	e059      	b.n	800e8d4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e826:	b29b      	uxth	r3, r3
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d917      	bls.n	800e85c <HAL_SPI_Transmit+0x31c>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e830:	2b00      	cmp	r3, #0
 800e832:	d013      	beq.n	800e85c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e838:	881a      	ldrh	r2, [r3, #0]
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e842:	1c9a      	adds	r2, r3, #2
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3b02      	subs	r3, #2
 800e852:	b29a      	uxth	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e85a:	e03b      	b.n	800e8d4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3320      	adds	r3, #32
 800e866:	7812      	ldrb	r2, [r2, #0]
 800e868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	3b01      	subs	r3, #1
 800e87e:	b29a      	uxth	r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e886:	e025      	b.n	800e8d4 <HAL_SPI_Transmit+0x394>
 800e888:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e88c:	f7f4 fe16 	bl	80034bc <HAL_GetTick>
 800e890:	4602      	mov	r2, r0
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d803      	bhi.n	800e8a4 <HAL_SPI_Transmit+0x364>
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a2:	d102      	bne.n	800e8aa <HAL_SPI_Transmit+0x36a>
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d114      	bne.n	800e8d4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 f9d4 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	e02c      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f47f af79 	bne.w	800e7d4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2108      	movs	r1, #8
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f000 fa53 	bl	800ed98 <SPI_WaitOnFlagUntilTimeout>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d007      	beq.n	800e908 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8fe:	f043 0220 	orr.w	r2, r3, #32
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f9a5 	bl	800ec58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2201      	movs	r2, #1
 800e91a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800e928:	2301      	movs	r3, #1
 800e92a:	e000      	b.n	800e92e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800e92c:	7efb      	ldrb	r3, [r7, #27]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3720      	adds	r7, #32
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop

0800e938 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	603b      	str	r3, [r7, #0]
 800e944:	4613      	mov	r3, r2
 800e946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3330      	adds	r3, #48	; 0x30
 800e952:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d101      	bne.n	800e962 <HAL_SPI_Receive+0x2a>
 800e95e:	2302      	movs	r3, #2
 800e960:	e173      	b.n	800ec4a <HAL_SPI_Receive+0x312>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e96a:	f7f4 fda7 	bl	80034bc <HAL_GetTick>
 800e96e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d007      	beq.n	800e98c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800e97c:	2302      	movs	r3, #2
 800e97e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e988:	7ffb      	ldrb	r3, [r7, #31]
 800e98a:	e15e      	b.n	800ec4a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <HAL_SPI_Receive+0x60>
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d107      	bne.n	800e9a8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9a4:	7ffb      	ldrb	r3, [r7, #31]
 800e9a6:	e150      	b.n	800ec4a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2204      	movs	r2, #4
 800e9ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	88fa      	ldrh	r2, [r7, #6]
 800e9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	88fa      	ldrh	r2, [r7, #6]
 800e9ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e9f8:	d108      	bne.n	800ea0c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	e009      	b.n	800ea20 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ea1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	685a      	ldr	r2, [r3, #4]
 800ea26:	4b8b      	ldr	r3, [pc, #556]	; (800ec54 <HAL_SPI_Receive+0x31c>)
 800ea28:	4013      	ands	r3, r2
 800ea2a:	88f9      	ldrh	r1, [r7, #6]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	6812      	ldr	r2, [r2, #0]
 800ea30:	430b      	orrs	r3, r1
 800ea32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0201 	orr.w	r2, r2, #1
 800ea42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea4c:	d107      	bne.n	800ea5e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	2b0f      	cmp	r3, #15
 800ea64:	d948      	bls.n	800eaf8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ea66:	e040      	b.n	800eaea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	695a      	ldr	r2, [r3, #20]
 800ea6e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ea72:	4013      	ands	r3, r2
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d014      	beq.n	800eaa2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ea82:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea88:	1d1a      	adds	r2, r3, #4
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	3b01      	subs	r3, #1
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eaa0:	e023      	b.n	800eaea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaa2:	f7f4 fd0b 	bl	80034bc <HAL_GetTick>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d803      	bhi.n	800eaba <HAL_SPI_Receive+0x182>
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab8:	d102      	bne.n	800eac0 <HAL_SPI_Receive+0x188>
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d114      	bne.n	800eaea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f000 f8c9 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2201      	movs	r2, #1
 800eae2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e0af      	b.n	800ec4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1b8      	bne.n	800ea68 <HAL_SPI_Receive+0x130>
 800eaf6:	e095      	b.n	800ec24 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	2b07      	cmp	r3, #7
 800eafe:	f240 808b 	bls.w	800ec18 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eb02:	e03f      	b.n	800eb84 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	695b      	ldr	r3, [r3, #20]
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d114      	bne.n	800eb3c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb16:	69ba      	ldr	r2, [r7, #24]
 800eb18:	8812      	ldrh	r2, [r2, #0]
 800eb1a:	b292      	uxth	r2, r2
 800eb1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb22:	1c9a      	adds	r2, r3, #2
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3b01      	subs	r3, #1
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb3a:	e023      	b.n	800eb84 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb3c:	f7f4 fcbe 	bl	80034bc <HAL_GetTick>
 800eb40:	4602      	mov	r2, r0
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d803      	bhi.n	800eb54 <HAL_SPI_Receive+0x21c>
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb52:	d102      	bne.n	800eb5a <HAL_SPI_Receive+0x222>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d114      	bne.n	800eb84 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f000 f87c 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e062      	b.n	800ec4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1b9      	bne.n	800eb04 <HAL_SPI_Receive+0x1cc>
 800eb90:	e048      	b.n	800ec24 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d117      	bne.n	800ebd0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebac:	7812      	ldrb	r2, [r2, #0]
 800ebae:	b2d2      	uxtb	r2, r2
 800ebb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ebce:	e023      	b.n	800ec18 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebd0:	f7f4 fc74 	bl	80034bc <HAL_GetTick>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d803      	bhi.n	800ebe8 <HAL_SPI_Receive+0x2b0>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d102      	bne.n	800ebee <HAL_SPI_Receive+0x2b6>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d114      	bne.n	800ec18 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f000 f832 	bl	800ec58 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e018      	b.n	800ec4a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1b6      	bne.n	800eb92 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 f817 	bl	800ec58 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e000      	b.n	800ec4a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ec48:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3720      	adds	r7, #32
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	ffff0000 	.word	0xffff0000

0800ec58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	699a      	ldr	r2, [r3, #24]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f042 0208 	orr.w	r2, r2, #8
 800ec76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	699a      	ldr	r2, [r3, #24]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f042 0210 	orr.w	r2, r2, #16
 800ec86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 0201 	bic.w	r2, r2, #1
 800ec96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6919      	ldr	r1, [r3, #16]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	4b3c      	ldr	r3, [pc, #240]	; (800ed94 <SPI_CloseTransfer+0x13c>)
 800eca4:	400b      	ands	r3, r1
 800eca6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689a      	ldr	r2, [r3, #8]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ecb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	d014      	beq.n	800ecee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f003 0320 	and.w	r3, r3, #32
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00f      	beq.n	800ecee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	699a      	ldr	r2, [r3, #24]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f042 0220 	orr.w	r2, r2, #32
 800ecec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b03      	cmp	r3, #3
 800ecf8:	d014      	beq.n	800ed24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00f      	beq.n	800ed24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed0a:	f043 0204 	orr.w	r2, r3, #4
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00f      	beq.n	800ed4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed34:	f043 0201 	orr.w	r2, r3, #1
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	699a      	ldr	r2, [r3, #24]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00f      	beq.n	800ed78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed5e:	f043 0208 	orr.w	r2, r3, #8
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	699a      	ldr	r2, [r3, #24]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ed88:	bf00      	nop
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	fffffc90 	.word	0xfffffc90

0800ed98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	4613      	mov	r3, r2
 800eda6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eda8:	e010      	b.n	800edcc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edaa:	f7f4 fb87 	bl	80034bc <HAL_GetTick>
 800edae:	4602      	mov	r2, r0
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d803      	bhi.n	800edc2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc0:	d102      	bne.n	800edc8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800edc8:	2303      	movs	r3, #3
 800edca:	e00f      	b.n	800edec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	695a      	ldr	r2, [r3, #20]
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	4013      	ands	r3, r2
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	429a      	cmp	r2, r3
 800edda:	bf0c      	ite	eq
 800eddc:	2301      	moveq	r3, #1
 800edde:	2300      	movne	r3, #0
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	461a      	mov	r2, r3
 800ede4:	79fb      	ldrb	r3, [r7, #7]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d0df      	beq.n	800edaa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee00:	095b      	lsrs	r3, r3, #5
 800ee02:	3301      	adds	r3, #1
 800ee04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	3307      	adds	r3, #7
 800ee12:	08db      	lsrs	r3, r3, #3
 800ee14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e049      	b.n	800eed0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7f3 fe33 	bl	8002abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2202      	movs	r2, #2
 800ee5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	3304      	adds	r3, #4
 800ee66:	4619      	mov	r1, r3
 800ee68:	4610      	mov	r0, r2
 800ee6a:	f000 fed1 	bl	800fc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d109      	bne.n	800eefc <HAL_TIM_PWM_Start+0x24>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	bf14      	ite	ne
 800eef4:	2301      	movne	r3, #1
 800eef6:	2300      	moveq	r3, #0
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	e03c      	b.n	800ef76 <HAL_TIM_PWM_Start+0x9e>
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	d109      	bne.n	800ef16 <HAL_TIM_PWM_Start+0x3e>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	bf14      	ite	ne
 800ef0e:	2301      	movne	r3, #1
 800ef10:	2300      	moveq	r3, #0
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	e02f      	b.n	800ef76 <HAL_TIM_PWM_Start+0x9e>
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d109      	bne.n	800ef30 <HAL_TIM_PWM_Start+0x58>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	bf14      	ite	ne
 800ef28:	2301      	movne	r3, #1
 800ef2a:	2300      	moveq	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	e022      	b.n	800ef76 <HAL_TIM_PWM_Start+0x9e>
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b0c      	cmp	r3, #12
 800ef34:	d109      	bne.n	800ef4a <HAL_TIM_PWM_Start+0x72>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	bf14      	ite	ne
 800ef42:	2301      	movne	r3, #1
 800ef44:	2300      	moveq	r3, #0
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	e015      	b.n	800ef76 <HAL_TIM_PWM_Start+0x9e>
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	2b10      	cmp	r3, #16
 800ef4e:	d109      	bne.n	800ef64 <HAL_TIM_PWM_Start+0x8c>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	bf14      	ite	ne
 800ef5c:	2301      	movne	r3, #1
 800ef5e:	2300      	moveq	r3, #0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	e008      	b.n	800ef76 <HAL_TIM_PWM_Start+0x9e>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	bf14      	ite	ne
 800ef70:	2301      	movne	r3, #1
 800ef72:	2300      	moveq	r3, #0
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e0ab      	b.n	800f0d6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <HAL_TIM_PWM_Start+0xb6>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2202      	movs	r2, #2
 800ef88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef8c:	e023      	b.n	800efd6 <HAL_TIM_PWM_Start+0xfe>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d104      	bne.n	800ef9e <HAL_TIM_PWM_Start+0xc6>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef9c:	e01b      	b.n	800efd6 <HAL_TIM_PWM_Start+0xfe>
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	2b08      	cmp	r3, #8
 800efa2:	d104      	bne.n	800efae <HAL_TIM_PWM_Start+0xd6>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efac:	e013      	b.n	800efd6 <HAL_TIM_PWM_Start+0xfe>
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b0c      	cmp	r3, #12
 800efb2:	d104      	bne.n	800efbe <HAL_TIM_PWM_Start+0xe6>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2202      	movs	r2, #2
 800efb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800efbc:	e00b      	b.n	800efd6 <HAL_TIM_PWM_Start+0xfe>
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	2b10      	cmp	r3, #16
 800efc2:	d104      	bne.n	800efce <HAL_TIM_PWM_Start+0xf6>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2202      	movs	r2, #2
 800efc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800efcc:	e003      	b.n	800efd6 <HAL_TIM_PWM_Start+0xfe>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2202      	movs	r2, #2
 800efd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2201      	movs	r2, #1
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	4618      	mov	r0, r3
 800efe0:	f001 f992 	bl	8010308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a3d      	ldr	r2, [pc, #244]	; (800f0e0 <HAL_TIM_PWM_Start+0x208>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d013      	beq.n	800f016 <HAL_TIM_PWM_Start+0x13e>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a3c      	ldr	r2, [pc, #240]	; (800f0e4 <HAL_TIM_PWM_Start+0x20c>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d00e      	beq.n	800f016 <HAL_TIM_PWM_Start+0x13e>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a3a      	ldr	r2, [pc, #232]	; (800f0e8 <HAL_TIM_PWM_Start+0x210>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d009      	beq.n	800f016 <HAL_TIM_PWM_Start+0x13e>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a39      	ldr	r2, [pc, #228]	; (800f0ec <HAL_TIM_PWM_Start+0x214>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d004      	beq.n	800f016 <HAL_TIM_PWM_Start+0x13e>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a37      	ldr	r2, [pc, #220]	; (800f0f0 <HAL_TIM_PWM_Start+0x218>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d101      	bne.n	800f01a <HAL_TIM_PWM_Start+0x142>
 800f016:	2301      	movs	r3, #1
 800f018:	e000      	b.n	800f01c <HAL_TIM_PWM_Start+0x144>
 800f01a:	2300      	movs	r3, #0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d007      	beq.n	800f030 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f02e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a2a      	ldr	r2, [pc, #168]	; (800f0e0 <HAL_TIM_PWM_Start+0x208>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d02c      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f042:	d027      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a2a      	ldr	r2, [pc, #168]	; (800f0f4 <HAL_TIM_PWM_Start+0x21c>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d022      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a29      	ldr	r2, [pc, #164]	; (800f0f8 <HAL_TIM_PWM_Start+0x220>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d01d      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a27      	ldr	r2, [pc, #156]	; (800f0fc <HAL_TIM_PWM_Start+0x224>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d018      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a1f      	ldr	r2, [pc, #124]	; (800f0e4 <HAL_TIM_PWM_Start+0x20c>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d013      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a23      	ldr	r2, [pc, #140]	; (800f100 <HAL_TIM_PWM_Start+0x228>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d00e      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a1b      	ldr	r2, [pc, #108]	; (800f0e8 <HAL_TIM_PWM_Start+0x210>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d009      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a1f      	ldr	r2, [pc, #124]	; (800f104 <HAL_TIM_PWM_Start+0x22c>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d004      	beq.n	800f094 <HAL_TIM_PWM_Start+0x1bc>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a1e      	ldr	r2, [pc, #120]	; (800f108 <HAL_TIM_PWM_Start+0x230>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d115      	bne.n	800f0c0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	4b1c      	ldr	r3, [pc, #112]	; (800f10c <HAL_TIM_PWM_Start+0x234>)
 800f09c:	4013      	ands	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2b06      	cmp	r3, #6
 800f0a4:	d015      	beq.n	800f0d2 <HAL_TIM_PWM_Start+0x1fa>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ac:	d011      	beq.n	800f0d2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f042 0201 	orr.w	r2, r2, #1
 800f0bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0be:	e008      	b.n	800f0d2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f042 0201 	orr.w	r2, r2, #1
 800f0ce:	601a      	str	r2, [r3, #0]
 800f0d0:	e000      	b.n	800f0d4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	40010000 	.word	0x40010000
 800f0e4:	40010400 	.word	0x40010400
 800f0e8:	40014000 	.word	0x40014000
 800f0ec:	40014400 	.word	0x40014400
 800f0f0:	40014800 	.word	0x40014800
 800f0f4:	40000400 	.word	0x40000400
 800f0f8:	40000800 	.word	0x40000800
 800f0fc:	40000c00 	.word	0x40000c00
 800f100:	40001800 	.word	0x40001800
 800f104:	4000e000 	.word	0x4000e000
 800f108:	4000e400 	.word	0x4000e400
 800f10c:	00010007 	.word	0x00010007

0800f110 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
 800f11c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d109      	bne.n	800f13c <HAL_TIM_PWM_Start_DMA+0x2c>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	2b02      	cmp	r3, #2
 800f132:	bf0c      	ite	eq
 800f134:	2301      	moveq	r3, #1
 800f136:	2300      	movne	r3, #0
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	e03c      	b.n	800f1b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	2b04      	cmp	r3, #4
 800f140:	d109      	bne.n	800f156 <HAL_TIM_PWM_Start_DMA+0x46>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	bf0c      	ite	eq
 800f14e:	2301      	moveq	r3, #1
 800f150:	2300      	movne	r3, #0
 800f152:	b2db      	uxtb	r3, r3
 800f154:	e02f      	b.n	800f1b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d109      	bne.n	800f170 <HAL_TIM_PWM_Start_DMA+0x60>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f162:	b2db      	uxtb	r3, r3
 800f164:	2b02      	cmp	r3, #2
 800f166:	bf0c      	ite	eq
 800f168:	2301      	moveq	r3, #1
 800f16a:	2300      	movne	r3, #0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	e022      	b.n	800f1b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2b0c      	cmp	r3, #12
 800f174:	d109      	bne.n	800f18a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b02      	cmp	r3, #2
 800f180:	bf0c      	ite	eq
 800f182:	2301      	moveq	r3, #1
 800f184:	2300      	movne	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	e015      	b.n	800f1b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b10      	cmp	r3, #16
 800f18e:	d109      	bne.n	800f1a4 <HAL_TIM_PWM_Start_DMA+0x94>
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f196:	b2db      	uxtb	r3, r3
 800f198:	2b02      	cmp	r3, #2
 800f19a:	bf0c      	ite	eq
 800f19c:	2301      	moveq	r3, #1
 800f19e:	2300      	movne	r3, #0
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	e008      	b.n	800f1b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	bf0c      	ite	eq
 800f1b0:	2301      	moveq	r3, #1
 800f1b2:	2300      	movne	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e1ba      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d109      	bne.n	800f1d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	bf0c      	ite	eq
 800f1d0:	2301      	moveq	r3, #1
 800f1d2:	2300      	movne	r3, #0
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	e03c      	b.n	800f252 <HAL_TIM_PWM_Start_DMA+0x142>
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d109      	bne.n	800f1f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	bf0c      	ite	eq
 800f1ea:	2301      	moveq	r3, #1
 800f1ec:	2300      	movne	r3, #0
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	e02f      	b.n	800f252 <HAL_TIM_PWM_Start_DMA+0x142>
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	2b08      	cmp	r3, #8
 800f1f6:	d109      	bne.n	800f20c <HAL_TIM_PWM_Start_DMA+0xfc>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b01      	cmp	r3, #1
 800f202:	bf0c      	ite	eq
 800f204:	2301      	moveq	r3, #1
 800f206:	2300      	movne	r3, #0
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	e022      	b.n	800f252 <HAL_TIM_PWM_Start_DMA+0x142>
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b0c      	cmp	r3, #12
 800f210:	d109      	bne.n	800f226 <HAL_TIM_PWM_Start_DMA+0x116>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	bf0c      	ite	eq
 800f21e:	2301      	moveq	r3, #1
 800f220:	2300      	movne	r3, #0
 800f222:	b2db      	uxtb	r3, r3
 800f224:	e015      	b.n	800f252 <HAL_TIM_PWM_Start_DMA+0x142>
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b10      	cmp	r3, #16
 800f22a:	d109      	bne.n	800f240 <HAL_TIM_PWM_Start_DMA+0x130>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b01      	cmp	r3, #1
 800f236:	bf0c      	ite	eq
 800f238:	2301      	moveq	r3, #1
 800f23a:	2300      	movne	r3, #0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	e008      	b.n	800f252 <HAL_TIM_PWM_Start_DMA+0x142>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b01      	cmp	r3, #1
 800f24a:	bf0c      	ite	eq
 800f24c:	2301      	moveq	r3, #1
 800f24e:	2300      	movne	r3, #0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d034      	beq.n	800f2c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <HAL_TIM_PWM_Start_DMA+0x152>
 800f25c:	887b      	ldrh	r3, [r7, #2]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	e166      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d104      	bne.n	800f276 <HAL_TIM_PWM_Start_DMA+0x166>
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2202      	movs	r2, #2
 800f270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f274:	e026      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d104      	bne.n	800f286 <HAL_TIM_PWM_Start_DMA+0x176>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2202      	movs	r2, #2
 800f280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f284:	e01e      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b08      	cmp	r3, #8
 800f28a:	d104      	bne.n	800f296 <HAL_TIM_PWM_Start_DMA+0x186>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f294:	e016      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2b0c      	cmp	r3, #12
 800f29a:	d104      	bne.n	800f2a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2202      	movs	r2, #2
 800f2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2a4:	e00e      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2b10      	cmp	r3, #16
 800f2aa:	d104      	bne.n	800f2b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2b4:	e006      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f2be:	e001      	b.n	800f2c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e137      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	2b0c      	cmp	r3, #12
 800f2c8:	f200 80ae 	bhi.w	800f428 <HAL_TIM_PWM_Start_DMA+0x318>
 800f2cc:	a201      	add	r2, pc, #4	; (adr r2, 800f2d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d2:	bf00      	nop
 800f2d4:	0800f309 	.word	0x0800f309
 800f2d8:	0800f429 	.word	0x0800f429
 800f2dc:	0800f429 	.word	0x0800f429
 800f2e0:	0800f429 	.word	0x0800f429
 800f2e4:	0800f351 	.word	0x0800f351
 800f2e8:	0800f429 	.word	0x0800f429
 800f2ec:	0800f429 	.word	0x0800f429
 800f2f0:	0800f429 	.word	0x0800f429
 800f2f4:	0800f399 	.word	0x0800f399
 800f2f8:	0800f429 	.word	0x0800f429
 800f2fc:	0800f429 	.word	0x0800f429
 800f300:	0800f429 	.word	0x0800f429
 800f304:	0800f3e1 	.word	0x0800f3e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30c:	4a8b      	ldr	r2, [pc, #556]	; (800f53c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f30e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	4a8a      	ldr	r2, [pc, #552]	; (800f540 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31c:	4a89      	ldr	r2, [pc, #548]	; (800f544 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f31e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f324:	6879      	ldr	r1, [r7, #4]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	3334      	adds	r3, #52	; 0x34
 800f32c:	461a      	mov	r2, r3
 800f32e:	887b      	ldrh	r3, [r7, #2]
 800f330:	f7f6 f8e4 	bl	80054fc <HAL_DMA_Start_IT>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e0fa      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f34c:	60da      	str	r2, [r3, #12]
      break;
 800f34e:	e06e      	b.n	800f42e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f354:	4a79      	ldr	r2, [pc, #484]	; (800f53c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f356:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f35c:	4a78      	ldr	r2, [pc, #480]	; (800f540 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f35e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f364:	4a77      	ldr	r2, [pc, #476]	; (800f544 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f366:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3338      	adds	r3, #56	; 0x38
 800f374:	461a      	mov	r2, r3
 800f376:	887b      	ldrh	r3, [r7, #2]
 800f378:	f7f6 f8c0 	bl	80054fc <HAL_DMA_Start_IT>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d001      	beq.n	800f386 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	e0d6      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68da      	ldr	r2, [r3, #12]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f394:	60da      	str	r2, [r3, #12]
      break;
 800f396:	e04a      	b.n	800f42e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39c:	4a67      	ldr	r2, [pc, #412]	; (800f53c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f39e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a4:	4a66      	ldr	r2, [pc, #408]	; (800f540 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f3a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ac:	4a65      	ldr	r2, [pc, #404]	; (800f544 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f3ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	333c      	adds	r3, #60	; 0x3c
 800f3bc:	461a      	mov	r2, r3
 800f3be:	887b      	ldrh	r3, [r7, #2]
 800f3c0:	f7f6 f89c 	bl	80054fc <HAL_DMA_Start_IT>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e0b2      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	68da      	ldr	r2, [r3, #12]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3dc:	60da      	str	r2, [r3, #12]
      break;
 800f3de:	e026      	b.n	800f42e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e4:	4a55      	ldr	r2, [pc, #340]	; (800f53c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f3e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ec:	4a54      	ldr	r2, [pc, #336]	; (800f540 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f3ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f4:	4a53      	ldr	r2, [pc, #332]	; (800f544 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f3f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f3fc:	6879      	ldr	r1, [r7, #4]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	3340      	adds	r3, #64	; 0x40
 800f404:	461a      	mov	r2, r3
 800f406:	887b      	ldrh	r3, [r7, #2]
 800f408:	f7f6 f878 	bl	80054fc <HAL_DMA_Start_IT>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f412:	2301      	movs	r3, #1
 800f414:	e08e      	b.n	800f534 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68da      	ldr	r2, [r3, #12]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f424:	60da      	str	r2, [r3, #12]
      break;
 800f426:	e002      	b.n	800f42e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f428:	2301      	movs	r3, #1
 800f42a:	75fb      	strb	r3, [r7, #23]
      break;
 800f42c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d17e      	bne.n	800f532 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2201      	movs	r2, #1
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 ff63 	bl	8010308 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4a40      	ldr	r2, [pc, #256]	; (800f548 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d013      	beq.n	800f474 <HAL_TIM_PWM_Start_DMA+0x364>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a3e      	ldr	r2, [pc, #248]	; (800f54c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d00e      	beq.n	800f474 <HAL_TIM_PWM_Start_DMA+0x364>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a3d      	ldr	r2, [pc, #244]	; (800f550 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d009      	beq.n	800f474 <HAL_TIM_PWM_Start_DMA+0x364>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4a3b      	ldr	r2, [pc, #236]	; (800f554 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d004      	beq.n	800f474 <HAL_TIM_PWM_Start_DMA+0x364>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a3a      	ldr	r2, [pc, #232]	; (800f558 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d101      	bne.n	800f478 <HAL_TIM_PWM_Start_DMA+0x368>
 800f474:	2301      	movs	r3, #1
 800f476:	e000      	b.n	800f47a <HAL_TIM_PWM_Start_DMA+0x36a>
 800f478:	2300      	movs	r3, #0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d007      	beq.n	800f48e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f48c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a2d      	ldr	r2, [pc, #180]	; (800f548 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d02c      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4a0:	d027      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a2d      	ldr	r2, [pc, #180]	; (800f55c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d022      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a2b      	ldr	r2, [pc, #172]	; (800f560 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d01d      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4a2a      	ldr	r2, [pc, #168]	; (800f564 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d018      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4a21      	ldr	r2, [pc, #132]	; (800f54c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d013      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4a26      	ldr	r2, [pc, #152]	; (800f568 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d00e      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a1d      	ldr	r2, [pc, #116]	; (800f550 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d009      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a22      	ldr	r2, [pc, #136]	; (800f56c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d004      	beq.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a20      	ldr	r2, [pc, #128]	; (800f570 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d115      	bne.n	800f51e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	4b1e      	ldr	r3, [pc, #120]	; (800f574 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	2b06      	cmp	r3, #6
 800f502:	d015      	beq.n	800f530 <HAL_TIM_PWM_Start_DMA+0x420>
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f50a:	d011      	beq.n	800f530 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f042 0201 	orr.w	r2, r2, #1
 800f51a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f51c:	e008      	b.n	800f530 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f042 0201 	orr.w	r2, r2, #1
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	e000      	b.n	800f532 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f530:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f532:	7dfb      	ldrb	r3, [r7, #23]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3718      	adds	r7, #24
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	0800faff 	.word	0x0800faff
 800f540:	0800fba7 	.word	0x0800fba7
 800f544:	0800fa6d 	.word	0x0800fa6d
 800f548:	40010000 	.word	0x40010000
 800f54c:	40010400 	.word	0x40010400
 800f550:	40014000 	.word	0x40014000
 800f554:	40014400 	.word	0x40014400
 800f558:	40014800 	.word	0x40014800
 800f55c:	40000400 	.word	0x40000400
 800f560:	40000800 	.word	0x40000800
 800f564:	40000c00 	.word	0x40000c00
 800f568:	40001800 	.word	0x40001800
 800f56c:	4000e000 	.word	0x4000e000
 800f570:	4000e400 	.word	0x4000e400
 800f574:	00010007 	.word	0x00010007

0800f578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	f003 0302 	and.w	r3, r3, #2
 800f58a:	2b02      	cmp	r3, #2
 800f58c:	d122      	bne.n	800f5d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	f003 0302 	and.w	r3, r3, #2
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d11b      	bne.n	800f5d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f06f 0202 	mvn.w	r2, #2
 800f5a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	699b      	ldr	r3, [r3, #24]
 800f5b2:	f003 0303 	and.w	r3, r3, #3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d003      	beq.n	800f5c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f000 fa24 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f5c0:	e005      	b.n	800f5ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa16 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 fa27 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	f003 0304 	and.w	r3, r3, #4
 800f5de:	2b04      	cmp	r3, #4
 800f5e0:	d122      	bne.n	800f628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	2b04      	cmp	r3, #4
 800f5ee:	d11b      	bne.n	800f628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f06f 0204 	mvn.w	r2, #4
 800f5f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	699b      	ldr	r3, [r3, #24]
 800f606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 f9fa 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f614:	e005      	b.n	800f622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 f9ec 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f9fd 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	f003 0308 	and.w	r3, r3, #8
 800f632:	2b08      	cmp	r3, #8
 800f634:	d122      	bne.n	800f67c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	f003 0308 	and.w	r3, r3, #8
 800f640:	2b08      	cmp	r3, #8
 800f642:	d11b      	bne.n	800f67c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f06f 0208 	mvn.w	r2, #8
 800f64c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2204      	movs	r2, #4
 800f652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	69db      	ldr	r3, [r3, #28]
 800f65a:	f003 0303 	and.w	r3, r3, #3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f9d0 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f668:	e005      	b.n	800f676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 f9c2 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f9d3 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	f003 0310 	and.w	r3, r3, #16
 800f686:	2b10      	cmp	r3, #16
 800f688:	d122      	bne.n	800f6d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	f003 0310 	and.w	r3, r3, #16
 800f694:	2b10      	cmp	r3, #16
 800f696:	d11b      	bne.n	800f6d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f06f 0210 	mvn.w	r2, #16
 800f6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2208      	movs	r2, #8
 800f6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	69db      	ldr	r3, [r3, #28]
 800f6ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d003      	beq.n	800f6be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f9a6 	bl	800fa08 <HAL_TIM_IC_CaptureCallback>
 800f6bc:	e005      	b.n	800f6ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f998 	bl	800f9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f9a9 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	f003 0301 	and.w	r3, r3, #1
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d10e      	bne.n	800f6fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d107      	bne.n	800f6fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f06f 0201 	mvn.w	r2, #1
 800f6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f972 	bl	800f9e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f706:	2b80      	cmp	r3, #128	; 0x80
 800f708:	d10e      	bne.n	800f728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f714:	2b80      	cmp	r3, #128	; 0x80
 800f716:	d107      	bne.n	800f728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 febc 	bl	80104a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f736:	d10e      	bne.n	800f756 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68db      	ldr	r3, [r3, #12]
 800f73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f742:	2b80      	cmp	r3, #128	; 0x80
 800f744:	d107      	bne.n	800f756 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 feaf 	bl	80104b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f760:	2b40      	cmp	r3, #64	; 0x40
 800f762:	d10e      	bne.n	800f782 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f76e:	2b40      	cmp	r3, #64	; 0x40
 800f770:	d107      	bne.n	800f782 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f77a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f961 	bl	800fa44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	f003 0320 	and.w	r3, r3, #32
 800f78c:	2b20      	cmp	r3, #32
 800f78e:	d10e      	bne.n	800f7ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	f003 0320 	and.w	r3, r3, #32
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	d107      	bne.n	800f7ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f06f 0220 	mvn.w	r2, #32
 800f7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 fe6f 	bl	801048c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f7ae:	bf00      	nop
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
	...

0800f7b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d101      	bne.n	800f7d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	e0ff      	b.n	800f9d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b14      	cmp	r3, #20
 800f7e2:	f200 80f0 	bhi.w	800f9c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f7e6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ec:	0800f841 	.word	0x0800f841
 800f7f0:	0800f9c7 	.word	0x0800f9c7
 800f7f4:	0800f9c7 	.word	0x0800f9c7
 800f7f8:	0800f9c7 	.word	0x0800f9c7
 800f7fc:	0800f881 	.word	0x0800f881
 800f800:	0800f9c7 	.word	0x0800f9c7
 800f804:	0800f9c7 	.word	0x0800f9c7
 800f808:	0800f9c7 	.word	0x0800f9c7
 800f80c:	0800f8c3 	.word	0x0800f8c3
 800f810:	0800f9c7 	.word	0x0800f9c7
 800f814:	0800f9c7 	.word	0x0800f9c7
 800f818:	0800f9c7 	.word	0x0800f9c7
 800f81c:	0800f903 	.word	0x0800f903
 800f820:	0800f9c7 	.word	0x0800f9c7
 800f824:	0800f9c7 	.word	0x0800f9c7
 800f828:	0800f9c7 	.word	0x0800f9c7
 800f82c:	0800f945 	.word	0x0800f945
 800f830:	0800f9c7 	.word	0x0800f9c7
 800f834:	0800f9c7 	.word	0x0800f9c7
 800f838:	0800f9c7 	.word	0x0800f9c7
 800f83c:	0800f985 	.word	0x0800f985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68b9      	ldr	r1, [r7, #8]
 800f846:	4618      	mov	r0, r3
 800f848:	f000 fa88 	bl	800fd5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	699a      	ldr	r2, [r3, #24]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f042 0208 	orr.w	r2, r2, #8
 800f85a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	699a      	ldr	r2, [r3, #24]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f022 0204 	bic.w	r2, r2, #4
 800f86a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	6999      	ldr	r1, [r3, #24]
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	691a      	ldr	r2, [r3, #16]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	430a      	orrs	r2, r1
 800f87c:	619a      	str	r2, [r3, #24]
      break;
 800f87e:	e0a5      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68b9      	ldr	r1, [r7, #8]
 800f886:	4618      	mov	r0, r3
 800f888:	f000 faf8 	bl	800fe7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	699a      	ldr	r2, [r3, #24]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f89a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	699a      	ldr	r2, [r3, #24]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6999      	ldr	r1, [r3, #24]
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	021a      	lsls	r2, r3, #8
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	430a      	orrs	r2, r1
 800f8be:	619a      	str	r2, [r3, #24]
      break;
 800f8c0:	e084      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68b9      	ldr	r1, [r7, #8]
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f000 fb61 	bl	800ff90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	69da      	ldr	r2, [r3, #28]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f042 0208 	orr.w	r2, r2, #8
 800f8dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	69da      	ldr	r2, [r3, #28]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f022 0204 	bic.w	r2, r2, #4
 800f8ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	69d9      	ldr	r1, [r3, #28]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	691a      	ldr	r2, [r3, #16]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	430a      	orrs	r2, r1
 800f8fe:	61da      	str	r2, [r3, #28]
      break;
 800f900:	e064      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 fbc9 	bl	80100a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	69da      	ldr	r2, [r3, #28]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f91c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	69da      	ldr	r2, [r3, #28]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f92c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	69d9      	ldr	r1, [r3, #28]
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	691b      	ldr	r3, [r3, #16]
 800f938:	021a      	lsls	r2, r3, #8
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	430a      	orrs	r2, r1
 800f940:	61da      	str	r2, [r3, #28]
      break;
 800f942:	e043      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68b9      	ldr	r1, [r7, #8]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 fc12 	bl	8010174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f042 0208 	orr.w	r2, r2, #8
 800f95e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f022 0204 	bic.w	r2, r2, #4
 800f96e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	691a      	ldr	r2, [r3, #16]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	430a      	orrs	r2, r1
 800f980:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f982:	e023      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68b9      	ldr	r1, [r7, #8]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 fc56 	bl	801023c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f99e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	021a      	lsls	r2, r3, #8
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	430a      	orrs	r2, r1
 800f9c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f9c4:	e002      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	75fb      	strb	r3, [r7, #23]
      break;
 800f9ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop

0800f9e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fa38:	bf00      	nop
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d107      	bne.n	800fa94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2201      	movs	r2, #1
 800fa88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa92:	e02a      	b.n	800faea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d107      	bne.n	800faae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2202      	movs	r2, #2
 800faa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800faac:	e01d      	b.n	800faea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d107      	bne.n	800fac8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2204      	movs	r2, #4
 800fabc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fac6:	e010      	b.n	800faea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	429a      	cmp	r2, r3
 800fad0:	d107      	bne.n	800fae2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2208      	movs	r2, #8
 800fad6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2201      	movs	r2, #1
 800fadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fae0:	e003      	b.n	800faea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f7ff ffb4 	bl	800fa58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	771a      	strb	r2, [r3, #28]
}
 800faf6:	bf00      	nop
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d10b      	bne.n	800fb2e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d136      	bne.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb2c:	e031      	b.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d10b      	bne.n	800fb50 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	69db      	ldr	r3, [r3, #28]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d125      	bne.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb4e:	e020      	b.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d10b      	bne.n	800fb72 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2204      	movs	r2, #4
 800fb5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	69db      	ldr	r3, [r3, #28]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d114      	bne.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb70:	e00f      	b.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d10a      	bne.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2208      	movs	r2, #8
 800fb80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d103      	bne.n	800fb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff ff42 	bl	800fa1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	771a      	strb	r2, [r3, #28]
}
 800fb9e:	bf00      	nop
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d103      	bne.n	800fbc6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	771a      	strb	r2, [r3, #28]
 800fbc4:	e019      	b.n	800fbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d103      	bne.n	800fbd8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	771a      	strb	r2, [r3, #28]
 800fbd6:	e010      	b.n	800fbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d103      	bne.n	800fbea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2204      	movs	r2, #4
 800fbe6:	771a      	strb	r2, [r3, #28]
 800fbe8:	e007      	b.n	800fbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d102      	bne.n	800fbfa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2208      	movs	r2, #8
 800fbf8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff ff18 	bl	800fa30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	771a      	strb	r2, [r3, #28]
}
 800fc06:	bf00      	nop
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
	...

0800fc10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4a44      	ldr	r2, [pc, #272]	; (800fd34 <TIM_Base_SetConfig+0x124>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d013      	beq.n	800fc50 <TIM_Base_SetConfig+0x40>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc2e:	d00f      	beq.n	800fc50 <TIM_Base_SetConfig+0x40>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4a41      	ldr	r2, [pc, #260]	; (800fd38 <TIM_Base_SetConfig+0x128>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d00b      	beq.n	800fc50 <TIM_Base_SetConfig+0x40>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4a40      	ldr	r2, [pc, #256]	; (800fd3c <TIM_Base_SetConfig+0x12c>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d007      	beq.n	800fc50 <TIM_Base_SetConfig+0x40>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4a3f      	ldr	r2, [pc, #252]	; (800fd40 <TIM_Base_SetConfig+0x130>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d003      	beq.n	800fc50 <TIM_Base_SetConfig+0x40>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4a3e      	ldr	r2, [pc, #248]	; (800fd44 <TIM_Base_SetConfig+0x134>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d108      	bne.n	800fc62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a33      	ldr	r2, [pc, #204]	; (800fd34 <TIM_Base_SetConfig+0x124>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d027      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc70:	d023      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a30      	ldr	r2, [pc, #192]	; (800fd38 <TIM_Base_SetConfig+0x128>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d01f      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a2f      	ldr	r2, [pc, #188]	; (800fd3c <TIM_Base_SetConfig+0x12c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d01b      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a2e      	ldr	r2, [pc, #184]	; (800fd40 <TIM_Base_SetConfig+0x130>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d017      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a2d      	ldr	r2, [pc, #180]	; (800fd44 <TIM_Base_SetConfig+0x134>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d013      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a2c      	ldr	r2, [pc, #176]	; (800fd48 <TIM_Base_SetConfig+0x138>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00f      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a2b      	ldr	r2, [pc, #172]	; (800fd4c <TIM_Base_SetConfig+0x13c>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d00b      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a2a      	ldr	r2, [pc, #168]	; (800fd50 <TIM_Base_SetConfig+0x140>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d007      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a29      	ldr	r2, [pc, #164]	; (800fd54 <TIM_Base_SetConfig+0x144>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d003      	beq.n	800fcba <TIM_Base_SetConfig+0xaa>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a28      	ldr	r2, [pc, #160]	; (800fd58 <TIM_Base_SetConfig+0x148>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d108      	bne.n	800fccc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	689a      	ldr	r2, [r3, #8]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4a10      	ldr	r2, [pc, #64]	; (800fd34 <TIM_Base_SetConfig+0x124>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d00f      	beq.n	800fd18 <TIM_Base_SetConfig+0x108>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	4a12      	ldr	r2, [pc, #72]	; (800fd44 <TIM_Base_SetConfig+0x134>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d00b      	beq.n	800fd18 <TIM_Base_SetConfig+0x108>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4a11      	ldr	r2, [pc, #68]	; (800fd48 <TIM_Base_SetConfig+0x138>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d007      	beq.n	800fd18 <TIM_Base_SetConfig+0x108>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4a10      	ldr	r2, [pc, #64]	; (800fd4c <TIM_Base_SetConfig+0x13c>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d003      	beq.n	800fd18 <TIM_Base_SetConfig+0x108>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a0f      	ldr	r2, [pc, #60]	; (800fd50 <TIM_Base_SetConfig+0x140>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d103      	bne.n	800fd20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	615a      	str	r2, [r3, #20]
}
 800fd26:	bf00      	nop
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	40010000 	.word	0x40010000
 800fd38:	40000400 	.word	0x40000400
 800fd3c:	40000800 	.word	0x40000800
 800fd40:	40000c00 	.word	0x40000c00
 800fd44:	40010400 	.word	0x40010400
 800fd48:	40014000 	.word	0x40014000
 800fd4c:	40014400 	.word	0x40014400
 800fd50:	40014800 	.word	0x40014800
 800fd54:	4000e000 	.word	0x4000e000
 800fd58:	4000e400 	.word	0x4000e400

0800fd5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b087      	sub	sp, #28
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	f023 0201 	bic.w	r2, r3, #1
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	699b      	ldr	r3, [r3, #24]
 800fd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	4b37      	ldr	r3, [pc, #220]	; (800fe64 <TIM_OC1_SetConfig+0x108>)
 800fd88:	4013      	ands	r3, r2
 800fd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f023 0302 	bic.w	r3, r3, #2
 800fda4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4a2d      	ldr	r2, [pc, #180]	; (800fe68 <TIM_OC1_SetConfig+0x10c>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d00f      	beq.n	800fdd8 <TIM_OC1_SetConfig+0x7c>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a2c      	ldr	r2, [pc, #176]	; (800fe6c <TIM_OC1_SetConfig+0x110>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00b      	beq.n	800fdd8 <TIM_OC1_SetConfig+0x7c>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a2b      	ldr	r2, [pc, #172]	; (800fe70 <TIM_OC1_SetConfig+0x114>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d007      	beq.n	800fdd8 <TIM_OC1_SetConfig+0x7c>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a2a      	ldr	r2, [pc, #168]	; (800fe74 <TIM_OC1_SetConfig+0x118>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d003      	beq.n	800fdd8 <TIM_OC1_SetConfig+0x7c>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a29      	ldr	r2, [pc, #164]	; (800fe78 <TIM_OC1_SetConfig+0x11c>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d10c      	bne.n	800fdf2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f023 0308 	bic.w	r3, r3, #8
 800fdde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	f023 0304 	bic.w	r3, r3, #4
 800fdf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a1c      	ldr	r2, [pc, #112]	; (800fe68 <TIM_OC1_SetConfig+0x10c>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d00f      	beq.n	800fe1a <TIM_OC1_SetConfig+0xbe>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a1b      	ldr	r2, [pc, #108]	; (800fe6c <TIM_OC1_SetConfig+0x110>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d00b      	beq.n	800fe1a <TIM_OC1_SetConfig+0xbe>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a1a      	ldr	r2, [pc, #104]	; (800fe70 <TIM_OC1_SetConfig+0x114>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d007      	beq.n	800fe1a <TIM_OC1_SetConfig+0xbe>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a19      	ldr	r2, [pc, #100]	; (800fe74 <TIM_OC1_SetConfig+0x118>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d003      	beq.n	800fe1a <TIM_OC1_SetConfig+0xbe>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <TIM_OC1_SetConfig+0x11c>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d111      	bne.n	800fe3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	699b      	ldr	r3, [r3, #24]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	621a      	str	r2, [r3, #32]
}
 800fe58:	bf00      	nop
 800fe5a:	371c      	adds	r7, #28
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr
 800fe64:	fffeff8f 	.word	0xfffeff8f
 800fe68:	40010000 	.word	0x40010000
 800fe6c:	40010400 	.word	0x40010400
 800fe70:	40014000 	.word	0x40014000
 800fe74:	40014400 	.word	0x40014400
 800fe78:	40014800 	.word	0x40014800

0800fe7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b087      	sub	sp, #28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	f023 0210 	bic.w	r2, r3, #16
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	4b34      	ldr	r3, [pc, #208]	; (800ff78 <TIM_OC2_SetConfig+0xfc>)
 800fea8:	4013      	ands	r3, r2
 800feaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800feb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	021b      	lsls	r3, r3, #8
 800feba:	68fa      	ldr	r2, [r7, #12]
 800febc:	4313      	orrs	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f023 0320 	bic.w	r3, r3, #32
 800fec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	011b      	lsls	r3, r3, #4
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a29      	ldr	r2, [pc, #164]	; (800ff7c <TIM_OC2_SetConfig+0x100>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d003      	beq.n	800fee4 <TIM_OC2_SetConfig+0x68>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4a28      	ldr	r2, [pc, #160]	; (800ff80 <TIM_OC2_SetConfig+0x104>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d10d      	bne.n	800ff00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800feea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	011b      	lsls	r3, r3, #4
 800fef2:	697a      	ldr	r2, [r7, #20]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fefe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4a1e      	ldr	r2, [pc, #120]	; (800ff7c <TIM_OC2_SetConfig+0x100>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d00f      	beq.n	800ff28 <TIM_OC2_SetConfig+0xac>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a1d      	ldr	r2, [pc, #116]	; (800ff80 <TIM_OC2_SetConfig+0x104>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d00b      	beq.n	800ff28 <TIM_OC2_SetConfig+0xac>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4a1c      	ldr	r2, [pc, #112]	; (800ff84 <TIM_OC2_SetConfig+0x108>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d007      	beq.n	800ff28 <TIM_OC2_SetConfig+0xac>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a1b      	ldr	r2, [pc, #108]	; (800ff88 <TIM_OC2_SetConfig+0x10c>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d003      	beq.n	800ff28 <TIM_OC2_SetConfig+0xac>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	4a1a      	ldr	r2, [pc, #104]	; (800ff8c <TIM_OC2_SetConfig+0x110>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d113      	bne.n	800ff50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	695b      	ldr	r3, [r3, #20]
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	693a      	ldr	r2, [r7, #16]
 800ff40:	4313      	orrs	r3, r2
 800ff42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	693a      	ldr	r2, [r7, #16]
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	697a      	ldr	r2, [r7, #20]
 800ff68:	621a      	str	r2, [r3, #32]
}
 800ff6a:	bf00      	nop
 800ff6c:	371c      	adds	r7, #28
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	feff8fff 	.word	0xfeff8fff
 800ff7c:	40010000 	.word	0x40010000
 800ff80:	40010400 	.word	0x40010400
 800ff84:	40014000 	.word	0x40014000
 800ff88:	40014400 	.word	0x40014400
 800ff8c:	40014800 	.word	0x40014800

0800ff90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	69db      	ldr	r3, [r3, #28]
 800ffb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	4b33      	ldr	r3, [pc, #204]	; (8010088 <TIM_OC3_SetConfig+0xf8>)
 800ffbc:	4013      	ands	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f023 0303 	bic.w	r3, r3, #3
 800ffc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ffd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	021b      	lsls	r3, r3, #8
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a28      	ldr	r2, [pc, #160]	; (801008c <TIM_OC3_SetConfig+0xfc>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d003      	beq.n	800fff6 <TIM_OC3_SetConfig+0x66>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a27      	ldr	r2, [pc, #156]	; (8010090 <TIM_OC3_SetConfig+0x100>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d10d      	bne.n	8010012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	021b      	lsls	r3, r3, #8
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	4313      	orrs	r3, r2
 8010008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4a1d      	ldr	r2, [pc, #116]	; (801008c <TIM_OC3_SetConfig+0xfc>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d00f      	beq.n	801003a <TIM_OC3_SetConfig+0xaa>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4a1c      	ldr	r2, [pc, #112]	; (8010090 <TIM_OC3_SetConfig+0x100>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d00b      	beq.n	801003a <TIM_OC3_SetConfig+0xaa>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a1b      	ldr	r2, [pc, #108]	; (8010094 <TIM_OC3_SetConfig+0x104>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d007      	beq.n	801003a <TIM_OC3_SetConfig+0xaa>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a1a      	ldr	r2, [pc, #104]	; (8010098 <TIM_OC3_SetConfig+0x108>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d003      	beq.n	801003a <TIM_OC3_SetConfig+0xaa>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a19      	ldr	r2, [pc, #100]	; (801009c <TIM_OC3_SetConfig+0x10c>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d113      	bne.n	8010062 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	695b      	ldr	r3, [r3, #20]
 801004e:	011b      	lsls	r3, r3, #4
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	4313      	orrs	r3, r2
 8010054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	699b      	ldr	r3, [r3, #24]
 801005a:	011b      	lsls	r3, r3, #4
 801005c:	693a      	ldr	r2, [r7, #16]
 801005e:	4313      	orrs	r3, r2
 8010060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68fa      	ldr	r2, [r7, #12]
 801006c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	685a      	ldr	r2, [r3, #4]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	697a      	ldr	r2, [r7, #20]
 801007a:	621a      	str	r2, [r3, #32]
}
 801007c:	bf00      	nop
 801007e:	371c      	adds	r7, #28
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	fffeff8f 	.word	0xfffeff8f
 801008c:	40010000 	.word	0x40010000
 8010090:	40010400 	.word	0x40010400
 8010094:	40014000 	.word	0x40014000
 8010098:	40014400 	.word	0x40014400
 801009c:	40014800 	.word	0x40014800

080100a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b087      	sub	sp, #28
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a1b      	ldr	r3, [r3, #32]
 80100ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	4b24      	ldr	r3, [pc, #144]	; (801015c <TIM_OC4_SetConfig+0xbc>)
 80100cc:	4013      	ands	r3, r2
 80100ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	021b      	lsls	r3, r3, #8
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	031b      	lsls	r3, r3, #12
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a19      	ldr	r2, [pc, #100]	; (8010160 <TIM_OC4_SetConfig+0xc0>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d00f      	beq.n	8010120 <TIM_OC4_SetConfig+0x80>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a18      	ldr	r2, [pc, #96]	; (8010164 <TIM_OC4_SetConfig+0xc4>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d00b      	beq.n	8010120 <TIM_OC4_SetConfig+0x80>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a17      	ldr	r2, [pc, #92]	; (8010168 <TIM_OC4_SetConfig+0xc8>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d007      	beq.n	8010120 <TIM_OC4_SetConfig+0x80>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a16      	ldr	r2, [pc, #88]	; (801016c <TIM_OC4_SetConfig+0xcc>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d003      	beq.n	8010120 <TIM_OC4_SetConfig+0x80>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a15      	ldr	r2, [pc, #84]	; (8010170 <TIM_OC4_SetConfig+0xd0>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d109      	bne.n	8010134 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	019b      	lsls	r3, r3, #6
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	4313      	orrs	r3, r2
 8010132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	68fa      	ldr	r2, [r7, #12]
 801013e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	685a      	ldr	r2, [r3, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	621a      	str	r2, [r3, #32]
}
 801014e:	bf00      	nop
 8010150:	371c      	adds	r7, #28
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	feff8fff 	.word	0xfeff8fff
 8010160:	40010000 	.word	0x40010000
 8010164:	40010400 	.word	0x40010400
 8010168:	40014000 	.word	0x40014000
 801016c:	40014400 	.word	0x40014400
 8010170:	40014800 	.word	0x40014800

08010174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010174:	b480      	push	{r7}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a1b      	ldr	r3, [r3, #32]
 8010182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801019a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	4b21      	ldr	r3, [pc, #132]	; (8010224 <TIM_OC5_SetConfig+0xb0>)
 80101a0:	4013      	ands	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80101b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	041b      	lsls	r3, r3, #16
 80101bc:	693a      	ldr	r2, [r7, #16]
 80101be:	4313      	orrs	r3, r2
 80101c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4a18      	ldr	r2, [pc, #96]	; (8010228 <TIM_OC5_SetConfig+0xb4>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d00f      	beq.n	80101ea <TIM_OC5_SetConfig+0x76>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4a17      	ldr	r2, [pc, #92]	; (801022c <TIM_OC5_SetConfig+0xb8>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d00b      	beq.n	80101ea <TIM_OC5_SetConfig+0x76>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a16      	ldr	r2, [pc, #88]	; (8010230 <TIM_OC5_SetConfig+0xbc>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d007      	beq.n	80101ea <TIM_OC5_SetConfig+0x76>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4a15      	ldr	r2, [pc, #84]	; (8010234 <TIM_OC5_SetConfig+0xc0>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d003      	beq.n	80101ea <TIM_OC5_SetConfig+0x76>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4a14      	ldr	r2, [pc, #80]	; (8010238 <TIM_OC5_SetConfig+0xc4>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d109      	bne.n	80101fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80101f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	695b      	ldr	r3, [r3, #20]
 80101f6:	021b      	lsls	r3, r3, #8
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	621a      	str	r2, [r3, #32]
}
 8010218:	bf00      	nop
 801021a:	371c      	adds	r7, #28
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	fffeff8f 	.word	0xfffeff8f
 8010228:	40010000 	.word	0x40010000
 801022c:	40010400 	.word	0x40010400
 8010230:	40014000 	.word	0x40014000
 8010234:	40014400 	.word	0x40014400
 8010238:	40014800 	.word	0x40014800

0801023c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6a1b      	ldr	r3, [r3, #32]
 801024a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	4b22      	ldr	r3, [pc, #136]	; (80102f0 <TIM_OC6_SetConfig+0xb4>)
 8010268:	4013      	ands	r3, r2
 801026a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	021b      	lsls	r3, r3, #8
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	4313      	orrs	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801027e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	051b      	lsls	r3, r3, #20
 8010286:	693a      	ldr	r2, [r7, #16]
 8010288:	4313      	orrs	r3, r2
 801028a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a19      	ldr	r2, [pc, #100]	; (80102f4 <TIM_OC6_SetConfig+0xb8>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d00f      	beq.n	80102b4 <TIM_OC6_SetConfig+0x78>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a18      	ldr	r2, [pc, #96]	; (80102f8 <TIM_OC6_SetConfig+0xbc>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d00b      	beq.n	80102b4 <TIM_OC6_SetConfig+0x78>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a17      	ldr	r2, [pc, #92]	; (80102fc <TIM_OC6_SetConfig+0xc0>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d007      	beq.n	80102b4 <TIM_OC6_SetConfig+0x78>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a16      	ldr	r2, [pc, #88]	; (8010300 <TIM_OC6_SetConfig+0xc4>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d003      	beq.n	80102b4 <TIM_OC6_SetConfig+0x78>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a15      	ldr	r2, [pc, #84]	; (8010304 <TIM_OC6_SetConfig+0xc8>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d109      	bne.n	80102c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80102ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	029b      	lsls	r3, r3, #10
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	697a      	ldr	r2, [r7, #20]
 80102cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	693a      	ldr	r2, [r7, #16]
 80102e0:	621a      	str	r2, [r3, #32]
}
 80102e2:	bf00      	nop
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	feff8fff 	.word	0xfeff8fff
 80102f4:	40010000 	.word	0x40010000
 80102f8:	40010400 	.word	0x40010400
 80102fc:	40014000 	.word	0x40014000
 8010300:	40014400 	.word	0x40014400
 8010304:	40014800 	.word	0x40014800

08010308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010308:	b480      	push	{r7}
 801030a:	b087      	sub	sp, #28
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f003 031f 	and.w	r3, r3, #31
 801031a:	2201      	movs	r2, #1
 801031c:	fa02 f303 	lsl.w	r3, r2, r3
 8010320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6a1a      	ldr	r2, [r3, #32]
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	43db      	mvns	r3, r3
 801032a:	401a      	ands	r2, r3
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	6a1a      	ldr	r2, [r3, #32]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	f003 031f 	and.w	r3, r3, #31
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	fa01 f303 	lsl.w	r3, r1, r3
 8010340:	431a      	orrs	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	621a      	str	r2, [r3, #32]
}
 8010346:	bf00      	nop
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
	...

08010354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010364:	2b01      	cmp	r3, #1
 8010366:	d101      	bne.n	801036c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010368:	2302      	movs	r3, #2
 801036a:	e077      	b.n	801045c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2201      	movs	r2, #1
 8010370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2202      	movs	r2, #2
 8010378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a35      	ldr	r2, [pc, #212]	; (8010468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d004      	beq.n	80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a34      	ldr	r2, [pc, #208]	; (801046c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d108      	bne.n	80103b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80103a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	4313      	orrs	r3, r2
 80103b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	4313      	orrs	r3, r2
 80103c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a25      	ldr	r2, [pc, #148]	; (8010468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d02c      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103de:	d027      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a22      	ldr	r2, [pc, #136]	; (8010470 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d022      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4a21      	ldr	r2, [pc, #132]	; (8010474 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d01d      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a1f      	ldr	r2, [pc, #124]	; (8010478 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d018      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4a1a      	ldr	r2, [pc, #104]	; (801046c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d013      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a1b      	ldr	r2, [pc, #108]	; (801047c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d00e      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a1a      	ldr	r2, [pc, #104]	; (8010480 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d009      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a18      	ldr	r2, [pc, #96]	; (8010484 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d004      	beq.n	8010430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a17      	ldr	r2, [pc, #92]	; (8010488 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d10c      	bne.n	801044a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010436:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	4313      	orrs	r3, r2
 8010440:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	68ba      	ldr	r2, [r7, #8]
 8010448:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2201      	movs	r2, #1
 801044e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	40010000 	.word	0x40010000
 801046c:	40010400 	.word	0x40010400
 8010470:	40000400 	.word	0x40000400
 8010474:	40000800 	.word	0x40000800
 8010478:	40000c00 	.word	0x40000c00
 801047c:	40001800 	.word	0x40001800
 8010480:	40014000 	.word	0x40014000
 8010484:	4000e000 	.word	0x4000e000
 8010488:	4000e400 	.word	0x4000e400

0801048c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010494:	bf00      	nop
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80104bc:	bf00      	nop
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d101      	bne.n	80104da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e042      	b.n	8010560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d106      	bne.n	80104f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7f2 fd3f 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2224      	movs	r2, #36	; 0x24
 80104f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f022 0201 	bic.w	r2, r2, #1
 8010508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 f82c 	bl	8010568 <UART_SetConfig>
 8010510:	4603      	mov	r3, r0
 8010512:	2b01      	cmp	r3, #1
 8010514:	d101      	bne.n	801051a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010516:	2301      	movs	r3, #1
 8010518:	e022      	b.n	8010560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fe8c 	bl	8011240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	689a      	ldr	r2, [r3, #8]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f042 0201 	orr.w	r2, r2, #1
 8010556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 ff13 	bl	8011384 <UART_CheckIdleState>
 801055e:	4603      	mov	r3, r0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801056c:	b092      	sub	sp, #72	; 0x48
 801056e:	af00      	add	r7, sp, #0
 8010570:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	689a      	ldr	r2, [r3, #8]
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	431a      	orrs	r2, r3
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	695b      	ldr	r3, [r3, #20]
 8010586:	431a      	orrs	r2, r3
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	69db      	ldr	r3, [r3, #28]
 801058c:	4313      	orrs	r3, r2
 801058e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	4bbe      	ldr	r3, [pc, #760]	; (8010890 <UART_SetConfig+0x328>)
 8010598:	4013      	ands	r3, r2
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	6812      	ldr	r2, [r2, #0]
 801059e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105a0:	430b      	orrs	r3, r1
 80105a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	68da      	ldr	r2, [r3, #12]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	430a      	orrs	r2, r1
 80105b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	699b      	ldr	r3, [r3, #24]
 80105be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4ab3      	ldr	r2, [pc, #716]	; (8010894 <UART_SetConfig+0x32c>)
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d004      	beq.n	80105d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105d0:	4313      	orrs	r3, r2
 80105d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	689a      	ldr	r2, [r3, #8]
 80105da:	4baf      	ldr	r3, [pc, #700]	; (8010898 <UART_SetConfig+0x330>)
 80105dc:	4013      	ands	r3, r2
 80105de:	697a      	ldr	r2, [r7, #20]
 80105e0:	6812      	ldr	r2, [r2, #0]
 80105e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105e4:	430b      	orrs	r3, r1
 80105e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ee:	f023 010f 	bic.w	r1, r3, #15
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	430a      	orrs	r2, r1
 80105fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4aa6      	ldr	r2, [pc, #664]	; (801089c <UART_SetConfig+0x334>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d177      	bne.n	80106f8 <UART_SetConfig+0x190>
 8010608:	4ba5      	ldr	r3, [pc, #660]	; (80108a0 <UART_SetConfig+0x338>)
 801060a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801060c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010610:	2b28      	cmp	r3, #40	; 0x28
 8010612:	d86d      	bhi.n	80106f0 <UART_SetConfig+0x188>
 8010614:	a201      	add	r2, pc, #4	; (adr r2, 801061c <UART_SetConfig+0xb4>)
 8010616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801061a:	bf00      	nop
 801061c:	080106c1 	.word	0x080106c1
 8010620:	080106f1 	.word	0x080106f1
 8010624:	080106f1 	.word	0x080106f1
 8010628:	080106f1 	.word	0x080106f1
 801062c:	080106f1 	.word	0x080106f1
 8010630:	080106f1 	.word	0x080106f1
 8010634:	080106f1 	.word	0x080106f1
 8010638:	080106f1 	.word	0x080106f1
 801063c:	080106c9 	.word	0x080106c9
 8010640:	080106f1 	.word	0x080106f1
 8010644:	080106f1 	.word	0x080106f1
 8010648:	080106f1 	.word	0x080106f1
 801064c:	080106f1 	.word	0x080106f1
 8010650:	080106f1 	.word	0x080106f1
 8010654:	080106f1 	.word	0x080106f1
 8010658:	080106f1 	.word	0x080106f1
 801065c:	080106d1 	.word	0x080106d1
 8010660:	080106f1 	.word	0x080106f1
 8010664:	080106f1 	.word	0x080106f1
 8010668:	080106f1 	.word	0x080106f1
 801066c:	080106f1 	.word	0x080106f1
 8010670:	080106f1 	.word	0x080106f1
 8010674:	080106f1 	.word	0x080106f1
 8010678:	080106f1 	.word	0x080106f1
 801067c:	080106d9 	.word	0x080106d9
 8010680:	080106f1 	.word	0x080106f1
 8010684:	080106f1 	.word	0x080106f1
 8010688:	080106f1 	.word	0x080106f1
 801068c:	080106f1 	.word	0x080106f1
 8010690:	080106f1 	.word	0x080106f1
 8010694:	080106f1 	.word	0x080106f1
 8010698:	080106f1 	.word	0x080106f1
 801069c:	080106e1 	.word	0x080106e1
 80106a0:	080106f1 	.word	0x080106f1
 80106a4:	080106f1 	.word	0x080106f1
 80106a8:	080106f1 	.word	0x080106f1
 80106ac:	080106f1 	.word	0x080106f1
 80106b0:	080106f1 	.word	0x080106f1
 80106b4:	080106f1 	.word	0x080106f1
 80106b8:	080106f1 	.word	0x080106f1
 80106bc:	080106e9 	.word	0x080106e9
 80106c0:	2301      	movs	r3, #1
 80106c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106c6:	e326      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106c8:	2304      	movs	r3, #4
 80106ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ce:	e322      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106d0:	2308      	movs	r3, #8
 80106d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106d6:	e31e      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106d8:	2310      	movs	r3, #16
 80106da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106de:	e31a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106e0:	2320      	movs	r3, #32
 80106e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e6:	e316      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106e8:	2340      	movs	r3, #64	; 0x40
 80106ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ee:	e312      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106f0:	2380      	movs	r3, #128	; 0x80
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f6:	e30e      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a69      	ldr	r2, [pc, #420]	; (80108a4 <UART_SetConfig+0x33c>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d130      	bne.n	8010764 <UART_SetConfig+0x1fc>
 8010702:	4b67      	ldr	r3, [pc, #412]	; (80108a0 <UART_SetConfig+0x338>)
 8010704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010706:	f003 0307 	and.w	r3, r3, #7
 801070a:	2b05      	cmp	r3, #5
 801070c:	d826      	bhi.n	801075c <UART_SetConfig+0x1f4>
 801070e:	a201      	add	r2, pc, #4	; (adr r2, 8010714 <UART_SetConfig+0x1ac>)
 8010710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010714:	0801072d 	.word	0x0801072d
 8010718:	08010735 	.word	0x08010735
 801071c:	0801073d 	.word	0x0801073d
 8010720:	08010745 	.word	0x08010745
 8010724:	0801074d 	.word	0x0801074d
 8010728:	08010755 	.word	0x08010755
 801072c:	2300      	movs	r3, #0
 801072e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010732:	e2f0      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010734:	2304      	movs	r3, #4
 8010736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801073a:	e2ec      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801073c:	2308      	movs	r3, #8
 801073e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010742:	e2e8      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010744:	2310      	movs	r3, #16
 8010746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801074a:	e2e4      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801074c:	2320      	movs	r3, #32
 801074e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010752:	e2e0      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010754:	2340      	movs	r3, #64	; 0x40
 8010756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801075a:	e2dc      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801075c:	2380      	movs	r3, #128	; 0x80
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010762:	e2d8      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4a4f      	ldr	r2, [pc, #316]	; (80108a8 <UART_SetConfig+0x340>)
 801076a:	4293      	cmp	r3, r2
 801076c:	d130      	bne.n	80107d0 <UART_SetConfig+0x268>
 801076e:	4b4c      	ldr	r3, [pc, #304]	; (80108a0 <UART_SetConfig+0x338>)
 8010770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b05      	cmp	r3, #5
 8010778:	d826      	bhi.n	80107c8 <UART_SetConfig+0x260>
 801077a:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <UART_SetConfig+0x218>)
 801077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010780:	08010799 	.word	0x08010799
 8010784:	080107a1 	.word	0x080107a1
 8010788:	080107a9 	.word	0x080107a9
 801078c:	080107b1 	.word	0x080107b1
 8010790:	080107b9 	.word	0x080107b9
 8010794:	080107c1 	.word	0x080107c1
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801079e:	e2ba      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107a0:	2304      	movs	r3, #4
 80107a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107a6:	e2b6      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107a8:	2308      	movs	r3, #8
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ae:	e2b2      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107b0:	2310      	movs	r3, #16
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b6:	e2ae      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107b8:	2320      	movs	r3, #32
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107be:	e2aa      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c6:	e2a6      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107c8:	2380      	movs	r3, #128	; 0x80
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ce:	e2a2      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a35      	ldr	r2, [pc, #212]	; (80108ac <UART_SetConfig+0x344>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d130      	bne.n	801083c <UART_SetConfig+0x2d4>
 80107da:	4b31      	ldr	r3, [pc, #196]	; (80108a0 <UART_SetConfig+0x338>)
 80107dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107de:	f003 0307 	and.w	r3, r3, #7
 80107e2:	2b05      	cmp	r3, #5
 80107e4:	d826      	bhi.n	8010834 <UART_SetConfig+0x2cc>
 80107e6:	a201      	add	r2, pc, #4	; (adr r2, 80107ec <UART_SetConfig+0x284>)
 80107e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ec:	08010805 	.word	0x08010805
 80107f0:	0801080d 	.word	0x0801080d
 80107f4:	08010815 	.word	0x08010815
 80107f8:	0801081d 	.word	0x0801081d
 80107fc:	08010825 	.word	0x08010825
 8010800:	0801082d 	.word	0x0801082d
 8010804:	2300      	movs	r3, #0
 8010806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801080a:	e284      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801080c:	2304      	movs	r3, #4
 801080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010812:	e280      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010814:	2308      	movs	r3, #8
 8010816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081a:	e27c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801081c:	2310      	movs	r3, #16
 801081e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010822:	e278      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010824:	2320      	movs	r3, #32
 8010826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801082a:	e274      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801082c:	2340      	movs	r3, #64	; 0x40
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010832:	e270      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010834:	2380      	movs	r3, #128	; 0x80
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083a:	e26c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a1b      	ldr	r2, [pc, #108]	; (80108b0 <UART_SetConfig+0x348>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d142      	bne.n	80108cc <UART_SetConfig+0x364>
 8010846:	4b16      	ldr	r3, [pc, #88]	; (80108a0 <UART_SetConfig+0x338>)
 8010848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	2b05      	cmp	r3, #5
 8010850:	d838      	bhi.n	80108c4 <UART_SetConfig+0x35c>
 8010852:	a201      	add	r2, pc, #4	; (adr r2, 8010858 <UART_SetConfig+0x2f0>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	08010871 	.word	0x08010871
 801085c:	08010879 	.word	0x08010879
 8010860:	08010881 	.word	0x08010881
 8010864:	08010889 	.word	0x08010889
 8010868:	080108b5 	.word	0x080108b5
 801086c:	080108bd 	.word	0x080108bd
 8010870:	2300      	movs	r3, #0
 8010872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010876:	e24e      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010878:	2304      	movs	r3, #4
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e24a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010880:	2308      	movs	r3, #8
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e246      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010888:	2310      	movs	r3, #16
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e242      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010890:	cfff69f3 	.word	0xcfff69f3
 8010894:	58000c00 	.word	0x58000c00
 8010898:	11fff4ff 	.word	0x11fff4ff
 801089c:	40011000 	.word	0x40011000
 80108a0:	58024400 	.word	0x58024400
 80108a4:	40004400 	.word	0x40004400
 80108a8:	40004800 	.word	0x40004800
 80108ac:	40004c00 	.word	0x40004c00
 80108b0:	40005000 	.word	0x40005000
 80108b4:	2320      	movs	r3, #32
 80108b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ba:	e22c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80108bc:	2340      	movs	r3, #64	; 0x40
 80108be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c2:	e228      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80108c4:	2380      	movs	r3, #128	; 0x80
 80108c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ca:	e224      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4ab1      	ldr	r2, [pc, #708]	; (8010b98 <UART_SetConfig+0x630>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d176      	bne.n	80109c4 <UART_SetConfig+0x45c>
 80108d6:	4bb1      	ldr	r3, [pc, #708]	; (8010b9c <UART_SetConfig+0x634>)
 80108d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80108de:	2b28      	cmp	r3, #40	; 0x28
 80108e0:	d86c      	bhi.n	80109bc <UART_SetConfig+0x454>
 80108e2:	a201      	add	r2, pc, #4	; (adr r2, 80108e8 <UART_SetConfig+0x380>)
 80108e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e8:	0801098d 	.word	0x0801098d
 80108ec:	080109bd 	.word	0x080109bd
 80108f0:	080109bd 	.word	0x080109bd
 80108f4:	080109bd 	.word	0x080109bd
 80108f8:	080109bd 	.word	0x080109bd
 80108fc:	080109bd 	.word	0x080109bd
 8010900:	080109bd 	.word	0x080109bd
 8010904:	080109bd 	.word	0x080109bd
 8010908:	08010995 	.word	0x08010995
 801090c:	080109bd 	.word	0x080109bd
 8010910:	080109bd 	.word	0x080109bd
 8010914:	080109bd 	.word	0x080109bd
 8010918:	080109bd 	.word	0x080109bd
 801091c:	080109bd 	.word	0x080109bd
 8010920:	080109bd 	.word	0x080109bd
 8010924:	080109bd 	.word	0x080109bd
 8010928:	0801099d 	.word	0x0801099d
 801092c:	080109bd 	.word	0x080109bd
 8010930:	080109bd 	.word	0x080109bd
 8010934:	080109bd 	.word	0x080109bd
 8010938:	080109bd 	.word	0x080109bd
 801093c:	080109bd 	.word	0x080109bd
 8010940:	080109bd 	.word	0x080109bd
 8010944:	080109bd 	.word	0x080109bd
 8010948:	080109a5 	.word	0x080109a5
 801094c:	080109bd 	.word	0x080109bd
 8010950:	080109bd 	.word	0x080109bd
 8010954:	080109bd 	.word	0x080109bd
 8010958:	080109bd 	.word	0x080109bd
 801095c:	080109bd 	.word	0x080109bd
 8010960:	080109bd 	.word	0x080109bd
 8010964:	080109bd 	.word	0x080109bd
 8010968:	080109ad 	.word	0x080109ad
 801096c:	080109bd 	.word	0x080109bd
 8010970:	080109bd 	.word	0x080109bd
 8010974:	080109bd 	.word	0x080109bd
 8010978:	080109bd 	.word	0x080109bd
 801097c:	080109bd 	.word	0x080109bd
 8010980:	080109bd 	.word	0x080109bd
 8010984:	080109bd 	.word	0x080109bd
 8010988:	080109b5 	.word	0x080109b5
 801098c:	2301      	movs	r3, #1
 801098e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010992:	e1c0      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010994:	2304      	movs	r3, #4
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099a:	e1bc      	b.n	8010d16 <UART_SetConfig+0x7ae>
 801099c:	2308      	movs	r3, #8
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e1b8      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80109a4:	2310      	movs	r3, #16
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e1b4      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80109ac:	2320      	movs	r3, #32
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b2:	e1b0      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80109b4:	2340      	movs	r3, #64	; 0x40
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ba:	e1ac      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80109bc:	2380      	movs	r3, #128	; 0x80
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e1a8      	b.n	8010d16 <UART_SetConfig+0x7ae>
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a75      	ldr	r2, [pc, #468]	; (8010ba0 <UART_SetConfig+0x638>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d130      	bne.n	8010a30 <UART_SetConfig+0x4c8>
 80109ce:	4b73      	ldr	r3, [pc, #460]	; (8010b9c <UART_SetConfig+0x634>)
 80109d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d2:	f003 0307 	and.w	r3, r3, #7
 80109d6:	2b05      	cmp	r3, #5
 80109d8:	d826      	bhi.n	8010a28 <UART_SetConfig+0x4c0>
 80109da:	a201      	add	r2, pc, #4	; (adr r2, 80109e0 <UART_SetConfig+0x478>)
 80109dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e0:	080109f9 	.word	0x080109f9
 80109e4:	08010a01 	.word	0x08010a01
 80109e8:	08010a09 	.word	0x08010a09
 80109ec:	08010a11 	.word	0x08010a11
 80109f0:	08010a19 	.word	0x08010a19
 80109f4:	08010a21 	.word	0x08010a21
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fe:	e18a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a00:	2304      	movs	r3, #4
 8010a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a06:	e186      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a08:	2308      	movs	r3, #8
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e182      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a10:	2310      	movs	r3, #16
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e17e      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a18:	2320      	movs	r3, #32
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e17a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a20:	2340      	movs	r3, #64	; 0x40
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e176      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a28:	2380      	movs	r3, #128	; 0x80
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e172      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a5b      	ldr	r2, [pc, #364]	; (8010ba4 <UART_SetConfig+0x63c>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d130      	bne.n	8010a9c <UART_SetConfig+0x534>
 8010a3a:	4b58      	ldr	r3, [pc, #352]	; (8010b9c <UART_SetConfig+0x634>)
 8010a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a3e:	f003 0307 	and.w	r3, r3, #7
 8010a42:	2b05      	cmp	r3, #5
 8010a44:	d826      	bhi.n	8010a94 <UART_SetConfig+0x52c>
 8010a46:	a201      	add	r2, pc, #4	; (adr r2, 8010a4c <UART_SetConfig+0x4e4>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010a65 	.word	0x08010a65
 8010a50:	08010a6d 	.word	0x08010a6d
 8010a54:	08010a75 	.word	0x08010a75
 8010a58:	08010a7d 	.word	0x08010a7d
 8010a5c:	08010a85 	.word	0x08010a85
 8010a60:	08010a8d 	.word	0x08010a8d
 8010a64:	2300      	movs	r3, #0
 8010a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6a:	e154      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a6c:	2304      	movs	r3, #4
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a72:	e150      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a74:	2308      	movs	r3, #8
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e14c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a7c:	2310      	movs	r3, #16
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e148      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a84:	2320      	movs	r3, #32
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e144      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e140      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a94:	2380      	movs	r3, #128	; 0x80
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e13c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a41      	ldr	r2, [pc, #260]	; (8010ba8 <UART_SetConfig+0x640>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	f040 8082 	bne.w	8010bac <UART_SetConfig+0x644>
 8010aa8:	4b3c      	ldr	r3, [pc, #240]	; (8010b9c <UART_SetConfig+0x634>)
 8010aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ab0:	2b28      	cmp	r3, #40	; 0x28
 8010ab2:	d86d      	bhi.n	8010b90 <UART_SetConfig+0x628>
 8010ab4:	a201      	add	r2, pc, #4	; (adr r2, 8010abc <UART_SetConfig+0x554>)
 8010ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aba:	bf00      	nop
 8010abc:	08010b61 	.word	0x08010b61
 8010ac0:	08010b91 	.word	0x08010b91
 8010ac4:	08010b91 	.word	0x08010b91
 8010ac8:	08010b91 	.word	0x08010b91
 8010acc:	08010b91 	.word	0x08010b91
 8010ad0:	08010b91 	.word	0x08010b91
 8010ad4:	08010b91 	.word	0x08010b91
 8010ad8:	08010b91 	.word	0x08010b91
 8010adc:	08010b69 	.word	0x08010b69
 8010ae0:	08010b91 	.word	0x08010b91
 8010ae4:	08010b91 	.word	0x08010b91
 8010ae8:	08010b91 	.word	0x08010b91
 8010aec:	08010b91 	.word	0x08010b91
 8010af0:	08010b91 	.word	0x08010b91
 8010af4:	08010b91 	.word	0x08010b91
 8010af8:	08010b91 	.word	0x08010b91
 8010afc:	08010b71 	.word	0x08010b71
 8010b00:	08010b91 	.word	0x08010b91
 8010b04:	08010b91 	.word	0x08010b91
 8010b08:	08010b91 	.word	0x08010b91
 8010b0c:	08010b91 	.word	0x08010b91
 8010b10:	08010b91 	.word	0x08010b91
 8010b14:	08010b91 	.word	0x08010b91
 8010b18:	08010b91 	.word	0x08010b91
 8010b1c:	08010b79 	.word	0x08010b79
 8010b20:	08010b91 	.word	0x08010b91
 8010b24:	08010b91 	.word	0x08010b91
 8010b28:	08010b91 	.word	0x08010b91
 8010b2c:	08010b91 	.word	0x08010b91
 8010b30:	08010b91 	.word	0x08010b91
 8010b34:	08010b91 	.word	0x08010b91
 8010b38:	08010b91 	.word	0x08010b91
 8010b3c:	08010b81 	.word	0x08010b81
 8010b40:	08010b91 	.word	0x08010b91
 8010b44:	08010b91 	.word	0x08010b91
 8010b48:	08010b91 	.word	0x08010b91
 8010b4c:	08010b91 	.word	0x08010b91
 8010b50:	08010b91 	.word	0x08010b91
 8010b54:	08010b91 	.word	0x08010b91
 8010b58:	08010b91 	.word	0x08010b91
 8010b5c:	08010b89 	.word	0x08010b89
 8010b60:	2301      	movs	r3, #1
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b66:	e0d6      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b68:	2304      	movs	r3, #4
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6e:	e0d2      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b70:	2308      	movs	r3, #8
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b76:	e0ce      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b78:	2310      	movs	r3, #16
 8010b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7e:	e0ca      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b80:	2320      	movs	r3, #32
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b86:	e0c6      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b88:	2340      	movs	r3, #64	; 0x40
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8e:	e0c2      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b90:	2380      	movs	r3, #128	; 0x80
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e0be      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010b98:	40011400 	.word	0x40011400
 8010b9c:	58024400 	.word	0x58024400
 8010ba0:	40007800 	.word	0x40007800
 8010ba4:	40007c00 	.word	0x40007c00
 8010ba8:	40011800 	.word	0x40011800
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4aad      	ldr	r2, [pc, #692]	; (8010e68 <UART_SetConfig+0x900>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d176      	bne.n	8010ca4 <UART_SetConfig+0x73c>
 8010bb6:	4bad      	ldr	r3, [pc, #692]	; (8010e6c <UART_SetConfig+0x904>)
 8010bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bbe:	2b28      	cmp	r3, #40	; 0x28
 8010bc0:	d86c      	bhi.n	8010c9c <UART_SetConfig+0x734>
 8010bc2:	a201      	add	r2, pc, #4	; (adr r2, 8010bc8 <UART_SetConfig+0x660>)
 8010bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc8:	08010c6d 	.word	0x08010c6d
 8010bcc:	08010c9d 	.word	0x08010c9d
 8010bd0:	08010c9d 	.word	0x08010c9d
 8010bd4:	08010c9d 	.word	0x08010c9d
 8010bd8:	08010c9d 	.word	0x08010c9d
 8010bdc:	08010c9d 	.word	0x08010c9d
 8010be0:	08010c9d 	.word	0x08010c9d
 8010be4:	08010c9d 	.word	0x08010c9d
 8010be8:	08010c75 	.word	0x08010c75
 8010bec:	08010c9d 	.word	0x08010c9d
 8010bf0:	08010c9d 	.word	0x08010c9d
 8010bf4:	08010c9d 	.word	0x08010c9d
 8010bf8:	08010c9d 	.word	0x08010c9d
 8010bfc:	08010c9d 	.word	0x08010c9d
 8010c00:	08010c9d 	.word	0x08010c9d
 8010c04:	08010c9d 	.word	0x08010c9d
 8010c08:	08010c7d 	.word	0x08010c7d
 8010c0c:	08010c9d 	.word	0x08010c9d
 8010c10:	08010c9d 	.word	0x08010c9d
 8010c14:	08010c9d 	.word	0x08010c9d
 8010c18:	08010c9d 	.word	0x08010c9d
 8010c1c:	08010c9d 	.word	0x08010c9d
 8010c20:	08010c9d 	.word	0x08010c9d
 8010c24:	08010c9d 	.word	0x08010c9d
 8010c28:	08010c85 	.word	0x08010c85
 8010c2c:	08010c9d 	.word	0x08010c9d
 8010c30:	08010c9d 	.word	0x08010c9d
 8010c34:	08010c9d 	.word	0x08010c9d
 8010c38:	08010c9d 	.word	0x08010c9d
 8010c3c:	08010c9d 	.word	0x08010c9d
 8010c40:	08010c9d 	.word	0x08010c9d
 8010c44:	08010c9d 	.word	0x08010c9d
 8010c48:	08010c8d 	.word	0x08010c8d
 8010c4c:	08010c9d 	.word	0x08010c9d
 8010c50:	08010c9d 	.word	0x08010c9d
 8010c54:	08010c9d 	.word	0x08010c9d
 8010c58:	08010c9d 	.word	0x08010c9d
 8010c5c:	08010c9d 	.word	0x08010c9d
 8010c60:	08010c9d 	.word	0x08010c9d
 8010c64:	08010c9d 	.word	0x08010c9d
 8010c68:	08010c95 	.word	0x08010c95
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c72:	e050      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c74:	2304      	movs	r3, #4
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e04c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c7c:	2308      	movs	r3, #8
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e048      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c84:	2310      	movs	r3, #16
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e044      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c8c:	2320      	movs	r3, #32
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e040      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c94:	2340      	movs	r3, #64	; 0x40
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e03c      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010c9c:	2380      	movs	r3, #128	; 0x80
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e038      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a71      	ldr	r2, [pc, #452]	; (8010e70 <UART_SetConfig+0x908>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d130      	bne.n	8010d10 <UART_SetConfig+0x7a8>
 8010cae:	4b6f      	ldr	r3, [pc, #444]	; (8010e6c <UART_SetConfig+0x904>)
 8010cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cb2:	f003 0307 	and.w	r3, r3, #7
 8010cb6:	2b05      	cmp	r3, #5
 8010cb8:	d826      	bhi.n	8010d08 <UART_SetConfig+0x7a0>
 8010cba:	a201      	add	r2, pc, #4	; (adr r2, 8010cc0 <UART_SetConfig+0x758>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010cd9 	.word	0x08010cd9
 8010cc4:	08010ce1 	.word	0x08010ce1
 8010cc8:	08010ce9 	.word	0x08010ce9
 8010ccc:	08010cf1 	.word	0x08010cf1
 8010cd0:	08010cf9 	.word	0x08010cf9
 8010cd4:	08010d01 	.word	0x08010d01
 8010cd8:	2302      	movs	r3, #2
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cde:	e01a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010ce0:	2304      	movs	r3, #4
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e016      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010ce8:	2308      	movs	r3, #8
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e012      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010cf0:	2310      	movs	r3, #16
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e00e      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010cf8:	2320      	movs	r3, #32
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e00a      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010d00:	2340      	movs	r3, #64	; 0x40
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e006      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010d08:	2380      	movs	r3, #128	; 0x80
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e002      	b.n	8010d16 <UART_SetConfig+0x7ae>
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a55      	ldr	r2, [pc, #340]	; (8010e70 <UART_SetConfig+0x908>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	f040 80f8 	bne.w	8010f12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010d22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010d26:	2b20      	cmp	r3, #32
 8010d28:	dc46      	bgt.n	8010db8 <UART_SetConfig+0x850>
 8010d2a:	2b02      	cmp	r3, #2
 8010d2c:	db75      	blt.n	8010e1a <UART_SetConfig+0x8b2>
 8010d2e:	3b02      	subs	r3, #2
 8010d30:	2b1e      	cmp	r3, #30
 8010d32:	d872      	bhi.n	8010e1a <UART_SetConfig+0x8b2>
 8010d34:	a201      	add	r2, pc, #4	; (adr r2, 8010d3c <UART_SetConfig+0x7d4>)
 8010d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3a:	bf00      	nop
 8010d3c:	08010dbf 	.word	0x08010dbf
 8010d40:	08010e1b 	.word	0x08010e1b
 8010d44:	08010dc7 	.word	0x08010dc7
 8010d48:	08010e1b 	.word	0x08010e1b
 8010d4c:	08010e1b 	.word	0x08010e1b
 8010d50:	08010e1b 	.word	0x08010e1b
 8010d54:	08010dd7 	.word	0x08010dd7
 8010d58:	08010e1b 	.word	0x08010e1b
 8010d5c:	08010e1b 	.word	0x08010e1b
 8010d60:	08010e1b 	.word	0x08010e1b
 8010d64:	08010e1b 	.word	0x08010e1b
 8010d68:	08010e1b 	.word	0x08010e1b
 8010d6c:	08010e1b 	.word	0x08010e1b
 8010d70:	08010e1b 	.word	0x08010e1b
 8010d74:	08010de7 	.word	0x08010de7
 8010d78:	08010e1b 	.word	0x08010e1b
 8010d7c:	08010e1b 	.word	0x08010e1b
 8010d80:	08010e1b 	.word	0x08010e1b
 8010d84:	08010e1b 	.word	0x08010e1b
 8010d88:	08010e1b 	.word	0x08010e1b
 8010d8c:	08010e1b 	.word	0x08010e1b
 8010d90:	08010e1b 	.word	0x08010e1b
 8010d94:	08010e1b 	.word	0x08010e1b
 8010d98:	08010e1b 	.word	0x08010e1b
 8010d9c:	08010e1b 	.word	0x08010e1b
 8010da0:	08010e1b 	.word	0x08010e1b
 8010da4:	08010e1b 	.word	0x08010e1b
 8010da8:	08010e1b 	.word	0x08010e1b
 8010dac:	08010e1b 	.word	0x08010e1b
 8010db0:	08010e1b 	.word	0x08010e1b
 8010db4:	08010e0d 	.word	0x08010e0d
 8010db8:	2b40      	cmp	r3, #64	; 0x40
 8010dba:	d02a      	beq.n	8010e12 <UART_SetConfig+0x8aa>
 8010dbc:	e02d      	b.n	8010e1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010dbe:	f7fb f8c3 	bl	800bf48 <HAL_RCCEx_GetD3PCLK1Freq>
 8010dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010dc4:	e02f      	b.n	8010e26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fb f8d2 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dd4:	e027      	b.n	8010e26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dd6:	f107 0318 	add.w	r3, r7, #24
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fb fa1e 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010de4:	e01f      	b.n	8010e26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010de6:	4b21      	ldr	r3, [pc, #132]	; (8010e6c <UART_SetConfig+0x904>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f003 0320 	and.w	r3, r3, #32
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d009      	beq.n	8010e06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010df2:	4b1e      	ldr	r3, [pc, #120]	; (8010e6c <UART_SetConfig+0x904>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	08db      	lsrs	r3, r3, #3
 8010df8:	f003 0303 	and.w	r3, r3, #3
 8010dfc:	4a1d      	ldr	r2, [pc, #116]	; (8010e74 <UART_SetConfig+0x90c>)
 8010dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8010e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e04:	e00f      	b.n	8010e26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010e06:	4b1b      	ldr	r3, [pc, #108]	; (8010e74 <UART_SetConfig+0x90c>)
 8010e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e0a:	e00c      	b.n	8010e26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e0c:	4b1a      	ldr	r3, [pc, #104]	; (8010e78 <UART_SetConfig+0x910>)
 8010e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e10:	e009      	b.n	8010e26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e18:	e005      	b.n	8010e26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 81ee 	beq.w	801120a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e32:	4a12      	ldr	r2, [pc, #72]	; (8010e7c <UART_SetConfig+0x914>)
 8010e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e40:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	685a      	ldr	r2, [r3, #4]
 8010e46:	4613      	mov	r3, r2
 8010e48:	005b      	lsls	r3, r3, #1
 8010e4a:	4413      	add	r3, r2
 8010e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d305      	bcc.n	8010e5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d910      	bls.n	8010e80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e64:	e1d1      	b.n	801120a <UART_SetConfig+0xca2>
 8010e66:	bf00      	nop
 8010e68:	40011c00 	.word	0x40011c00
 8010e6c:	58024400 	.word	0x58024400
 8010e70:	58000c00 	.word	0x58000c00
 8010e74:	03d09000 	.word	0x03d09000
 8010e78:	003d0900 	.word	0x003d0900
 8010e7c:	080174ac 	.word	0x080174ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e82:	2200      	movs	r2, #0
 8010e84:	60bb      	str	r3, [r7, #8]
 8010e86:	60fa      	str	r2, [r7, #12]
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8c:	4ac0      	ldr	r2, [pc, #768]	; (8011190 <UART_SetConfig+0xc28>)
 8010e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	2200      	movs	r2, #0
 8010e96:	603b      	str	r3, [r7, #0]
 8010e98:	607a      	str	r2, [r7, #4]
 8010e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ea2:	f7ef fa9d 	bl	80003e0 <__aeabi_uldivmod>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4610      	mov	r0, r2
 8010eac:	4619      	mov	r1, r3
 8010eae:	f04f 0200 	mov.w	r2, #0
 8010eb2:	f04f 0300 	mov.w	r3, #0
 8010eb6:	020b      	lsls	r3, r1, #8
 8010eb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010ebc:	0202      	lsls	r2, r0, #8
 8010ebe:	6979      	ldr	r1, [r7, #20]
 8010ec0:	6849      	ldr	r1, [r1, #4]
 8010ec2:	0849      	lsrs	r1, r1, #1
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	4605      	mov	r5, r0
 8010eca:	eb12 0804 	adds.w	r8, r2, r4
 8010ece:	eb43 0905 	adc.w	r9, r3, r5
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	469a      	mov	sl, r3
 8010eda:	4693      	mov	fp, r2
 8010edc:	4652      	mov	r2, sl
 8010ede:	465b      	mov	r3, fp
 8010ee0:	4640      	mov	r0, r8
 8010ee2:	4649      	mov	r1, r9
 8010ee4:	f7ef fa7c 	bl	80003e0 <__aeabi_uldivmod>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	4613      	mov	r3, r2
 8010eee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ef6:	d308      	bcc.n	8010f0a <UART_SetConfig+0x9a2>
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010efe:	d204      	bcs.n	8010f0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f06:	60da      	str	r2, [r3, #12]
 8010f08:	e17f      	b.n	801120a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f10:	e17b      	b.n	801120a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	69db      	ldr	r3, [r3, #28]
 8010f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f1a:	f040 80bd 	bne.w	8011098 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010f1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f22:	2b20      	cmp	r3, #32
 8010f24:	dc48      	bgt.n	8010fb8 <UART_SetConfig+0xa50>
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	db7b      	blt.n	8011022 <UART_SetConfig+0xaba>
 8010f2a:	2b20      	cmp	r3, #32
 8010f2c:	d879      	bhi.n	8011022 <UART_SetConfig+0xaba>
 8010f2e:	a201      	add	r2, pc, #4	; (adr r2, 8010f34 <UART_SetConfig+0x9cc>)
 8010f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f34:	08010fbf 	.word	0x08010fbf
 8010f38:	08010fc7 	.word	0x08010fc7
 8010f3c:	08011023 	.word	0x08011023
 8010f40:	08011023 	.word	0x08011023
 8010f44:	08010fcf 	.word	0x08010fcf
 8010f48:	08011023 	.word	0x08011023
 8010f4c:	08011023 	.word	0x08011023
 8010f50:	08011023 	.word	0x08011023
 8010f54:	08010fdf 	.word	0x08010fdf
 8010f58:	08011023 	.word	0x08011023
 8010f5c:	08011023 	.word	0x08011023
 8010f60:	08011023 	.word	0x08011023
 8010f64:	08011023 	.word	0x08011023
 8010f68:	08011023 	.word	0x08011023
 8010f6c:	08011023 	.word	0x08011023
 8010f70:	08011023 	.word	0x08011023
 8010f74:	08010fef 	.word	0x08010fef
 8010f78:	08011023 	.word	0x08011023
 8010f7c:	08011023 	.word	0x08011023
 8010f80:	08011023 	.word	0x08011023
 8010f84:	08011023 	.word	0x08011023
 8010f88:	08011023 	.word	0x08011023
 8010f8c:	08011023 	.word	0x08011023
 8010f90:	08011023 	.word	0x08011023
 8010f94:	08011023 	.word	0x08011023
 8010f98:	08011023 	.word	0x08011023
 8010f9c:	08011023 	.word	0x08011023
 8010fa0:	08011023 	.word	0x08011023
 8010fa4:	08011023 	.word	0x08011023
 8010fa8:	08011023 	.word	0x08011023
 8010fac:	08011023 	.word	0x08011023
 8010fb0:	08011023 	.word	0x08011023
 8010fb4:	08011015 	.word	0x08011015
 8010fb8:	2b40      	cmp	r3, #64	; 0x40
 8010fba:	d02e      	beq.n	801101a <UART_SetConfig+0xab2>
 8010fbc:	e031      	b.n	8011022 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010fbe:	f7f9 f925 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 8010fc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fc4:	e033      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010fc6:	f7f9 f937 	bl	800a238 <HAL_RCC_GetPCLK2Freq>
 8010fca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fcc:	e02f      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fa ffce 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fdc:	e027      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fde:	f107 0318 	add.w	r3, r7, #24
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fb f91a 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fec:	e01f      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fee:	4b69      	ldr	r3, [pc, #420]	; (8011194 <UART_SetConfig+0xc2c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f003 0320 	and.w	r3, r3, #32
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d009      	beq.n	801100e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ffa:	4b66      	ldr	r3, [pc, #408]	; (8011194 <UART_SetConfig+0xc2c>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	08db      	lsrs	r3, r3, #3
 8011000:	f003 0303 	and.w	r3, r3, #3
 8011004:	4a64      	ldr	r2, [pc, #400]	; (8011198 <UART_SetConfig+0xc30>)
 8011006:	fa22 f303 	lsr.w	r3, r2, r3
 801100a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801100c:	e00f      	b.n	801102e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801100e:	4b62      	ldr	r3, [pc, #392]	; (8011198 <UART_SetConfig+0xc30>)
 8011010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011012:	e00c      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011014:	4b61      	ldr	r3, [pc, #388]	; (801119c <UART_SetConfig+0xc34>)
 8011016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011018:	e009      	b.n	801102e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801101e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011020:	e005      	b.n	801102e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011022:	2300      	movs	r3, #0
 8011024:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011026:	2301      	movs	r3, #1
 8011028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801102c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 80ea 	beq.w	801120a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103a:	4a55      	ldr	r2, [pc, #340]	; (8011190 <UART_SetConfig+0xc28>)
 801103c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011040:	461a      	mov	r2, r3
 8011042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011044:	fbb3 f3f2 	udiv	r3, r3, r2
 8011048:	005a      	lsls	r2, r3, #1
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	085b      	lsrs	r3, r3, #1
 8011050:	441a      	add	r2, r3
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	fbb2 f3f3 	udiv	r3, r2, r3
 801105a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105e:	2b0f      	cmp	r3, #15
 8011060:	d916      	bls.n	8011090 <UART_SetConfig+0xb28>
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011068:	d212      	bcs.n	8011090 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	b29b      	uxth	r3, r3
 801106e:	f023 030f 	bic.w	r3, r3, #15
 8011072:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	085b      	lsrs	r3, r3, #1
 8011078:	b29b      	uxth	r3, r3
 801107a:	f003 0307 	and.w	r3, r3, #7
 801107e:	b29a      	uxth	r2, r3
 8011080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011082:	4313      	orrs	r3, r2
 8011084:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801108c:	60da      	str	r2, [r3, #12]
 801108e:	e0bc      	b.n	801120a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011090:	2301      	movs	r3, #1
 8011092:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011096:	e0b8      	b.n	801120a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011098:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801109c:	2b20      	cmp	r3, #32
 801109e:	dc4b      	bgt.n	8011138 <UART_SetConfig+0xbd0>
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f2c0 8087 	blt.w	80111b4 <UART_SetConfig+0xc4c>
 80110a6:	2b20      	cmp	r3, #32
 80110a8:	f200 8084 	bhi.w	80111b4 <UART_SetConfig+0xc4c>
 80110ac:	a201      	add	r2, pc, #4	; (adr r2, 80110b4 <UART_SetConfig+0xb4c>)
 80110ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b2:	bf00      	nop
 80110b4:	0801113f 	.word	0x0801113f
 80110b8:	08011147 	.word	0x08011147
 80110bc:	080111b5 	.word	0x080111b5
 80110c0:	080111b5 	.word	0x080111b5
 80110c4:	0801114f 	.word	0x0801114f
 80110c8:	080111b5 	.word	0x080111b5
 80110cc:	080111b5 	.word	0x080111b5
 80110d0:	080111b5 	.word	0x080111b5
 80110d4:	0801115f 	.word	0x0801115f
 80110d8:	080111b5 	.word	0x080111b5
 80110dc:	080111b5 	.word	0x080111b5
 80110e0:	080111b5 	.word	0x080111b5
 80110e4:	080111b5 	.word	0x080111b5
 80110e8:	080111b5 	.word	0x080111b5
 80110ec:	080111b5 	.word	0x080111b5
 80110f0:	080111b5 	.word	0x080111b5
 80110f4:	0801116f 	.word	0x0801116f
 80110f8:	080111b5 	.word	0x080111b5
 80110fc:	080111b5 	.word	0x080111b5
 8011100:	080111b5 	.word	0x080111b5
 8011104:	080111b5 	.word	0x080111b5
 8011108:	080111b5 	.word	0x080111b5
 801110c:	080111b5 	.word	0x080111b5
 8011110:	080111b5 	.word	0x080111b5
 8011114:	080111b5 	.word	0x080111b5
 8011118:	080111b5 	.word	0x080111b5
 801111c:	080111b5 	.word	0x080111b5
 8011120:	080111b5 	.word	0x080111b5
 8011124:	080111b5 	.word	0x080111b5
 8011128:	080111b5 	.word	0x080111b5
 801112c:	080111b5 	.word	0x080111b5
 8011130:	080111b5 	.word	0x080111b5
 8011134:	080111a7 	.word	0x080111a7
 8011138:	2b40      	cmp	r3, #64	; 0x40
 801113a:	d037      	beq.n	80111ac <UART_SetConfig+0xc44>
 801113c:	e03a      	b.n	80111b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801113e:	f7f9 f865 	bl	800a20c <HAL_RCC_GetPCLK1Freq>
 8011142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011144:	e03c      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011146:	f7f9 f877 	bl	800a238 <HAL_RCC_GetPCLK2Freq>
 801114a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801114c:	e038      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011152:	4618      	mov	r0, r3
 8011154:	f7fa ff0e 	bl	800bf74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801115c:	e030      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801115e:	f107 0318 	add.w	r3, r7, #24
 8011162:	4618      	mov	r0, r3
 8011164:	f7fb f85a 	bl	800c21c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801116c:	e028      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801116e:	4b09      	ldr	r3, [pc, #36]	; (8011194 <UART_SetConfig+0xc2c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f003 0320 	and.w	r3, r3, #32
 8011176:	2b00      	cmp	r3, #0
 8011178:	d012      	beq.n	80111a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801117a:	4b06      	ldr	r3, [pc, #24]	; (8011194 <UART_SetConfig+0xc2c>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	08db      	lsrs	r3, r3, #3
 8011180:	f003 0303 	and.w	r3, r3, #3
 8011184:	4a04      	ldr	r2, [pc, #16]	; (8011198 <UART_SetConfig+0xc30>)
 8011186:	fa22 f303 	lsr.w	r3, r2, r3
 801118a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801118c:	e018      	b.n	80111c0 <UART_SetConfig+0xc58>
 801118e:	bf00      	nop
 8011190:	080174ac 	.word	0x080174ac
 8011194:	58024400 	.word	0x58024400
 8011198:	03d09000 	.word	0x03d09000
 801119c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80111a0:	4b24      	ldr	r3, [pc, #144]	; (8011234 <UART_SetConfig+0xccc>)
 80111a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111a4:	e00c      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80111a6:	4b24      	ldr	r3, [pc, #144]	; (8011238 <UART_SetConfig+0xcd0>)
 80111a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111aa:	e009      	b.n	80111c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111b2:	e005      	b.n	80111c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80111b4:	2300      	movs	r3, #0
 80111b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80111b8:	2301      	movs	r3, #1
 80111ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80111be:	bf00      	nop
    }

    if (pclk != 0U)
 80111c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d021      	beq.n	801120a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ca:	4a1c      	ldr	r2, [pc, #112]	; (801123c <UART_SetConfig+0xcd4>)
 80111cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111d0:	461a      	mov	r2, r3
 80111d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	085b      	lsrs	r3, r3, #1
 80111de:	441a      	add	r2, r3
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80111e8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	2b0f      	cmp	r3, #15
 80111ee:	d909      	bls.n	8011204 <UART_SetConfig+0xc9c>
 80111f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111f6:	d205      	bcs.n	8011204 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	60da      	str	r2, [r3, #12]
 8011202:	e002      	b.n	801120a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011204:	2301      	movs	r3, #1
 8011206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2201      	movs	r2, #1
 801120e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	2201      	movs	r2, #1
 8011216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	2200      	movs	r2, #0
 801121e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	2200      	movs	r2, #0
 8011224:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011226:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801122a:	4618      	mov	r0, r3
 801122c:	3748      	adds	r7, #72	; 0x48
 801122e:	46bd      	mov	sp, r7
 8011230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011234:	03d09000 	.word	0x03d09000
 8011238:	003d0900 	.word	0x003d0900
 801123c:	080174ac 	.word	0x080174ac

08011240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124c:	f003 0301 	and.w	r3, r3, #1
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00a      	beq.n	801126a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	430a      	orrs	r2, r1
 8011268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801126e:	f003 0302 	and.w	r3, r3, #2
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00a      	beq.n	801128c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011290:	f003 0304 	and.w	r3, r3, #4
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00a      	beq.n	80112ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	430a      	orrs	r2, r1
 80112ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b2:	f003 0308 	and.w	r3, r3, #8
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d00a      	beq.n	80112d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	430a      	orrs	r2, r1
 80112ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112d4:	f003 0310 	and.w	r3, r3, #16
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00a      	beq.n	80112f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	430a      	orrs	r2, r1
 80112f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f6:	f003 0320 	and.w	r3, r3, #32
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00a      	beq.n	8011314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	430a      	orrs	r2, r1
 8011312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	d01a      	beq.n	8011356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	430a      	orrs	r2, r1
 8011334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801133a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801133e:	d10a      	bne.n	8011356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	430a      	orrs	r2, r1
 8011354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00a      	beq.n	8011378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	430a      	orrs	r2, r1
 8011376:	605a      	str	r2, [r3, #4]
  }
}
 8011378:	bf00      	nop
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b098      	sub	sp, #96	; 0x60
 8011388:	af02      	add	r7, sp, #8
 801138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011394:	f7f2 f892 	bl	80034bc <HAL_GetTick>
 8011398:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f003 0308 	and.w	r3, r3, #8
 80113a4:	2b08      	cmp	r3, #8
 80113a6:	d12f      	bne.n	8011408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113b0:	2200      	movs	r2, #0
 80113b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f88e 	bl	80114d8 <UART_WaitOnFlagUntilTimeout>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d022      	beq.n	8011408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ca:	e853 3f00 	ldrex	r3, [r3]
 80113ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80113d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113d6:	653b      	str	r3, [r7, #80]	; 0x50
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
 80113de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e0:	647b      	str	r3, [r7, #68]	; 0x44
 80113e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80113e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113e8:	e841 2300 	strex	r3, r2, [r1]
 80113ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80113ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d1e6      	bne.n	80113c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2220      	movs	r2, #32
 80113f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011404:	2303      	movs	r3, #3
 8011406:	e063      	b.n	80114d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f003 0304 	and.w	r3, r3, #4
 8011412:	2b04      	cmp	r3, #4
 8011414:	d149      	bne.n	80114aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801141a:	9300      	str	r3, [sp, #0]
 801141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801141e:	2200      	movs	r2, #0
 8011420:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 f857 	bl	80114d8 <UART_WaitOnFlagUntilTimeout>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d03c      	beq.n	80114aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	e853 3f00 	ldrex	r3, [r3]
 801143c:	623b      	str	r3, [r7, #32]
   return(result);
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	461a      	mov	r2, r3
 801144c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801144e:	633b      	str	r3, [r7, #48]	; 0x30
 8011450:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011456:	e841 2300 	strex	r3, r2, [r1]
 801145a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1e6      	bne.n	8011430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	3308      	adds	r3, #8
 8011468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	e853 3f00 	ldrex	r3, [r3]
 8011470:	60fb      	str	r3, [r7, #12]
   return(result);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f023 0301 	bic.w	r3, r3, #1
 8011478:	64bb      	str	r3, [r7, #72]	; 0x48
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	3308      	adds	r3, #8
 8011480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011482:	61fa      	str	r2, [r7, #28]
 8011484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011486:	69b9      	ldr	r1, [r7, #24]
 8011488:	69fa      	ldr	r2, [r7, #28]
 801148a:	e841 2300 	strex	r3, r2, [r1]
 801148e:	617b      	str	r3, [r7, #20]
   return(result);
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1e5      	bne.n	8011462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2220      	movs	r2, #32
 801149a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114a6:	2303      	movs	r3, #3
 80114a8:	e012      	b.n	80114d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2220      	movs	r2, #32
 80114ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2220      	movs	r2, #32
 80114b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3758      	adds	r7, #88	; 0x58
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	4613      	mov	r3, r2
 80114e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114e8:	e049      	b.n	801157e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f0:	d045      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114f2:	f7f1 ffe3 	bl	80034bc <HAL_GetTick>
 80114f6:	4602      	mov	r2, r0
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	69ba      	ldr	r2, [r7, #24]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d302      	bcc.n	8011508 <UART_WaitOnFlagUntilTimeout+0x30>
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d101      	bne.n	801150c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011508:	2303      	movs	r3, #3
 801150a:	e048      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f003 0304 	and.w	r3, r3, #4
 8011516:	2b00      	cmp	r3, #0
 8011518:	d031      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	69db      	ldr	r3, [r3, #28]
 8011520:	f003 0308 	and.w	r3, r3, #8
 8011524:	2b08      	cmp	r3, #8
 8011526:	d110      	bne.n	801154a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2208      	movs	r2, #8
 801152e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f000 f839 	bl	80115a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2208      	movs	r2, #8
 801153a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011546:	2301      	movs	r3, #1
 8011548:	e029      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	69db      	ldr	r3, [r3, #28]
 8011550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011558:	d111      	bne.n	801157e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f000 f81f 	bl	80115a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2220      	movs	r2, #32
 801156e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801157a:	2303      	movs	r3, #3
 801157c:	e00f      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	69da      	ldr	r2, [r3, #28]
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	4013      	ands	r3, r2
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	429a      	cmp	r2, r3
 801158c:	bf0c      	ite	eq
 801158e:	2301      	moveq	r3, #1
 8011590:	2300      	movne	r3, #0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	461a      	mov	r2, r3
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	429a      	cmp	r2, r3
 801159a:	d0a6      	beq.n	80114ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
	...

080115a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b095      	sub	sp, #84	; 0x54
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b8:	e853 3f00 	ldrex	r3, [r3]
 80115bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80115be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	461a      	mov	r2, r3
 80115cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ce:	643b      	str	r3, [r7, #64]	; 0x40
 80115d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115d6:	e841 2300 	strex	r3, r2, [r1]
 80115da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80115dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d1e6      	bne.n	80115b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	3308      	adds	r3, #8
 80115e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ea:	6a3b      	ldr	r3, [r7, #32]
 80115ec:	e853 3f00 	ldrex	r3, [r3]
 80115f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80115f2:	69fa      	ldr	r2, [r7, #28]
 80115f4:	4b1e      	ldr	r3, [pc, #120]	; (8011670 <UART_EndRxTransfer+0xc8>)
 80115f6:	4013      	ands	r3, r2
 80115f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	3308      	adds	r3, #8
 8011600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801160a:	e841 2300 	strex	r3, r2, [r1]
 801160e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011612:	2b00      	cmp	r3, #0
 8011614:	d1e5      	bne.n	80115e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801161a:	2b01      	cmp	r3, #1
 801161c:	d118      	bne.n	8011650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	e853 3f00 	ldrex	r3, [r3]
 801162a:	60bb      	str	r3, [r7, #8]
   return(result);
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	f023 0310 	bic.w	r3, r3, #16
 8011632:	647b      	str	r3, [r7, #68]	; 0x44
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	461a      	mov	r2, r3
 801163a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801163c:	61bb      	str	r3, [r7, #24]
 801163e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011640:	6979      	ldr	r1, [r7, #20]
 8011642:	69ba      	ldr	r2, [r7, #24]
 8011644:	e841 2300 	strex	r3, r2, [r1]
 8011648:	613b      	str	r3, [r7, #16]
   return(result);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1e6      	bne.n	801161e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2220      	movs	r2, #32
 8011654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011664:	bf00      	nop
 8011666:	3754      	adds	r7, #84	; 0x54
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr
 8011670:	effffffe 	.word	0xeffffffe

08011674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011674:	b480      	push	{r7}
 8011676:	b085      	sub	sp, #20
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011682:	2b01      	cmp	r3, #1
 8011684:	d101      	bne.n	801168a <HAL_UARTEx_DisableFifoMode+0x16>
 8011686:	2302      	movs	r3, #2
 8011688:	e027      	b.n	80116da <HAL_UARTEx_DisableFifoMode+0x66>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2224      	movs	r2, #36	; 0x24
 8011696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f022 0201 	bic.w	r2, r2, #1
 80116b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80116b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	68fa      	ldr	r2, [r7, #12]
 80116c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2220      	movs	r2, #32
 80116cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80116d8:	2300      	movs	r3, #0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr

080116e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b084      	sub	sp, #16
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d101      	bne.n	80116fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80116fa:	2302      	movs	r3, #2
 80116fc:	e02d      	b.n	801175a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2224      	movs	r2, #36	; 0x24
 801170a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f022 0201 	bic.w	r2, r2, #1
 8011724:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	430a      	orrs	r2, r1
 8011738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 f850 	bl	80117e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2220      	movs	r2, #32
 801174c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011758:	2300      	movs	r3, #0
}
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011772:	2b01      	cmp	r3, #1
 8011774:	d101      	bne.n	801177a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011776:	2302      	movs	r3, #2
 8011778:	e02d      	b.n	80117d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2201      	movs	r2, #1
 801177e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2224      	movs	r2, #36	; 0x24
 8011786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f022 0201 	bic.w	r2, r2, #1
 80117a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	430a      	orrs	r2, r1
 80117b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 f812 	bl	80117e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2220      	movs	r2, #32
 80117c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d108      	bne.n	8011802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2201      	movs	r2, #1
 80117f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2201      	movs	r2, #1
 80117fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011800:	e031      	b.n	8011866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011802:	2310      	movs	r3, #16
 8011804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011806:	2310      	movs	r3, #16
 8011808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	0e5b      	lsrs	r3, r3, #25
 8011812:	b2db      	uxtb	r3, r3
 8011814:	f003 0307 	and.w	r3, r3, #7
 8011818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	689b      	ldr	r3, [r3, #8]
 8011820:	0f5b      	lsrs	r3, r3, #29
 8011822:	b2db      	uxtb	r3, r3
 8011824:	f003 0307 	and.w	r3, r3, #7
 8011828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801182a:	7bbb      	ldrb	r3, [r7, #14]
 801182c:	7b3a      	ldrb	r2, [r7, #12]
 801182e:	4911      	ldr	r1, [pc, #68]	; (8011874 <UARTEx_SetNbDataToProcess+0x94>)
 8011830:	5c8a      	ldrb	r2, [r1, r2]
 8011832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011836:	7b3a      	ldrb	r2, [r7, #12]
 8011838:	490f      	ldr	r1, [pc, #60]	; (8011878 <UARTEx_SetNbDataToProcess+0x98>)
 801183a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801183c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011848:	7bfb      	ldrb	r3, [r7, #15]
 801184a:	7b7a      	ldrb	r2, [r7, #13]
 801184c:	4909      	ldr	r1, [pc, #36]	; (8011874 <UARTEx_SetNbDataToProcess+0x94>)
 801184e:	5c8a      	ldrb	r2, [r1, r2]
 8011850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011854:	7b7a      	ldrb	r2, [r7, #13]
 8011856:	4908      	ldr	r1, [pc, #32]	; (8011878 <UARTEx_SetNbDataToProcess+0x98>)
 8011858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801185a:	fb93 f3f2 	sdiv	r3, r3, r2
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011866:	bf00      	nop
 8011868:	3714      	adds	r7, #20
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	080174c4 	.word	0x080174c4
 8011878:	080174cc 	.word	0x080174cc

0801187c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801187c:	b084      	sub	sp, #16
 801187e:	b480      	push	{r7}
 8011880:	b085      	sub	sp, #20
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
 8011886:	f107 001c 	add.w	r0, r7, #28
 801188a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801188e:	2300      	movs	r3, #0
 8011890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011892:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011894:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011896:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801189a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801189e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80118a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80118a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	4313      	orrs	r3, r2
 80118a8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	685a      	ldr	r2, [r3, #4]
 80118ae:	4b07      	ldr	r3, [pc, #28]	; (80118cc <SDMMC_Init+0x50>)
 80118b0:	4013      	ands	r3, r2
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	431a      	orrs	r2, r3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80118ba:	2300      	movs	r3, #0
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3714      	adds	r7, #20
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	b004      	add	sp, #16
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	ffc02c00 	.word	0xffc02c00

080118d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80118de:	4618      	mov	r0, r3
 80118e0:	370c      	adds	r7, #12
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80118ea:	b480      	push	{r7}
 80118ec:	b083      	sub	sp, #12
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f043 0203 	orr.w	r2, r3, #3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	370c      	adds	r7, #12
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr

0801192e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801192e:	b480      	push	{r7}
 8011930:	b083      	sub	sp, #12
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f003 0303 	and.w	r3, r3, #3
}
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
	...

0801194c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011956:	2300      	movs	r3, #0
 8011958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801196a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011970:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011976:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	4313      	orrs	r3, r2
 801197c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	68da      	ldr	r2, [r3, #12]
 8011982:	4b06      	ldr	r3, [pc, #24]	; (801199c <SDMMC_SendCommand+0x50>)
 8011984:	4013      	ands	r3, r2
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	431a      	orrs	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801198e:	2300      	movs	r3, #0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3714      	adds	r7, #20
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	fffee0c0 	.word	0xfffee0c0

080119a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	691b      	ldr	r3, [r3, #16]
 80119ac:	b2db      	uxtb	r3, r3
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	370c      	adds	r7, #12
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr

080119ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80119ba:	b480      	push	{r7}
 80119bc:	b085      	sub	sp, #20
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	3314      	adds	r3, #20
 80119c8:	461a      	mov	r2, r3
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	4413      	add	r3, r2
 80119ce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	685a      	ldr	r2, [r3, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011a06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011a0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011a12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	431a      	orrs	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011a2a:	2300      	movs	r3, #0

}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3714      	adds	r7, #20
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011a46:	2310      	movs	r3, #16
 8011a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a50:	2300      	movs	r3, #0
 8011a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a5a:	f107 0308 	add.w	r3, r7, #8
 8011a5e:	4619      	mov	r1, r3
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ff73 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a6a:	2110      	movs	r1, #16
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f000 fa5f 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a74:	69fb      	ldr	r3, [r7, #28]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3720      	adds	r7, #32
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b088      	sub	sp, #32
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
 8011a86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011a8c:	2311      	movs	r3, #17
 8011a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a96:	2300      	movs	r3, #0
 8011a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011aa0:	f107 0308 	add.w	r3, r7, #8
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f7ff ff50 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ab0:	2111      	movs	r1, #17
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 fa3c 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011aba:	69fb      	ldr	r3, [r7, #28]
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3720      	adds	r7, #32
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b088      	sub	sp, #32
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011ad2:	2312      	movs	r3, #18
 8011ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011adc:	2300      	movs	r3, #0
 8011ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ae6:	f107 0308 	add.w	r3, r7, #8
 8011aea:	4619      	mov	r1, r3
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f7ff ff2d 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011af6:	2112      	movs	r1, #18
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f000 fa19 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b00:	69fb      	ldr	r3, [r7, #28]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3720      	adds	r7, #32
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	b088      	sub	sp, #32
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
 8011b12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011b18:	2318      	movs	r3, #24
 8011b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b22:	2300      	movs	r3, #0
 8011b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b2c:	f107 0308 	add.w	r3, r7, #8
 8011b30:	4619      	mov	r1, r3
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7ff ff0a 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b3c:	2118      	movs	r1, #24
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f9f6 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b46:	69fb      	ldr	r3, [r7, #28]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3720      	adds	r7, #32
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b088      	sub	sp, #32
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011b5e:	2319      	movs	r3, #25
 8011b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b72:	f107 0308 	add.w	r3, r7, #8
 8011b76:	4619      	mov	r1, r3
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff fee7 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b82:	2119      	movs	r1, #25
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f000 f9d3 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b8c:	69fb      	ldr	r3, [r7, #28]
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3720      	adds	r7, #32
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
	...

08011b98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b088      	sub	sp, #32
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011ba4:	230c      	movs	r3, #12
 8011ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bb6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bd0:	f107 0308 	add.w	r3, r7, #8
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7ff feb8 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011bdc:	4a0b      	ldr	r2, [pc, #44]	; (8011c0c <SDMMC_CmdStopTransfer+0x74>)
 8011bde:	210c      	movs	r1, #12
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f000 f9a5 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011be6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011bfa:	d101      	bne.n	8011c00 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011c00:	69fb      	ldr	r3, [r7, #28]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3720      	adds	r7, #32
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	05f5e100 	.word	0x05f5e100

08011c10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011c1e:	2307      	movs	r3, #7
 8011c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c32:	f107 0308 	add.w	r3, r7, #8
 8011c36:	4619      	mov	r1, r3
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff fe87 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c42:	2107      	movs	r1, #7
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 f973 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c4c:	69fb      	ldr	r3, [r7, #28]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3720      	adds	r7, #32
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b088      	sub	sp, #32
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011c62:	2300      	movs	r3, #0
 8011c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011c66:	2300      	movs	r3, #0
 8011c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c74:	f107 0308 	add.w	r3, r7, #8
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7ff fe66 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fb97 	bl	80123b4 <SDMMC_GetCmdError>
 8011c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c88:	69fb      	ldr	r3, [r7, #28]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3720      	adds	r7, #32
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}

08011c92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b088      	sub	sp, #32
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011c9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011ca0:	2308      	movs	r3, #8
 8011ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011caa:	2300      	movs	r3, #0
 8011cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cb4:	f107 0308 	add.w	r3, r7, #8
 8011cb8:	4619      	mov	r1, r3
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f7ff fe46 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fb29 	bl	8012318 <SDMMC_GetCmdResp7>
 8011cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cc8:	69fb      	ldr	r3, [r7, #28]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3720      	adds	r7, #32
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011cd2:	b580      	push	{r7, lr}
 8011cd4:	b088      	sub	sp, #32
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
 8011cda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011ce0:	2337      	movs	r3, #55	; 0x37
 8011ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cea:	2300      	movs	r3, #0
 8011cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cf4:	f107 0308 	add.w	r3, r7, #8
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff fe26 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d04:	2137      	movs	r1, #55	; 0x37
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f912 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d0e:	69fb      	ldr	r3, [r7, #28]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011d26:	2329      	movs	r3, #41	; 0x29
 8011d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d30:	2300      	movs	r3, #0
 8011d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d3a:	f107 0308 	add.w	r3, r7, #8
 8011d3e:	4619      	mov	r1, r3
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff fe03 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f000 fa2e 	bl	80121a8 <SDMMC_GetCmdResp3>
 8011d4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d4e:	69fb      	ldr	r3, [r7, #28]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3720      	adds	r7, #32
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b088      	sub	sp, #32
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011d66:	2306      	movs	r3, #6
 8011d68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d70:	2300      	movs	r3, #0
 8011d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d7a:	f107 0308 	add.w	r3, r7, #8
 8011d7e:	4619      	mov	r1, r3
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fde3 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d8a:	2106      	movs	r1, #6
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 f8cf 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d94:	69fb      	ldr	r3, [r7, #28]
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3720      	adds	r7, #32
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b088      	sub	sp, #32
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011da6:	2300      	movs	r3, #0
 8011da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011daa:	2333      	movs	r3, #51	; 0x33
 8011dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011db2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011db4:	2300      	movs	r3, #0
 8011db6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dbe:	f107 0308 	add.w	r3, r7, #8
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff fdc1 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dce:	2133      	movs	r1, #51	; 0x33
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 f8ad 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011dd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3720      	adds	r7, #32
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b088      	sub	sp, #32
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011dee:	2302      	movs	r3, #2
 8011df0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e02:	f107 0308 	add.w	r3, r7, #8
 8011e06:	4619      	mov	r1, r3
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f7ff fd9f 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 f980 	bl	8012114 <SDMMC_GetCmdResp2>
 8011e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e16:	69fb      	ldr	r3, [r7, #28]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3720      	adds	r7, #32
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b088      	sub	sp, #32
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011e2e:	2309      	movs	r3, #9
 8011e30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e42:	f107 0308 	add.w	r3, r7, #8
 8011e46:	4619      	mov	r1, r3
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7ff fd7f 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f960 	bl	8012114 <SDMMC_GetCmdResp2>
 8011e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e56:	69fb      	ldr	r3, [r7, #28]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3720      	adds	r7, #32
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b088      	sub	sp, #32
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e82:	f107 0308 	add.w	r3, r7, #8
 8011e86:	4619      	mov	r1, r3
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff fd5f 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	2103      	movs	r1, #3
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f9c8 	bl	8012228 <SDMMC_GetCmdResp6>
 8011e98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e9a:	69fb      	ldr	r3, [r7, #28]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3720      	adds	r7, #32
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b088      	sub	sp, #32
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011eb2:	230d      	movs	r3, #13
 8011eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ec6:	f107 0308 	add.w	r3, r7, #8
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff fd3d 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ed6:	210d      	movs	r1, #13
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 f829 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3720      	adds	r7, #32
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b088      	sub	sp, #32
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011ef6:	230d      	movs	r3, #13
 8011ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f00:	2300      	movs	r3, #0
 8011f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f0a:	f107 0308 	add.w	r3, r7, #8
 8011f0e:	4619      	mov	r1, r3
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7ff fd1b 	bl	801194c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f1a:	210d      	movs	r1, #13
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f807 	bl	8011f30 <SDMMC_GetCmdResp1>
 8011f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f24:	69fb      	ldr	r3, [r7, #28]
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3720      	adds	r7, #32
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
	...

08011f30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b088      	sub	sp, #32
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011f3e:	4b70      	ldr	r3, [pc, #448]	; (8012100 <SDMMC_GetCmdResp1+0x1d0>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a70      	ldr	r2, [pc, #448]	; (8012104 <SDMMC_GetCmdResp1+0x1d4>)
 8011f44:	fba2 2303 	umull	r2, r3, r2, r3
 8011f48:	0a5a      	lsrs	r2, r3, #9
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	fb02 f303 	mul.w	r3, r2, r3
 8011f50:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	1e5a      	subs	r2, r3, #1
 8011f56:	61fa      	str	r2, [r7, #28]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f60:	e0c9      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f66:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011f68:	69ba      	ldr	r2, [r7, #24]
 8011f6a:	4b67      	ldr	r3, [pc, #412]	; (8012108 <SDMMC_GetCmdResp1+0x1d8>)
 8011f6c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d0ef      	beq.n	8011f52 <SDMMC_GetCmdResp1+0x22>
 8011f72:	69bb      	ldr	r3, [r7, #24]
 8011f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1ea      	bne.n	8011f52 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d004      	beq.n	8011f92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2204      	movs	r2, #4
 8011f8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f8e:	2304      	movs	r3, #4
 8011f90:	e0b1      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d004      	beq.n	8011fa8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e0a6      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	4a58      	ldr	r2, [pc, #352]	; (801210c <SDMMC_GetCmdResp1+0x1dc>)
 8011fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f7ff fcf6 	bl	80119a0 <SDMMC_GetCommandResponse>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	7afb      	ldrb	r3, [r7, #11]
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d001      	beq.n	8011fc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e099      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f7ff fcf8 	bl	80119ba <SDMMC_GetResponse>
 8011fca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011fcc:	697a      	ldr	r2, [r7, #20]
 8011fce:	4b50      	ldr	r3, [pc, #320]	; (8012110 <SDMMC_GetCmdResp1+0x1e0>)
 8011fd0:	4013      	ands	r3, r2
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d101      	bne.n	8011fda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	e08d      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da02      	bge.n	8011fe6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011fe4:	e087      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011ff0:	2340      	movs	r3, #64	; 0x40
 8011ff2:	e080      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d001      	beq.n	8012002 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011ffe:	2380      	movs	r3, #128	; 0x80
 8012000:	e079      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801200c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012010:	e071      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801201c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012020:	e069      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801202c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012030:	e061      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801203c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012040:	e059      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012050:	e051      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801205c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012060:	e049      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801206c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012070:	e041      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801207c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012080:	e039      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801208c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012090:	e031      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012098:	2b00      	cmp	r3, #0
 801209a:	d002      	beq.n	80120a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801209c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120a0:	e029      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80120ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80120b0:	e021      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80120bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120c0:	e019      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80120cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80120d0:	e011      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80120dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80120e0:	e009      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f003 0308 	and.w	r3, r3, #8
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80120ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80120f0:	e001      	b.n	80120f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80120f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3720      	adds	r7, #32
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	24000000 	.word	0x24000000
 8012104:	10624dd3 	.word	0x10624dd3
 8012108:	00200045 	.word	0x00200045
 801210c:	002000c5 	.word	0x002000c5
 8012110:	fdffe008 	.word	0xfdffe008

08012114 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801211c:	4b1f      	ldr	r3, [pc, #124]	; (801219c <SDMMC_GetCmdResp2+0x88>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4a1f      	ldr	r2, [pc, #124]	; (80121a0 <SDMMC_GetCmdResp2+0x8c>)
 8012122:	fba2 2303 	umull	r2, r3, r2, r3
 8012126:	0a5b      	lsrs	r3, r3, #9
 8012128:	f241 3288 	movw	r2, #5000	; 0x1388
 801212c:	fb02 f303 	mul.w	r3, r2, r3
 8012130:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	1e5a      	subs	r2, r3, #1
 8012136:	60fa      	str	r2, [r7, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d102      	bne.n	8012142 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801213c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012140:	e026      	b.n	8012190 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012146:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0ef      	beq.n	8012132 <SDMMC_GetCmdResp2+0x1e>
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1ea      	bne.n	8012132 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012160:	f003 0304 	and.w	r3, r3, #4
 8012164:	2b00      	cmp	r3, #0
 8012166:	d004      	beq.n	8012172 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2204      	movs	r2, #4
 801216c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801216e:	2304      	movs	r3, #4
 8012170:	e00e      	b.n	8012190 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d004      	beq.n	8012188 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2201      	movs	r2, #1
 8012182:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012184:	2301      	movs	r3, #1
 8012186:	e003      	b.n	8012190 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a06      	ldr	r2, [pc, #24]	; (80121a4 <SDMMC_GetCmdResp2+0x90>)
 801218c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801218e:	2300      	movs	r3, #0
}
 8012190:	4618      	mov	r0, r3
 8012192:	3714      	adds	r7, #20
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr
 801219c:	24000000 	.word	0x24000000
 80121a0:	10624dd3 	.word	0x10624dd3
 80121a4:	002000c5 	.word	0x002000c5

080121a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b085      	sub	sp, #20
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121b0:	4b1a      	ldr	r3, [pc, #104]	; (801221c <SDMMC_GetCmdResp3+0x74>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4a1a      	ldr	r2, [pc, #104]	; (8012220 <SDMMC_GetCmdResp3+0x78>)
 80121b6:	fba2 2303 	umull	r2, r3, r2, r3
 80121ba:	0a5b      	lsrs	r3, r3, #9
 80121bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80121c0:	fb02 f303 	mul.w	r3, r2, r3
 80121c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	1e5a      	subs	r2, r3, #1
 80121ca:	60fa      	str	r2, [r7, #12]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d102      	bne.n	80121d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121d4:	e01b      	b.n	801220e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d0ef      	beq.n	80121c6 <SDMMC_GetCmdResp3+0x1e>
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d1ea      	bne.n	80121c6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121f4:	f003 0304 	and.w	r3, r3, #4
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d004      	beq.n	8012206 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2204      	movs	r2, #4
 8012200:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012202:	2304      	movs	r3, #4
 8012204:	e003      	b.n	801220e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	4a06      	ldr	r2, [pc, #24]	; (8012224 <SDMMC_GetCmdResp3+0x7c>)
 801220a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	24000000 	.word	0x24000000
 8012220:	10624dd3 	.word	0x10624dd3
 8012224:	002000c5 	.word	0x002000c5

08012228 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b088      	sub	sp, #32
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	460b      	mov	r3, r1
 8012232:	607a      	str	r2, [r7, #4]
 8012234:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012236:	4b35      	ldr	r3, [pc, #212]	; (801230c <SDMMC_GetCmdResp6+0xe4>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a35      	ldr	r2, [pc, #212]	; (8012310 <SDMMC_GetCmdResp6+0xe8>)
 801223c:	fba2 2303 	umull	r2, r3, r2, r3
 8012240:	0a5b      	lsrs	r3, r3, #9
 8012242:	f241 3288 	movw	r2, #5000	; 0x1388
 8012246:	fb02 f303 	mul.w	r3, r2, r3
 801224a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	1e5a      	subs	r2, r3, #1
 8012250:	61fa      	str	r2, [r7, #28]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d102      	bne.n	801225c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801225a:	e052      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012260:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012268:	2b00      	cmp	r3, #0
 801226a:	d0ef      	beq.n	801224c <SDMMC_GetCmdResp6+0x24>
 801226c:	69bb      	ldr	r3, [r7, #24]
 801226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012272:	2b00      	cmp	r3, #0
 8012274:	d1ea      	bne.n	801224c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801227a:	f003 0304 	and.w	r3, r3, #4
 801227e:	2b00      	cmp	r3, #0
 8012280:	d004      	beq.n	801228c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2204      	movs	r2, #4
 8012286:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012288:	2304      	movs	r3, #4
 801228a:	e03a      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012290:	f003 0301 	and.w	r3, r3, #1
 8012294:	2b00      	cmp	r3, #0
 8012296:	d004      	beq.n	80122a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2201      	movs	r2, #1
 801229c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801229e:	2301      	movs	r3, #1
 80122a0:	e02f      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f7ff fb7c 	bl	80119a0 <SDMMC_GetCommandResponse>
 80122a8:	4603      	mov	r3, r0
 80122aa:	461a      	mov	r2, r3
 80122ac:	7afb      	ldrb	r3, [r7, #11]
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d001      	beq.n	80122b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122b2:	2301      	movs	r3, #1
 80122b4:	e025      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	4a16      	ldr	r2, [pc, #88]	; (8012314 <SDMMC_GetCmdResp6+0xec>)
 80122ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122bc:	2100      	movs	r1, #0
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7ff fb7b 	bl	80119ba <SDMMC_GetResponse>
 80122c4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d106      	bne.n	80122de <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	0c1b      	lsrs	r3, r3, #16
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80122da:	2300      	movs	r3, #0
 80122dc:	e011      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d002      	beq.n	80122ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122ec:	e009      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80122f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122fc:	e001      	b.n	8012302 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80122fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012302:	4618      	mov	r0, r3
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	24000000 	.word	0x24000000
 8012310:	10624dd3 	.word	0x10624dd3
 8012314:	002000c5 	.word	0x002000c5

08012318 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012320:	4b22      	ldr	r3, [pc, #136]	; (80123ac <SDMMC_GetCmdResp7+0x94>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4a22      	ldr	r2, [pc, #136]	; (80123b0 <SDMMC_GetCmdResp7+0x98>)
 8012326:	fba2 2303 	umull	r2, r3, r2, r3
 801232a:	0a5b      	lsrs	r3, r3, #9
 801232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012330:	fb02 f303 	mul.w	r3, r2, r3
 8012334:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	1e5a      	subs	r2, r3, #1
 801233a:	60fa      	str	r2, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d102      	bne.n	8012346 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012344:	e02c      	b.n	80123a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801234a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012352:	2b00      	cmp	r3, #0
 8012354:	d0ef      	beq.n	8012336 <SDMMC_GetCmdResp7+0x1e>
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801235c:	2b00      	cmp	r3, #0
 801235e:	d1ea      	bne.n	8012336 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012364:	f003 0304 	and.w	r3, r3, #4
 8012368:	2b00      	cmp	r3, #0
 801236a:	d004      	beq.n	8012376 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2204      	movs	r2, #4
 8012370:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012372:	2304      	movs	r3, #4
 8012374:	e014      	b.n	80123a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801237a:	f003 0301 	and.w	r3, r3, #1
 801237e:	2b00      	cmp	r3, #0
 8012380:	d004      	beq.n	801238c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2201      	movs	r2, #1
 8012386:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012388:	2301      	movs	r3, #1
 801238a:	e009      	b.n	80123a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012394:	2b00      	cmp	r3, #0
 8012396:	d002      	beq.n	801239e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2240      	movs	r2, #64	; 0x40
 801239c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801239e:	2300      	movs	r3, #0

}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	24000000 	.word	0x24000000
 80123b0:	10624dd3 	.word	0x10624dd3

080123b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80123bc:	4b11      	ldr	r3, [pc, #68]	; (8012404 <SDMMC_GetCmdError+0x50>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a11      	ldr	r2, [pc, #68]	; (8012408 <SDMMC_GetCmdError+0x54>)
 80123c2:	fba2 2303 	umull	r2, r3, r2, r3
 80123c6:	0a5b      	lsrs	r3, r3, #9
 80123c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123cc:	fb02 f303 	mul.w	r3, r2, r3
 80123d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	1e5a      	subs	r2, r3, #1
 80123d6:	60fa      	str	r2, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d102      	bne.n	80123e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123e0:	e009      	b.n	80123f6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0f1      	beq.n	80123d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4a06      	ldr	r2, [pc, #24]	; (801240c <SDMMC_GetCmdError+0x58>)
 80123f2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3714      	adds	r7, #20
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	24000000 	.word	0x24000000
 8012408:	10624dd3 	.word	0x10624dd3
 801240c:	002000c5 	.word	0x002000c5

08012410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012410:	b084      	sub	sp, #16
 8012412:	b580      	push	{r7, lr}
 8012414:	b084      	sub	sp, #16
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	f107 001c 	add.w	r0, r7, #28
 801241e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012424:	2b01      	cmp	r3, #1
 8012426:	d120      	bne.n	801246a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801242c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	68da      	ldr	r2, [r3, #12]
 8012438:	4b2a      	ldr	r3, [pc, #168]	; (80124e4 <USB_CoreInit+0xd4>)
 801243a:	4013      	ands	r3, r2
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801244e:	2b01      	cmp	r3, #1
 8012450:	d105      	bne.n	801245e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f001 faf8 	bl	8013a54 <USB_CoreReset>
 8012464:	4603      	mov	r3, r0
 8012466:	73fb      	strb	r3, [r7, #15]
 8012468:	e01a      	b.n	80124a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f001 faec 	bl	8013a54 <USB_CoreReset>
 801247c:	4603      	mov	r3, r0
 801247e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012482:	2b00      	cmp	r3, #0
 8012484:	d106      	bne.n	8012494 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801248a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	639a      	str	r2, [r3, #56]	; 0x38
 8012492:	e005      	b.n	80124a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d116      	bne.n	80124d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80124b4:	4b0c      	ldr	r3, [pc, #48]	; (80124e8 <USB_CoreInit+0xd8>)
 80124b6:	4313      	orrs	r3, r2
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	f043 0206 	orr.w	r2, r3, #6
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	f043 0220 	orr.w	r2, r3, #32
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80124d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80124e0:	b004      	add	sp, #16
 80124e2:	4770      	bx	lr
 80124e4:	ffbdffbf 	.word	0xffbdffbf
 80124e8:	03ee0000 	.word	0x03ee0000

080124ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b087      	sub	sp, #28
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	4613      	mov	r3, r2
 80124f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80124fa:	79fb      	ldrb	r3, [r7, #7]
 80124fc:	2b02      	cmp	r3, #2
 80124fe:	d165      	bne.n	80125cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	4a41      	ldr	r2, [pc, #260]	; (8012608 <USB_SetTurnaroundTime+0x11c>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d906      	bls.n	8012516 <USB_SetTurnaroundTime+0x2a>
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	4a40      	ldr	r2, [pc, #256]	; (801260c <USB_SetTurnaroundTime+0x120>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d202      	bcs.n	8012516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012510:	230f      	movs	r3, #15
 8012512:	617b      	str	r3, [r7, #20]
 8012514:	e062      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	4a3c      	ldr	r2, [pc, #240]	; (801260c <USB_SetTurnaroundTime+0x120>)
 801251a:	4293      	cmp	r3, r2
 801251c:	d306      	bcc.n	801252c <USB_SetTurnaroundTime+0x40>
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	4a3b      	ldr	r2, [pc, #236]	; (8012610 <USB_SetTurnaroundTime+0x124>)
 8012522:	4293      	cmp	r3, r2
 8012524:	d202      	bcs.n	801252c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012526:	230e      	movs	r3, #14
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	e057      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	4a38      	ldr	r2, [pc, #224]	; (8012610 <USB_SetTurnaroundTime+0x124>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d306      	bcc.n	8012542 <USB_SetTurnaroundTime+0x56>
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	4a37      	ldr	r2, [pc, #220]	; (8012614 <USB_SetTurnaroundTime+0x128>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d202      	bcs.n	8012542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801253c:	230d      	movs	r3, #13
 801253e:	617b      	str	r3, [r7, #20]
 8012540:	e04c      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	4a33      	ldr	r2, [pc, #204]	; (8012614 <USB_SetTurnaroundTime+0x128>)
 8012546:	4293      	cmp	r3, r2
 8012548:	d306      	bcc.n	8012558 <USB_SetTurnaroundTime+0x6c>
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	4a32      	ldr	r2, [pc, #200]	; (8012618 <USB_SetTurnaroundTime+0x12c>)
 801254e:	4293      	cmp	r3, r2
 8012550:	d802      	bhi.n	8012558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012552:	230c      	movs	r3, #12
 8012554:	617b      	str	r3, [r7, #20]
 8012556:	e041      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	4a2f      	ldr	r2, [pc, #188]	; (8012618 <USB_SetTurnaroundTime+0x12c>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d906      	bls.n	801256e <USB_SetTurnaroundTime+0x82>
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	4a2e      	ldr	r2, [pc, #184]	; (801261c <USB_SetTurnaroundTime+0x130>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d802      	bhi.n	801256e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012568:	230b      	movs	r3, #11
 801256a:	617b      	str	r3, [r7, #20]
 801256c:	e036      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	4a2a      	ldr	r2, [pc, #168]	; (801261c <USB_SetTurnaroundTime+0x130>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d906      	bls.n	8012584 <USB_SetTurnaroundTime+0x98>
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	4a29      	ldr	r2, [pc, #164]	; (8012620 <USB_SetTurnaroundTime+0x134>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d802      	bhi.n	8012584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801257e:	230a      	movs	r3, #10
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	e02b      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	4a26      	ldr	r2, [pc, #152]	; (8012620 <USB_SetTurnaroundTime+0x134>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d906      	bls.n	801259a <USB_SetTurnaroundTime+0xae>
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	4a25      	ldr	r2, [pc, #148]	; (8012624 <USB_SetTurnaroundTime+0x138>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d202      	bcs.n	801259a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012594:	2309      	movs	r3, #9
 8012596:	617b      	str	r3, [r7, #20]
 8012598:	e020      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	4a21      	ldr	r2, [pc, #132]	; (8012624 <USB_SetTurnaroundTime+0x138>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d306      	bcc.n	80125b0 <USB_SetTurnaroundTime+0xc4>
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	4a20      	ldr	r2, [pc, #128]	; (8012628 <USB_SetTurnaroundTime+0x13c>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d802      	bhi.n	80125b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80125aa:	2308      	movs	r3, #8
 80125ac:	617b      	str	r3, [r7, #20]
 80125ae:	e015      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	4a1d      	ldr	r2, [pc, #116]	; (8012628 <USB_SetTurnaroundTime+0x13c>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d906      	bls.n	80125c6 <USB_SetTurnaroundTime+0xda>
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	4a1c      	ldr	r2, [pc, #112]	; (801262c <USB_SetTurnaroundTime+0x140>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d202      	bcs.n	80125c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80125c0:	2307      	movs	r3, #7
 80125c2:	617b      	str	r3, [r7, #20]
 80125c4:	e00a      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80125c6:	2306      	movs	r3, #6
 80125c8:	617b      	str	r3, [r7, #20]
 80125ca:	e007      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80125cc:	79fb      	ldrb	r3, [r7, #7]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d102      	bne.n	80125d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80125d2:	2309      	movs	r3, #9
 80125d4:	617b      	str	r3, [r7, #20]
 80125d6:	e001      	b.n	80125dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80125d8:	2309      	movs	r3, #9
 80125da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68da      	ldr	r2, [r3, #12]
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	029b      	lsls	r3, r3, #10
 80125f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80125f4:	431a      	orrs	r2, r3
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	371c      	adds	r7, #28
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr
 8012608:	00d8acbf 	.word	0x00d8acbf
 801260c:	00e4e1c0 	.word	0x00e4e1c0
 8012610:	00f42400 	.word	0x00f42400
 8012614:	01067380 	.word	0x01067380
 8012618:	011a499f 	.word	0x011a499f
 801261c:	01312cff 	.word	0x01312cff
 8012620:	014ca43f 	.word	0x014ca43f
 8012624:	016e3600 	.word	0x016e3600
 8012628:	01a6ab1f 	.word	0x01a6ab1f
 801262c:	01e84800 	.word	0x01e84800

08012630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	689b      	ldr	r3, [r3, #8]
 801263c:	f043 0201 	orr.w	r2, r3, #1
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	370c      	adds	r7, #12
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012652:	b480      	push	{r7}
 8012654:	b083      	sub	sp, #12
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	689b      	ldr	r3, [r3, #8]
 801265e:	f023 0201 	bic.w	r2, r3, #1
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012666:	2300      	movs	r3, #0
}
 8012668:	4618      	mov	r0, r3
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr

08012674 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	460b      	mov	r3, r1
 801267e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012680:	2300      	movs	r3, #0
 8012682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	2b01      	cmp	r3, #1
 8012694:	d115      	bne.n	80126c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80126a2:	2001      	movs	r0, #1
 80126a4:	f7f0 ff16 	bl	80034d4 <HAL_Delay>
      ms++;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3301      	adds	r3, #1
 80126ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f001 f93f 	bl	8013932 <USB_GetMode>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d01e      	beq.n	80126f8 <USB_SetCurrentMode+0x84>
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2b31      	cmp	r3, #49	; 0x31
 80126be:	d9f0      	bls.n	80126a2 <USB_SetCurrentMode+0x2e>
 80126c0:	e01a      	b.n	80126f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80126c2:	78fb      	ldrb	r3, [r7, #3]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d115      	bne.n	80126f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80126d4:	2001      	movs	r0, #1
 80126d6:	f7f0 fefd 	bl	80034d4 <HAL_Delay>
      ms++;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	3301      	adds	r3, #1
 80126de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f001 f926 	bl	8013932 <USB_GetMode>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <USB_SetCurrentMode+0x84>
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b31      	cmp	r3, #49	; 0x31
 80126f0:	d9f0      	bls.n	80126d4 <USB_SetCurrentMode+0x60>
 80126f2:	e001      	b.n	80126f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80126f4:	2301      	movs	r3, #1
 80126f6:	e005      	b.n	8012704 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b32      	cmp	r3, #50	; 0x32
 80126fc:	d101      	bne.n	8012702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012702:	2300      	movs	r3, #0
}
 8012704:	4618      	mov	r0, r3
 8012706:	3710      	adds	r7, #16
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801270c:	b084      	sub	sp, #16
 801270e:	b580      	push	{r7, lr}
 8012710:	b086      	sub	sp, #24
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
 8012716:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801271a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012726:	2300      	movs	r3, #0
 8012728:	613b      	str	r3, [r7, #16]
 801272a:	e009      	b.n	8012740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	3340      	adds	r3, #64	; 0x40
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	2200      	movs	r2, #0
 8012738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	3301      	adds	r3, #1
 801273e:	613b      	str	r3, [r7, #16]
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	2b0e      	cmp	r3, #14
 8012744:	d9f2      	bls.n	801272c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012748:	2b00      	cmp	r3, #0
 801274a:	d11c      	bne.n	8012786 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	68fa      	ldr	r2, [r7, #12]
 8012756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801275a:	f043 0302 	orr.w	r3, r3, #2
 801275e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012764:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	e005      	b.n	8012792 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012798:	461a      	mov	r2, r3
 801279a:	2300      	movs	r3, #0
 801279c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127a4:	4619      	mov	r1, r3
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127ac:	461a      	mov	r2, r3
 80127ae:	680b      	ldr	r3, [r1, #0]
 80127b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80127b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d10c      	bne.n	80127d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80127b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d104      	bne.n	80127c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80127be:	2100      	movs	r1, #0
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 f965 	bl	8012a90 <USB_SetDevSpeed>
 80127c6:	e008      	b.n	80127da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80127c8:	2101      	movs	r1, #1
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f000 f960 	bl	8012a90 <USB_SetDevSpeed>
 80127d0:	e003      	b.n	80127da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80127d2:	2103      	movs	r1, #3
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f000 f95b 	bl	8012a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80127da:	2110      	movs	r1, #16
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 f8f3 	bl	80129c8 <USB_FlushTxFifo>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d001      	beq.n	80127ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f91f 	bl	8012a30 <USB_FlushRxFifo>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80127f8:	2301      	movs	r3, #1
 80127fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012802:	461a      	mov	r2, r3
 8012804:	2300      	movs	r3, #0
 8012806:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801280e:	461a      	mov	r2, r3
 8012810:	2300      	movs	r3, #0
 8012812:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801281a:	461a      	mov	r2, r3
 801281c:	2300      	movs	r3, #0
 801281e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012820:	2300      	movs	r3, #0
 8012822:	613b      	str	r3, [r7, #16]
 8012824:	e043      	b.n	80128ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	015a      	lsls	r2, r3, #5
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	4413      	add	r3, r2
 801282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801283c:	d118      	bne.n	8012870 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d10a      	bne.n	801285a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	015a      	lsls	r2, r3, #5
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	4413      	add	r3, r2
 801284c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012850:	461a      	mov	r2, r3
 8012852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012856:	6013      	str	r3, [r2, #0]
 8012858:	e013      	b.n	8012882 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	015a      	lsls	r2, r3, #5
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	4413      	add	r3, r2
 8012862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012866:	461a      	mov	r2, r3
 8012868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801286c:	6013      	str	r3, [r2, #0]
 801286e:	e008      	b.n	8012882 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	015a      	lsls	r2, r3, #5
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	4413      	add	r3, r2
 8012878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801287c:	461a      	mov	r2, r3
 801287e:	2300      	movs	r3, #0
 8012880:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	015a      	lsls	r2, r3, #5
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	4413      	add	r3, r2
 801288a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801288e:	461a      	mov	r2, r3
 8012890:	2300      	movs	r3, #0
 8012892:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	015a      	lsls	r2, r3, #5
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	4413      	add	r3, r2
 801289c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128a0:	461a      	mov	r2, r3
 80128a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80128a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	3301      	adds	r3, #1
 80128ac:	613b      	str	r3, [r7, #16]
 80128ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b0:	693a      	ldr	r2, [r7, #16]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d3b7      	bcc.n	8012826 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128b6:	2300      	movs	r3, #0
 80128b8:	613b      	str	r3, [r7, #16]
 80128ba:	e043      	b.n	8012944 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	015a      	lsls	r2, r3, #5
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	4413      	add	r3, r2
 80128c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80128ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80128d2:	d118      	bne.n	8012906 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d10a      	bne.n	80128f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	015a      	lsls	r2, r3, #5
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	4413      	add	r3, r2
 80128e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128e6:	461a      	mov	r2, r3
 80128e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80128ec:	6013      	str	r3, [r2, #0]
 80128ee:	e013      	b.n	8012918 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	015a      	lsls	r2, r3, #5
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	4413      	add	r3, r2
 80128f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128fc:	461a      	mov	r2, r3
 80128fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012902:	6013      	str	r3, [r2, #0]
 8012904:	e008      	b.n	8012918 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	015a      	lsls	r2, r3, #5
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	4413      	add	r3, r2
 801290e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012912:	461a      	mov	r2, r3
 8012914:	2300      	movs	r3, #0
 8012916:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	015a      	lsls	r2, r3, #5
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	4413      	add	r3, r2
 8012920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012924:	461a      	mov	r2, r3
 8012926:	2300      	movs	r3, #0
 8012928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	015a      	lsls	r2, r3, #5
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	4413      	add	r3, r2
 8012932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012936:	461a      	mov	r2, r3
 8012938:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801293c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	3301      	adds	r3, #1
 8012942:	613b      	str	r3, [r7, #16]
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	693a      	ldr	r2, [r7, #16]
 8012948:	429a      	cmp	r2, r3
 801294a:	d3b7      	bcc.n	80128bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012952:	691b      	ldr	r3, [r3, #16]
 8012954:	68fa      	ldr	r2, [r7, #12]
 8012956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801295a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801295e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2200      	movs	r2, #0
 8012964:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801296c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012970:	2b00      	cmp	r3, #0
 8012972:	d105      	bne.n	8012980 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	699b      	ldr	r3, [r3, #24]
 8012978:	f043 0210 	orr.w	r2, r3, #16
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	699a      	ldr	r2, [r3, #24]
 8012984:	4b0e      	ldr	r3, [pc, #56]	; (80129c0 <USB_DevInit+0x2b4>)
 8012986:	4313      	orrs	r3, r2
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801298e:	2b00      	cmp	r3, #0
 8012990:	d005      	beq.n	801299e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	699b      	ldr	r3, [r3, #24]
 8012996:	f043 0208 	orr.w	r2, r3, #8
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801299e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d105      	bne.n	80129b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	699a      	ldr	r2, [r3, #24]
 80129a8:	4b06      	ldr	r3, [pc, #24]	; (80129c4 <USB_DevInit+0x2b8>)
 80129aa:	4313      	orrs	r3, r2
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80129b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3718      	adds	r7, #24
 80129b6:	46bd      	mov	sp, r7
 80129b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129bc:	b004      	add	sp, #16
 80129be:	4770      	bx	lr
 80129c0:	803c3800 	.word	0x803c3800
 80129c4:	40000004 	.word	0x40000004

080129c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80129d2:	2300      	movs	r3, #0
 80129d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	3301      	adds	r3, #1
 80129da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4a13      	ldr	r2, [pc, #76]	; (8012a2c <USB_FlushTxFifo+0x64>)
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d901      	bls.n	80129e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80129e4:	2303      	movs	r3, #3
 80129e6:	e01b      	b.n	8012a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	691b      	ldr	r3, [r3, #16]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	daf2      	bge.n	80129d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80129f0:	2300      	movs	r3, #0
 80129f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	019b      	lsls	r3, r3, #6
 80129f8:	f043 0220 	orr.w	r2, r3, #32
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	3301      	adds	r3, #1
 8012a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	4a08      	ldr	r2, [pc, #32]	; (8012a2c <USB_FlushTxFifo+0x64>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d901      	bls.n	8012a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012a0e:	2303      	movs	r3, #3
 8012a10:	e006      	b.n	8012a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	691b      	ldr	r3, [r3, #16]
 8012a16:	f003 0320 	and.w	r3, r3, #32
 8012a1a:	2b20      	cmp	r3, #32
 8012a1c:	d0f0      	beq.n	8012a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3714      	adds	r7, #20
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr
 8012a2c:	00030d40 	.word	0x00030d40

08012a30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b085      	sub	sp, #20
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	4a11      	ldr	r2, [pc, #68]	; (8012a8c <USB_FlushRxFifo+0x5c>)
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d901      	bls.n	8012a4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012a4a:	2303      	movs	r3, #3
 8012a4c:	e018      	b.n	8012a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	691b      	ldr	r3, [r3, #16]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	daf2      	bge.n	8012a3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2210      	movs	r2, #16
 8012a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	3301      	adds	r3, #1
 8012a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	4a08      	ldr	r2, [pc, #32]	; (8012a8c <USB_FlushRxFifo+0x5c>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d901      	bls.n	8012a72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012a6e:	2303      	movs	r3, #3
 8012a70:	e006      	b.n	8012a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	691b      	ldr	r3, [r3, #16]
 8012a76:	f003 0310 	and.w	r3, r3, #16
 8012a7a:	2b10      	cmp	r3, #16
 8012a7c:	d0f0      	beq.n	8012a60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012a7e:	2300      	movs	r3, #0
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3714      	adds	r7, #20
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr
 8012a8c:	00030d40 	.word	0x00030d40

08012a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	78fb      	ldrb	r3, [r7, #3]
 8012aaa:	68f9      	ldr	r1, [r7, #12]
 8012aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3714      	adds	r7, #20
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr

08012ac2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012ac2:	b480      	push	{r7}
 8012ac4:	b087      	sub	sp, #28
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	f003 0306 	and.w	r3, r3, #6
 8012ada:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d102      	bne.n	8012ae8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	75fb      	strb	r3, [r7, #23]
 8012ae6:	e00a      	b.n	8012afe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b02      	cmp	r3, #2
 8012aec:	d002      	beq.n	8012af4 <USB_GetDevSpeed+0x32>
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2b06      	cmp	r3, #6
 8012af2:	d102      	bne.n	8012afa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012af4:	2302      	movs	r3, #2
 8012af6:	75fb      	strb	r3, [r7, #23]
 8012af8:	e001      	b.n	8012afe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012afa:	230f      	movs	r3, #15
 8012afc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	371c      	adds	r7, #28
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	785b      	ldrb	r3, [r3, #1]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d139      	bne.n	8012b9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b2e:	69da      	ldr	r2, [r3, #28]
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	f003 030f 	and.w	r3, r3, #15
 8012b38:	2101      	movs	r1, #1
 8012b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	68f9      	ldr	r1, [r7, #12]
 8012b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b46:	4313      	orrs	r3, r2
 8012b48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	015a      	lsls	r2, r3, #5
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	4413      	add	r3, r2
 8012b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d153      	bne.n	8012c08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	015a      	lsls	r2, r3, #5
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	4413      	add	r3, r2
 8012b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	791b      	ldrb	r3, [r3, #4]
 8012b7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012b7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	059b      	lsls	r3, r3, #22
 8012b82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012b84:	431a      	orrs	r2, r3
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	0159      	lsls	r1, r3, #5
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	440b      	add	r3, r1
 8012b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b92:	4619      	mov	r1, r3
 8012b94:	4b20      	ldr	r3, [pc, #128]	; (8012c18 <USB_ActivateEndpoint+0x10c>)
 8012b96:	4313      	orrs	r3, r2
 8012b98:	600b      	str	r3, [r1, #0]
 8012b9a:	e035      	b.n	8012c08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ba2:	69da      	ldr	r2, [r3, #28]
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	f003 030f 	and.w	r3, r3, #15
 8012bac:	2101      	movs	r1, #1
 8012bae:	fa01 f303 	lsl.w	r3, r1, r3
 8012bb2:	041b      	lsls	r3, r3, #16
 8012bb4:	68f9      	ldr	r1, [r7, #12]
 8012bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	015a      	lsls	r2, r3, #5
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d119      	bne.n	8012c08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	015a      	lsls	r2, r3, #5
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	4413      	add	r3, r2
 8012bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	689b      	ldr	r3, [r3, #8]
 8012be6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	791b      	ldrb	r3, [r3, #4]
 8012bee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012bf0:	430b      	orrs	r3, r1
 8012bf2:	431a      	orrs	r2, r3
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	0159      	lsls	r1, r3, #5
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	440b      	add	r3, r1
 8012bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c00:	4619      	mov	r1, r3
 8012c02:	4b05      	ldr	r3, [pc, #20]	; (8012c18 <USB_ActivateEndpoint+0x10c>)
 8012c04:	4313      	orrs	r3, r2
 8012c06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3714      	adds	r7, #20
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	10008000 	.word	0x10008000

08012c1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	785b      	ldrb	r3, [r3, #1]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d161      	bne.n	8012cfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	015a      	lsls	r2, r3, #5
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	4413      	add	r3, r2
 8012c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c4e:	d11f      	bne.n	8012c90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	015a      	lsls	r2, r3, #5
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4413      	add	r3, r2
 8012c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68ba      	ldr	r2, [r7, #8]
 8012c60:	0151      	lsls	r1, r2, #5
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	440a      	add	r2, r1
 8012c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	015a      	lsls	r2, r3, #5
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	4413      	add	r3, r2
 8012c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	68ba      	ldr	r2, [r7, #8]
 8012c80:	0151      	lsls	r1, r2, #5
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	440a      	add	r2, r1
 8012c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	f003 030f 	and.w	r3, r3, #15
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	43db      	mvns	r3, r3
 8012caa:	68f9      	ldr	r1, [r7, #12]
 8012cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cba:	69da      	ldr	r2, [r3, #28]
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	f003 030f 	and.w	r3, r3, #15
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	43db      	mvns	r3, r3
 8012cce:	68f9      	ldr	r1, [r7, #12]
 8012cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cd4:	4013      	ands	r3, r2
 8012cd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	015a      	lsls	r2, r3, #5
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4413      	add	r3, r2
 8012ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	0159      	lsls	r1, r3, #5
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	440b      	add	r3, r1
 8012cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4b35      	ldr	r3, [pc, #212]	; (8012dcc <USB_DeactivateEndpoint+0x1b0>)
 8012cf6:	4013      	ands	r3, r2
 8012cf8:	600b      	str	r3, [r1, #0]
 8012cfa:	e060      	b.n	8012dbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	015a      	lsls	r2, r3, #5
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	4413      	add	r3, r2
 8012d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d12:	d11f      	bne.n	8012d54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	015a      	lsls	r2, r3, #5
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	0151      	lsls	r1, r2, #5
 8012d26:	68fa      	ldr	r2, [r7, #12]
 8012d28:	440a      	add	r2, r1
 8012d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	68ba      	ldr	r2, [r7, #8]
 8012d44:	0151      	lsls	r1, r2, #5
 8012d46:	68fa      	ldr	r2, [r7, #12]
 8012d48:	440a      	add	r2, r1
 8012d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	f003 030f 	and.w	r3, r3, #15
 8012d64:	2101      	movs	r1, #1
 8012d66:	fa01 f303 	lsl.w	r3, r1, r3
 8012d6a:	041b      	lsls	r3, r3, #16
 8012d6c:	43db      	mvns	r3, r3
 8012d6e:	68f9      	ldr	r1, [r7, #12]
 8012d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d74:	4013      	ands	r3, r2
 8012d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d7e:	69da      	ldr	r2, [r3, #28]
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	f003 030f 	and.w	r3, r3, #15
 8012d88:	2101      	movs	r1, #1
 8012d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8012d8e:	041b      	lsls	r3, r3, #16
 8012d90:	43db      	mvns	r3, r3
 8012d92:	68f9      	ldr	r1, [r7, #12]
 8012d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d98:	4013      	ands	r3, r2
 8012d9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	015a      	lsls	r2, r3, #5
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4413      	add	r3, r2
 8012da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	0159      	lsls	r1, r3, #5
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	440b      	add	r3, r1
 8012db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db6:	4619      	mov	r1, r3
 8012db8:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <USB_DeactivateEndpoint+0x1b4>)
 8012dba:	4013      	ands	r3, r2
 8012dbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3714      	adds	r7, #20
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	ec337800 	.word	0xec337800
 8012dd0:	eff37800 	.word	0xeff37800

08012dd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	; 0x28
 8012dd8:	af02      	add	r7, sp, #8
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	4613      	mov	r3, r2
 8012de0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	785b      	ldrb	r3, [r3, #1]
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	f040 8181 	bne.w	80130f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	691b      	ldr	r3, [r3, #16]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d132      	bne.n	8012e64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	015a      	lsls	r2, r3, #5
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	4413      	add	r3, r2
 8012e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e0a:	691a      	ldr	r2, [r3, #16]
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	0159      	lsls	r1, r3, #5
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	440b      	add	r3, r1
 8012e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e18:	4619      	mov	r1, r3
 8012e1a:	4ba5      	ldr	r3, [pc, #660]	; (80130b0 <USB_EPStartXfer+0x2dc>)
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	015a      	lsls	r2, r3, #5
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	4413      	add	r3, r2
 8012e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e2c:	691b      	ldr	r3, [r3, #16]
 8012e2e:	69ba      	ldr	r2, [r7, #24]
 8012e30:	0151      	lsls	r1, r2, #5
 8012e32:	69fa      	ldr	r2, [r7, #28]
 8012e34:	440a      	add	r2, r1
 8012e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	015a      	lsls	r2, r3, #5
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	4413      	add	r3, r2
 8012e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e4c:	691a      	ldr	r2, [r3, #16]
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	0159      	lsls	r1, r3, #5
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	440b      	add	r3, r1
 8012e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4b95      	ldr	r3, [pc, #596]	; (80130b4 <USB_EPStartXfer+0x2e0>)
 8012e5e:	4013      	ands	r3, r2
 8012e60:	610b      	str	r3, [r1, #16]
 8012e62:	e092      	b.n	8012f8a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	015a      	lsls	r2, r3, #5
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e70:	691a      	ldr	r2, [r3, #16]
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	0159      	lsls	r1, r3, #5
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	440b      	add	r3, r1
 8012e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e7e:	4619      	mov	r1, r3
 8012e80:	4b8c      	ldr	r3, [pc, #560]	; (80130b4 <USB_EPStartXfer+0x2e0>)
 8012e82:	4013      	ands	r3, r2
 8012e84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	015a      	lsls	r2, r3, #5
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e92:	691a      	ldr	r2, [r3, #16]
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	0159      	lsls	r1, r3, #5
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	440b      	add	r3, r1
 8012e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4b83      	ldr	r3, [pc, #524]	; (80130b0 <USB_EPStartXfer+0x2dc>)
 8012ea4:	4013      	ands	r3, r2
 8012ea6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d11a      	bne.n	8012ee4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	691a      	ldr	r2, [r3, #16]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	689b      	ldr	r3, [r3, #8]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d903      	bls.n	8012ec2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	689a      	ldr	r2, [r3, #8]
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	015a      	lsls	r2, r3, #5
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	4413      	add	r3, r2
 8012eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ece:	691b      	ldr	r3, [r3, #16]
 8012ed0:	69ba      	ldr	r2, [r7, #24]
 8012ed2:	0151      	lsls	r1, r2, #5
 8012ed4:	69fa      	ldr	r2, [r7, #28]
 8012ed6:	440a      	add	r2, r1
 8012ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ee0:	6113      	str	r3, [r2, #16]
 8012ee2:	e01b      	b.n	8012f1c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	015a      	lsls	r2, r3, #5
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	4413      	add	r3, r2
 8012eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	6919      	ldr	r1, [r3, #16]
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	440b      	add	r3, r1
 8012efc:	1e59      	subs	r1, r3, #1
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8012f06:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012f08:	4b6b      	ldr	r3, [pc, #428]	; (80130b8 <USB_EPStartXfer+0x2e4>)
 8012f0a:	400b      	ands	r3, r1
 8012f0c:	69b9      	ldr	r1, [r7, #24]
 8012f0e:	0148      	lsls	r0, r1, #5
 8012f10:	69f9      	ldr	r1, [r7, #28]
 8012f12:	4401      	add	r1, r0
 8012f14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012f18:	4313      	orrs	r3, r2
 8012f1a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	015a      	lsls	r2, r3, #5
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	4413      	add	r3, r2
 8012f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f28:	691a      	ldr	r2, [r3, #16]
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f32:	69b9      	ldr	r1, [r7, #24]
 8012f34:	0148      	lsls	r0, r1, #5
 8012f36:	69f9      	ldr	r1, [r7, #28]
 8012f38:	4401      	add	r1, r0
 8012f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012f3e:	4313      	orrs	r3, r2
 8012f40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	791b      	ldrb	r3, [r3, #4]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d11f      	bne.n	8012f8a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	015a      	lsls	r2, r3, #5
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	4413      	add	r3, r2
 8012f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	69ba      	ldr	r2, [r7, #24]
 8012f5a:	0151      	lsls	r1, r2, #5
 8012f5c:	69fa      	ldr	r2, [r7, #28]
 8012f5e:	440a      	add	r2, r1
 8012f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012f68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	015a      	lsls	r2, r3, #5
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	4413      	add	r3, r2
 8012f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	69ba      	ldr	r2, [r7, #24]
 8012f7a:	0151      	lsls	r1, r2, #5
 8012f7c:	69fa      	ldr	r2, [r7, #28]
 8012f7e:	440a      	add	r2, r1
 8012f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012f88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d14b      	bne.n	8013028 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	69db      	ldr	r3, [r3, #28]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d009      	beq.n	8012fac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	015a      	lsls	r2, r3, #5
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	69db      	ldr	r3, [r3, #28]
 8012faa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	791b      	ldrb	r3, [r3, #4]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d128      	bne.n	8013006 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d110      	bne.n	8012fe6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	015a      	lsls	r2, r3, #5
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	4413      	add	r3, r2
 8012fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	69ba      	ldr	r2, [r7, #24]
 8012fd4:	0151      	lsls	r1, r2, #5
 8012fd6:	69fa      	ldr	r2, [r7, #28]
 8012fd8:	440a      	add	r2, r1
 8012fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012fe2:	6013      	str	r3, [r2, #0]
 8012fe4:	e00f      	b.n	8013006 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	015a      	lsls	r2, r3, #5
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	4413      	add	r3, r2
 8012fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	69ba      	ldr	r2, [r7, #24]
 8012ff6:	0151      	lsls	r1, r2, #5
 8012ff8:	69fa      	ldr	r2, [r7, #28]
 8012ffa:	440a      	add	r2, r1
 8012ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013004:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	015a      	lsls	r2, r3, #5
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	4413      	add	r3, r2
 801300e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	69ba      	ldr	r2, [r7, #24]
 8013016:	0151      	lsls	r1, r2, #5
 8013018:	69fa      	ldr	r2, [r7, #28]
 801301a:	440a      	add	r2, r1
 801301c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013024:	6013      	str	r3, [r2, #0]
 8013026:	e16a      	b.n	80132fe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	015a      	lsls	r2, r3, #5
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	4413      	add	r3, r2
 8013030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	69ba      	ldr	r2, [r7, #24]
 8013038:	0151      	lsls	r1, r2, #5
 801303a:	69fa      	ldr	r2, [r7, #28]
 801303c:	440a      	add	r2, r1
 801303e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013046:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	791b      	ldrb	r3, [r3, #4]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d015      	beq.n	801307c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	691b      	ldr	r3, [r3, #16]
 8013054:	2b00      	cmp	r3, #0
 8013056:	f000 8152 	beq.w	80132fe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	f003 030f 	and.w	r3, r3, #15
 801306a:	2101      	movs	r1, #1
 801306c:	fa01 f303 	lsl.w	r3, r1, r3
 8013070:	69f9      	ldr	r1, [r7, #28]
 8013072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013076:	4313      	orrs	r3, r2
 8013078:	634b      	str	r3, [r1, #52]	; 0x34
 801307a:	e140      	b.n	80132fe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013082:	689b      	ldr	r3, [r3, #8]
 8013084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013088:	2b00      	cmp	r3, #0
 801308a:	d117      	bne.n	80130bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	015a      	lsls	r2, r3, #5
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	4413      	add	r3, r2
 8013094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	69ba      	ldr	r2, [r7, #24]
 801309c:	0151      	lsls	r1, r2, #5
 801309e:	69fa      	ldr	r2, [r7, #28]
 80130a0:	440a      	add	r2, r1
 80130a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	e016      	b.n	80130dc <USB_EPStartXfer+0x308>
 80130ae:	bf00      	nop
 80130b0:	e007ffff 	.word	0xe007ffff
 80130b4:	fff80000 	.word	0xfff80000
 80130b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	015a      	lsls	r2, r3, #5
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	4413      	add	r3, r2
 80130c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	69ba      	ldr	r2, [r7, #24]
 80130cc:	0151      	lsls	r1, r2, #5
 80130ce:	69fa      	ldr	r2, [r7, #28]
 80130d0:	440a      	add	r2, r1
 80130d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	68d9      	ldr	r1, [r3, #12]
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	781a      	ldrb	r2, [r3, #0]
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	691b      	ldr	r3, [r3, #16]
 80130e8:	b298      	uxth	r0, r3
 80130ea:	79fb      	ldrb	r3, [r7, #7]
 80130ec:	9300      	str	r3, [sp, #0]
 80130ee:	4603      	mov	r3, r0
 80130f0:	68f8      	ldr	r0, [r7, #12]
 80130f2:	f000 f9b9 	bl	8013468 <USB_WritePacket>
 80130f6:	e102      	b.n	80132fe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	015a      	lsls	r2, r3, #5
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	4413      	add	r3, r2
 8013100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013104:	691a      	ldr	r2, [r3, #16]
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	0159      	lsls	r1, r3, #5
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	440b      	add	r3, r1
 801310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013112:	4619      	mov	r1, r3
 8013114:	4b7c      	ldr	r3, [pc, #496]	; (8013308 <USB_EPStartXfer+0x534>)
 8013116:	4013      	ands	r3, r2
 8013118:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	015a      	lsls	r2, r3, #5
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	4413      	add	r3, r2
 8013122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013126:	691a      	ldr	r2, [r3, #16]
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	0159      	lsls	r1, r3, #5
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	440b      	add	r3, r1
 8013130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013134:	4619      	mov	r1, r3
 8013136:	4b75      	ldr	r3, [pc, #468]	; (801330c <USB_EPStartXfer+0x538>)
 8013138:	4013      	ands	r3, r2
 801313a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d12f      	bne.n	80131a2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d003      	beq.n	8013152 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	689a      	ldr	r2, [r3, #8]
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	689a      	ldr	r2, [r3, #8]
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	015a      	lsls	r2, r3, #5
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	4413      	add	r3, r2
 8013162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013166:	691a      	ldr	r2, [r3, #16]
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	6a1b      	ldr	r3, [r3, #32]
 801316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013170:	69b9      	ldr	r1, [r7, #24]
 8013172:	0148      	lsls	r0, r1, #5
 8013174:	69f9      	ldr	r1, [r7, #28]
 8013176:	4401      	add	r1, r0
 8013178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801317c:	4313      	orrs	r3, r2
 801317e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	015a      	lsls	r2, r3, #5
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	4413      	add	r3, r2
 8013188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	69ba      	ldr	r2, [r7, #24]
 8013190:	0151      	lsls	r1, r2, #5
 8013192:	69fa      	ldr	r2, [r7, #28]
 8013194:	440a      	add	r2, r1
 8013196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801319a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801319e:	6113      	str	r3, [r2, #16]
 80131a0:	e05f      	b.n	8013262 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	691b      	ldr	r3, [r3, #16]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d123      	bne.n	80131f2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	015a      	lsls	r2, r3, #5
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	4413      	add	r3, r2
 80131b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b6:	691a      	ldr	r2, [r3, #16]
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131c0:	69b9      	ldr	r1, [r7, #24]
 80131c2:	0148      	lsls	r0, r1, #5
 80131c4:	69f9      	ldr	r1, [r7, #28]
 80131c6:	4401      	add	r1, r0
 80131c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80131cc:	4313      	orrs	r3, r2
 80131ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	015a      	lsls	r2, r3, #5
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	4413      	add	r3, r2
 80131d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131dc:	691b      	ldr	r3, [r3, #16]
 80131de:	69ba      	ldr	r2, [r7, #24]
 80131e0:	0151      	lsls	r1, r2, #5
 80131e2:	69fa      	ldr	r2, [r7, #28]
 80131e4:	440a      	add	r2, r1
 80131e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80131ee:	6113      	str	r3, [r2, #16]
 80131f0:	e037      	b.n	8013262 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	691a      	ldr	r2, [r3, #16]
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	689b      	ldr	r3, [r3, #8]
 80131fa:	4413      	add	r3, r2
 80131fc:	1e5a      	subs	r2, r3, #1
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	fbb2 f3f3 	udiv	r3, r2, r3
 8013206:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	689b      	ldr	r3, [r3, #8]
 801320c:	8afa      	ldrh	r2, [r7, #22]
 801320e:	fb03 f202 	mul.w	r2, r3, r2
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	015a      	lsls	r2, r3, #5
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	4413      	add	r3, r2
 801321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013222:	691a      	ldr	r2, [r3, #16]
 8013224:	8afb      	ldrh	r3, [r7, #22]
 8013226:	04d9      	lsls	r1, r3, #19
 8013228:	4b39      	ldr	r3, [pc, #228]	; (8013310 <USB_EPStartXfer+0x53c>)
 801322a:	400b      	ands	r3, r1
 801322c:	69b9      	ldr	r1, [r7, #24]
 801322e:	0148      	lsls	r0, r1, #5
 8013230:	69f9      	ldr	r1, [r7, #28]
 8013232:	4401      	add	r1, r0
 8013234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013238:	4313      	orrs	r3, r2
 801323a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	015a      	lsls	r2, r3, #5
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	4413      	add	r3, r2
 8013244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013248:	691a      	ldr	r2, [r3, #16]
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	6a1b      	ldr	r3, [r3, #32]
 801324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013252:	69b9      	ldr	r1, [r7, #24]
 8013254:	0148      	lsls	r0, r1, #5
 8013256:	69f9      	ldr	r1, [r7, #28]
 8013258:	4401      	add	r1, r0
 801325a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801325e:	4313      	orrs	r3, r2
 8013260:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013262:	79fb      	ldrb	r3, [r7, #7]
 8013264:	2b01      	cmp	r3, #1
 8013266:	d10d      	bne.n	8013284 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d009      	beq.n	8013284 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	68d9      	ldr	r1, [r3, #12]
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	015a      	lsls	r2, r3, #5
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	4413      	add	r3, r2
 801327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013280:	460a      	mov	r2, r1
 8013282:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	791b      	ldrb	r3, [r3, #4]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d128      	bne.n	80132de <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013292:	689b      	ldr	r3, [r3, #8]
 8013294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013298:	2b00      	cmp	r3, #0
 801329a:	d110      	bne.n	80132be <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	015a      	lsls	r2, r3, #5
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	4413      	add	r3, r2
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	69ba      	ldr	r2, [r7, #24]
 80132ac:	0151      	lsls	r1, r2, #5
 80132ae:	69fa      	ldr	r2, [r7, #28]
 80132b0:	440a      	add	r2, r1
 80132b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80132ba:	6013      	str	r3, [r2, #0]
 80132bc:	e00f      	b.n	80132de <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	015a      	lsls	r2, r3, #5
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	4413      	add	r3, r2
 80132c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	69ba      	ldr	r2, [r7, #24]
 80132ce:	0151      	lsls	r1, r2, #5
 80132d0:	69fa      	ldr	r2, [r7, #28]
 80132d2:	440a      	add	r2, r1
 80132d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	015a      	lsls	r2, r3, #5
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	4413      	add	r3, r2
 80132e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	69ba      	ldr	r2, [r7, #24]
 80132ee:	0151      	lsls	r1, r2, #5
 80132f0:	69fa      	ldr	r2, [r7, #28]
 80132f2:	440a      	add	r2, r1
 80132f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80132fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3720      	adds	r7, #32
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	fff80000 	.word	0xfff80000
 801330c:	e007ffff 	.word	0xe007ffff
 8013310:	1ff80000 	.word	0x1ff80000

08013314 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013314:	b480      	push	{r7}
 8013316:	b087      	sub	sp, #28
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801331e:	2300      	movs	r3, #0
 8013320:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013322:	2300      	movs	r3, #0
 8013324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	785b      	ldrb	r3, [r3, #1]
 801332e:	2b01      	cmp	r3, #1
 8013330:	d14a      	bne.n	80133c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	015a      	lsls	r2, r3, #5
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	4413      	add	r3, r2
 801333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801334a:	f040 8086 	bne.w	801345a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	015a      	lsls	r2, r3, #5
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	4413      	add	r3, r2
 8013358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	683a      	ldr	r2, [r7, #0]
 8013360:	7812      	ldrb	r2, [r2, #0]
 8013362:	0151      	lsls	r1, r2, #5
 8013364:	693a      	ldr	r2, [r7, #16]
 8013366:	440a      	add	r2, r1
 8013368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801336c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013370:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	4413      	add	r3, r2
 801337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	683a      	ldr	r2, [r7, #0]
 8013384:	7812      	ldrb	r2, [r2, #0]
 8013386:	0151      	lsls	r1, r2, #5
 8013388:	693a      	ldr	r2, [r7, #16]
 801338a:	440a      	add	r2, r1
 801338c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	3301      	adds	r3, #1
 801339a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f242 7210 	movw	r2, #10000	; 0x2710
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d902      	bls.n	80133ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80133a6:	2301      	movs	r3, #1
 80133a8:	75fb      	strb	r3, [r7, #23]
          break;
 80133aa:	e056      	b.n	801345a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	015a      	lsls	r2, r3, #5
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	4413      	add	r3, r2
 80133b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133c4:	d0e7      	beq.n	8013396 <USB_EPStopXfer+0x82>
 80133c6:	e048      	b.n	801345a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	015a      	lsls	r2, r3, #5
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	4413      	add	r3, r2
 80133d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133e0:	d13b      	bne.n	801345a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	015a      	lsls	r2, r3, #5
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	4413      	add	r3, r2
 80133ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	7812      	ldrb	r2, [r2, #0]
 80133f6:	0151      	lsls	r1, r2, #5
 80133f8:	693a      	ldr	r2, [r7, #16]
 80133fa:	440a      	add	r2, r1
 80133fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013404:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	015a      	lsls	r2, r3, #5
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	4413      	add	r3, r2
 8013410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	7812      	ldrb	r2, [r2, #0]
 801341a:	0151      	lsls	r1, r2, #5
 801341c:	693a      	ldr	r2, [r7, #16]
 801341e:	440a      	add	r2, r1
 8013420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	3301      	adds	r3, #1
 801342e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	f242 7210 	movw	r2, #10000	; 0x2710
 8013436:	4293      	cmp	r3, r2
 8013438:	d902      	bls.n	8013440 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801343a:	2301      	movs	r3, #1
 801343c:	75fb      	strb	r3, [r7, #23]
          break;
 801343e:	e00c      	b.n	801345a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	015a      	lsls	r2, r3, #5
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	4413      	add	r3, r2
 801344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013458:	d0e7      	beq.n	801342a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801345a:	7dfb      	ldrb	r3, [r7, #23]
}
 801345c:	4618      	mov	r0, r3
 801345e:	371c      	adds	r7, #28
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr

08013468 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013468:	b480      	push	{r7}
 801346a:	b089      	sub	sp, #36	; 0x24
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	4611      	mov	r1, r2
 8013474:	461a      	mov	r2, r3
 8013476:	460b      	mov	r3, r1
 8013478:	71fb      	strb	r3, [r7, #7]
 801347a:	4613      	mov	r3, r2
 801347c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801348a:	2b00      	cmp	r3, #0
 801348c:	d123      	bne.n	80134d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801348e:	88bb      	ldrh	r3, [r7, #4]
 8013490:	3303      	adds	r3, #3
 8013492:	089b      	lsrs	r3, r3, #2
 8013494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013496:	2300      	movs	r3, #0
 8013498:	61bb      	str	r3, [r7, #24]
 801349a:	e018      	b.n	80134ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801349c:	79fb      	ldrb	r3, [r7, #7]
 801349e:	031a      	lsls	r2, r3, #12
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	4413      	add	r3, r2
 80134a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80134a8:	461a      	mov	r2, r3
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80134b0:	69fb      	ldr	r3, [r7, #28]
 80134b2:	3301      	adds	r3, #1
 80134b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	3301      	adds	r3, #1
 80134ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	3301      	adds	r3, #1
 80134c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	3301      	adds	r3, #1
 80134c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	3301      	adds	r3, #1
 80134cc:	61bb      	str	r3, [r7, #24]
 80134ce:	69ba      	ldr	r2, [r7, #24]
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d3e2      	bcc.n	801349c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3724      	adds	r7, #36	; 0x24
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b08b      	sub	sp, #44	; 0x2c
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4613      	mov	r3, r2
 80134f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80134fa:	88fb      	ldrh	r3, [r7, #6]
 80134fc:	089b      	lsrs	r3, r3, #2
 80134fe:	b29b      	uxth	r3, r3
 8013500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013502:	88fb      	ldrh	r3, [r7, #6]
 8013504:	f003 0303 	and.w	r3, r3, #3
 8013508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801350a:	2300      	movs	r3, #0
 801350c:	623b      	str	r3, [r7, #32]
 801350e:	e014      	b.n	801353a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013516:	681a      	ldr	r2, [r3, #0]
 8013518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351a:	601a      	str	r2, [r3, #0]
    pDest++;
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	3301      	adds	r3, #1
 8013520:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	3301      	adds	r3, #1
 8013526:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352a:	3301      	adds	r3, #1
 801352c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013530:	3301      	adds	r3, #1
 8013532:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	3301      	adds	r3, #1
 8013538:	623b      	str	r3, [r7, #32]
 801353a:	6a3a      	ldr	r2, [r7, #32]
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	429a      	cmp	r2, r3
 8013540:	d3e6      	bcc.n	8013510 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013542:	8bfb      	ldrh	r3, [r7, #30]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d01e      	beq.n	8013586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013548:	2300      	movs	r3, #0
 801354a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013552:	461a      	mov	r2, r3
 8013554:	f107 0310 	add.w	r3, r7, #16
 8013558:	6812      	ldr	r2, [r2, #0]
 801355a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801355c:	693a      	ldr	r2, [r7, #16]
 801355e:	6a3b      	ldr	r3, [r7, #32]
 8013560:	b2db      	uxtb	r3, r3
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	fa22 f303 	lsr.w	r3, r2, r3
 8013568:	b2da      	uxtb	r2, r3
 801356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356c:	701a      	strb	r2, [r3, #0]
      i++;
 801356e:	6a3b      	ldr	r3, [r7, #32]
 8013570:	3301      	adds	r3, #1
 8013572:	623b      	str	r3, [r7, #32]
      pDest++;
 8013574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013576:	3301      	adds	r3, #1
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801357a:	8bfb      	ldrh	r3, [r7, #30]
 801357c:	3b01      	subs	r3, #1
 801357e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013580:	8bfb      	ldrh	r3, [r7, #30]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d1ea      	bne.n	801355c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013588:	4618      	mov	r0, r3
 801358a:	372c      	adds	r7, #44	; 0x2c
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013594:	b480      	push	{r7}
 8013596:	b085      	sub	sp, #20
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	785b      	ldrb	r3, [r3, #1]
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	d12c      	bne.n	801360a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	015a      	lsls	r2, r3, #5
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	4413      	add	r3, r2
 80135b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	db12      	blt.n	80135e8 <USB_EPSetStall+0x54>
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00f      	beq.n	80135e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	015a      	lsls	r2, r3, #5
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	4413      	add	r3, r2
 80135d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	0151      	lsls	r1, r2, #5
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	440a      	add	r2, r1
 80135de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80135e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	015a      	lsls	r2, r3, #5
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	4413      	add	r3, r2
 80135f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	68ba      	ldr	r2, [r7, #8]
 80135f8:	0151      	lsls	r1, r2, #5
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	440a      	add	r2, r1
 80135fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	e02b      	b.n	8013662 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	015a      	lsls	r2, r3, #5
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	4413      	add	r3, r2
 8013612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	db12      	blt.n	8013642 <USB_EPSetStall+0xae>
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d00f      	beq.n	8013642 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	0151      	lsls	r1, r2, #5
 8013634:	68fa      	ldr	r2, [r7, #12]
 8013636:	440a      	add	r2, r1
 8013638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801363c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013640:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	015a      	lsls	r2, r3, #5
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	4413      	add	r3, r2
 801364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	68ba      	ldr	r2, [r7, #8]
 8013652:	0151      	lsls	r1, r2, #5
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	440a      	add	r2, r1
 8013658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801365c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	3714      	adds	r7, #20
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013670:	b480      	push	{r7}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	785b      	ldrb	r3, [r3, #1]
 8013688:	2b01      	cmp	r3, #1
 801368a:	d128      	bne.n	80136de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	015a      	lsls	r2, r3, #5
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	4413      	add	r3, r2
 8013694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	68ba      	ldr	r2, [r7, #8]
 801369c:	0151      	lsls	r1, r2, #5
 801369e:	68fa      	ldr	r2, [r7, #12]
 80136a0:	440a      	add	r2, r1
 80136a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80136aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	791b      	ldrb	r3, [r3, #4]
 80136b0:	2b03      	cmp	r3, #3
 80136b2:	d003      	beq.n	80136bc <USB_EPClearStall+0x4c>
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	791b      	ldrb	r3, [r3, #4]
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d138      	bne.n	801372e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	015a      	lsls	r2, r3, #5
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4413      	add	r3, r2
 80136c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	68ba      	ldr	r2, [r7, #8]
 80136cc:	0151      	lsls	r1, r2, #5
 80136ce:	68fa      	ldr	r2, [r7, #12]
 80136d0:	440a      	add	r2, r1
 80136d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136da:	6013      	str	r3, [r2, #0]
 80136dc:	e027      	b.n	801372e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	015a      	lsls	r2, r3, #5
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	4413      	add	r3, r2
 80136e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68ba      	ldr	r2, [r7, #8]
 80136ee:	0151      	lsls	r1, r2, #5
 80136f0:	68fa      	ldr	r2, [r7, #12]
 80136f2:	440a      	add	r2, r1
 80136f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80136fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	791b      	ldrb	r3, [r3, #4]
 8013702:	2b03      	cmp	r3, #3
 8013704:	d003      	beq.n	801370e <USB_EPClearStall+0x9e>
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	791b      	ldrb	r3, [r3, #4]
 801370a:	2b02      	cmp	r3, #2
 801370c:	d10f      	bne.n	801372e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	015a      	lsls	r2, r3, #5
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	4413      	add	r3, r2
 8013716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	68ba      	ldr	r2, [r7, #8]
 801371e:	0151      	lsls	r1, r2, #5
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	440a      	add	r2, r1
 8013724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801372c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801372e:	2300      	movs	r3, #0
}
 8013730:	4618      	mov	r0, r3
 8013732:	3714      	adds	r7, #20
 8013734:	46bd      	mov	sp, r7
 8013736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373a:	4770      	bx	lr

0801373c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801373c:	b480      	push	{r7}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	68fa      	ldr	r2, [r7, #12]
 8013756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801375a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801375e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	78fb      	ldrb	r3, [r7, #3]
 801376a:	011b      	lsls	r3, r3, #4
 801376c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013770:	68f9      	ldr	r1, [r7, #12]
 8013772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013776:	4313      	orrs	r3, r2
 8013778:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801377a:	2300      	movs	r3, #0
}
 801377c:	4618      	mov	r0, r3
 801377e:	3714      	adds	r7, #20
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013788:	b480      	push	{r7}
 801378a:	b085      	sub	sp, #20
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	68fa      	ldr	r2, [r7, #12]
 801379e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137a2:	f023 0303 	bic.w	r3, r3, #3
 80137a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	68fa      	ldr	r2, [r7, #12]
 80137b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80137b6:	f023 0302 	bic.w	r3, r3, #2
 80137ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80137bc:	2300      	movs	r3, #0
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3714      	adds	r7, #20
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80137ca:	b480      	push	{r7}
 80137cc:	b085      	sub	sp, #20
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	68fa      	ldr	r2, [r7, #12]
 80137e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137e4:	f023 0303 	bic.w	r3, r3, #3
 80137e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	68fa      	ldr	r2, [r7, #12]
 80137f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80137f8:	f043 0302 	orr.w	r3, r3, #2
 80137fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80137fe:	2300      	movs	r3, #0
}
 8013800:	4618      	mov	r0, r3
 8013802:	3714      	adds	r7, #20
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801380c:	b480      	push	{r7}
 801380e:	b085      	sub	sp, #20
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	695b      	ldr	r3, [r3, #20]
 8013818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	699b      	ldr	r3, [r3, #24]
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	4013      	ands	r3, r2
 8013822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013824:	68fb      	ldr	r3, [r7, #12]
}
 8013826:	4618      	mov	r0, r3
 8013828:	3714      	adds	r7, #20
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013832:	b480      	push	{r7}
 8013834:	b085      	sub	sp, #20
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013844:	699b      	ldr	r3, [r3, #24]
 8013846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801384e:	69db      	ldr	r3, [r3, #28]
 8013850:	68ba      	ldr	r2, [r7, #8]
 8013852:	4013      	ands	r3, r2
 8013854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	0c1b      	lsrs	r3, r3, #16
}
 801385a:	4618      	mov	r0, r3
 801385c:	3714      	adds	r7, #20
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013866:	b480      	push	{r7}
 8013868:	b085      	sub	sp, #20
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013882:	69db      	ldr	r3, [r3, #28]
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	4013      	ands	r3, r2
 8013888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	b29b      	uxth	r3, r3
}
 801388e:	4618      	mov	r0, r3
 8013890:	3714      	adds	r7, #20
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr

0801389a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801389a:	b480      	push	{r7}
 801389c:	b085      	sub	sp, #20
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	460b      	mov	r3, r1
 80138a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80138aa:	78fb      	ldrb	r3, [r7, #3]
 80138ac:	015a      	lsls	r2, r3, #5
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	4413      	add	r3, r2
 80138b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	4013      	ands	r3, r2
 80138c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80138c8:	68bb      	ldr	r3, [r7, #8]
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3714      	adds	r7, #20
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80138d6:	b480      	push	{r7}
 80138d8:	b087      	sub	sp, #28
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	460b      	mov	r3, r1
 80138e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80138fa:	78fb      	ldrb	r3, [r7, #3]
 80138fc:	f003 030f 	and.w	r3, r3, #15
 8013900:	68fa      	ldr	r2, [r7, #12]
 8013902:	fa22 f303 	lsr.w	r3, r2, r3
 8013906:	01db      	lsls	r3, r3, #7
 8013908:	b2db      	uxtb	r3, r3
 801390a:	693a      	ldr	r2, [r7, #16]
 801390c:	4313      	orrs	r3, r2
 801390e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013910:	78fb      	ldrb	r3, [r7, #3]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	693a      	ldr	r2, [r7, #16]
 8013920:	4013      	ands	r3, r2
 8013922:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013924:	68bb      	ldr	r3, [r7, #8]
}
 8013926:	4618      	mov	r0, r3
 8013928:	371c      	adds	r7, #28
 801392a:	46bd      	mov	sp, r7
 801392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013930:	4770      	bx	lr

08013932 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013932:	b480      	push	{r7}
 8013934:	b083      	sub	sp, #12
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	695b      	ldr	r3, [r3, #20]
 801393e:	f003 0301 	and.w	r3, r3, #1
}
 8013942:	4618      	mov	r0, r3
 8013944:	370c      	adds	r7, #12
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr
	...

08013950 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013950:	b480      	push	{r7}
 8013952:	b085      	sub	sp, #20
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801396a:	4619      	mov	r1, r3
 801396c:	4b09      	ldr	r3, [pc, #36]	; (8013994 <USB_ActivateSetup+0x44>)
 801396e:	4013      	ands	r3, r2
 8013970:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr
 8013994:	fffff800 	.word	0xfffff800

08013998 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013998:	b480      	push	{r7}
 801399a:	b087      	sub	sp, #28
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	460b      	mov	r3, r1
 80139a2:	607a      	str	r2, [r7, #4]
 80139a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	333c      	adds	r3, #60	; 0x3c
 80139ae:	3304      	adds	r3, #4
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	4a26      	ldr	r2, [pc, #152]	; (8013a50 <USB_EP0_OutStart+0xb8>)
 80139b8:	4293      	cmp	r3, r2
 80139ba:	d90a      	bls.n	80139d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139cc:	d101      	bne.n	80139d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80139ce:	2300      	movs	r3, #0
 80139d0:	e037      	b.n	8013a42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d8:	461a      	mov	r2, r3
 80139da:	2300      	movs	r3, #0
 80139dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	697a      	ldr	r2, [r7, #20]
 80139e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80139f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139f8:	691b      	ldr	r3, [r3, #16]
 80139fa:	697a      	ldr	r2, [r7, #20]
 80139fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a00:	f043 0318 	orr.w	r3, r3, #24
 8013a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a0c:	691b      	ldr	r3, [r3, #16]
 8013a0e:	697a      	ldr	r2, [r7, #20]
 8013a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013a18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013a1a:	7afb      	ldrb	r3, [r7, #11]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d10f      	bne.n	8013a40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a26:	461a      	mov	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	697a      	ldr	r2, [r7, #20]
 8013a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	371c      	adds	r7, #28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop
 8013a50:	4f54300a 	.word	0x4f54300a

08013a54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b085      	sub	sp, #20
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	3301      	adds	r3, #1
 8013a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	4a13      	ldr	r2, [pc, #76]	; (8013ab8 <USB_CoreReset+0x64>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d901      	bls.n	8013a72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013a6e:	2303      	movs	r3, #3
 8013a70:	e01b      	b.n	8013aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	691b      	ldr	r3, [r3, #16]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	daf2      	bge.n	8013a60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	691b      	ldr	r3, [r3, #16]
 8013a82:	f043 0201 	orr.w	r2, r3, #1
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4a09      	ldr	r2, [pc, #36]	; (8013ab8 <USB_CoreReset+0x64>)
 8013a94:	4293      	cmp	r3, r2
 8013a96:	d901      	bls.n	8013a9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	e006      	b.n	8013aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	691b      	ldr	r3, [r3, #16]
 8013aa0:	f003 0301 	and.w	r3, r3, #1
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d0f0      	beq.n	8013a8a <USB_CoreReset+0x36>

  return HAL_OK;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3714      	adds	r7, #20
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	00030d40 	.word	0x00030d40

08013abc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013ac0:	4904      	ldr	r1, [pc, #16]	; (8013ad4 <MX_FATFS_Init+0x18>)
 8013ac2:	4805      	ldr	r0, [pc, #20]	; (8013ad8 <MX_FATFS_Init+0x1c>)
 8013ac4:	f002 fa56 	bl	8015f74 <FATFS_LinkDriver>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	461a      	mov	r2, r3
 8013acc:	4b03      	ldr	r3, [pc, #12]	; (8013adc <MX_FATFS_Init+0x20>)
 8013ace:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013ad0:	bf00      	nop
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	2400149c 	.word	0x2400149c
 8013ad8:	080174d4 	.word	0x080174d4
 8013adc:	24001498 	.word	0x24001498

08013ae0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013aea:	f000 f885 	bl	8013bf8 <BSP_SD_IsDetected>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b01      	cmp	r3, #1
 8013af2:	d001      	beq.n	8013af8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013af4:	2302      	movs	r3, #2
 8013af6:	e012      	b.n	8013b1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013af8:	480b      	ldr	r0, [pc, #44]	; (8013b28 <BSP_SD_Init+0x48>)
 8013afa:	f7f8 ff99 	bl	800ca30 <HAL_SD_Init>
 8013afe:	4603      	mov	r3, r0
 8013b00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013b02:	79fb      	ldrb	r3, [r7, #7]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d109      	bne.n	8013b1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013b0c:	4806      	ldr	r0, [pc, #24]	; (8013b28 <BSP_SD_Init+0x48>)
 8013b0e:	f7f9 fe4f 	bl	800d7b0 <HAL_SD_ConfigWideBusOperation>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	24000dcc 	.word	0x24000dcc

08013b2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b086      	sub	sp, #24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	68ba      	ldr	r2, [r7, #8]
 8013b40:	68f9      	ldr	r1, [r7, #12]
 8013b42:	4806      	ldr	r0, [pc, #24]	; (8013b5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013b44:	f7f9 f894 	bl	800cc70 <HAL_SD_ReadBlocks_DMA>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3718      	adds	r7, #24
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	24000dcc 	.word	0x24000dcc

08013b60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	68ba      	ldr	r2, [r7, #8]
 8013b74:	68f9      	ldr	r1, [r7, #12]
 8013b76:	4806      	ldr	r0, [pc, #24]	; (8013b90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013b78:	f7f9 f922 	bl	800cdc0 <HAL_SD_WriteBlocks_DMA>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d001      	beq.n	8013b86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013b82:	2301      	movs	r3, #1
 8013b84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3718      	adds	r7, #24
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	24000dcc 	.word	0x24000dcc

08013b94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013b98:	4805      	ldr	r0, [pc, #20]	; (8013bb0 <BSP_SD_GetCardState+0x1c>)
 8013b9a:	f7f9 ff1b 	bl	800d9d4 <HAL_SD_GetCardState>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	2b04      	cmp	r3, #4
 8013ba2:	bf14      	ite	ne
 8013ba4:	2301      	movne	r3, #1
 8013ba6:	2300      	moveq	r3, #0
 8013ba8:	b2db      	uxtb	r3, r3
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	24000dcc 	.word	0x24000dcc

08013bb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013bbc:	6879      	ldr	r1, [r7, #4]
 8013bbe:	4803      	ldr	r0, [pc, #12]	; (8013bcc <BSP_SD_GetCardInfo+0x18>)
 8013bc0:	f7f9 fdca 	bl	800d758 <HAL_SD_GetCardInfo>
}
 8013bc4:	bf00      	nop
 8013bc6:	3708      	adds	r7, #8
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	24000dcc 	.word	0x24000dcc

08013bd0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013bd8:	f000 f9a0 	bl	8013f1c <BSP_SD_WriteCpltCallback>
}
 8013bdc:	bf00      	nop
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013bec:	f000 f9a2 	bl	8013f34 <BSP_SD_ReadCpltCallback>
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013bfe:	2301      	movs	r3, #1
 8013c00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013c02:	f000 f80b 	bl	8013c1c <BSP_PlatformIsDetected>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d101      	bne.n	8013c10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013c10:	79fb      	ldrb	r3, [r7, #7]
 8013c12:	b2db      	uxtb	r3, r3
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013c22:	2301      	movs	r3, #1
 8013c24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013c26:	2104      	movs	r1, #4
 8013c28:	4806      	ldr	r0, [pc, #24]	; (8013c44 <BSP_PlatformIsDetected+0x28>)
 8013c2a:	f7f3 feef 	bl	8007a0c <HAL_GPIO_ReadPin>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013c34:	2300      	movs	r3, #0
 8013c36:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013c38:	79fb      	ldrb	r3, [r7, #7]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	58020400 	.word	0x58020400

08013c48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b084      	sub	sp, #16
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013c50:	f7ef fc34 	bl	80034bc <HAL_GetTick>
 8013c54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013c56:	e006      	b.n	8013c66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013c58:	f7ff ff9c 	bl	8013b94 <BSP_SD_GetCardState>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d101      	bne.n	8013c66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013c62:	2300      	movs	r3, #0
 8013c64:	e009      	b.n	8013c7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013c66:	f7ef fc29 	bl	80034bc <HAL_GetTick>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d8f0      	bhi.n	8013c58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3710      	adds	r7, #16
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
	...

08013c84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013c8e:	4b0b      	ldr	r3, [pc, #44]	; (8013cbc <SD_CheckStatus+0x38>)
 8013c90:	2201      	movs	r2, #1
 8013c92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013c94:	f7ff ff7e 	bl	8013b94 <BSP_SD_GetCardState>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d107      	bne.n	8013cae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013c9e:	4b07      	ldr	r3, [pc, #28]	; (8013cbc <SD_CheckStatus+0x38>)
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	f023 0301 	bic.w	r3, r3, #1
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <SD_CheckStatus+0x38>)
 8013cac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013cae:	4b03      	ldr	r3, [pc, #12]	; (8013cbc <SD_CheckStatus+0x38>)
 8013cb0:	781b      	ldrb	r3, [r3, #0]
 8013cb2:	b2db      	uxtb	r3, r3
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	2400000d 	.word	0x2400000d

08013cc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013cca:	f7ff ff09 	bl	8013ae0 <BSP_SD_Init>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d107      	bne.n	8013ce4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7ff ffd4 	bl	8013c84 <SD_CheckStatus>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	461a      	mov	r2, r3
 8013ce0:	4b04      	ldr	r3, [pc, #16]	; (8013cf4 <SD_initialize+0x34>)
 8013ce2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013ce4:	4b03      	ldr	r3, [pc, #12]	; (8013cf4 <SD_initialize+0x34>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	b2db      	uxtb	r3, r3
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	2400000d 	.word	0x2400000d

08013cf8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	4603      	mov	r3, r0
 8013d00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7ff ffbd 	bl	8013c84 <SD_CheckStatus>
 8013d0a:	4603      	mov	r3, r0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b086      	sub	sp, #24
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60b9      	str	r1, [r7, #8]
 8013d1c:	607a      	str	r2, [r7, #4]
 8013d1e:	603b      	str	r3, [r7, #0]
 8013d20:	4603      	mov	r3, r0
 8013d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013d24:	2301      	movs	r3, #1
 8013d26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013d28:	f247 5030 	movw	r0, #30000	; 0x7530
 8013d2c:	f7ff ff8c 	bl	8013c48 <SD_CheckStatusWithTimeout>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	da01      	bge.n	8013d3a <SD_read+0x26>
  {
    return res;
 8013d36:	7dfb      	ldrb	r3, [r7, #23]
 8013d38:	e03b      	b.n	8013db2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013d3a:	683a      	ldr	r2, [r7, #0]
 8013d3c:	6879      	ldr	r1, [r7, #4]
 8013d3e:	68b8      	ldr	r0, [r7, #8]
 8013d40:	f7ff fef4 	bl	8013b2c <BSP_SD_ReadBlocks_DMA>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d132      	bne.n	8013db0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013d4a:	4b1c      	ldr	r3, [pc, #112]	; (8013dbc <SD_read+0xa8>)
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013d50:	f7ef fbb4 	bl	80034bc <HAL_GetTick>
 8013d54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013d56:	bf00      	nop
 8013d58:	4b18      	ldr	r3, [pc, #96]	; (8013dbc <SD_read+0xa8>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d108      	bne.n	8013d72 <SD_read+0x5e>
 8013d60:	f7ef fbac 	bl	80034bc <HAL_GetTick>
 8013d64:	4602      	mov	r2, r0
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	1ad3      	subs	r3, r2, r3
 8013d6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d9f2      	bls.n	8013d58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013d72:	4b12      	ldr	r3, [pc, #72]	; (8013dbc <SD_read+0xa8>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d102      	bne.n	8013d80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	75fb      	strb	r3, [r7, #23]
 8013d7e:	e017      	b.n	8013db0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013d80:	4b0e      	ldr	r3, [pc, #56]	; (8013dbc <SD_read+0xa8>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013d86:	f7ef fb99 	bl	80034bc <HAL_GetTick>
 8013d8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013d8c:	e007      	b.n	8013d9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013d8e:	f7ff ff01 	bl	8013b94 <BSP_SD_GetCardState>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <SD_read+0x8a>
          {
            res = RES_OK;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013d9c:	e008      	b.n	8013db0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013d9e:	f7ef fb8d 	bl	80034bc <HAL_GetTick>
 8013da2:	4602      	mov	r2, r0
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	1ad3      	subs	r3, r2, r3
 8013da8:	f247 522f 	movw	r2, #29999	; 0x752f
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d9ee      	bls.n	8013d8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3718      	adds	r7, #24
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	240014a4 	.word	0x240014a4

08013dc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b086      	sub	sp, #24
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60b9      	str	r1, [r7, #8]
 8013dc8:	607a      	str	r2, [r7, #4]
 8013dca:	603b      	str	r3, [r7, #0]
 8013dcc:	4603      	mov	r3, r0
 8013dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013dd4:	4b24      	ldr	r3, [pc, #144]	; (8013e68 <SD_write+0xa8>)
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013dda:	f247 5030 	movw	r0, #30000	; 0x7530
 8013dde:	f7ff ff33 	bl	8013c48 <SD_CheckStatusWithTimeout>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	da01      	bge.n	8013dec <SD_write+0x2c>
  {
    return res;
 8013de8:	7dfb      	ldrb	r3, [r7, #23]
 8013dea:	e038      	b.n	8013e5e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013dec:	683a      	ldr	r2, [r7, #0]
 8013dee:	6879      	ldr	r1, [r7, #4]
 8013df0:	68b8      	ldr	r0, [r7, #8]
 8013df2:	f7ff feb5 	bl	8013b60 <BSP_SD_WriteBlocks_DMA>
 8013df6:	4603      	mov	r3, r0
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d12f      	bne.n	8013e5c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013dfc:	f7ef fb5e 	bl	80034bc <HAL_GetTick>
 8013e00:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013e02:	bf00      	nop
 8013e04:	4b18      	ldr	r3, [pc, #96]	; (8013e68 <SD_write+0xa8>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d108      	bne.n	8013e1e <SD_write+0x5e>
 8013e0c:	f7ef fb56 	bl	80034bc <HAL_GetTick>
 8013e10:	4602      	mov	r2, r0
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	1ad3      	subs	r3, r2, r3
 8013e16:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	d9f2      	bls.n	8013e04 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013e1e:	4b12      	ldr	r3, [pc, #72]	; (8013e68 <SD_write+0xa8>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013e26:	2301      	movs	r3, #1
 8013e28:	75fb      	strb	r3, [r7, #23]
 8013e2a:	e017      	b.n	8013e5c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013e2c:	4b0e      	ldr	r3, [pc, #56]	; (8013e68 <SD_write+0xa8>)
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013e32:	f7ef fb43 	bl	80034bc <HAL_GetTick>
 8013e36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013e38:	e007      	b.n	8013e4a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e3a:	f7ff feab 	bl	8013b94 <BSP_SD_GetCardState>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d102      	bne.n	8013e4a <SD_write+0x8a>
          {
            res = RES_OK;
 8013e44:	2300      	movs	r3, #0
 8013e46:	75fb      	strb	r3, [r7, #23]
            break;
 8013e48:	e008      	b.n	8013e5c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013e4a:	f7ef fb37 	bl	80034bc <HAL_GetTick>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d9ee      	bls.n	8013e3a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3718      	adds	r7, #24
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	240014a0 	.word	0x240014a0

08013e6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b08c      	sub	sp, #48	; 0x30
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	4603      	mov	r3, r0
 8013e74:	603a      	str	r2, [r7, #0]
 8013e76:	71fb      	strb	r3, [r7, #7]
 8013e78:	460b      	mov	r3, r1
 8013e7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013e82:	4b25      	ldr	r3, [pc, #148]	; (8013f18 <SD_ioctl+0xac>)
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	f003 0301 	and.w	r3, r3, #1
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d001      	beq.n	8013e94 <SD_ioctl+0x28>
 8013e90:	2303      	movs	r3, #3
 8013e92:	e03c      	b.n	8013f0e <SD_ioctl+0xa2>

  switch (cmd)
 8013e94:	79bb      	ldrb	r3, [r7, #6]
 8013e96:	2b03      	cmp	r3, #3
 8013e98:	d834      	bhi.n	8013f04 <SD_ioctl+0x98>
 8013e9a:	a201      	add	r2, pc, #4	; (adr r2, 8013ea0 <SD_ioctl+0x34>)
 8013e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ea0:	08013eb1 	.word	0x08013eb1
 8013ea4:	08013eb9 	.word	0x08013eb9
 8013ea8:	08013ed1 	.word	0x08013ed1
 8013eac:	08013eeb 	.word	0x08013eeb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013eb6:	e028      	b.n	8013f0a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013eb8:	f107 0308 	add.w	r3, r7, #8
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7ff fe79 	bl	8013bb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013ec2:	6a3a      	ldr	r2, [r7, #32]
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013ece:	e01c      	b.n	8013f0a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013ed0:	f107 0308 	add.w	r3, r7, #8
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7ff fe6d 	bl	8013bb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013ee8:	e00f      	b.n	8013f0a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013eea:	f107 0308 	add.w	r3, r7, #8
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ff fe60 	bl	8013bb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	0a5a      	lsrs	r2, r3, #9
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013efc:	2300      	movs	r3, #0
 8013efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013f02:	e002      	b.n	8013f0a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013f04:	2304      	movs	r3, #4
 8013f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3730      	adds	r7, #48	; 0x30
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	2400000d 	.word	0x2400000d

08013f1c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013f20:	4b03      	ldr	r3, [pc, #12]	; (8013f30 <BSP_SD_WriteCpltCallback+0x14>)
 8013f22:	2201      	movs	r2, #1
 8013f24:	601a      	str	r2, [r3, #0]
}
 8013f26:	bf00      	nop
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2e:	4770      	bx	lr
 8013f30:	240014a0 	.word	0x240014a0

08013f34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013f34:	b480      	push	{r7}
 8013f36:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013f38:	4b03      	ldr	r3, [pc, #12]	; (8013f48 <BSP_SD_ReadCpltCallback+0x14>)
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	601a      	str	r2, [r3, #0]
}
 8013f3e:	bf00      	nop
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr
 8013f48:	240014a4 	.word	0x240014a4

08013f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b084      	sub	sp, #16
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	460b      	mov	r3, r1
 8013f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013f58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013f5c:	f002 fcea 	bl	8016934 <USBD_static_malloc>
 8013f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d109      	bne.n	8013f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	32b0      	adds	r2, #176	; 0xb0
 8013f72:	2100      	movs	r1, #0
 8013f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013f78:	2302      	movs	r3, #2
 8013f7a:	e0d4      	b.n	8014126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013f7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013f80:	2100      	movs	r1, #0
 8013f82:	68f8      	ldr	r0, [r7, #12]
 8013f84:	f002 fd52 	bl	8016a2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	32b0      	adds	r2, #176	; 0xb0
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	32b0      	adds	r2, #176	; 0xb0
 8013fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	7c1b      	ldrb	r3, [r3, #16]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d138      	bne.n	8014026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013fb4:	4b5e      	ldr	r3, [pc, #376]	; (8014130 <USBD_CDC_Init+0x1e4>)
 8013fb6:	7819      	ldrb	r1, [r3, #0]
 8013fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fbc:	2202      	movs	r2, #2
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f002 fb95 	bl	80166ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013fc4:	4b5a      	ldr	r3, [pc, #360]	; (8014130 <USBD_CDC_Init+0x1e4>)
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	f003 020f 	and.w	r2, r3, #15
 8013fcc:	6879      	ldr	r1, [r7, #4]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4413      	add	r3, r2
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	440b      	add	r3, r1
 8013fd8:	3324      	adds	r3, #36	; 0x24
 8013fda:	2201      	movs	r2, #1
 8013fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013fde:	4b55      	ldr	r3, [pc, #340]	; (8014134 <USBD_CDC_Init+0x1e8>)
 8013fe0:	7819      	ldrb	r1, [r3, #0]
 8013fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fe6:	2202      	movs	r2, #2
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f002 fb80 	bl	80166ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013fee:	4b51      	ldr	r3, [pc, #324]	; (8014134 <USBD_CDC_Init+0x1e8>)
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	f003 020f 	and.w	r2, r3, #15
 8013ff6:	6879      	ldr	r1, [r7, #4]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	009b      	lsls	r3, r3, #2
 8013ffc:	4413      	add	r3, r2
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	440b      	add	r3, r1
 8014002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014006:	2201      	movs	r2, #1
 8014008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801400a:	4b4b      	ldr	r3, [pc, #300]	; (8014138 <USBD_CDC_Init+0x1ec>)
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	f003 020f 	and.w	r2, r3, #15
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	4413      	add	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	440b      	add	r3, r1
 801401e:	3326      	adds	r3, #38	; 0x26
 8014020:	2210      	movs	r2, #16
 8014022:	801a      	strh	r2, [r3, #0]
 8014024:	e035      	b.n	8014092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014026:	4b42      	ldr	r3, [pc, #264]	; (8014130 <USBD_CDC_Init+0x1e4>)
 8014028:	7819      	ldrb	r1, [r3, #0]
 801402a:	2340      	movs	r3, #64	; 0x40
 801402c:	2202      	movs	r2, #2
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f002 fb5d 	bl	80166ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014034:	4b3e      	ldr	r3, [pc, #248]	; (8014130 <USBD_CDC_Init+0x1e4>)
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	f003 020f 	and.w	r2, r3, #15
 801403c:	6879      	ldr	r1, [r7, #4]
 801403e:	4613      	mov	r3, r2
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	4413      	add	r3, r2
 8014044:	009b      	lsls	r3, r3, #2
 8014046:	440b      	add	r3, r1
 8014048:	3324      	adds	r3, #36	; 0x24
 801404a:	2201      	movs	r2, #1
 801404c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801404e:	4b39      	ldr	r3, [pc, #228]	; (8014134 <USBD_CDC_Init+0x1e8>)
 8014050:	7819      	ldrb	r1, [r3, #0]
 8014052:	2340      	movs	r3, #64	; 0x40
 8014054:	2202      	movs	r2, #2
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f002 fb49 	bl	80166ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801405c:	4b35      	ldr	r3, [pc, #212]	; (8014134 <USBD_CDC_Init+0x1e8>)
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	f003 020f 	and.w	r2, r3, #15
 8014064:	6879      	ldr	r1, [r7, #4]
 8014066:	4613      	mov	r3, r2
 8014068:	009b      	lsls	r3, r3, #2
 801406a:	4413      	add	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	440b      	add	r3, r1
 8014070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014074:	2201      	movs	r2, #1
 8014076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014078:	4b2f      	ldr	r3, [pc, #188]	; (8014138 <USBD_CDC_Init+0x1ec>)
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	f003 020f 	and.w	r2, r3, #15
 8014080:	6879      	ldr	r1, [r7, #4]
 8014082:	4613      	mov	r3, r2
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	4413      	add	r3, r2
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	440b      	add	r3, r1
 801408c:	3326      	adds	r3, #38	; 0x26
 801408e:	2210      	movs	r2, #16
 8014090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014092:	4b29      	ldr	r3, [pc, #164]	; (8014138 <USBD_CDC_Init+0x1ec>)
 8014094:	7819      	ldrb	r1, [r3, #0]
 8014096:	2308      	movs	r3, #8
 8014098:	2203      	movs	r2, #3
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f002 fb27 	bl	80166ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80140a0:	4b25      	ldr	r3, [pc, #148]	; (8014138 <USBD_CDC_Init+0x1ec>)
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f003 020f 	and.w	r2, r3, #15
 80140a8:	6879      	ldr	r1, [r7, #4]
 80140aa:	4613      	mov	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	4413      	add	r3, r2
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	440b      	add	r3, r1
 80140b4:	3324      	adds	r3, #36	; 0x24
 80140b6:	2201      	movs	r2, #1
 80140b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2200      	movs	r2, #0
 80140be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	33b0      	adds	r3, #176	; 0xb0
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	4413      	add	r3, r2
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	2200      	movs	r2, #0
 80140da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	2200      	movs	r2, #0
 80140e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80140f0:	2302      	movs	r3, #2
 80140f2:	e018      	b.n	8014126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	7c1b      	ldrb	r3, [r3, #16]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10a      	bne.n	8014112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80140fc:	4b0d      	ldr	r3, [pc, #52]	; (8014134 <USBD_CDC_Init+0x1e8>)
 80140fe:	7819      	ldrb	r1, [r3, #0]
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014106:	f44f 7300 	mov.w	r3, #512	; 0x200
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f002 fbde 	bl	80168cc <USBD_LL_PrepareReceive>
 8014110:	e008      	b.n	8014124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014112:	4b08      	ldr	r3, [pc, #32]	; (8014134 <USBD_CDC_Init+0x1e8>)
 8014114:	7819      	ldrb	r1, [r3, #0]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801411c:	2340      	movs	r3, #64	; 0x40
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f002 fbd4 	bl	80168cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	24000097 	.word	0x24000097
 8014134:	24000098 	.word	0x24000098
 8014138:	24000099 	.word	0x24000099

0801413c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	460b      	mov	r3, r1
 8014146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014148:	4b3a      	ldr	r3, [pc, #232]	; (8014234 <USBD_CDC_DeInit+0xf8>)
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f002 faf3 	bl	801673a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014154:	4b37      	ldr	r3, [pc, #220]	; (8014234 <USBD_CDC_DeInit+0xf8>)
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	f003 020f 	and.w	r2, r3, #15
 801415c:	6879      	ldr	r1, [r7, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4413      	add	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	440b      	add	r3, r1
 8014168:	3324      	adds	r3, #36	; 0x24
 801416a:	2200      	movs	r2, #0
 801416c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801416e:	4b32      	ldr	r3, [pc, #200]	; (8014238 <USBD_CDC_DeInit+0xfc>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	4619      	mov	r1, r3
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f002 fae0 	bl	801673a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801417a:	4b2f      	ldr	r3, [pc, #188]	; (8014238 <USBD_CDC_DeInit+0xfc>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f003 020f 	and.w	r2, r3, #15
 8014182:	6879      	ldr	r1, [r7, #4]
 8014184:	4613      	mov	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4413      	add	r3, r2
 801418a:	009b      	lsls	r3, r3, #2
 801418c:	440b      	add	r3, r1
 801418e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014192:	2200      	movs	r2, #0
 8014194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014196:	4b29      	ldr	r3, [pc, #164]	; (801423c <USBD_CDC_DeInit+0x100>)
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	4619      	mov	r1, r3
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f002 facc 	bl	801673a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80141a2:	4b26      	ldr	r3, [pc, #152]	; (801423c <USBD_CDC_DeInit+0x100>)
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	f003 020f 	and.w	r2, r3, #15
 80141aa:	6879      	ldr	r1, [r7, #4]
 80141ac:	4613      	mov	r3, r2
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	4413      	add	r3, r2
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	440b      	add	r3, r1
 80141b6:	3324      	adds	r3, #36	; 0x24
 80141b8:	2200      	movs	r2, #0
 80141ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80141bc:	4b1f      	ldr	r3, [pc, #124]	; (801423c <USBD_CDC_DeInit+0x100>)
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	f003 020f 	and.w	r2, r3, #15
 80141c4:	6879      	ldr	r1, [r7, #4]
 80141c6:	4613      	mov	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	4413      	add	r3, r2
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	440b      	add	r3, r1
 80141d0:	3326      	adds	r3, #38	; 0x26
 80141d2:	2200      	movs	r2, #0
 80141d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	32b0      	adds	r2, #176	; 0xb0
 80141e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d01f      	beq.n	8014228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	33b0      	adds	r3, #176	; 0xb0
 80141f2:	009b      	lsls	r3, r3, #2
 80141f4:	4413      	add	r3, r2
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	32b0      	adds	r2, #176	; 0xb0
 8014206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801420a:	4618      	mov	r0, r3
 801420c:	f002 fba0 	bl	8016950 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	32b0      	adds	r2, #176	; 0xb0
 801421a:	2100      	movs	r1, #0
 801421c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2200      	movs	r2, #0
 8014224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014228:	2300      	movs	r3, #0
}
 801422a:	4618      	mov	r0, r3
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	24000097 	.word	0x24000097
 8014238:	24000098 	.word	0x24000098
 801423c:	24000099 	.word	0x24000099

08014240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b086      	sub	sp, #24
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	32b0      	adds	r2, #176	; 0xb0
 8014254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801425a:	2300      	movs	r3, #0
 801425c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801425e:	2300      	movs	r3, #0
 8014260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014262:	2300      	movs	r3, #0
 8014264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d101      	bne.n	8014270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801426c:	2303      	movs	r3, #3
 801426e:	e0bf      	b.n	80143f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014278:	2b00      	cmp	r3, #0
 801427a:	d050      	beq.n	801431e <USBD_CDC_Setup+0xde>
 801427c:	2b20      	cmp	r3, #32
 801427e:	f040 80af 	bne.w	80143e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	88db      	ldrh	r3, [r3, #6]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d03a      	beq.n	8014300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	b25b      	sxtb	r3, r3
 8014290:	2b00      	cmp	r3, #0
 8014292:	da1b      	bge.n	80142cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	33b0      	adds	r3, #176	; 0xb0
 801429e:	009b      	lsls	r3, r3, #2
 80142a0:	4413      	add	r3, r2
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	689b      	ldr	r3, [r3, #8]
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80142aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80142ac:	683a      	ldr	r2, [r7, #0]
 80142ae:	88d2      	ldrh	r2, [r2, #6]
 80142b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	88db      	ldrh	r3, [r3, #6]
 80142b6:	2b07      	cmp	r3, #7
 80142b8:	bf28      	it	cs
 80142ba:	2307      	movcs	r3, #7
 80142bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	89fa      	ldrh	r2, [r7, #14]
 80142c2:	4619      	mov	r1, r3
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f001 fd89 	bl	8015ddc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80142ca:	e090      	b.n	80143ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	785a      	ldrb	r2, [r3, #1]
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	88db      	ldrh	r3, [r3, #6]
 80142da:	2b3f      	cmp	r3, #63	; 0x3f
 80142dc:	d803      	bhi.n	80142e6 <USBD_CDC_Setup+0xa6>
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	88db      	ldrh	r3, [r3, #6]
 80142e2:	b2da      	uxtb	r2, r3
 80142e4:	e000      	b.n	80142e8 <USBD_CDC_Setup+0xa8>
 80142e6:	2240      	movs	r2, #64	; 0x40
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80142ee:	6939      	ldr	r1, [r7, #16]
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80142f6:	461a      	mov	r2, r3
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f001 fd9b 	bl	8015e34 <USBD_CtlPrepareRx>
      break;
 80142fe:	e076      	b.n	80143ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	33b0      	adds	r3, #176	; 0xb0
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	4413      	add	r3, r2
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	7850      	ldrb	r0, [r2, #1]
 8014316:	2200      	movs	r2, #0
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	4798      	blx	r3
      break;
 801431c:	e067      	b.n	80143ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	785b      	ldrb	r3, [r3, #1]
 8014322:	2b0b      	cmp	r3, #11
 8014324:	d851      	bhi.n	80143ca <USBD_CDC_Setup+0x18a>
 8014326:	a201      	add	r2, pc, #4	; (adr r2, 801432c <USBD_CDC_Setup+0xec>)
 8014328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801432c:	0801435d 	.word	0x0801435d
 8014330:	080143d9 	.word	0x080143d9
 8014334:	080143cb 	.word	0x080143cb
 8014338:	080143cb 	.word	0x080143cb
 801433c:	080143cb 	.word	0x080143cb
 8014340:	080143cb 	.word	0x080143cb
 8014344:	080143cb 	.word	0x080143cb
 8014348:	080143cb 	.word	0x080143cb
 801434c:	080143cb 	.word	0x080143cb
 8014350:	080143cb 	.word	0x080143cb
 8014354:	08014387 	.word	0x08014387
 8014358:	080143b1 	.word	0x080143b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014362:	b2db      	uxtb	r3, r3
 8014364:	2b03      	cmp	r3, #3
 8014366:	d107      	bne.n	8014378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014368:	f107 030a 	add.w	r3, r7, #10
 801436c:	2202      	movs	r2, #2
 801436e:	4619      	mov	r1, r3
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f001 fd33 	bl	8015ddc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014376:	e032      	b.n	80143de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014378:	6839      	ldr	r1, [r7, #0]
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f001 fcbd 	bl	8015cfa <USBD_CtlError>
            ret = USBD_FAIL;
 8014380:	2303      	movs	r3, #3
 8014382:	75fb      	strb	r3, [r7, #23]
          break;
 8014384:	e02b      	b.n	80143de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801438c:	b2db      	uxtb	r3, r3
 801438e:	2b03      	cmp	r3, #3
 8014390:	d107      	bne.n	80143a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014392:	f107 030d 	add.w	r3, r7, #13
 8014396:	2201      	movs	r2, #1
 8014398:	4619      	mov	r1, r3
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f001 fd1e 	bl	8015ddc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80143a0:	e01d      	b.n	80143de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f001 fca8 	bl	8015cfa <USBD_CtlError>
            ret = USBD_FAIL;
 80143aa:	2303      	movs	r3, #3
 80143ac:	75fb      	strb	r3, [r7, #23]
          break;
 80143ae:	e016      	b.n	80143de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	2b03      	cmp	r3, #3
 80143ba:	d00f      	beq.n	80143dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f001 fc9b 	bl	8015cfa <USBD_CtlError>
            ret = USBD_FAIL;
 80143c4:	2303      	movs	r3, #3
 80143c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80143c8:	e008      	b.n	80143dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80143ca:	6839      	ldr	r1, [r7, #0]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f001 fc94 	bl	8015cfa <USBD_CtlError>
          ret = USBD_FAIL;
 80143d2:	2303      	movs	r3, #3
 80143d4:	75fb      	strb	r3, [r7, #23]
          break;
 80143d6:	e002      	b.n	80143de <USBD_CDC_Setup+0x19e>
          break;
 80143d8:	bf00      	nop
 80143da:	e008      	b.n	80143ee <USBD_CDC_Setup+0x1ae>
          break;
 80143dc:	bf00      	nop
      }
      break;
 80143de:	e006      	b.n	80143ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80143e0:	6839      	ldr	r1, [r7, #0]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f001 fc89 	bl	8015cfa <USBD_CtlError>
      ret = USBD_FAIL;
 80143e8:	2303      	movs	r3, #3
 80143ea:	75fb      	strb	r3, [r7, #23]
      break;
 80143ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80143ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	460b      	mov	r3, r1
 8014402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801440a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	32b0      	adds	r2, #176	; 0xb0
 8014416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801441e:	2303      	movs	r3, #3
 8014420:	e065      	b.n	80144ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	32b0      	adds	r2, #176	; 0xb0
 801442c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014432:	78fb      	ldrb	r3, [r7, #3]
 8014434:	f003 020f 	and.w	r2, r3, #15
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	4613      	mov	r3, r2
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	4413      	add	r3, r2
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	440b      	add	r3, r1
 8014444:	3318      	adds	r3, #24
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d02f      	beq.n	80144ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801444c:	78fb      	ldrb	r3, [r7, #3]
 801444e:	f003 020f 	and.w	r2, r3, #15
 8014452:	6879      	ldr	r1, [r7, #4]
 8014454:	4613      	mov	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4413      	add	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	440b      	add	r3, r1
 801445e:	3318      	adds	r3, #24
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	78fb      	ldrb	r3, [r7, #3]
 8014464:	f003 010f 	and.w	r1, r3, #15
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	460b      	mov	r3, r1
 801446c:	00db      	lsls	r3, r3, #3
 801446e:	440b      	add	r3, r1
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	4403      	add	r3, r0
 8014474:	3344      	adds	r3, #68	; 0x44
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	fbb2 f1f3 	udiv	r1, r2, r3
 801447c:	fb01 f303 	mul.w	r3, r1, r3
 8014480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014482:	2b00      	cmp	r3, #0
 8014484:	d112      	bne.n	80144ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014486:	78fb      	ldrb	r3, [r7, #3]
 8014488:	f003 020f 	and.w	r2, r3, #15
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	4613      	mov	r3, r2
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	4413      	add	r3, r2
 8014494:	009b      	lsls	r3, r3, #2
 8014496:	440b      	add	r3, r1
 8014498:	3318      	adds	r3, #24
 801449a:	2200      	movs	r2, #0
 801449c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801449e:	78f9      	ldrb	r1, [r7, #3]
 80144a0:	2300      	movs	r3, #0
 80144a2:	2200      	movs	r2, #0
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f002 f9f0 	bl	801688a <USBD_LL_Transmit>
 80144aa:	e01f      	b.n	80144ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	2200      	movs	r2, #0
 80144b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	33b0      	adds	r3, #176	; 0xb0
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	691b      	ldr	r3, [r3, #16]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d010      	beq.n	80144ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	33b0      	adds	r3, #176	; 0xb0
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	691b      	ldr	r3, [r3, #16]
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80144e2:	68ba      	ldr	r2, [r7, #8]
 80144e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80144e8:	78fa      	ldrb	r2, [r7, #3]
 80144ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80144ec:	2300      	movs	r3, #0
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3710      	adds	r7, #16
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b084      	sub	sp, #16
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	460b      	mov	r3, r1
 8014500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	32b0      	adds	r2, #176	; 0xb0
 801450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	32b0      	adds	r2, #176	; 0xb0
 801451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014524:	2303      	movs	r3, #3
 8014526:	e01a      	b.n	801455e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014528:	78fb      	ldrb	r3, [r7, #3]
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f002 f9ee 	bl	801690e <USBD_LL_GetRxDataSize>
 8014532:	4602      	mov	r2, r0
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	33b0      	adds	r3, #176	; 0xb0
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014558:	4611      	mov	r1, r2
 801455a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014566:	b580      	push	{r7, lr}
 8014568:	b084      	sub	sp, #16
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	32b0      	adds	r2, #176	; 0xb0
 8014578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801457c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d101      	bne.n	8014588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014584:	2303      	movs	r3, #3
 8014586:	e025      	b.n	80145d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	33b0      	adds	r3, #176	; 0xb0
 8014592:	009b      	lsls	r3, r3, #2
 8014594:	4413      	add	r3, r2
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d01a      	beq.n	80145d2 <USBD_CDC_EP0_RxReady+0x6c>
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80145a2:	2bff      	cmp	r3, #255	; 0xff
 80145a4:	d015      	beq.n	80145d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	33b0      	adds	r3, #176	; 0xb0
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	4413      	add	r3, r2
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	68fa      	ldr	r2, [r7, #12]
 80145ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80145be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80145c6:	b292      	uxth	r2, r2
 80145c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	22ff      	movs	r2, #255	; 0xff
 80145ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80145d2:	2300      	movs	r3, #0
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3710      	adds	r7, #16
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80145e4:	2182      	movs	r1, #130	; 0x82
 80145e6:	4818      	ldr	r0, [pc, #96]	; (8014648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80145e8:	f000 fd4f 	bl	801508a <USBD_GetEpDesc>
 80145ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80145ee:	2101      	movs	r1, #1
 80145f0:	4815      	ldr	r0, [pc, #84]	; (8014648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80145f2:	f000 fd4a 	bl	801508a <USBD_GetEpDesc>
 80145f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80145f8:	2181      	movs	r1, #129	; 0x81
 80145fa:	4813      	ldr	r0, [pc, #76]	; (8014648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80145fc:	f000 fd45 	bl	801508a <USBD_GetEpDesc>
 8014600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d002      	beq.n	801460e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	2210      	movs	r2, #16
 801460c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d006      	beq.n	8014622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	2200      	movs	r2, #0
 8014618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801461c:	711a      	strb	r2, [r3, #4]
 801461e:	2200      	movs	r2, #0
 8014620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d006      	beq.n	8014636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2200      	movs	r2, #0
 801462c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014630:	711a      	strb	r2, [r3, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2243      	movs	r2, #67	; 0x43
 801463a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801463c:	4b02      	ldr	r3, [pc, #8]	; (8014648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801463e:	4618      	mov	r0, r3
 8014640:	3718      	adds	r7, #24
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	24000054 	.word	0x24000054

0801464c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b086      	sub	sp, #24
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014654:	2182      	movs	r1, #130	; 0x82
 8014656:	4818      	ldr	r0, [pc, #96]	; (80146b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014658:	f000 fd17 	bl	801508a <USBD_GetEpDesc>
 801465c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801465e:	2101      	movs	r1, #1
 8014660:	4815      	ldr	r0, [pc, #84]	; (80146b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014662:	f000 fd12 	bl	801508a <USBD_GetEpDesc>
 8014666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014668:	2181      	movs	r1, #129	; 0x81
 801466a:	4813      	ldr	r0, [pc, #76]	; (80146b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801466c:	f000 fd0d 	bl	801508a <USBD_GetEpDesc>
 8014670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	2210      	movs	r2, #16
 801467c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d006      	beq.n	8014692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	2200      	movs	r2, #0
 8014688:	711a      	strb	r2, [r3, #4]
 801468a:	2200      	movs	r2, #0
 801468c:	f042 0202 	orr.w	r2, r2, #2
 8014690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d006      	beq.n	80146a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2200      	movs	r2, #0
 801469c:	711a      	strb	r2, [r3, #4]
 801469e:	2200      	movs	r2, #0
 80146a0:	f042 0202 	orr.w	r2, r2, #2
 80146a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2243      	movs	r2, #67	; 0x43
 80146aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80146ac:	4b02      	ldr	r3, [pc, #8]	; (80146b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3718      	adds	r7, #24
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	24000054 	.word	0x24000054

080146bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b086      	sub	sp, #24
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80146c4:	2182      	movs	r1, #130	; 0x82
 80146c6:	4818      	ldr	r0, [pc, #96]	; (8014728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80146c8:	f000 fcdf 	bl	801508a <USBD_GetEpDesc>
 80146cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80146ce:	2101      	movs	r1, #1
 80146d0:	4815      	ldr	r0, [pc, #84]	; (8014728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80146d2:	f000 fcda 	bl	801508a <USBD_GetEpDesc>
 80146d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80146d8:	2181      	movs	r1, #129	; 0x81
 80146da:	4813      	ldr	r0, [pc, #76]	; (8014728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80146dc:	f000 fcd5 	bl	801508a <USBD_GetEpDesc>
 80146e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d002      	beq.n	80146ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2210      	movs	r2, #16
 80146ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d006      	beq.n	8014702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80146fc:	711a      	strb	r2, [r3, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d006      	beq.n	8014716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2200      	movs	r2, #0
 801470c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014710:	711a      	strb	r2, [r3, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2243      	movs	r2, #67	; 0x43
 801471a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801471c:	4b02      	ldr	r3, [pc, #8]	; (8014728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801471e:	4618      	mov	r0, r3
 8014720:	3718      	adds	r7, #24
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	24000054 	.word	0x24000054

0801472c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	220a      	movs	r2, #10
 8014738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801473a:	4b03      	ldr	r3, [pc, #12]	; (8014748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801473c:	4618      	mov	r0, r3
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr
 8014748:	24000010 	.word	0x24000010

0801474c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801474c:	b480      	push	{r7}
 801474e:	b083      	sub	sp, #12
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801475c:	2303      	movs	r3, #3
 801475e:	e009      	b.n	8014774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	33b0      	adds	r3, #176	; 0xb0
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	4413      	add	r3, r2
 801476e:	683a      	ldr	r2, [r7, #0]
 8014770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014780:	b480      	push	{r7}
 8014782:	b087      	sub	sp, #28
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	32b0      	adds	r2, #176	; 0xb0
 8014796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801479a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d101      	bne.n	80147a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80147a2:	2303      	movs	r3, #3
 80147a4:	e008      	b.n	80147b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80147b6:	2300      	movs	r3, #0
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	371c      	adds	r7, #28
 80147bc:	46bd      	mov	sp, r7
 80147be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c2:	4770      	bx	lr

080147c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80147c4:	b480      	push	{r7}
 80147c6:	b085      	sub	sp, #20
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	32b0      	adds	r2, #176	; 0xb0
 80147d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80147e4:	2303      	movs	r3, #3
 80147e6:	e004      	b.n	80147f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	683a      	ldr	r2, [r7, #0]
 80147ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80147f0:	2300      	movs	r3, #0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3714      	adds	r7, #20
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr
	...

08014800 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	32b0      	adds	r2, #176	; 0xb0
 8014812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014816:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014818:	2301      	movs	r3, #1
 801481a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d101      	bne.n	8014826 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014822:	2303      	movs	r3, #3
 8014824:	e025      	b.n	8014872 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801482c:	2b00      	cmp	r3, #0
 801482e:	d11f      	bne.n	8014870 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	2201      	movs	r2, #1
 8014834:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014838:	4b10      	ldr	r3, [pc, #64]	; (801487c <USBD_CDC_TransmitPacket+0x7c>)
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	f003 020f 	and.w	r2, r3, #15
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	4613      	mov	r3, r2
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	4413      	add	r3, r2
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	4403      	add	r3, r0
 8014852:	3318      	adds	r3, #24
 8014854:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014856:	4b09      	ldr	r3, [pc, #36]	; (801487c <USBD_CDC_TransmitPacket+0x7c>)
 8014858:	7819      	ldrb	r1, [r3, #0]
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f002 f80f 	bl	801688a <USBD_LL_Transmit>

    ret = USBD_OK;
 801486c:	2300      	movs	r3, #0
 801486e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014870:	7bfb      	ldrb	r3, [r7, #15]
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	24000097 	.word	0x24000097

08014880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	32b0      	adds	r2, #176	; 0xb0
 8014892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014896:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	32b0      	adds	r2, #176	; 0xb0
 80148a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d101      	bne.n	80148ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80148aa:	2303      	movs	r3, #3
 80148ac:	e018      	b.n	80148e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	7c1b      	ldrb	r3, [r3, #16]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d10a      	bne.n	80148cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80148b6:	4b0c      	ldr	r3, [pc, #48]	; (80148e8 <USBD_CDC_ReceivePacket+0x68>)
 80148b8:	7819      	ldrb	r1, [r3, #0]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80148c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f002 f801 	bl	80168cc <USBD_LL_PrepareReceive>
 80148ca:	e008      	b.n	80148de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80148cc:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <USBD_CDC_ReceivePacket+0x68>)
 80148ce:	7819      	ldrb	r1, [r3, #0]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80148d6:	2340      	movs	r3, #64	; 0x40
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f001 fff7 	bl	80168cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80148de:	2300      	movs	r3, #0
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3710      	adds	r7, #16
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	24000098 	.word	0x24000098

080148ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b086      	sub	sp, #24
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	4613      	mov	r3, r2
 80148f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014900:	2303      	movs	r3, #3
 8014902:	e01f      	b.n	8014944 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2200      	movs	r2, #0
 8014908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2200      	movs	r2, #0
 8014910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2200      	movs	r2, #0
 8014918:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d003      	beq.n	801492a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	68ba      	ldr	r2, [r7, #8]
 8014926:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	2201      	movs	r2, #1
 801492e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	79fa      	ldrb	r2, [r7, #7]
 8014936:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f001 fe6b 	bl	8016614 <USBD_LL_Init>
 801493e:	4603      	mov	r3, r0
 8014940:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014942:	7dfb      	ldrb	r3, [r7, #23]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3718      	adds	r7, #24
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014956:	2300      	movs	r3, #0
 8014958:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d101      	bne.n	8014964 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014960:	2303      	movs	r3, #3
 8014962:	e025      	b.n	80149b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	683a      	ldr	r2, [r7, #0]
 8014968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	32ae      	adds	r2, #174	; 0xae
 8014976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00f      	beq.n	80149a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	32ae      	adds	r2, #174	; 0xae
 801498a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014990:	f107 020e 	add.w	r2, r7, #14
 8014994:	4610      	mov	r0, r2
 8014996:	4798      	blx	r3
 8014998:	4602      	mov	r2, r0
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80149a6:	1c5a      	adds	r2, r3, #1
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f001 fe79 	bl	80166b8 <USBD_LL_Start>
 80149c6:	4603      	mov	r3, r0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80149d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80149da:	4618      	mov	r0, r3
 80149dc:	370c      	adds	r7, #12
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr

080149e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b084      	sub	sp, #16
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
 80149ee:	460b      	mov	r3, r1
 80149f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80149f2:	2300      	movs	r3, #0
 80149f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d009      	beq.n	8014a14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	78fa      	ldrb	r2, [r7, #3]
 8014a0a:	4611      	mov	r1, r2
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	4798      	blx	r3
 8014a10:	4603      	mov	r3, r0
 8014a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3710      	adds	r7, #16
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}

08014a1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a1e:	b580      	push	{r7, lr}
 8014a20:	b084      	sub	sp, #16
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	6078      	str	r0, [r7, #4]
 8014a26:	460b      	mov	r3, r1
 8014a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	78fa      	ldrb	r2, [r7, #3]
 8014a38:	4611      	mov	r1, r2
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	4798      	blx	r3
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d001      	beq.n	8014a48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014a44:	2303      	movs	r3, #3
 8014a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b084      	sub	sp, #16
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
 8014a5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014a62:	6839      	ldr	r1, [r7, #0]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f001 f90e 	bl	8015c86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014a78:	461a      	mov	r2, r3
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014a86:	f003 031f 	and.w	r3, r3, #31
 8014a8a:	2b02      	cmp	r3, #2
 8014a8c:	d01a      	beq.n	8014ac4 <USBD_LL_SetupStage+0x72>
 8014a8e:	2b02      	cmp	r3, #2
 8014a90:	d822      	bhi.n	8014ad8 <USBD_LL_SetupStage+0x86>
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d002      	beq.n	8014a9c <USBD_LL_SetupStage+0x4a>
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d00a      	beq.n	8014ab0 <USBD_LL_SetupStage+0x5e>
 8014a9a:	e01d      	b.n	8014ad8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f000 fb65 	bl	8015174 <USBD_StdDevReq>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	73fb      	strb	r3, [r7, #15]
      break;
 8014aae:	e020      	b.n	8014af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 fbcd 	bl	8015258 <USBD_StdItfReq>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8014ac2:	e016      	b.n	8014af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014aca:	4619      	mov	r1, r3
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 fc2f 	bl	8015330 <USBD_StdEPReq>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ad6:	e00c      	b.n	8014af2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014ae2:	b2db      	uxtb	r3, r3
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f001 fe46 	bl	8016778 <USBD_LL_StallEP>
 8014aec:	4603      	mov	r3, r0
 8014aee:	73fb      	strb	r3, [r7, #15]
      break;
 8014af0:	bf00      	nop
  }

  return ret;
 8014af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	3710      	adds	r7, #16
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}

08014afc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	460b      	mov	r3, r1
 8014b06:	607a      	str	r2, [r7, #4]
 8014b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014b0e:	7afb      	ldrb	r3, [r7, #11]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d16e      	bne.n	8014bf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014b22:	2b03      	cmp	r3, #3
 8014b24:	f040 8098 	bne.w	8014c58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	689a      	ldr	r2, [r3, #8]
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d913      	bls.n	8014b5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	689a      	ldr	r2, [r3, #8]
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	1ad2      	subs	r2, r2, r3
 8014b3e:	693b      	ldr	r3, [r7, #16]
 8014b40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	68da      	ldr	r2, [r3, #12]
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	689b      	ldr	r3, [r3, #8]
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	bf28      	it	cs
 8014b4e:	4613      	movcs	r3, r2
 8014b50:	461a      	mov	r2, r3
 8014b52:	6879      	ldr	r1, [r7, #4]
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f001 f98a 	bl	8015e6e <USBD_CtlContinueRx>
 8014b5a:	e07d      	b.n	8014c58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014b62:	f003 031f 	and.w	r3, r3, #31
 8014b66:	2b02      	cmp	r3, #2
 8014b68:	d014      	beq.n	8014b94 <USBD_LL_DataOutStage+0x98>
 8014b6a:	2b02      	cmp	r3, #2
 8014b6c:	d81d      	bhi.n	8014baa <USBD_LL_DataOutStage+0xae>
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d002      	beq.n	8014b78 <USBD_LL_DataOutStage+0x7c>
 8014b72:	2b01      	cmp	r3, #1
 8014b74:	d003      	beq.n	8014b7e <USBD_LL_DataOutStage+0x82>
 8014b76:	e018      	b.n	8014baa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8014b7c:	e018      	b.n	8014bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	4619      	mov	r1, r3
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	f000 fa64 	bl	8015056 <USBD_CoreFindIF>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	75bb      	strb	r3, [r7, #22]
            break;
 8014b92:	e00d      	b.n	8014bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f000 fa66 	bl	8015070 <USBD_CoreFindEP>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8014ba8:	e002      	b.n	8014bb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014baa:	2300      	movs	r3, #0
 8014bac:	75bb      	strb	r3, [r7, #22]
            break;
 8014bae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014bb0:	7dbb      	ldrb	r3, [r7, #22]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d119      	bne.n	8014bea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	d113      	bne.n	8014bea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014bc2:	7dba      	ldrb	r2, [r7, #22]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	32ae      	adds	r2, #174	; 0xae
 8014bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bcc:	691b      	ldr	r3, [r3, #16]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00b      	beq.n	8014bea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014bd2:	7dba      	ldrb	r2, [r7, #22]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014bda:	7dba      	ldrb	r2, [r7, #22]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	32ae      	adds	r2, #174	; 0xae
 8014be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	68f8      	ldr	r0, [r7, #12]
 8014be8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f001 f950 	bl	8015e90 <USBD_CtlSendStatus>
 8014bf0:	e032      	b.n	8014c58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014bf2:	7afb      	ldrb	r3, [r7, #11]
 8014bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bf8:	b2db      	uxtb	r3, r3
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	68f8      	ldr	r0, [r7, #12]
 8014bfe:	f000 fa37 	bl	8015070 <USBD_CoreFindEP>
 8014c02:	4603      	mov	r3, r0
 8014c04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014c06:	7dbb      	ldrb	r3, [r7, #22]
 8014c08:	2bff      	cmp	r3, #255	; 0xff
 8014c0a:	d025      	beq.n	8014c58 <USBD_LL_DataOutStage+0x15c>
 8014c0c:	7dbb      	ldrb	r3, [r7, #22]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d122      	bne.n	8014c58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	2b03      	cmp	r3, #3
 8014c1c:	d117      	bne.n	8014c4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014c1e:	7dba      	ldrb	r2, [r7, #22]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	32ae      	adds	r2, #174	; 0xae
 8014c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c28:	699b      	ldr	r3, [r3, #24]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d00f      	beq.n	8014c4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014c2e:	7dba      	ldrb	r2, [r7, #22]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014c36:	7dba      	ldrb	r2, [r7, #22]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	32ae      	adds	r2, #174	; 0xae
 8014c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c40:	699b      	ldr	r3, [r3, #24]
 8014c42:	7afa      	ldrb	r2, [r7, #11]
 8014c44:	4611      	mov	r1, r2
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	4798      	blx	r3
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014c4e:	7dfb      	ldrb	r3, [r7, #23]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d001      	beq.n	8014c58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014c54:	7dfb      	ldrb	r3, [r7, #23]
 8014c56:	e000      	b.n	8014c5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014c58:	2300      	movs	r3, #0
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3718      	adds	r7, #24
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b086      	sub	sp, #24
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	60f8      	str	r0, [r7, #12]
 8014c6a:	460b      	mov	r3, r1
 8014c6c:	607a      	str	r2, [r7, #4]
 8014c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014c70:	7afb      	ldrb	r3, [r7, #11]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d16f      	bne.n	8014d56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	3314      	adds	r3, #20
 8014c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014c82:	2b02      	cmp	r3, #2
 8014c84:	d15a      	bne.n	8014d3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	689a      	ldr	r2, [r3, #8]
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d914      	bls.n	8014cbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	689a      	ldr	r2, [r3, #8]
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	1ad2      	subs	r2, r2, r3
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	6879      	ldr	r1, [r7, #4]
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f001 f8b2 	bl	8015e12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cae:	2300      	movs	r3, #0
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	2100      	movs	r1, #0
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f001 fe09 	bl	80168cc <USBD_LL_PrepareReceive>
 8014cba:	e03f      	b.n	8014d3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	68da      	ldr	r2, [r3, #12]
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	689b      	ldr	r3, [r3, #8]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d11c      	bne.n	8014d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	685a      	ldr	r2, [r3, #4]
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d316      	bcc.n	8014d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	685a      	ldr	r2, [r3, #4]
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d20f      	bcs.n	8014d02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f001 f893 	bl	8015e12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	2100      	movs	r1, #0
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f001 fde6 	bl	80168cc <USBD_LL_PrepareReceive>
 8014d00:	e01c      	b.n	8014d3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d08:	b2db      	uxtb	r3, r3
 8014d0a:	2b03      	cmp	r3, #3
 8014d0c:	d10f      	bne.n	8014d2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d14:	68db      	ldr	r3, [r3, #12]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d009      	beq.n	8014d2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d28:	68db      	ldr	r3, [r3, #12]
 8014d2a:	68f8      	ldr	r0, [r7, #12]
 8014d2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d2e:	2180      	movs	r1, #128	; 0x80
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f001 fd21 	bl	8016778 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014d36:	68f8      	ldr	r0, [r7, #12]
 8014d38:	f001 f8bd 	bl	8015eb6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d03a      	beq.n	8014dbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014d46:	68f8      	ldr	r0, [r7, #12]
 8014d48:	f7ff fe42 	bl	80149d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014d54:	e032      	b.n	8014dbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014d56:	7afb      	ldrb	r3, [r7, #11]
 8014d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014d5c:	b2db      	uxtb	r3, r3
 8014d5e:	4619      	mov	r1, r3
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f000 f985 	bl	8015070 <USBD_CoreFindEP>
 8014d66:	4603      	mov	r3, r0
 8014d68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014d6a:	7dfb      	ldrb	r3, [r7, #23]
 8014d6c:	2bff      	cmp	r3, #255	; 0xff
 8014d6e:	d025      	beq.n	8014dbc <USBD_LL_DataInStage+0x15a>
 8014d70:	7dfb      	ldrb	r3, [r7, #23]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d122      	bne.n	8014dbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	2b03      	cmp	r3, #3
 8014d80:	d11c      	bne.n	8014dbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014d82:	7dfa      	ldrb	r2, [r7, #23]
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	32ae      	adds	r2, #174	; 0xae
 8014d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d8c:	695b      	ldr	r3, [r3, #20]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d014      	beq.n	8014dbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014d92:	7dfa      	ldrb	r2, [r7, #23]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014d9a:	7dfa      	ldrb	r2, [r7, #23]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	32ae      	adds	r2, #174	; 0xae
 8014da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da4:	695b      	ldr	r3, [r3, #20]
 8014da6:	7afa      	ldrb	r2, [r7, #11]
 8014da8:	4611      	mov	r1, r2
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	4798      	blx	r3
 8014dae:	4603      	mov	r3, r0
 8014db0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014db2:	7dbb      	ldrb	r3, [r7, #22]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d001      	beq.n	8014dbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014db8:	7dbb      	ldrb	r3, [r7, #22]
 8014dba:	e000      	b.n	8014dbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014dbc:	2300      	movs	r3, #0
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3718      	adds	r7, #24
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2200      	movs	r2, #0
 8014de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2200      	movs	r2, #0
 8014dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d014      	beq.n	8014e2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e08:	685b      	ldr	r3, [r3, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00e      	beq.n	8014e2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	6852      	ldr	r2, [r2, #4]
 8014e1a:	b2d2      	uxtb	r2, r2
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	4798      	blx	r3
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014e28:	2303      	movs	r3, #3
 8014e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014e2c:	2340      	movs	r3, #64	; 0x40
 8014e2e:	2200      	movs	r2, #0
 8014e30:	2100      	movs	r1, #0
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f001 fc5b 	bl	80166ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2240      	movs	r2, #64	; 0x40
 8014e44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014e48:	2340      	movs	r3, #64	; 0x40
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	2180      	movs	r1, #128	; 0x80
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f001 fc4d 	bl	80166ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2201      	movs	r2, #1
 8014e58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2240      	movs	r2, #64	; 0x40
 8014e5e:	621a      	str	r2, [r3, #32]

  return ret;
 8014e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}

08014e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014e6a:	b480      	push	{r7}
 8014e6c:	b083      	sub	sp, #12
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
 8014e72:	460b      	mov	r3, r1
 8014e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	78fa      	ldrb	r2, [r7, #3]
 8014e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014e7c:	2300      	movs	r3, #0
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	370c      	adds	r7, #12
 8014e82:	46bd      	mov	sp, r7
 8014e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e88:	4770      	bx	lr

08014e8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014e8a:	b480      	push	{r7}
 8014e8c:	b083      	sub	sp, #12
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e98:	b2db      	uxtb	r3, r3
 8014e9a:	2b04      	cmp	r3, #4
 8014e9c:	d006      	beq.n	8014eac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ea4:	b2da      	uxtb	r2, r3
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2204      	movs	r2, #4
 8014eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	370c      	adds	r7, #12
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr

08014ec2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014ec2:	b480      	push	{r7}
 8014ec4:	b083      	sub	sp, #12
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	2b04      	cmp	r3, #4
 8014ed4:	d106      	bne.n	8014ee4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	370c      	adds	r7, #12
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr

08014ef2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	2b03      	cmp	r3, #3
 8014f04:	d110      	bne.n	8014f28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d00b      	beq.n	8014f28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f16:	69db      	ldr	r3, [r3, #28]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d005      	beq.n	8014f28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f22:	69db      	ldr	r3, [r3, #28]
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014f28:	2300      	movs	r3, #0
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b082      	sub	sp, #8
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	32ae      	adds	r2, #174	; 0xae
 8014f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d101      	bne.n	8014f54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014f50:	2303      	movs	r3, #3
 8014f52:	e01c      	b.n	8014f8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	2b03      	cmp	r3, #3
 8014f5e:	d115      	bne.n	8014f8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	32ae      	adds	r2, #174	; 0xae
 8014f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f6e:	6a1b      	ldr	r3, [r3, #32]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d00b      	beq.n	8014f8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	32ae      	adds	r2, #174	; 0xae
 8014f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f82:	6a1b      	ldr	r3, [r3, #32]
 8014f84:	78fa      	ldrb	r2, [r7, #3]
 8014f86:	4611      	mov	r1, r2
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014f8c:	2300      	movs	r3, #0
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3708      	adds	r7, #8
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}

08014f96 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014f96:	b580      	push	{r7, lr}
 8014f98:	b082      	sub	sp, #8
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
 8014f9e:	460b      	mov	r3, r1
 8014fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	32ae      	adds	r2, #174	; 0xae
 8014fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d101      	bne.n	8014fb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	e01c      	b.n	8014ff2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fbe:	b2db      	uxtb	r3, r3
 8014fc0:	2b03      	cmp	r3, #3
 8014fc2:	d115      	bne.n	8014ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	32ae      	adds	r2, #174	; 0xae
 8014fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d00b      	beq.n	8014ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	32ae      	adds	r2, #174	; 0xae
 8014fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe8:	78fa      	ldrb	r2, [r7, #3]
 8014fea:	4611      	mov	r1, r2
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014ff0:	2300      	movs	r3, #0
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3708      	adds	r7, #8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b083      	sub	sp, #12
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015002:	2300      	movs	r3, #0
}
 8015004:	4618      	mov	r0, r3
 8015006:	370c      	adds	r7, #12
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015018:	2300      	movs	r3, #0
 801501a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2201      	movs	r2, #1
 8015020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00e      	beq.n	801504c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	687a      	ldr	r2, [r7, #4]
 8015038:	6852      	ldr	r2, [r2, #4]
 801503a:	b2d2      	uxtb	r2, r2
 801503c:	4611      	mov	r1, r2
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	4798      	blx	r3
 8015042:	4603      	mov	r3, r0
 8015044:	2b00      	cmp	r3, #0
 8015046:	d001      	beq.n	801504c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015048:	2303      	movs	r3, #3
 801504a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801504c:	7bfb      	ldrb	r3, [r7, #15]
}
 801504e:	4618      	mov	r0, r3
 8015050:	3710      	adds	r7, #16
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015056:	b480      	push	{r7}
 8015058:	b083      	sub	sp, #12
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	460b      	mov	r3, r1
 8015060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015064:	4618      	mov	r0, r3
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr

08015070 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	460b      	mov	r3, r1
 801507a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801507c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801507e:	4618      	mov	r0, r3
 8015080:	370c      	adds	r7, #12
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr

0801508a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801508a:	b580      	push	{r7, lr}
 801508c:	b086      	sub	sp, #24
 801508e:	af00      	add	r7, sp, #0
 8015090:	6078      	str	r0, [r7, #4]
 8015092:	460b      	mov	r3, r1
 8015094:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801509e:	2300      	movs	r3, #0
 80150a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	885b      	ldrh	r3, [r3, #2]
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d920      	bls.n	80150f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80150ba:	e013      	b.n	80150e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80150bc:	f107 030a 	add.w	r3, r7, #10
 80150c0:	4619      	mov	r1, r3
 80150c2:	6978      	ldr	r0, [r7, #20]
 80150c4:	f000 f81b 	bl	80150fe <USBD_GetNextDesc>
 80150c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	785b      	ldrb	r3, [r3, #1]
 80150ce:	2b05      	cmp	r3, #5
 80150d0:	d108      	bne.n	80150e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	789b      	ldrb	r3, [r3, #2]
 80150da:	78fa      	ldrb	r2, [r7, #3]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d008      	beq.n	80150f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80150e0:	2300      	movs	r3, #0
 80150e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	885b      	ldrh	r3, [r3, #2]
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	897b      	ldrh	r3, [r7, #10]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d8e5      	bhi.n	80150bc <USBD_GetEpDesc+0x32>
 80150f0:	e000      	b.n	80150f4 <USBD_GetEpDesc+0x6a>
          break;
 80150f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80150f4:	693b      	ldr	r3, [r7, #16]
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3718      	adds	r7, #24
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80150fe:	b480      	push	{r7}
 8015100:	b085      	sub	sp, #20
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	881a      	ldrh	r2, [r3, #0]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	b29b      	uxth	r3, r3
 8015116:	4413      	add	r3, r2
 8015118:	b29a      	uxth	r2, r3
 801511a:	683b      	ldr	r3, [r7, #0]
 801511c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	461a      	mov	r2, r3
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	4413      	add	r3, r2
 8015128:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801512a:	68fb      	ldr	r3, [r7, #12]
}
 801512c:	4618      	mov	r0, r3
 801512e:	3714      	adds	r7, #20
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015138:	b480      	push	{r7}
 801513a:	b087      	sub	sp, #28
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	3301      	adds	r3, #1
 801514e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015156:	8a3b      	ldrh	r3, [r7, #16]
 8015158:	021b      	lsls	r3, r3, #8
 801515a:	b21a      	sxth	r2, r3
 801515c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015160:	4313      	orrs	r3, r2
 8015162:	b21b      	sxth	r3, r3
 8015164:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015166:	89fb      	ldrh	r3, [r7, #14]
}
 8015168:	4618      	mov	r0, r3
 801516a:	371c      	adds	r7, #28
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801517e:	2300      	movs	r3, #0
 8015180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801518a:	2b40      	cmp	r3, #64	; 0x40
 801518c:	d005      	beq.n	801519a <USBD_StdDevReq+0x26>
 801518e:	2b40      	cmp	r3, #64	; 0x40
 8015190:	d857      	bhi.n	8015242 <USBD_StdDevReq+0xce>
 8015192:	2b00      	cmp	r3, #0
 8015194:	d00f      	beq.n	80151b6 <USBD_StdDevReq+0x42>
 8015196:	2b20      	cmp	r3, #32
 8015198:	d153      	bne.n	8015242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	32ae      	adds	r2, #174	; 0xae
 80151a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a8:	689b      	ldr	r3, [r3, #8]
 80151aa:	6839      	ldr	r1, [r7, #0]
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	4798      	blx	r3
 80151b0:	4603      	mov	r3, r0
 80151b2:	73fb      	strb	r3, [r7, #15]
      break;
 80151b4:	e04a      	b.n	801524c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	785b      	ldrb	r3, [r3, #1]
 80151ba:	2b09      	cmp	r3, #9
 80151bc:	d83b      	bhi.n	8015236 <USBD_StdDevReq+0xc2>
 80151be:	a201      	add	r2, pc, #4	; (adr r2, 80151c4 <USBD_StdDevReq+0x50>)
 80151c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151c4:	08015219 	.word	0x08015219
 80151c8:	0801522d 	.word	0x0801522d
 80151cc:	08015237 	.word	0x08015237
 80151d0:	08015223 	.word	0x08015223
 80151d4:	08015237 	.word	0x08015237
 80151d8:	080151f7 	.word	0x080151f7
 80151dc:	080151ed 	.word	0x080151ed
 80151e0:	08015237 	.word	0x08015237
 80151e4:	0801520f 	.word	0x0801520f
 80151e8:	08015201 	.word	0x08015201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80151ec:	6839      	ldr	r1, [r7, #0]
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f000 fa3c 	bl	801566c <USBD_GetDescriptor>
          break;
 80151f4:	e024      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80151f6:	6839      	ldr	r1, [r7, #0]
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f000 fba1 	bl	8015940 <USBD_SetAddress>
          break;
 80151fe:	e01f      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015200:	6839      	ldr	r1, [r7, #0]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 fbe0 	bl	80159c8 <USBD_SetConfig>
 8015208:	4603      	mov	r3, r0
 801520a:	73fb      	strb	r3, [r7, #15]
          break;
 801520c:	e018      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801520e:	6839      	ldr	r1, [r7, #0]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f000 fc83 	bl	8015b1c <USBD_GetConfig>
          break;
 8015216:	e013      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015218:	6839      	ldr	r1, [r7, #0]
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f000 fcb4 	bl	8015b88 <USBD_GetStatus>
          break;
 8015220:	e00e      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f000 fce3 	bl	8015bf0 <USBD_SetFeature>
          break;
 801522a:	e009      	b.n	8015240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801522c:	6839      	ldr	r1, [r7, #0]
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 fd07 	bl	8015c42 <USBD_ClrFeature>
          break;
 8015234:	e004      	b.n	8015240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015236:	6839      	ldr	r1, [r7, #0]
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f000 fd5e 	bl	8015cfa <USBD_CtlError>
          break;
 801523e:	bf00      	nop
      }
      break;
 8015240:	e004      	b.n	801524c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015242:	6839      	ldr	r1, [r7, #0]
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f000 fd58 	bl	8015cfa <USBD_CtlError>
      break;
 801524a:	bf00      	nop
  }

  return ret;
 801524c:	7bfb      	ldrb	r3, [r7, #15]
}
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop

08015258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015262:	2300      	movs	r3, #0
 8015264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801526e:	2b40      	cmp	r3, #64	; 0x40
 8015270:	d005      	beq.n	801527e <USBD_StdItfReq+0x26>
 8015272:	2b40      	cmp	r3, #64	; 0x40
 8015274:	d852      	bhi.n	801531c <USBD_StdItfReq+0xc4>
 8015276:	2b00      	cmp	r3, #0
 8015278:	d001      	beq.n	801527e <USBD_StdItfReq+0x26>
 801527a:	2b20      	cmp	r3, #32
 801527c:	d14e      	bne.n	801531c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015284:	b2db      	uxtb	r3, r3
 8015286:	3b01      	subs	r3, #1
 8015288:	2b02      	cmp	r3, #2
 801528a:	d840      	bhi.n	801530e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	889b      	ldrh	r3, [r3, #4]
 8015290:	b2db      	uxtb	r3, r3
 8015292:	2b01      	cmp	r3, #1
 8015294:	d836      	bhi.n	8015304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	889b      	ldrh	r3, [r3, #4]
 801529a:	b2db      	uxtb	r3, r3
 801529c:	4619      	mov	r1, r3
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7ff fed9 	bl	8015056 <USBD_CoreFindIF>
 80152a4:	4603      	mov	r3, r0
 80152a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152a8:	7bbb      	ldrb	r3, [r7, #14]
 80152aa:	2bff      	cmp	r3, #255	; 0xff
 80152ac:	d01d      	beq.n	80152ea <USBD_StdItfReq+0x92>
 80152ae:	7bbb      	ldrb	r3, [r7, #14]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d11a      	bne.n	80152ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80152b4:	7bba      	ldrb	r2, [r7, #14]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	32ae      	adds	r2, #174	; 0xae
 80152ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152be:	689b      	ldr	r3, [r3, #8]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00f      	beq.n	80152e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80152c4:	7bba      	ldrb	r2, [r7, #14]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80152cc:	7bba      	ldrb	r2, [r7, #14]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	32ae      	adds	r2, #174	; 0xae
 80152d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d6:	689b      	ldr	r3, [r3, #8]
 80152d8:	6839      	ldr	r1, [r7, #0]
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	4798      	blx	r3
 80152de:	4603      	mov	r3, r0
 80152e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80152e2:	e004      	b.n	80152ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80152e4:	2303      	movs	r3, #3
 80152e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80152e8:	e001      	b.n	80152ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80152ea:	2303      	movs	r3, #3
 80152ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	88db      	ldrh	r3, [r3, #6]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d110      	bne.n	8015318 <USBD_StdItfReq+0xc0>
 80152f6:	7bfb      	ldrb	r3, [r7, #15]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d10d      	bne.n	8015318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f000 fdc7 	bl	8015e90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015302:	e009      	b.n	8015318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015304:	6839      	ldr	r1, [r7, #0]
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f000 fcf7 	bl	8015cfa <USBD_CtlError>
          break;
 801530c:	e004      	b.n	8015318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801530e:	6839      	ldr	r1, [r7, #0]
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f000 fcf2 	bl	8015cfa <USBD_CtlError>
          break;
 8015316:	e000      	b.n	801531a <USBD_StdItfReq+0xc2>
          break;
 8015318:	bf00      	nop
      }
      break;
 801531a:	e004      	b.n	8015326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801531c:	6839      	ldr	r1, [r7, #0]
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 fceb 	bl	8015cfa <USBD_CtlError>
      break;
 8015324:	bf00      	nop
  }

  return ret;
 8015326:	7bfb      	ldrb	r3, [r7, #15]
}
 8015328:	4618      	mov	r0, r3
 801532a:	3710      	adds	r7, #16
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	889b      	ldrh	r3, [r3, #4]
 8015342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801534c:	2b40      	cmp	r3, #64	; 0x40
 801534e:	d007      	beq.n	8015360 <USBD_StdEPReq+0x30>
 8015350:	2b40      	cmp	r3, #64	; 0x40
 8015352:	f200 817f 	bhi.w	8015654 <USBD_StdEPReq+0x324>
 8015356:	2b00      	cmp	r3, #0
 8015358:	d02a      	beq.n	80153b0 <USBD_StdEPReq+0x80>
 801535a:	2b20      	cmp	r3, #32
 801535c:	f040 817a 	bne.w	8015654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015360:	7bbb      	ldrb	r3, [r7, #14]
 8015362:	4619      	mov	r1, r3
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7ff fe83 	bl	8015070 <USBD_CoreFindEP>
 801536a:	4603      	mov	r3, r0
 801536c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801536e:	7b7b      	ldrb	r3, [r7, #13]
 8015370:	2bff      	cmp	r3, #255	; 0xff
 8015372:	f000 8174 	beq.w	801565e <USBD_StdEPReq+0x32e>
 8015376:	7b7b      	ldrb	r3, [r7, #13]
 8015378:	2b00      	cmp	r3, #0
 801537a:	f040 8170 	bne.w	801565e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801537e:	7b7a      	ldrb	r2, [r7, #13]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015386:	7b7a      	ldrb	r2, [r7, #13]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	32ae      	adds	r2, #174	; 0xae
 801538c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 8163 	beq.w	801565e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015398:	7b7a      	ldrb	r2, [r7, #13]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	32ae      	adds	r2, #174	; 0xae
 801539e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153a2:	689b      	ldr	r3, [r3, #8]
 80153a4:	6839      	ldr	r1, [r7, #0]
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	4798      	blx	r3
 80153aa:	4603      	mov	r3, r0
 80153ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80153ae:	e156      	b.n	801565e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	785b      	ldrb	r3, [r3, #1]
 80153b4:	2b03      	cmp	r3, #3
 80153b6:	d008      	beq.n	80153ca <USBD_StdEPReq+0x9a>
 80153b8:	2b03      	cmp	r3, #3
 80153ba:	f300 8145 	bgt.w	8015648 <USBD_StdEPReq+0x318>
 80153be:	2b00      	cmp	r3, #0
 80153c0:	f000 809b 	beq.w	80154fa <USBD_StdEPReq+0x1ca>
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d03c      	beq.n	8015442 <USBD_StdEPReq+0x112>
 80153c8:	e13e      	b.n	8015648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	2b02      	cmp	r3, #2
 80153d4:	d002      	beq.n	80153dc <USBD_StdEPReq+0xac>
 80153d6:	2b03      	cmp	r3, #3
 80153d8:	d016      	beq.n	8015408 <USBD_StdEPReq+0xd8>
 80153da:	e02c      	b.n	8015436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80153dc:	7bbb      	ldrb	r3, [r7, #14]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d00d      	beq.n	80153fe <USBD_StdEPReq+0xce>
 80153e2:	7bbb      	ldrb	r3, [r7, #14]
 80153e4:	2b80      	cmp	r3, #128	; 0x80
 80153e6:	d00a      	beq.n	80153fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80153e8:	7bbb      	ldrb	r3, [r7, #14]
 80153ea:	4619      	mov	r1, r3
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f001 f9c3 	bl	8016778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80153f2:	2180      	movs	r1, #128	; 0x80
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f001 f9bf 	bl	8016778 <USBD_LL_StallEP>
 80153fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80153fc:	e020      	b.n	8015440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80153fe:	6839      	ldr	r1, [r7, #0]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f000 fc7a 	bl	8015cfa <USBD_CtlError>
              break;
 8015406:	e01b      	b.n	8015440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	885b      	ldrh	r3, [r3, #2]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d10e      	bne.n	801542e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015410:	7bbb      	ldrb	r3, [r7, #14]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00b      	beq.n	801542e <USBD_StdEPReq+0xfe>
 8015416:	7bbb      	ldrb	r3, [r7, #14]
 8015418:	2b80      	cmp	r3, #128	; 0x80
 801541a:	d008      	beq.n	801542e <USBD_StdEPReq+0xfe>
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	88db      	ldrh	r3, [r3, #6]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d104      	bne.n	801542e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015424:	7bbb      	ldrb	r3, [r7, #14]
 8015426:	4619      	mov	r1, r3
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f001 f9a5 	bl	8016778 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f000 fd2e 	bl	8015e90 <USBD_CtlSendStatus>

              break;
 8015434:	e004      	b.n	8015440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 fc5e 	bl	8015cfa <USBD_CtlError>
              break;
 801543e:	bf00      	nop
          }
          break;
 8015440:	e107      	b.n	8015652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b02      	cmp	r3, #2
 801544c:	d002      	beq.n	8015454 <USBD_StdEPReq+0x124>
 801544e:	2b03      	cmp	r3, #3
 8015450:	d016      	beq.n	8015480 <USBD_StdEPReq+0x150>
 8015452:	e04b      	b.n	80154ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015454:	7bbb      	ldrb	r3, [r7, #14]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d00d      	beq.n	8015476 <USBD_StdEPReq+0x146>
 801545a:	7bbb      	ldrb	r3, [r7, #14]
 801545c:	2b80      	cmp	r3, #128	; 0x80
 801545e:	d00a      	beq.n	8015476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015460:	7bbb      	ldrb	r3, [r7, #14]
 8015462:	4619      	mov	r1, r3
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f001 f987 	bl	8016778 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801546a:	2180      	movs	r1, #128	; 0x80
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f001 f983 	bl	8016778 <USBD_LL_StallEP>
 8015472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015474:	e040      	b.n	80154f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015476:	6839      	ldr	r1, [r7, #0]
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f000 fc3e 	bl	8015cfa <USBD_CtlError>
              break;
 801547e:	e03b      	b.n	80154f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	885b      	ldrh	r3, [r3, #2]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d136      	bne.n	80154f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015488:	7bbb      	ldrb	r3, [r7, #14]
 801548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801548e:	2b00      	cmp	r3, #0
 8015490:	d004      	beq.n	801549c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015492:	7bbb      	ldrb	r3, [r7, #14]
 8015494:	4619      	mov	r1, r3
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f001 f98d 	bl	80167b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fcf7 	bl	8015e90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80154a2:	7bbb      	ldrb	r3, [r7, #14]
 80154a4:	4619      	mov	r1, r3
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7ff fde2 	bl	8015070 <USBD_CoreFindEP>
 80154ac:	4603      	mov	r3, r0
 80154ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80154b0:	7b7b      	ldrb	r3, [r7, #13]
 80154b2:	2bff      	cmp	r3, #255	; 0xff
 80154b4:	d01f      	beq.n	80154f6 <USBD_StdEPReq+0x1c6>
 80154b6:	7b7b      	ldrb	r3, [r7, #13]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d11c      	bne.n	80154f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80154bc:	7b7a      	ldrb	r2, [r7, #13]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80154c4:	7b7a      	ldrb	r2, [r7, #13]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	32ae      	adds	r2, #174	; 0xae
 80154ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d010      	beq.n	80154f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80154d4:	7b7a      	ldrb	r2, [r7, #13]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	32ae      	adds	r2, #174	; 0xae
 80154da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	6839      	ldr	r1, [r7, #0]
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	4798      	blx	r3
 80154e6:	4603      	mov	r3, r0
 80154e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80154ea:	e004      	b.n	80154f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80154ec:	6839      	ldr	r1, [r7, #0]
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f000 fc03 	bl	8015cfa <USBD_CtlError>
              break;
 80154f4:	e000      	b.n	80154f8 <USBD_StdEPReq+0x1c8>
              break;
 80154f6:	bf00      	nop
          }
          break;
 80154f8:	e0ab      	b.n	8015652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015500:	b2db      	uxtb	r3, r3
 8015502:	2b02      	cmp	r3, #2
 8015504:	d002      	beq.n	801550c <USBD_StdEPReq+0x1dc>
 8015506:	2b03      	cmp	r3, #3
 8015508:	d032      	beq.n	8015570 <USBD_StdEPReq+0x240>
 801550a:	e097      	b.n	801563c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801550c:	7bbb      	ldrb	r3, [r7, #14]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d007      	beq.n	8015522 <USBD_StdEPReq+0x1f2>
 8015512:	7bbb      	ldrb	r3, [r7, #14]
 8015514:	2b80      	cmp	r3, #128	; 0x80
 8015516:	d004      	beq.n	8015522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015518:	6839      	ldr	r1, [r7, #0]
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f000 fbed 	bl	8015cfa <USBD_CtlError>
                break;
 8015520:	e091      	b.n	8015646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015526:	2b00      	cmp	r3, #0
 8015528:	da0b      	bge.n	8015542 <USBD_StdEPReq+0x212>
 801552a:	7bbb      	ldrb	r3, [r7, #14]
 801552c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015530:	4613      	mov	r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	4413      	add	r3, r2
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	3310      	adds	r3, #16
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	4413      	add	r3, r2
 801553e:	3304      	adds	r3, #4
 8015540:	e00b      	b.n	801555a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015542:	7bbb      	ldrb	r3, [r7, #14]
 8015544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015548:	4613      	mov	r3, r2
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	4413      	add	r3, r2
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	4413      	add	r3, r2
 8015558:	3304      	adds	r3, #4
 801555a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	2200      	movs	r2, #0
 8015560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	2202      	movs	r2, #2
 8015566:	4619      	mov	r1, r3
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 fc37 	bl	8015ddc <USBD_CtlSendData>
              break;
 801556e:	e06a      	b.n	8015646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015574:	2b00      	cmp	r3, #0
 8015576:	da11      	bge.n	801559c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015578:	7bbb      	ldrb	r3, [r7, #14]
 801557a:	f003 020f 	and.w	r2, r3, #15
 801557e:	6879      	ldr	r1, [r7, #4]
 8015580:	4613      	mov	r3, r2
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4413      	add	r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	440b      	add	r3, r1
 801558a:	3324      	adds	r3, #36	; 0x24
 801558c:	881b      	ldrh	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d117      	bne.n	80155c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015592:	6839      	ldr	r1, [r7, #0]
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f000 fbb0 	bl	8015cfa <USBD_CtlError>
                  break;
 801559a:	e054      	b.n	8015646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801559c:	7bbb      	ldrb	r3, [r7, #14]
 801559e:	f003 020f 	and.w	r2, r3, #15
 80155a2:	6879      	ldr	r1, [r7, #4]
 80155a4:	4613      	mov	r3, r2
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	4413      	add	r3, r2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	440b      	add	r3, r1
 80155ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80155b2:	881b      	ldrh	r3, [r3, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d104      	bne.n	80155c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80155b8:	6839      	ldr	r1, [r7, #0]
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f000 fb9d 	bl	8015cfa <USBD_CtlError>
                  break;
 80155c0:	e041      	b.n	8015646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80155c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	da0b      	bge.n	80155e2 <USBD_StdEPReq+0x2b2>
 80155ca:	7bbb      	ldrb	r3, [r7, #14]
 80155cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155d0:	4613      	mov	r3, r2
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	4413      	add	r3, r2
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	3310      	adds	r3, #16
 80155da:	687a      	ldr	r2, [r7, #4]
 80155dc:	4413      	add	r3, r2
 80155de:	3304      	adds	r3, #4
 80155e0:	e00b      	b.n	80155fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80155e2:	7bbb      	ldrb	r3, [r7, #14]
 80155e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80155e8:	4613      	mov	r3, r2
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	4413      	add	r3, r2
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	4413      	add	r3, r2
 80155f8:	3304      	adds	r3, #4
 80155fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80155fc:	7bbb      	ldrb	r3, [r7, #14]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d002      	beq.n	8015608 <USBD_StdEPReq+0x2d8>
 8015602:	7bbb      	ldrb	r3, [r7, #14]
 8015604:	2b80      	cmp	r3, #128	; 0x80
 8015606:	d103      	bne.n	8015610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	2200      	movs	r2, #0
 801560c:	601a      	str	r2, [r3, #0]
 801560e:	e00e      	b.n	801562e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015610:	7bbb      	ldrb	r3, [r7, #14]
 8015612:	4619      	mov	r1, r3
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f001 f8ed 	bl	80167f4 <USBD_LL_IsStallEP>
 801561a:	4603      	mov	r3, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	d003      	beq.n	8015628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	2201      	movs	r2, #1
 8015624:	601a      	str	r2, [r3, #0]
 8015626:	e002      	b.n	801562e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	2200      	movs	r2, #0
 801562c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	2202      	movs	r2, #2
 8015632:	4619      	mov	r1, r3
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f000 fbd1 	bl	8015ddc <USBD_CtlSendData>
              break;
 801563a:	e004      	b.n	8015646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801563c:	6839      	ldr	r1, [r7, #0]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f000 fb5b 	bl	8015cfa <USBD_CtlError>
              break;
 8015644:	bf00      	nop
          }
          break;
 8015646:	e004      	b.n	8015652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015648:	6839      	ldr	r1, [r7, #0]
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 fb55 	bl	8015cfa <USBD_CtlError>
          break;
 8015650:	bf00      	nop
      }
      break;
 8015652:	e005      	b.n	8015660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015654:	6839      	ldr	r1, [r7, #0]
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f000 fb4f 	bl	8015cfa <USBD_CtlError>
      break;
 801565c:	e000      	b.n	8015660 <USBD_StdEPReq+0x330>
      break;
 801565e:	bf00      	nop
  }

  return ret;
 8015660:	7bfb      	ldrb	r3, [r7, #15]
}
 8015662:	4618      	mov	r0, r3
 8015664:	3710      	adds	r7, #16
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
	...

0801566c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015676:	2300      	movs	r3, #0
 8015678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801567e:	2300      	movs	r3, #0
 8015680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	885b      	ldrh	r3, [r3, #2]
 8015686:	0a1b      	lsrs	r3, r3, #8
 8015688:	b29b      	uxth	r3, r3
 801568a:	3b01      	subs	r3, #1
 801568c:	2b06      	cmp	r3, #6
 801568e:	f200 8128 	bhi.w	80158e2 <USBD_GetDescriptor+0x276>
 8015692:	a201      	add	r2, pc, #4	; (adr r2, 8015698 <USBD_GetDescriptor+0x2c>)
 8015694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015698:	080156b5 	.word	0x080156b5
 801569c:	080156cd 	.word	0x080156cd
 80156a0:	0801570d 	.word	0x0801570d
 80156a4:	080158e3 	.word	0x080158e3
 80156a8:	080158e3 	.word	0x080158e3
 80156ac:	08015883 	.word	0x08015883
 80156b0:	080158af 	.word	0x080158af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	7c12      	ldrb	r2, [r2, #16]
 80156c0:	f107 0108 	add.w	r1, r7, #8
 80156c4:	4610      	mov	r0, r2
 80156c6:	4798      	blx	r3
 80156c8:	60f8      	str	r0, [r7, #12]
      break;
 80156ca:	e112      	b.n	80158f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	7c1b      	ldrb	r3, [r3, #16]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d10d      	bne.n	80156f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156dc:	f107 0208 	add.w	r2, r7, #8
 80156e0:	4610      	mov	r0, r2
 80156e2:	4798      	blx	r3
 80156e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	3301      	adds	r3, #1
 80156ea:	2202      	movs	r2, #2
 80156ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80156ee:	e100      	b.n	80158f2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156f8:	f107 0208 	add.w	r2, r7, #8
 80156fc:	4610      	mov	r0, r2
 80156fe:	4798      	blx	r3
 8015700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	3301      	adds	r3, #1
 8015706:	2202      	movs	r2, #2
 8015708:	701a      	strb	r2, [r3, #0]
      break;
 801570a:	e0f2      	b.n	80158f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	885b      	ldrh	r3, [r3, #2]
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b05      	cmp	r3, #5
 8015714:	f200 80ac 	bhi.w	8015870 <USBD_GetDescriptor+0x204>
 8015718:	a201      	add	r2, pc, #4	; (adr r2, 8015720 <USBD_GetDescriptor+0xb4>)
 801571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801571e:	bf00      	nop
 8015720:	08015739 	.word	0x08015739
 8015724:	0801576d 	.word	0x0801576d
 8015728:	080157a1 	.word	0x080157a1
 801572c:	080157d5 	.word	0x080157d5
 8015730:	08015809 	.word	0x08015809
 8015734:	0801583d 	.word	0x0801583d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d00b      	beq.n	801575c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	7c12      	ldrb	r2, [r2, #16]
 8015750:	f107 0108 	add.w	r1, r7, #8
 8015754:	4610      	mov	r0, r2
 8015756:	4798      	blx	r3
 8015758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801575a:	e091      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801575c:	6839      	ldr	r1, [r7, #0]
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f000 facb 	bl	8015cfa <USBD_CtlError>
            err++;
 8015764:	7afb      	ldrb	r3, [r7, #11]
 8015766:	3301      	adds	r3, #1
 8015768:	72fb      	strb	r3, [r7, #11]
          break;
 801576a:	e089      	b.n	8015880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d00b      	beq.n	8015790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801577e:	689b      	ldr	r3, [r3, #8]
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	7c12      	ldrb	r2, [r2, #16]
 8015784:	f107 0108 	add.w	r1, r7, #8
 8015788:	4610      	mov	r0, r2
 801578a:	4798      	blx	r3
 801578c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801578e:	e077      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015790:	6839      	ldr	r1, [r7, #0]
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f000 fab1 	bl	8015cfa <USBD_CtlError>
            err++;
 8015798:	7afb      	ldrb	r3, [r7, #11]
 801579a:	3301      	adds	r3, #1
 801579c:	72fb      	strb	r3, [r7, #11]
          break;
 801579e:	e06f      	b.n	8015880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d00b      	beq.n	80157c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	687a      	ldr	r2, [r7, #4]
 80157b6:	7c12      	ldrb	r2, [r2, #16]
 80157b8:	f107 0108 	add.w	r1, r7, #8
 80157bc:	4610      	mov	r0, r2
 80157be:	4798      	blx	r3
 80157c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80157c2:	e05d      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80157c4:	6839      	ldr	r1, [r7, #0]
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 fa97 	bl	8015cfa <USBD_CtlError>
            err++;
 80157cc:	7afb      	ldrb	r3, [r7, #11]
 80157ce:	3301      	adds	r3, #1
 80157d0:	72fb      	strb	r3, [r7, #11]
          break;
 80157d2:	e055      	b.n	8015880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157da:	691b      	ldr	r3, [r3, #16]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00b      	beq.n	80157f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157e6:	691b      	ldr	r3, [r3, #16]
 80157e8:	687a      	ldr	r2, [r7, #4]
 80157ea:	7c12      	ldrb	r2, [r2, #16]
 80157ec:	f107 0108 	add.w	r1, r7, #8
 80157f0:	4610      	mov	r0, r2
 80157f2:	4798      	blx	r3
 80157f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80157f6:	e043      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80157f8:	6839      	ldr	r1, [r7, #0]
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fa7d 	bl	8015cfa <USBD_CtlError>
            err++;
 8015800:	7afb      	ldrb	r3, [r7, #11]
 8015802:	3301      	adds	r3, #1
 8015804:	72fb      	strb	r3, [r7, #11]
          break;
 8015806:	e03b      	b.n	8015880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801580e:	695b      	ldr	r3, [r3, #20]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00b      	beq.n	801582c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801581a:	695b      	ldr	r3, [r3, #20]
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	7c12      	ldrb	r2, [r2, #16]
 8015820:	f107 0108 	add.w	r1, r7, #8
 8015824:	4610      	mov	r0, r2
 8015826:	4798      	blx	r3
 8015828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801582a:	e029      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 fa63 	bl	8015cfa <USBD_CtlError>
            err++;
 8015834:	7afb      	ldrb	r3, [r7, #11]
 8015836:	3301      	adds	r3, #1
 8015838:	72fb      	strb	r3, [r7, #11]
          break;
 801583a:	e021      	b.n	8015880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015842:	699b      	ldr	r3, [r3, #24]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d00b      	beq.n	8015860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	7c12      	ldrb	r2, [r2, #16]
 8015854:	f107 0108 	add.w	r1, r7, #8
 8015858:	4610      	mov	r0, r2
 801585a:	4798      	blx	r3
 801585c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801585e:	e00f      	b.n	8015880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015860:	6839      	ldr	r1, [r7, #0]
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f000 fa49 	bl	8015cfa <USBD_CtlError>
            err++;
 8015868:	7afb      	ldrb	r3, [r7, #11]
 801586a:	3301      	adds	r3, #1
 801586c:	72fb      	strb	r3, [r7, #11]
          break;
 801586e:	e007      	b.n	8015880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015870:	6839      	ldr	r1, [r7, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f000 fa41 	bl	8015cfa <USBD_CtlError>
          err++;
 8015878:	7afb      	ldrb	r3, [r7, #11]
 801587a:	3301      	adds	r3, #1
 801587c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801587e:	bf00      	nop
      }
      break;
 8015880:	e037      	b.n	80158f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	7c1b      	ldrb	r3, [r3, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015892:	f107 0208 	add.w	r2, r7, #8
 8015896:	4610      	mov	r0, r2
 8015898:	4798      	blx	r3
 801589a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801589c:	e029      	b.n	80158f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fa2a 	bl	8015cfa <USBD_CtlError>
        err++;
 80158a6:	7afb      	ldrb	r3, [r7, #11]
 80158a8:	3301      	adds	r3, #1
 80158aa:	72fb      	strb	r3, [r7, #11]
      break;
 80158ac:	e021      	b.n	80158f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	7c1b      	ldrb	r3, [r3, #16]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d10d      	bne.n	80158d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158be:	f107 0208 	add.w	r2, r7, #8
 80158c2:	4610      	mov	r0, r2
 80158c4:	4798      	blx	r3
 80158c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	3301      	adds	r3, #1
 80158cc:	2207      	movs	r2, #7
 80158ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80158d0:	e00f      	b.n	80158f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80158d2:	6839      	ldr	r1, [r7, #0]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f000 fa10 	bl	8015cfa <USBD_CtlError>
        err++;
 80158da:	7afb      	ldrb	r3, [r7, #11]
 80158dc:	3301      	adds	r3, #1
 80158de:	72fb      	strb	r3, [r7, #11]
      break;
 80158e0:	e007      	b.n	80158f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80158e2:	6839      	ldr	r1, [r7, #0]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 fa08 	bl	8015cfa <USBD_CtlError>
      err++;
 80158ea:	7afb      	ldrb	r3, [r7, #11]
 80158ec:	3301      	adds	r3, #1
 80158ee:	72fb      	strb	r3, [r7, #11]
      break;
 80158f0:	bf00      	nop
  }

  if (err != 0U)
 80158f2:	7afb      	ldrb	r3, [r7, #11]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d11e      	bne.n	8015936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	88db      	ldrh	r3, [r3, #6]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d016      	beq.n	801592e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015900:	893b      	ldrh	r3, [r7, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00e      	beq.n	8015924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	88da      	ldrh	r2, [r3, #6]
 801590a:	893b      	ldrh	r3, [r7, #8]
 801590c:	4293      	cmp	r3, r2
 801590e:	bf28      	it	cs
 8015910:	4613      	movcs	r3, r2
 8015912:	b29b      	uxth	r3, r3
 8015914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015916:	893b      	ldrh	r3, [r7, #8]
 8015918:	461a      	mov	r2, r3
 801591a:	68f9      	ldr	r1, [r7, #12]
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 fa5d 	bl	8015ddc <USBD_CtlSendData>
 8015922:	e009      	b.n	8015938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015924:	6839      	ldr	r1, [r7, #0]
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f000 f9e7 	bl	8015cfa <USBD_CtlError>
 801592c:	e004      	b.n	8015938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 faae 	bl	8015e90 <USBD_CtlSendStatus>
 8015934:	e000      	b.n	8015938 <USBD_GetDescriptor+0x2cc>
    return;
 8015936:	bf00      	nop
  }
}
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop

08015940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	889b      	ldrh	r3, [r3, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d131      	bne.n	80159b6 <USBD_SetAddress+0x76>
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	88db      	ldrh	r3, [r3, #6]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d12d      	bne.n	80159b6 <USBD_SetAddress+0x76>
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	885b      	ldrh	r3, [r3, #2]
 801595e:	2b7f      	cmp	r3, #127	; 0x7f
 8015960:	d829      	bhi.n	80159b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	885b      	ldrh	r3, [r3, #2]
 8015966:	b2db      	uxtb	r3, r3
 8015968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801596c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015974:	b2db      	uxtb	r3, r3
 8015976:	2b03      	cmp	r3, #3
 8015978:	d104      	bne.n	8015984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801597a:	6839      	ldr	r1, [r7, #0]
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f000 f9bc 	bl	8015cfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015982:	e01d      	b.n	80159c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	7bfa      	ldrb	r2, [r7, #15]
 8015988:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	4619      	mov	r1, r3
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f000 ff5b 	bl	801684c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f000 fa7a 	bl	8015e90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801599c:	7bfb      	ldrb	r3, [r7, #15]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d004      	beq.n	80159ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2202      	movs	r2, #2
 80159a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159aa:	e009      	b.n	80159c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2201      	movs	r2, #1
 80159b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159b4:	e004      	b.n	80159c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 f99e 	bl	8015cfa <USBD_CtlError>
  }
}
 80159be:	bf00      	nop
 80159c0:	bf00      	nop
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80159d2:	2300      	movs	r3, #0
 80159d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	885b      	ldrh	r3, [r3, #2]
 80159da:	b2da      	uxtb	r2, r3
 80159dc:	4b4e      	ldr	r3, [pc, #312]	; (8015b18 <USBD_SetConfig+0x150>)
 80159de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80159e0:	4b4d      	ldr	r3, [pc, #308]	; (8015b18 <USBD_SetConfig+0x150>)
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	d905      	bls.n	80159f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80159e8:	6839      	ldr	r1, [r7, #0]
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f000 f985 	bl	8015cfa <USBD_CtlError>
    return USBD_FAIL;
 80159f0:	2303      	movs	r3, #3
 80159f2:	e08c      	b.n	8015b0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159fa:	b2db      	uxtb	r3, r3
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d002      	beq.n	8015a06 <USBD_SetConfig+0x3e>
 8015a00:	2b03      	cmp	r3, #3
 8015a02:	d029      	beq.n	8015a58 <USBD_SetConfig+0x90>
 8015a04:	e075      	b.n	8015af2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015a06:	4b44      	ldr	r3, [pc, #272]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d020      	beq.n	8015a50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015a0e:	4b42      	ldr	r3, [pc, #264]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	461a      	mov	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015a18:	4b3f      	ldr	r3, [pc, #252]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7fe ffe1 	bl	80149e6 <USBD_SetClassConfig>
 8015a24:	4603      	mov	r3, r0
 8015a26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015a28:	7bfb      	ldrb	r3, [r7, #15]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d008      	beq.n	8015a40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015a2e:	6839      	ldr	r1, [r7, #0]
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f000 f962 	bl	8015cfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2202      	movs	r2, #2
 8015a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015a3e:	e065      	b.n	8015b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f000 fa25 	bl	8015e90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2203      	movs	r2, #3
 8015a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015a4e:	e05d      	b.n	8015b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f000 fa1d 	bl	8015e90 <USBD_CtlSendStatus>
      break;
 8015a56:	e059      	b.n	8015b0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015a58:	4b2f      	ldr	r3, [pc, #188]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d112      	bne.n	8015a86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2202      	movs	r2, #2
 8015a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015a68:	4b2b      	ldr	r3, [pc, #172]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015a72:	4b29      	ldr	r3, [pc, #164]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	4619      	mov	r1, r3
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f7fe ffd0 	bl	8014a1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f000 fa06 	bl	8015e90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015a84:	e042      	b.n	8015b0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015a86:	4b24      	ldr	r3, [pc, #144]	; (8015b18 <USBD_SetConfig+0x150>)
 8015a88:	781b      	ldrb	r3, [r3, #0]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d02a      	beq.n	8015aea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f7fe ffbe 	bl	8014a1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015aa2:	4b1d      	ldr	r3, [pc, #116]	; (8015b18 <USBD_SetConfig+0x150>)
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015aac:	4b1a      	ldr	r3, [pc, #104]	; (8015b18 <USBD_SetConfig+0x150>)
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	4619      	mov	r1, r3
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7fe ff97 	bl	80149e6 <USBD_SetClassConfig>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015abc:	7bfb      	ldrb	r3, [r7, #15]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d00f      	beq.n	8015ae2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015ac2:	6839      	ldr	r1, [r7, #0]
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f000 f918 	bl	8015cfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	b2db      	uxtb	r3, r3
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f7fe ffa3 	bl	8014a1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2202      	movs	r2, #2
 8015adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015ae0:	e014      	b.n	8015b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f000 f9d4 	bl	8015e90 <USBD_CtlSendStatus>
      break;
 8015ae8:	e010      	b.n	8015b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f000 f9d0 	bl	8015e90 <USBD_CtlSendStatus>
      break;
 8015af0:	e00c      	b.n	8015b0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015af2:	6839      	ldr	r1, [r7, #0]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 f900 	bl	8015cfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015afa:	4b07      	ldr	r3, [pc, #28]	; (8015b18 <USBD_SetConfig+0x150>)
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7fe ff8c 	bl	8014a1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015b06:	2303      	movs	r3, #3
 8015b08:	73fb      	strb	r3, [r7, #15]
      break;
 8015b0a:	bf00      	nop
  }

  return ret;
 8015b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3710      	adds	r7, #16
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	240014a8 	.word	0x240014a8

08015b1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	88db      	ldrh	r3, [r3, #6]
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d004      	beq.n	8015b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015b2e:	6839      	ldr	r1, [r7, #0]
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 f8e2 	bl	8015cfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015b36:	e023      	b.n	8015b80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	2b02      	cmp	r3, #2
 8015b42:	dc02      	bgt.n	8015b4a <USBD_GetConfig+0x2e>
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	dc03      	bgt.n	8015b50 <USBD_GetConfig+0x34>
 8015b48:	e015      	b.n	8015b76 <USBD_GetConfig+0x5a>
 8015b4a:	2b03      	cmp	r3, #3
 8015b4c:	d00b      	beq.n	8015b66 <USBD_GetConfig+0x4a>
 8015b4e:	e012      	b.n	8015b76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	3308      	adds	r3, #8
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	4619      	mov	r1, r3
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 f93c 	bl	8015ddc <USBD_CtlSendData>
        break;
 8015b64:	e00c      	b.n	8015b80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	3304      	adds	r3, #4
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 f934 	bl	8015ddc <USBD_CtlSendData>
        break;
 8015b74:	e004      	b.n	8015b80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015b76:	6839      	ldr	r1, [r7, #0]
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f000 f8be 	bl	8015cfa <USBD_CtlError>
        break;
 8015b7e:	bf00      	nop
}
 8015b80:	bf00      	nop
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	d81e      	bhi.n	8015bde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	88db      	ldrh	r3, [r3, #6]
 8015ba4:	2b02      	cmp	r3, #2
 8015ba6:	d004      	beq.n	8015bb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015ba8:	6839      	ldr	r1, [r7, #0]
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f000 f8a5 	bl	8015cfa <USBD_CtlError>
        break;
 8015bb0:	e01a      	b.n	8015be8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d005      	beq.n	8015bce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	f043 0202 	orr.w	r2, r3, #2
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	330c      	adds	r3, #12
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f000 f900 	bl	8015ddc <USBD_CtlSendData>
      break;
 8015bdc:	e004      	b.n	8015be8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015bde:	6839      	ldr	r1, [r7, #0]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 f88a 	bl	8015cfa <USBD_CtlError>
      break;
 8015be6:	bf00      	nop
  }
}
 8015be8:	bf00      	nop
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	885b      	ldrh	r3, [r3, #2]
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d107      	bne.n	8015c12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2201      	movs	r2, #1
 8015c06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 f940 	bl	8015e90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015c10:	e013      	b.n	8015c3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	885b      	ldrh	r3, [r3, #2]
 8015c16:	2b02      	cmp	r3, #2
 8015c18:	d10b      	bne.n	8015c32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	889b      	ldrh	r3, [r3, #4]
 8015c1e:	0a1b      	lsrs	r3, r3, #8
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	b2da      	uxtb	r2, r3
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 f930 	bl	8015e90 <USBD_CtlSendStatus>
}
 8015c30:	e003      	b.n	8015c3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015c32:	6839      	ldr	r1, [r7, #0]
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f000 f860 	bl	8015cfa <USBD_CtlError>
}
 8015c3a:	bf00      	nop
 8015c3c:	3708      	adds	r7, #8
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b082      	sub	sp, #8
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
 8015c4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	3b01      	subs	r3, #1
 8015c56:	2b02      	cmp	r3, #2
 8015c58:	d80b      	bhi.n	8015c72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	885b      	ldrh	r3, [r3, #2]
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d10c      	bne.n	8015c7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2200      	movs	r2, #0
 8015c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f000 f910 	bl	8015e90 <USBD_CtlSendStatus>
      }
      break;
 8015c70:	e004      	b.n	8015c7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015c72:	6839      	ldr	r1, [r7, #0]
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f000 f840 	bl	8015cfa <USBD_CtlError>
      break;
 8015c7a:	e000      	b.n	8015c7e <USBD_ClrFeature+0x3c>
      break;
 8015c7c:	bf00      	nop
  }
}
 8015c7e:	bf00      	nop
 8015c80:	3708      	adds	r7, #8
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
 8015c8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	781a      	ldrb	r2, [r3, #0]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	781a      	ldrb	r2, [r3, #0]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	3301      	adds	r3, #1
 8015cae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015cb0:	68f8      	ldr	r0, [r7, #12]
 8015cb2:	f7ff fa41 	bl	8015138 <SWAPBYTE>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	461a      	mov	r2, r3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	f7ff fa34 	bl	8015138 <SWAPBYTE>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	3301      	adds	r3, #1
 8015cdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	f7ff fa27 	bl	8015138 <SWAPBYTE>
 8015cea:	4603      	mov	r3, r0
 8015cec:	461a      	mov	r2, r3
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	80da      	strh	r2, [r3, #6]
}
 8015cf2:	bf00      	nop
 8015cf4:	3710      	adds	r7, #16
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b082      	sub	sp, #8
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d04:	2180      	movs	r1, #128	; 0x80
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 fd36 	bl	8016778 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015d0c:	2100      	movs	r1, #0
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f000 fd32 	bl	8016778 <USBD_LL_StallEP>
}
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d036      	beq.n	8015da0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015d36:	6938      	ldr	r0, [r7, #16]
 8015d38:	f000 f836 	bl	8015da8 <USBD_GetLen>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	3301      	adds	r3, #1
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015d4a:	7dfb      	ldrb	r3, [r7, #23]
 8015d4c:	68ba      	ldr	r2, [r7, #8]
 8015d4e:	4413      	add	r3, r2
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	7812      	ldrb	r2, [r2, #0]
 8015d54:	701a      	strb	r2, [r3, #0]
  idx++;
 8015d56:	7dfb      	ldrb	r3, [r7, #23]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015d5c:	7dfb      	ldrb	r3, [r7, #23]
 8015d5e:	68ba      	ldr	r2, [r7, #8]
 8015d60:	4413      	add	r3, r2
 8015d62:	2203      	movs	r2, #3
 8015d64:	701a      	strb	r2, [r3, #0]
  idx++;
 8015d66:	7dfb      	ldrb	r3, [r7, #23]
 8015d68:	3301      	adds	r3, #1
 8015d6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015d6c:	e013      	b.n	8015d96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015d6e:	7dfb      	ldrb	r3, [r7, #23]
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	4413      	add	r3, r2
 8015d74:	693a      	ldr	r2, [r7, #16]
 8015d76:	7812      	ldrb	r2, [r2, #0]
 8015d78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	613b      	str	r3, [r7, #16]
    idx++;
 8015d80:	7dfb      	ldrb	r3, [r7, #23]
 8015d82:	3301      	adds	r3, #1
 8015d84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015d86:	7dfb      	ldrb	r3, [r7, #23]
 8015d88:	68ba      	ldr	r2, [r7, #8]
 8015d8a:	4413      	add	r3, r2
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	701a      	strb	r2, [r3, #0]
    idx++;
 8015d90:	7dfb      	ldrb	r3, [r7, #23]
 8015d92:	3301      	adds	r3, #1
 8015d94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d1e7      	bne.n	8015d6e <USBD_GetString+0x52>
 8015d9e:	e000      	b.n	8015da2 <USBD_GetString+0x86>
    return;
 8015da0:	bf00      	nop
  }
}
 8015da2:	3718      	adds	r7, #24
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015da8:	b480      	push	{r7}
 8015daa:	b085      	sub	sp, #20
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015db0:	2300      	movs	r3, #0
 8015db2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015db8:	e005      	b.n	8015dc6 <USBD_GetLen+0x1e>
  {
    len++;
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d1f5      	bne.n	8015dba <USBD_GetLen+0x12>
  }

  return len;
 8015dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3714      	adds	r7, #20
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr

08015ddc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2202      	movs	r2, #2
 8015dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	68ba      	ldr	r2, [r7, #8]
 8015e00:	2100      	movs	r1, #0
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f000 fd41 	bl	801688a <USBD_LL_Transmit>

  return USBD_OK;
 8015e08:	2300      	movs	r3, #0
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b084      	sub	sp, #16
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	60f8      	str	r0, [r7, #12]
 8015e1a:	60b9      	str	r1, [r7, #8]
 8015e1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	68ba      	ldr	r2, [r7, #8]
 8015e22:	2100      	movs	r1, #0
 8015e24:	68f8      	ldr	r0, [r7, #12]
 8015e26:	f000 fd30 	bl	801688a <USBD_LL_Transmit>

  return USBD_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3710      	adds	r7, #16
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	2203      	movs	r2, #3
 8015e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	687a      	ldr	r2, [r7, #4]
 8015e4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	687a      	ldr	r2, [r7, #4]
 8015e54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	68ba      	ldr	r2, [r7, #8]
 8015e5c:	2100      	movs	r1, #0
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f000 fd34 	bl	80168cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015e64:	2300      	movs	r3, #0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}

08015e6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015e6e:	b580      	push	{r7, lr}
 8015e70:	b084      	sub	sp, #16
 8015e72:	af00      	add	r7, sp, #0
 8015e74:	60f8      	str	r0, [r7, #12]
 8015e76:	60b9      	str	r1, [r7, #8]
 8015e78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	68ba      	ldr	r2, [r7, #8]
 8015e7e:	2100      	movs	r1, #0
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	f000 fd23 	bl	80168cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3710      	adds	r7, #16
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}

08015e90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b082      	sub	sp, #8
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2204      	movs	r2, #4
 8015e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f000 fcef 	bl	801688a <USBD_LL_Transmit>

  return USBD_OK;
 8015eac:	2300      	movs	r3, #0
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b082      	sub	sp, #8
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2205      	movs	r2, #5
 8015ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	2200      	movs	r2, #0
 8015eca:	2100      	movs	r1, #0
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f000 fcfd 	bl	80168cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ed2:	2300      	movs	r3, #0
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3708      	adds	r7, #8
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015edc:	b480      	push	{r7}
 8015ede:	b087      	sub	sp, #28
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	60f8      	str	r0, [r7, #12]
 8015ee4:	60b9      	str	r1, [r7, #8]
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015eea:	2301      	movs	r3, #1
 8015eec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015ef2:	4b1f      	ldr	r3, [pc, #124]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015ef4:	7a5b      	ldrb	r3, [r3, #9]
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d131      	bne.n	8015f60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015efc:	4b1c      	ldr	r3, [pc, #112]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015efe:	7a5b      	ldrb	r3, [r3, #9]
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	461a      	mov	r2, r3
 8015f04:	4b1a      	ldr	r3, [pc, #104]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f06:	2100      	movs	r1, #0
 8015f08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015f0a:	4b19      	ldr	r3, [pc, #100]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f0c:	7a5b      	ldrb	r3, [r3, #9]
 8015f0e:	b2db      	uxtb	r3, r3
 8015f10:	4a17      	ldr	r2, [pc, #92]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f12:	009b      	lsls	r3, r3, #2
 8015f14:	4413      	add	r3, r2
 8015f16:	68fa      	ldr	r2, [r7, #12]
 8015f18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015f1a:	4b15      	ldr	r3, [pc, #84]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f1c:	7a5b      	ldrb	r3, [r3, #9]
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	461a      	mov	r2, r3
 8015f22:	4b13      	ldr	r3, [pc, #76]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f24:	4413      	add	r3, r2
 8015f26:	79fa      	ldrb	r2, [r7, #7]
 8015f28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015f2a:	4b11      	ldr	r3, [pc, #68]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f2c:	7a5b      	ldrb	r3, [r3, #9]
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	1c5a      	adds	r2, r3, #1
 8015f32:	b2d1      	uxtb	r1, r2
 8015f34:	4a0e      	ldr	r2, [pc, #56]	; (8015f70 <FATFS_LinkDriverEx+0x94>)
 8015f36:	7251      	strb	r1, [r2, #9]
 8015f38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015f3a:	7dbb      	ldrb	r3, [r7, #22]
 8015f3c:	3330      	adds	r3, #48	; 0x30
 8015f3e:	b2da      	uxtb	r2, r3
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	3301      	adds	r3, #1
 8015f48:	223a      	movs	r2, #58	; 0x3a
 8015f4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	3302      	adds	r3, #2
 8015f50:	222f      	movs	r2, #47	; 0x2f
 8015f52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	3303      	adds	r3, #3
 8015f58:	2200      	movs	r2, #0
 8015f5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	371c      	adds	r7, #28
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr
 8015f6e:	bf00      	nop
 8015f70:	240014ac 	.word	0x240014ac

08015f74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b082      	sub	sp, #8
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015f7e:	2200      	movs	r2, #0
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7ff ffaa 	bl	8015edc <FATFS_LinkDriverEx>
 8015f88:	4603      	mov	r3, r0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
	...

08015f94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8015f98:	2201      	movs	r2, #1
 8015f9a:	4913      	ldr	r1, [pc, #76]	; (8015fe8 <MX_USB_DEVICE_Init+0x54>)
 8015f9c:	4813      	ldr	r0, [pc, #76]	; (8015fec <MX_USB_DEVICE_Init+0x58>)
 8015f9e:	f7fe fca5 	bl	80148ec <USBD_Init>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015fa8:	f7ec fa2a 	bl	8002400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8015fac:	4910      	ldr	r1, [pc, #64]	; (8015ff0 <MX_USB_DEVICE_Init+0x5c>)
 8015fae:	480f      	ldr	r0, [pc, #60]	; (8015fec <MX_USB_DEVICE_Init+0x58>)
 8015fb0:	f7fe fccc 	bl	801494c <USBD_RegisterClass>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d001      	beq.n	8015fbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015fba:	f7ec fa21 	bl	8002400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8015fbe:	490d      	ldr	r1, [pc, #52]	; (8015ff4 <MX_USB_DEVICE_Init+0x60>)
 8015fc0:	480a      	ldr	r0, [pc, #40]	; (8015fec <MX_USB_DEVICE_Init+0x58>)
 8015fc2:	f7fe fbc3 	bl	801474c <USBD_CDC_RegisterInterface>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d001      	beq.n	8015fd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015fcc:	f7ec fa18 	bl	8002400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015fd0:	4806      	ldr	r0, [pc, #24]	; (8015fec <MX_USB_DEVICE_Init+0x58>)
 8015fd2:	f7fe fcf1 	bl	80149b8 <USBD_Start>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d001      	beq.n	8015fe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015fdc:	f7ec fa10 	bl	8002400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015fe0:	f7f3 f960 	bl	80092a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015fe4:	bf00      	nop
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	240000b0 	.word	0x240000b0
 8015fec:	240014b8 	.word	0x240014b8
 8015ff0:	2400001c 	.word	0x2400001c
 8015ff4:	2400009c 	.word	0x2400009c

08015ff8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	4905      	ldr	r1, [pc, #20]	; (8016014 <CDC_Init_HS+0x1c>)
 8016000:	4805      	ldr	r0, [pc, #20]	; (8016018 <CDC_Init_HS+0x20>)
 8016002:	f7fe fbbd 	bl	8014780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016006:	4905      	ldr	r1, [pc, #20]	; (801601c <CDC_Init_HS+0x24>)
 8016008:	4803      	ldr	r0, [pc, #12]	; (8016018 <CDC_Init_HS+0x20>)
 801600a:	f7fe fbdb 	bl	80147c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801600e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016010:	4618      	mov	r0, r3
 8016012:	bd80      	pop	{r7, pc}
 8016014:	24001f94 	.word	0x24001f94
 8016018:	240014b8 	.word	0x240014b8
 801601c:	24001794 	.word	0x24001794

08016020 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016020:	b480      	push	{r7}
 8016022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016024:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016026:	4618      	mov	r0, r3
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr

08016030 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016030:	b480      	push	{r7}
 8016032:	b083      	sub	sp, #12
 8016034:	af00      	add	r7, sp, #0
 8016036:	4603      	mov	r3, r0
 8016038:	6039      	str	r1, [r7, #0]
 801603a:	71fb      	strb	r3, [r7, #7]
 801603c:	4613      	mov	r3, r2
 801603e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016040:	79fb      	ldrb	r3, [r7, #7]
 8016042:	2b23      	cmp	r3, #35	; 0x23
 8016044:	d84a      	bhi.n	80160dc <CDC_Control_HS+0xac>
 8016046:	a201      	add	r2, pc, #4	; (adr r2, 801604c <CDC_Control_HS+0x1c>)
 8016048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801604c:	080160dd 	.word	0x080160dd
 8016050:	080160dd 	.word	0x080160dd
 8016054:	080160dd 	.word	0x080160dd
 8016058:	080160dd 	.word	0x080160dd
 801605c:	080160dd 	.word	0x080160dd
 8016060:	080160dd 	.word	0x080160dd
 8016064:	080160dd 	.word	0x080160dd
 8016068:	080160dd 	.word	0x080160dd
 801606c:	080160dd 	.word	0x080160dd
 8016070:	080160dd 	.word	0x080160dd
 8016074:	080160dd 	.word	0x080160dd
 8016078:	080160dd 	.word	0x080160dd
 801607c:	080160dd 	.word	0x080160dd
 8016080:	080160dd 	.word	0x080160dd
 8016084:	080160dd 	.word	0x080160dd
 8016088:	080160dd 	.word	0x080160dd
 801608c:	080160dd 	.word	0x080160dd
 8016090:	080160dd 	.word	0x080160dd
 8016094:	080160dd 	.word	0x080160dd
 8016098:	080160dd 	.word	0x080160dd
 801609c:	080160dd 	.word	0x080160dd
 80160a0:	080160dd 	.word	0x080160dd
 80160a4:	080160dd 	.word	0x080160dd
 80160a8:	080160dd 	.word	0x080160dd
 80160ac:	080160dd 	.word	0x080160dd
 80160b0:	080160dd 	.word	0x080160dd
 80160b4:	080160dd 	.word	0x080160dd
 80160b8:	080160dd 	.word	0x080160dd
 80160bc:	080160dd 	.word	0x080160dd
 80160c0:	080160dd 	.word	0x080160dd
 80160c4:	080160dd 	.word	0x080160dd
 80160c8:	080160dd 	.word	0x080160dd
 80160cc:	080160dd 	.word	0x080160dd
 80160d0:	080160dd 	.word	0x080160dd
 80160d4:	080160dd 	.word	0x080160dd
 80160d8:	080160dd 	.word	0x080160dd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80160dc:	bf00      	nop
  }

  return (USBD_OK);
 80160de:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	370c      	adds	r7, #12
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr

080160ec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80160f6:	6879      	ldr	r1, [r7, #4]
 80160f8:	4805      	ldr	r0, [pc, #20]	; (8016110 <CDC_Receive_HS+0x24>)
 80160fa:	f7fe fb63 	bl	80147c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80160fe:	4804      	ldr	r0, [pc, #16]	; (8016110 <CDC_Receive_HS+0x24>)
 8016100:	f7fe fbbe 	bl	8014880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016104:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016106:	4618      	mov	r0, r3
 8016108:	3708      	adds	r7, #8
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop
 8016110:	240014b8 	.word	0x240014b8

08016114 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	460b      	mov	r3, r1
 801611e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016120:	2300      	movs	r3, #0
 8016122:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016124:	4b0d      	ldr	r3, [pc, #52]	; (801615c <CDC_Transmit_HS+0x48>)
 8016126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801612a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016132:	2b00      	cmp	r3, #0
 8016134:	d001      	beq.n	801613a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016136:	2301      	movs	r3, #1
 8016138:	e00b      	b.n	8016152 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801613a:	887b      	ldrh	r3, [r7, #2]
 801613c:	461a      	mov	r2, r3
 801613e:	6879      	ldr	r1, [r7, #4]
 8016140:	4806      	ldr	r0, [pc, #24]	; (801615c <CDC_Transmit_HS+0x48>)
 8016142:	f7fe fb1d 	bl	8014780 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016146:	4805      	ldr	r0, [pc, #20]	; (801615c <CDC_Transmit_HS+0x48>)
 8016148:	f7fe fb5a 	bl	8014800 <USBD_CDC_TransmitPacket>
 801614c:	4603      	mov	r3, r0
 801614e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016150:	7bfb      	ldrb	r3, [r7, #15]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	bf00      	nop
 801615c:	240014b8 	.word	0x240014b8

08016160 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016160:	b480      	push	{r7}
 8016162:	b087      	sub	sp, #28
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	4613      	mov	r3, r2
 801616c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801616e:	2300      	movs	r3, #0
 8016170:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016176:	4618      	mov	r0, r3
 8016178:	371c      	adds	r7, #28
 801617a:	46bd      	mov	sp, r7
 801617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016180:	4770      	bx	lr
	...

08016184 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016184:	b480      	push	{r7}
 8016186:	b083      	sub	sp, #12
 8016188:	af00      	add	r7, sp, #0
 801618a:	4603      	mov	r3, r0
 801618c:	6039      	str	r1, [r7, #0]
 801618e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	2212      	movs	r2, #18
 8016194:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016196:	4b03      	ldr	r3, [pc, #12]	; (80161a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016198:	4618      	mov	r0, r3
 801619a:	370c      	adds	r7, #12
 801619c:	46bd      	mov	sp, r7
 801619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a2:	4770      	bx	lr
 80161a4:	240000cc 	.word	0x240000cc

080161a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161a8:	b480      	push	{r7}
 80161aa:	b083      	sub	sp, #12
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	4603      	mov	r3, r0
 80161b0:	6039      	str	r1, [r7, #0]
 80161b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	2204      	movs	r2, #4
 80161b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80161ba:	4b03      	ldr	r3, [pc, #12]	; (80161c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80161bc:	4618      	mov	r0, r3
 80161be:	370c      	adds	r7, #12
 80161c0:	46bd      	mov	sp, r7
 80161c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c6:	4770      	bx	lr
 80161c8:	240000e0 	.word	0x240000e0

080161cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	4603      	mov	r3, r0
 80161d4:	6039      	str	r1, [r7, #0]
 80161d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d105      	bne.n	80161ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80161de:	683a      	ldr	r2, [r7, #0]
 80161e0:	4907      	ldr	r1, [pc, #28]	; (8016200 <USBD_HS_ProductStrDescriptor+0x34>)
 80161e2:	4808      	ldr	r0, [pc, #32]	; (8016204 <USBD_HS_ProductStrDescriptor+0x38>)
 80161e4:	f7ff fd9a 	bl	8015d1c <USBD_GetString>
 80161e8:	e004      	b.n	80161f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80161ea:	683a      	ldr	r2, [r7, #0]
 80161ec:	4904      	ldr	r1, [pc, #16]	; (8016200 <USBD_HS_ProductStrDescriptor+0x34>)
 80161ee:	4805      	ldr	r0, [pc, #20]	; (8016204 <USBD_HS_ProductStrDescriptor+0x38>)
 80161f0:	f7ff fd94 	bl	8015d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80161f4:	4b02      	ldr	r3, [pc, #8]	; (8016200 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	24002794 	.word	0x24002794
 8016204:	080173e8 	.word	0x080173e8

08016208 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	4603      	mov	r3, r0
 8016210:	6039      	str	r1, [r7, #0]
 8016212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016214:	683a      	ldr	r2, [r7, #0]
 8016216:	4904      	ldr	r1, [pc, #16]	; (8016228 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016218:	4804      	ldr	r0, [pc, #16]	; (801622c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801621a:	f7ff fd7f 	bl	8015d1c <USBD_GetString>
  return USBD_StrDesc;
 801621e:	4b02      	ldr	r3, [pc, #8]	; (8016228 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016220:	4618      	mov	r0, r3
 8016222:	3708      	adds	r7, #8
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}
 8016228:	24002794 	.word	0x24002794
 801622c:	08017404 	.word	0x08017404

08016230 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	4603      	mov	r3, r0
 8016238:	6039      	str	r1, [r7, #0]
 801623a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	221a      	movs	r2, #26
 8016240:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016242:	f000 f843 	bl	80162cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016246:	4b02      	ldr	r3, [pc, #8]	; (8016250 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016248:	4618      	mov	r0, r3
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	240000e4 	.word	0x240000e4

08016254 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	4603      	mov	r3, r0
 801625c:	6039      	str	r1, [r7, #0]
 801625e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016260:	79fb      	ldrb	r3, [r7, #7]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d105      	bne.n	8016272 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016266:	683a      	ldr	r2, [r7, #0]
 8016268:	4907      	ldr	r1, [pc, #28]	; (8016288 <USBD_HS_ConfigStrDescriptor+0x34>)
 801626a:	4808      	ldr	r0, [pc, #32]	; (801628c <USBD_HS_ConfigStrDescriptor+0x38>)
 801626c:	f7ff fd56 	bl	8015d1c <USBD_GetString>
 8016270:	e004      	b.n	801627c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016272:	683a      	ldr	r2, [r7, #0]
 8016274:	4904      	ldr	r1, [pc, #16]	; (8016288 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016276:	4805      	ldr	r0, [pc, #20]	; (801628c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016278:	f7ff fd50 	bl	8015d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 801627c:	4b02      	ldr	r3, [pc, #8]	; (8016288 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801627e:	4618      	mov	r0, r3
 8016280:	3708      	adds	r7, #8
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	24002794 	.word	0x24002794
 801628c:	08017408 	.word	0x08017408

08016290 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	4603      	mov	r3, r0
 8016298:	6039      	str	r1, [r7, #0]
 801629a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801629c:	79fb      	ldrb	r3, [r7, #7]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d105      	bne.n	80162ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80162a2:	683a      	ldr	r2, [r7, #0]
 80162a4:	4907      	ldr	r1, [pc, #28]	; (80162c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80162a6:	4808      	ldr	r0, [pc, #32]	; (80162c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80162a8:	f7ff fd38 	bl	8015d1c <USBD_GetString>
 80162ac:	e004      	b.n	80162b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80162ae:	683a      	ldr	r2, [r7, #0]
 80162b0:	4904      	ldr	r1, [pc, #16]	; (80162c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80162b2:	4805      	ldr	r0, [pc, #20]	; (80162c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80162b4:	f7ff fd32 	bl	8015d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80162b8:	4b02      	ldr	r3, [pc, #8]	; (80162c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3708      	adds	r7, #8
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	24002794 	.word	0x24002794
 80162c8:	08017414 	.word	0x08017414

080162cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80162d2:	4b0f      	ldr	r3, [pc, #60]	; (8016310 <Get_SerialNum+0x44>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80162d8:	4b0e      	ldr	r3, [pc, #56]	; (8016314 <Get_SerialNum+0x48>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80162de:	4b0e      	ldr	r3, [pc, #56]	; (8016318 <Get_SerialNum+0x4c>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80162e4:	68fa      	ldr	r2, [r7, #12]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	4413      	add	r3, r2
 80162ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d009      	beq.n	8016306 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80162f2:	2208      	movs	r2, #8
 80162f4:	4909      	ldr	r1, [pc, #36]	; (801631c <Get_SerialNum+0x50>)
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f000 f814 	bl	8016324 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80162fc:	2204      	movs	r2, #4
 80162fe:	4908      	ldr	r1, [pc, #32]	; (8016320 <Get_SerialNum+0x54>)
 8016300:	68b8      	ldr	r0, [r7, #8]
 8016302:	f000 f80f 	bl	8016324 <IntToUnicode>
  }
}
 8016306:	bf00      	nop
 8016308:	3710      	adds	r7, #16
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}
 801630e:	bf00      	nop
 8016310:	1ff1e800 	.word	0x1ff1e800
 8016314:	1ff1e804 	.word	0x1ff1e804
 8016318:	1ff1e808 	.word	0x1ff1e808
 801631c:	240000e6 	.word	0x240000e6
 8016320:	240000f6 	.word	0x240000f6

08016324 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016324:	b480      	push	{r7}
 8016326:	b087      	sub	sp, #28
 8016328:	af00      	add	r7, sp, #0
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	4613      	mov	r3, r2
 8016330:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016336:	2300      	movs	r3, #0
 8016338:	75fb      	strb	r3, [r7, #23]
 801633a:	e027      	b.n	801638c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	0f1b      	lsrs	r3, r3, #28
 8016340:	2b09      	cmp	r3, #9
 8016342:	d80b      	bhi.n	801635c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	0f1b      	lsrs	r3, r3, #28
 8016348:	b2da      	uxtb	r2, r3
 801634a:	7dfb      	ldrb	r3, [r7, #23]
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4619      	mov	r1, r3
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	440b      	add	r3, r1
 8016354:	3230      	adds	r2, #48	; 0x30
 8016356:	b2d2      	uxtb	r2, r2
 8016358:	701a      	strb	r2, [r3, #0]
 801635a:	e00a      	b.n	8016372 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	0f1b      	lsrs	r3, r3, #28
 8016360:	b2da      	uxtb	r2, r3
 8016362:	7dfb      	ldrb	r3, [r7, #23]
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	4619      	mov	r1, r3
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	440b      	add	r3, r1
 801636c:	3237      	adds	r2, #55	; 0x37
 801636e:	b2d2      	uxtb	r2, r2
 8016370:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	011b      	lsls	r3, r3, #4
 8016376:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016378:	7dfb      	ldrb	r3, [r7, #23]
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	3301      	adds	r3, #1
 801637e:	68ba      	ldr	r2, [r7, #8]
 8016380:	4413      	add	r3, r2
 8016382:	2200      	movs	r2, #0
 8016384:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016386:	7dfb      	ldrb	r3, [r7, #23]
 8016388:	3301      	adds	r3, #1
 801638a:	75fb      	strb	r3, [r7, #23]
 801638c:	7dfa      	ldrb	r2, [r7, #23]
 801638e:	79fb      	ldrb	r3, [r7, #7]
 8016390:	429a      	cmp	r2, r3
 8016392:	d3d3      	bcc.n	801633c <IntToUnicode+0x18>
  }
}
 8016394:	bf00      	nop
 8016396:	bf00      	nop
 8016398:	371c      	adds	r7, #28
 801639a:	46bd      	mov	sp, r7
 801639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a0:	4770      	bx	lr
	...

080163a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b0b2      	sub	sp, #200	; 0xc8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80163ac:	f107 0310 	add.w	r3, r7, #16
 80163b0:	22b8      	movs	r2, #184	; 0xb8
 80163b2:	2100      	movs	r1, #0
 80163b4:	4618      	mov	r0, r3
 80163b6:	f000 fb39 	bl	8016a2c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4a1a      	ldr	r2, [pc, #104]	; (8016428 <HAL_PCD_MspInit+0x84>)
 80163c0:	4293      	cmp	r3, r2
 80163c2:	d12c      	bne.n	801641e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80163c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80163c8:	f04f 0300 	mov.w	r3, #0
 80163cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80163d0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80163d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80163d8:	f107 0310 	add.w	r3, r7, #16
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f3 ff41 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80163e8:	f7ec f80a 	bl	8002400 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80163ec:	f7f2 ff5a 	bl	80092a4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80163f0:	4b0e      	ldr	r3, [pc, #56]	; (801642c <HAL_PCD_MspInit+0x88>)
 80163f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80163f6:	4a0d      	ldr	r2, [pc, #52]	; (801642c <HAL_PCD_MspInit+0x88>)
 80163f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80163fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016400:	4b0a      	ldr	r3, [pc, #40]	; (801642c <HAL_PCD_MspInit+0x88>)
 8016402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801640a:	60fb      	str	r3, [r7, #12]
 801640c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801640e:	2200      	movs	r2, #0
 8016410:	2100      	movs	r1, #0
 8016412:	204d      	movs	r0, #77	; 0x4d
 8016414:	f7ee fce3 	bl	8004dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016418:	204d      	movs	r0, #77	; 0x4d
 801641a:	f7ee fcfa 	bl	8004e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801641e:	bf00      	nop
 8016420:	37c8      	adds	r7, #200	; 0xc8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	40040000 	.word	0x40040000
 801642c:	58024400 	.word	0x58024400

08016430 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016444:	4619      	mov	r1, r3
 8016446:	4610      	mov	r0, r2
 8016448:	f7fe fb03 	bl	8014a52 <USBD_LL_SetupStage>
}
 801644c:	bf00      	nop
 801644e:	3708      	adds	r7, #8
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	460b      	mov	r3, r1
 801645e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016466:	78fa      	ldrb	r2, [r7, #3]
 8016468:	6879      	ldr	r1, [r7, #4]
 801646a:	4613      	mov	r3, r2
 801646c:	00db      	lsls	r3, r3, #3
 801646e:	4413      	add	r3, r2
 8016470:	009b      	lsls	r3, r3, #2
 8016472:	440b      	add	r3, r1
 8016474:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016478:	681a      	ldr	r2, [r3, #0]
 801647a:	78fb      	ldrb	r3, [r7, #3]
 801647c:	4619      	mov	r1, r3
 801647e:	f7fe fb3d 	bl	8014afc <USBD_LL_DataOutStage>
}
 8016482:	bf00      	nop
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801648a:	b580      	push	{r7, lr}
 801648c:	b082      	sub	sp, #8
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
 8016492:	460b      	mov	r3, r1
 8016494:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801649c:	78fa      	ldrb	r2, [r7, #3]
 801649e:	6879      	ldr	r1, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	00db      	lsls	r3, r3, #3
 80164a4:	4413      	add	r3, r2
 80164a6:	009b      	lsls	r3, r3, #2
 80164a8:	440b      	add	r3, r1
 80164aa:	3348      	adds	r3, #72	; 0x48
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	78fb      	ldrb	r3, [r7, #3]
 80164b0:	4619      	mov	r1, r3
 80164b2:	f7fe fbd6 	bl	8014c62 <USBD_LL_DataInStage>
}
 80164b6:	bf00      	nop
 80164b8:	3708      	adds	r7, #8
 80164ba:	46bd      	mov	sp, r7
 80164bc:	bd80      	pop	{r7, pc}

080164be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164be:	b580      	push	{r7, lr}
 80164c0:	b082      	sub	sp, #8
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7fe fd10 	bl	8014ef2 <USBD_LL_SOF>
}
 80164d2:	bf00      	nop
 80164d4:	3708      	adds	r7, #8
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b084      	sub	sp, #16
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80164e2:	2301      	movs	r3, #1
 80164e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	691b      	ldr	r3, [r3, #16]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d102      	bne.n	80164f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80164ee:	2300      	movs	r3, #0
 80164f0:	73fb      	strb	r3, [r7, #15]
 80164f2:	e008      	b.n	8016506 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	691b      	ldr	r3, [r3, #16]
 80164f8:	2b02      	cmp	r3, #2
 80164fa:	d102      	bne.n	8016502 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80164fc:	2301      	movs	r3, #1
 80164fe:	73fb      	strb	r3, [r7, #15]
 8016500:	e001      	b.n	8016506 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016502:	f7eb ff7d 	bl	8002400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801650c:	7bfa      	ldrb	r2, [r7, #15]
 801650e:	4611      	mov	r1, r2
 8016510:	4618      	mov	r0, r3
 8016512:	f7fe fcaa 	bl	8014e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801651c:	4618      	mov	r0, r3
 801651e:	f7fe fc52 	bl	8014dc6 <USBD_LL_Reset>
}
 8016522:	bf00      	nop
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
	...

0801652c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801653a:	4618      	mov	r0, r3
 801653c:	f7fe fca5 	bl	8014e8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	6812      	ldr	r2, [r2, #0]
 801654e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016552:	f043 0301 	orr.w	r3, r3, #1
 8016556:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6a1b      	ldr	r3, [r3, #32]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d005      	beq.n	801656c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016560:	4b04      	ldr	r3, [pc, #16]	; (8016574 <HAL_PCD_SuspendCallback+0x48>)
 8016562:	691b      	ldr	r3, [r3, #16]
 8016564:	4a03      	ldr	r2, [pc, #12]	; (8016574 <HAL_PCD_SuspendCallback+0x48>)
 8016566:	f043 0306 	orr.w	r3, r3, #6
 801656a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801656c:	bf00      	nop
 801656e:	3708      	adds	r7, #8
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	e000ed00 	.word	0xe000ed00

08016578 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b082      	sub	sp, #8
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016586:	4618      	mov	r0, r3
 8016588:	f7fe fc9b 	bl	8014ec2 <USBD_LL_Resume>
}
 801658c:	bf00      	nop
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	460b      	mov	r3, r1
 801659e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165a6:	78fa      	ldrb	r2, [r7, #3]
 80165a8:	4611      	mov	r1, r2
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7fe fcf3 	bl	8014f96 <USBD_LL_IsoOUTIncomplete>
}
 80165b0:	bf00      	nop
 80165b2:	3708      	adds	r7, #8
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	460b      	mov	r3, r1
 80165c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165ca:	78fa      	ldrb	r2, [r7, #3]
 80165cc:	4611      	mov	r1, r2
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7fe fcaf 	bl	8014f32 <USBD_LL_IsoINIncomplete>
}
 80165d4:	bf00      	nop
 80165d6:	3708      	adds	r7, #8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7fe fd05 	bl	8014ffa <USBD_LL_DevConnected>
}
 80165f0:	bf00      	nop
 80165f2:	3708      	adds	r7, #8
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}

080165f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b082      	sub	sp, #8
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016606:	4618      	mov	r0, r3
 8016608:	f7fe fd02 	bl	8015010 <USBD_LL_DevDisconnected>
}
 801660c:	bf00      	nop
 801660e:	3708      	adds	r7, #8
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}

08016614 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	2b01      	cmp	r3, #1
 8016622:	d140      	bne.n	80166a6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016624:	4a22      	ldr	r2, [pc, #136]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	4a20      	ldr	r2, [pc, #128]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016630:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016634:	4b1e      	ldr	r3, [pc, #120]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016636:	4a1f      	ldr	r2, [pc, #124]	; (80166b4 <USBD_LL_Init+0xa0>)
 8016638:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801663a:	4b1d      	ldr	r3, [pc, #116]	; (80166b0 <USBD_LL_Init+0x9c>)
 801663c:	2209      	movs	r2, #9
 801663e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016640:	4b1b      	ldr	r3, [pc, #108]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016642:	2202      	movs	r2, #2
 8016644:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016646:	4b1a      	ldr	r3, [pc, #104]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016648:	2200      	movs	r2, #0
 801664a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801664c:	4b18      	ldr	r3, [pc, #96]	; (80166b0 <USBD_LL_Init+0x9c>)
 801664e:	2202      	movs	r2, #2
 8016650:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016652:	4b17      	ldr	r3, [pc, #92]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016654:	2200      	movs	r2, #0
 8016656:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016658:	4b15      	ldr	r3, [pc, #84]	; (80166b0 <USBD_LL_Init+0x9c>)
 801665a:	2200      	movs	r2, #0
 801665c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801665e:	4b14      	ldr	r3, [pc, #80]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016660:	2200      	movs	r2, #0
 8016662:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016664:	4b12      	ldr	r3, [pc, #72]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016666:	2200      	movs	r2, #0
 8016668:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801666a:	4b11      	ldr	r3, [pc, #68]	; (80166b0 <USBD_LL_Init+0x9c>)
 801666c:	2200      	movs	r2, #0
 801666e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016670:	4b0f      	ldr	r3, [pc, #60]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016672:	2200      	movs	r2, #0
 8016674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016676:	480e      	ldr	r0, [pc, #56]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016678:	f7f1 fb21 	bl	8007cbe <HAL_PCD_Init>
 801667c:	4603      	mov	r3, r0
 801667e:	2b00      	cmp	r3, #0
 8016680:	d001      	beq.n	8016686 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016682:	f7eb febd 	bl	8002400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016686:	f44f 7100 	mov.w	r1, #512	; 0x200
 801668a:	4809      	ldr	r0, [pc, #36]	; (80166b0 <USBD_LL_Init+0x9c>)
 801668c:	f7f2 fd8f 	bl	80091ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016690:	2280      	movs	r2, #128	; 0x80
 8016692:	2100      	movs	r1, #0
 8016694:	4806      	ldr	r0, [pc, #24]	; (80166b0 <USBD_LL_Init+0x9c>)
 8016696:	f7f2 fd43 	bl	8009120 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801669a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801669e:	2101      	movs	r1, #1
 80166a0:	4803      	ldr	r0, [pc, #12]	; (80166b0 <USBD_LL_Init+0x9c>)
 80166a2:	f7f2 fd3d 	bl	8009120 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	24002994 	.word	0x24002994
 80166b4:	40040000 	.word	0x40040000

080166b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166c0:	2300      	movs	r3, #0
 80166c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166c4:	2300      	movs	r3, #0
 80166c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f1 fc19 	bl	8007f06 <HAL_PCD_Start>
 80166d4:	4603      	mov	r3, r0
 80166d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166d8:	7bfb      	ldrb	r3, [r7, #15]
 80166da:	4618      	mov	r0, r3
 80166dc:	f000 f942 	bl	8016964 <USBD_Get_USB_Status>
 80166e0:	4603      	mov	r3, r0
 80166e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3710      	adds	r7, #16
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80166ee:	b580      	push	{r7, lr}
 80166f0:	b084      	sub	sp, #16
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
 80166f6:	4608      	mov	r0, r1
 80166f8:	4611      	mov	r1, r2
 80166fa:	461a      	mov	r2, r3
 80166fc:	4603      	mov	r3, r0
 80166fe:	70fb      	strb	r3, [r7, #3]
 8016700:	460b      	mov	r3, r1
 8016702:	70bb      	strb	r3, [r7, #2]
 8016704:	4613      	mov	r3, r2
 8016706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016708:	2300      	movs	r3, #0
 801670a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801670c:	2300      	movs	r3, #0
 801670e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016716:	78bb      	ldrb	r3, [r7, #2]
 8016718:	883a      	ldrh	r2, [r7, #0]
 801671a:	78f9      	ldrb	r1, [r7, #3]
 801671c:	f7f2 f919 	bl	8008952 <HAL_PCD_EP_Open>
 8016720:	4603      	mov	r3, r0
 8016722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016724:	7bfb      	ldrb	r3, [r7, #15]
 8016726:	4618      	mov	r0, r3
 8016728:	f000 f91c 	bl	8016964 <USBD_Get_USB_Status>
 801672c:	4603      	mov	r3, r0
 801672e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016730:	7bbb      	ldrb	r3, [r7, #14]
}
 8016732:	4618      	mov	r0, r3
 8016734:	3710      	adds	r7, #16
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801673a:	b580      	push	{r7, lr}
 801673c:	b084      	sub	sp, #16
 801673e:	af00      	add	r7, sp, #0
 8016740:	6078      	str	r0, [r7, #4]
 8016742:	460b      	mov	r3, r1
 8016744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016746:	2300      	movs	r3, #0
 8016748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801674a:	2300      	movs	r3, #0
 801674c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016754:	78fa      	ldrb	r2, [r7, #3]
 8016756:	4611      	mov	r1, r2
 8016758:	4618      	mov	r0, r3
 801675a:	f7f2 f962 	bl	8008a22 <HAL_PCD_EP_Close>
 801675e:	4603      	mov	r3, r0
 8016760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016762:	7bfb      	ldrb	r3, [r7, #15]
 8016764:	4618      	mov	r0, r3
 8016766:	f000 f8fd 	bl	8016964 <USBD_Get_USB_Status>
 801676a:	4603      	mov	r3, r0
 801676c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801676e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016770:	4618      	mov	r0, r3
 8016772:	3710      	adds	r7, #16
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	460b      	mov	r3, r1
 8016782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016784:	2300      	movs	r3, #0
 8016786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016788:	2300      	movs	r3, #0
 801678a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016792:	78fa      	ldrb	r2, [r7, #3]
 8016794:	4611      	mov	r1, r2
 8016796:	4618      	mov	r0, r3
 8016798:	f7f2 fa1c 	bl	8008bd4 <HAL_PCD_EP_SetStall>
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 f8de 	bl	8016964 <USBD_Get_USB_Status>
 80167a8:	4603      	mov	r3, r0
 80167aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b084      	sub	sp, #16
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	460b      	mov	r3, r1
 80167c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167c2:	2300      	movs	r3, #0
 80167c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167c6:	2300      	movs	r3, #0
 80167c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167d0:	78fa      	ldrb	r2, [r7, #3]
 80167d2:	4611      	mov	r1, r2
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7f2 fa61 	bl	8008c9c <HAL_PCD_EP_ClrStall>
 80167da:	4603      	mov	r3, r0
 80167dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167de:	7bfb      	ldrb	r3, [r7, #15]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f000 f8bf 	bl	8016964 <USBD_Get_USB_Status>
 80167e6:	4603      	mov	r3, r0
 80167e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3710      	adds	r7, #16
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	460b      	mov	r3, r1
 80167fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801680c:	2b00      	cmp	r3, #0
 801680e:	da0b      	bge.n	8016828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016810:	78fb      	ldrb	r3, [r7, #3]
 8016812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016816:	68f9      	ldr	r1, [r7, #12]
 8016818:	4613      	mov	r3, r2
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	4413      	add	r3, r2
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	440b      	add	r3, r1
 8016822:	333e      	adds	r3, #62	; 0x3e
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	e00b      	b.n	8016840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016828:	78fb      	ldrb	r3, [r7, #3]
 801682a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801682e:	68f9      	ldr	r1, [r7, #12]
 8016830:	4613      	mov	r3, r2
 8016832:	00db      	lsls	r3, r3, #3
 8016834:	4413      	add	r3, r2
 8016836:	009b      	lsls	r3, r3, #2
 8016838:	440b      	add	r3, r1
 801683a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801683e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016840:	4618      	mov	r0, r3
 8016842:	3714      	adds	r7, #20
 8016844:	46bd      	mov	sp, r7
 8016846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684a:	4770      	bx	lr

0801684c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b084      	sub	sp, #16
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	460b      	mov	r3, r1
 8016856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016858:	2300      	movs	r3, #0
 801685a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801685c:	2300      	movs	r3, #0
 801685e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016866:	78fa      	ldrb	r2, [r7, #3]
 8016868:	4611      	mov	r1, r2
 801686a:	4618      	mov	r0, r3
 801686c:	f7f2 f84c 	bl	8008908 <HAL_PCD_SetAddress>
 8016870:	4603      	mov	r3, r0
 8016872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016874:	7bfb      	ldrb	r3, [r7, #15]
 8016876:	4618      	mov	r0, r3
 8016878:	f000 f874 	bl	8016964 <USBD_Get_USB_Status>
 801687c:	4603      	mov	r3, r0
 801687e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016880:	7bbb      	ldrb	r3, [r7, #14]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b086      	sub	sp, #24
 801688e:	af00      	add	r7, sp, #0
 8016890:	60f8      	str	r0, [r7, #12]
 8016892:	607a      	str	r2, [r7, #4]
 8016894:	603b      	str	r3, [r7, #0]
 8016896:	460b      	mov	r3, r1
 8016898:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801689a:	2300      	movs	r3, #0
 801689c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801689e:	2300      	movs	r3, #0
 80168a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80168a8:	7af9      	ldrb	r1, [r7, #11]
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	f7f2 f956 	bl	8008b5e <HAL_PCD_EP_Transmit>
 80168b2:	4603      	mov	r3, r0
 80168b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f000 f853 	bl	8016964 <USBD_Get_USB_Status>
 80168be:	4603      	mov	r3, r0
 80168c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80168c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3718      	adds	r7, #24
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}

080168cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	60f8      	str	r0, [r7, #12]
 80168d4:	607a      	str	r2, [r7, #4]
 80168d6:	603b      	str	r3, [r7, #0]
 80168d8:	460b      	mov	r3, r1
 80168da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168dc:	2300      	movs	r3, #0
 80168de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168e0:	2300      	movs	r3, #0
 80168e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80168ea:	7af9      	ldrb	r1, [r7, #11]
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	f7f2 f8e1 	bl	8008ab6 <HAL_PCD_EP_Receive>
 80168f4:	4603      	mov	r3, r0
 80168f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168f8:	7dfb      	ldrb	r3, [r7, #23]
 80168fa:	4618      	mov	r0, r3
 80168fc:	f000 f832 	bl	8016964 <USBD_Get_USB_Status>
 8016900:	4603      	mov	r3, r0
 8016902:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016904:	7dbb      	ldrb	r3, [r7, #22]
}
 8016906:	4618      	mov	r0, r3
 8016908:	3718      	adds	r7, #24
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b082      	sub	sp, #8
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
 8016916:	460b      	mov	r3, r1
 8016918:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016920:	78fa      	ldrb	r2, [r7, #3]
 8016922:	4611      	mov	r1, r2
 8016924:	4618      	mov	r0, r3
 8016926:	f7f2 f902 	bl	8008b2e <HAL_PCD_EP_GetRxCount>
 801692a:	4603      	mov	r3, r0
}
 801692c:	4618      	mov	r0, r3
 801692e:	3708      	adds	r7, #8
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}

08016934 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801693c:	4b03      	ldr	r3, [pc, #12]	; (801694c <USBD_static_malloc+0x18>)
}
 801693e:	4618      	mov	r0, r3
 8016940:	370c      	adds	r7, #12
 8016942:	46bd      	mov	sp, r7
 8016944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016948:	4770      	bx	lr
 801694a:	bf00      	nop
 801694c:	24002ea0 	.word	0x24002ea0

08016950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016950:	b480      	push	{r7}
 8016952:	b083      	sub	sp, #12
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016958:	bf00      	nop
 801695a:	370c      	adds	r7, #12
 801695c:	46bd      	mov	sp, r7
 801695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016962:	4770      	bx	lr

08016964 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016964:	b480      	push	{r7}
 8016966:	b085      	sub	sp, #20
 8016968:	af00      	add	r7, sp, #0
 801696a:	4603      	mov	r3, r0
 801696c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801696e:	2300      	movs	r3, #0
 8016970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016972:	79fb      	ldrb	r3, [r7, #7]
 8016974:	2b03      	cmp	r3, #3
 8016976:	d817      	bhi.n	80169a8 <USBD_Get_USB_Status+0x44>
 8016978:	a201      	add	r2, pc, #4	; (adr r2, 8016980 <USBD_Get_USB_Status+0x1c>)
 801697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801697e:	bf00      	nop
 8016980:	08016991 	.word	0x08016991
 8016984:	08016997 	.word	0x08016997
 8016988:	0801699d 	.word	0x0801699d
 801698c:	080169a3 	.word	0x080169a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016990:	2300      	movs	r3, #0
 8016992:	73fb      	strb	r3, [r7, #15]
    break;
 8016994:	e00b      	b.n	80169ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016996:	2303      	movs	r3, #3
 8016998:	73fb      	strb	r3, [r7, #15]
    break;
 801699a:	e008      	b.n	80169ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801699c:	2301      	movs	r3, #1
 801699e:	73fb      	strb	r3, [r7, #15]
    break;
 80169a0:	e005      	b.n	80169ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80169a2:	2303      	movs	r3, #3
 80169a4:	73fb      	strb	r3, [r7, #15]
    break;
 80169a6:	e002      	b.n	80169ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80169a8:	2303      	movs	r3, #3
 80169aa:	73fb      	strb	r3, [r7, #15]
    break;
 80169ac:	bf00      	nop
  }
  return usb_status;
 80169ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3714      	adds	r7, #20
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr

080169bc <__errno>:
 80169bc:	4b01      	ldr	r3, [pc, #4]	; (80169c4 <__errno+0x8>)
 80169be:	6818      	ldr	r0, [r3, #0]
 80169c0:	4770      	bx	lr
 80169c2:	bf00      	nop
 80169c4:	24000100 	.word	0x24000100

080169c8 <__libc_init_array>:
 80169c8:	b570      	push	{r4, r5, r6, lr}
 80169ca:	4d0d      	ldr	r5, [pc, #52]	; (8016a00 <__libc_init_array+0x38>)
 80169cc:	4c0d      	ldr	r4, [pc, #52]	; (8016a04 <__libc_init_array+0x3c>)
 80169ce:	1b64      	subs	r4, r4, r5
 80169d0:	10a4      	asrs	r4, r4, #2
 80169d2:	2600      	movs	r6, #0
 80169d4:	42a6      	cmp	r6, r4
 80169d6:	d109      	bne.n	80169ec <__libc_init_array+0x24>
 80169d8:	4d0b      	ldr	r5, [pc, #44]	; (8016a08 <__libc_init_array+0x40>)
 80169da:	4c0c      	ldr	r4, [pc, #48]	; (8016a0c <__libc_init_array+0x44>)
 80169dc:	f000 fc8e 	bl	80172fc <_init>
 80169e0:	1b64      	subs	r4, r4, r5
 80169e2:	10a4      	asrs	r4, r4, #2
 80169e4:	2600      	movs	r6, #0
 80169e6:	42a6      	cmp	r6, r4
 80169e8:	d105      	bne.n	80169f6 <__libc_init_array+0x2e>
 80169ea:	bd70      	pop	{r4, r5, r6, pc}
 80169ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80169f0:	4798      	blx	r3
 80169f2:	3601      	adds	r6, #1
 80169f4:	e7ee      	b.n	80169d4 <__libc_init_array+0xc>
 80169f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169fa:	4798      	blx	r3
 80169fc:	3601      	adds	r6, #1
 80169fe:	e7f2      	b.n	80169e6 <__libc_init_array+0x1e>
 8016a00:	08017524 	.word	0x08017524
 8016a04:	08017524 	.word	0x08017524
 8016a08:	08017524 	.word	0x08017524
 8016a0c:	08017528 	.word	0x08017528

08016a10 <memcpy>:
 8016a10:	440a      	add	r2, r1
 8016a12:	4291      	cmp	r1, r2
 8016a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a18:	d100      	bne.n	8016a1c <memcpy+0xc>
 8016a1a:	4770      	bx	lr
 8016a1c:	b510      	push	{r4, lr}
 8016a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a26:	4291      	cmp	r1, r2
 8016a28:	d1f9      	bne.n	8016a1e <memcpy+0xe>
 8016a2a:	bd10      	pop	{r4, pc}

08016a2c <memset>:
 8016a2c:	4402      	add	r2, r0
 8016a2e:	4603      	mov	r3, r0
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d100      	bne.n	8016a36 <memset+0xa>
 8016a34:	4770      	bx	lr
 8016a36:	f803 1b01 	strb.w	r1, [r3], #1
 8016a3a:	e7f9      	b.n	8016a30 <memset+0x4>

08016a3c <siprintf>:
 8016a3c:	b40e      	push	{r1, r2, r3}
 8016a3e:	b500      	push	{lr}
 8016a40:	b09c      	sub	sp, #112	; 0x70
 8016a42:	ab1d      	add	r3, sp, #116	; 0x74
 8016a44:	9002      	str	r0, [sp, #8]
 8016a46:	9006      	str	r0, [sp, #24]
 8016a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a4c:	4809      	ldr	r0, [pc, #36]	; (8016a74 <siprintf+0x38>)
 8016a4e:	9107      	str	r1, [sp, #28]
 8016a50:	9104      	str	r1, [sp, #16]
 8016a52:	4909      	ldr	r1, [pc, #36]	; (8016a78 <siprintf+0x3c>)
 8016a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a58:	9105      	str	r1, [sp, #20]
 8016a5a:	6800      	ldr	r0, [r0, #0]
 8016a5c:	9301      	str	r3, [sp, #4]
 8016a5e:	a902      	add	r1, sp, #8
 8016a60:	f000 f868 	bl	8016b34 <_svfiprintf_r>
 8016a64:	9b02      	ldr	r3, [sp, #8]
 8016a66:	2200      	movs	r2, #0
 8016a68:	701a      	strb	r2, [r3, #0]
 8016a6a:	b01c      	add	sp, #112	; 0x70
 8016a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a70:	b003      	add	sp, #12
 8016a72:	4770      	bx	lr
 8016a74:	24000100 	.word	0x24000100
 8016a78:	ffff0208 	.word	0xffff0208

08016a7c <__ssputs_r>:
 8016a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a80:	688e      	ldr	r6, [r1, #8]
 8016a82:	429e      	cmp	r6, r3
 8016a84:	4682      	mov	sl, r0
 8016a86:	460c      	mov	r4, r1
 8016a88:	4690      	mov	r8, r2
 8016a8a:	461f      	mov	r7, r3
 8016a8c:	d838      	bhi.n	8016b00 <__ssputs_r+0x84>
 8016a8e:	898a      	ldrh	r2, [r1, #12]
 8016a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a94:	d032      	beq.n	8016afc <__ssputs_r+0x80>
 8016a96:	6825      	ldr	r5, [r4, #0]
 8016a98:	6909      	ldr	r1, [r1, #16]
 8016a9a:	eba5 0901 	sub.w	r9, r5, r1
 8016a9e:	6965      	ldr	r5, [r4, #20]
 8016aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	444b      	add	r3, r9
 8016aac:	106d      	asrs	r5, r5, #1
 8016aae:	429d      	cmp	r5, r3
 8016ab0:	bf38      	it	cc
 8016ab2:	461d      	movcc	r5, r3
 8016ab4:	0553      	lsls	r3, r2, #21
 8016ab6:	d531      	bpl.n	8016b1c <__ssputs_r+0xa0>
 8016ab8:	4629      	mov	r1, r5
 8016aba:	f000 fb55 	bl	8017168 <_malloc_r>
 8016abe:	4606      	mov	r6, r0
 8016ac0:	b950      	cbnz	r0, 8016ad8 <__ssputs_r+0x5c>
 8016ac2:	230c      	movs	r3, #12
 8016ac4:	f8ca 3000 	str.w	r3, [sl]
 8016ac8:	89a3      	ldrh	r3, [r4, #12]
 8016aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ace:	81a3      	strh	r3, [r4, #12]
 8016ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad8:	6921      	ldr	r1, [r4, #16]
 8016ada:	464a      	mov	r2, r9
 8016adc:	f7ff ff98 	bl	8016a10 <memcpy>
 8016ae0:	89a3      	ldrh	r3, [r4, #12]
 8016ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aea:	81a3      	strh	r3, [r4, #12]
 8016aec:	6126      	str	r6, [r4, #16]
 8016aee:	6165      	str	r5, [r4, #20]
 8016af0:	444e      	add	r6, r9
 8016af2:	eba5 0509 	sub.w	r5, r5, r9
 8016af6:	6026      	str	r6, [r4, #0]
 8016af8:	60a5      	str	r5, [r4, #8]
 8016afa:	463e      	mov	r6, r7
 8016afc:	42be      	cmp	r6, r7
 8016afe:	d900      	bls.n	8016b02 <__ssputs_r+0x86>
 8016b00:	463e      	mov	r6, r7
 8016b02:	6820      	ldr	r0, [r4, #0]
 8016b04:	4632      	mov	r2, r6
 8016b06:	4641      	mov	r1, r8
 8016b08:	f000 faa8 	bl	801705c <memmove>
 8016b0c:	68a3      	ldr	r3, [r4, #8]
 8016b0e:	1b9b      	subs	r3, r3, r6
 8016b10:	60a3      	str	r3, [r4, #8]
 8016b12:	6823      	ldr	r3, [r4, #0]
 8016b14:	4433      	add	r3, r6
 8016b16:	6023      	str	r3, [r4, #0]
 8016b18:	2000      	movs	r0, #0
 8016b1a:	e7db      	b.n	8016ad4 <__ssputs_r+0x58>
 8016b1c:	462a      	mov	r2, r5
 8016b1e:	f000 fb97 	bl	8017250 <_realloc_r>
 8016b22:	4606      	mov	r6, r0
 8016b24:	2800      	cmp	r0, #0
 8016b26:	d1e1      	bne.n	8016aec <__ssputs_r+0x70>
 8016b28:	6921      	ldr	r1, [r4, #16]
 8016b2a:	4650      	mov	r0, sl
 8016b2c:	f000 fab0 	bl	8017090 <_free_r>
 8016b30:	e7c7      	b.n	8016ac2 <__ssputs_r+0x46>
	...

08016b34 <_svfiprintf_r>:
 8016b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b38:	4698      	mov	r8, r3
 8016b3a:	898b      	ldrh	r3, [r1, #12]
 8016b3c:	061b      	lsls	r3, r3, #24
 8016b3e:	b09d      	sub	sp, #116	; 0x74
 8016b40:	4607      	mov	r7, r0
 8016b42:	460d      	mov	r5, r1
 8016b44:	4614      	mov	r4, r2
 8016b46:	d50e      	bpl.n	8016b66 <_svfiprintf_r+0x32>
 8016b48:	690b      	ldr	r3, [r1, #16]
 8016b4a:	b963      	cbnz	r3, 8016b66 <_svfiprintf_r+0x32>
 8016b4c:	2140      	movs	r1, #64	; 0x40
 8016b4e:	f000 fb0b 	bl	8017168 <_malloc_r>
 8016b52:	6028      	str	r0, [r5, #0]
 8016b54:	6128      	str	r0, [r5, #16]
 8016b56:	b920      	cbnz	r0, 8016b62 <_svfiprintf_r+0x2e>
 8016b58:	230c      	movs	r3, #12
 8016b5a:	603b      	str	r3, [r7, #0]
 8016b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b60:	e0d1      	b.n	8016d06 <_svfiprintf_r+0x1d2>
 8016b62:	2340      	movs	r3, #64	; 0x40
 8016b64:	616b      	str	r3, [r5, #20]
 8016b66:	2300      	movs	r3, #0
 8016b68:	9309      	str	r3, [sp, #36]	; 0x24
 8016b6a:	2320      	movs	r3, #32
 8016b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b74:	2330      	movs	r3, #48	; 0x30
 8016b76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016d20 <_svfiprintf_r+0x1ec>
 8016b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b7e:	f04f 0901 	mov.w	r9, #1
 8016b82:	4623      	mov	r3, r4
 8016b84:	469a      	mov	sl, r3
 8016b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b8a:	b10a      	cbz	r2, 8016b90 <_svfiprintf_r+0x5c>
 8016b8c:	2a25      	cmp	r2, #37	; 0x25
 8016b8e:	d1f9      	bne.n	8016b84 <_svfiprintf_r+0x50>
 8016b90:	ebba 0b04 	subs.w	fp, sl, r4
 8016b94:	d00b      	beq.n	8016bae <_svfiprintf_r+0x7a>
 8016b96:	465b      	mov	r3, fp
 8016b98:	4622      	mov	r2, r4
 8016b9a:	4629      	mov	r1, r5
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	f7ff ff6d 	bl	8016a7c <__ssputs_r>
 8016ba2:	3001      	adds	r0, #1
 8016ba4:	f000 80aa 	beq.w	8016cfc <_svfiprintf_r+0x1c8>
 8016ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016baa:	445a      	add	r2, fp
 8016bac:	9209      	str	r2, [sp, #36]	; 0x24
 8016bae:	f89a 3000 	ldrb.w	r3, [sl]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f000 80a2 	beq.w	8016cfc <_svfiprintf_r+0x1c8>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f04f 32ff 	mov.w	r2, #4294967295
 8016bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bc2:	f10a 0a01 	add.w	sl, sl, #1
 8016bc6:	9304      	str	r3, [sp, #16]
 8016bc8:	9307      	str	r3, [sp, #28]
 8016bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016bce:	931a      	str	r3, [sp, #104]	; 0x68
 8016bd0:	4654      	mov	r4, sl
 8016bd2:	2205      	movs	r2, #5
 8016bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bd8:	4851      	ldr	r0, [pc, #324]	; (8016d20 <_svfiprintf_r+0x1ec>)
 8016bda:	f7e9 fbb1 	bl	8000340 <memchr>
 8016bde:	9a04      	ldr	r2, [sp, #16]
 8016be0:	b9d8      	cbnz	r0, 8016c1a <_svfiprintf_r+0xe6>
 8016be2:	06d0      	lsls	r0, r2, #27
 8016be4:	bf44      	itt	mi
 8016be6:	2320      	movmi	r3, #32
 8016be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016bec:	0711      	lsls	r1, r2, #28
 8016bee:	bf44      	itt	mi
 8016bf0:	232b      	movmi	r3, #43	; 0x2b
 8016bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8016bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8016bfc:	d015      	beq.n	8016c2a <_svfiprintf_r+0xf6>
 8016bfe:	9a07      	ldr	r2, [sp, #28]
 8016c00:	4654      	mov	r4, sl
 8016c02:	2000      	movs	r0, #0
 8016c04:	f04f 0c0a 	mov.w	ip, #10
 8016c08:	4621      	mov	r1, r4
 8016c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c0e:	3b30      	subs	r3, #48	; 0x30
 8016c10:	2b09      	cmp	r3, #9
 8016c12:	d94e      	bls.n	8016cb2 <_svfiprintf_r+0x17e>
 8016c14:	b1b0      	cbz	r0, 8016c44 <_svfiprintf_r+0x110>
 8016c16:	9207      	str	r2, [sp, #28]
 8016c18:	e014      	b.n	8016c44 <_svfiprintf_r+0x110>
 8016c1a:	eba0 0308 	sub.w	r3, r0, r8
 8016c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8016c22:	4313      	orrs	r3, r2
 8016c24:	9304      	str	r3, [sp, #16]
 8016c26:	46a2      	mov	sl, r4
 8016c28:	e7d2      	b.n	8016bd0 <_svfiprintf_r+0x9c>
 8016c2a:	9b03      	ldr	r3, [sp, #12]
 8016c2c:	1d19      	adds	r1, r3, #4
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	9103      	str	r1, [sp, #12]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	bfbb      	ittet	lt
 8016c36:	425b      	neglt	r3, r3
 8016c38:	f042 0202 	orrlt.w	r2, r2, #2
 8016c3c:	9307      	strge	r3, [sp, #28]
 8016c3e:	9307      	strlt	r3, [sp, #28]
 8016c40:	bfb8      	it	lt
 8016c42:	9204      	strlt	r2, [sp, #16]
 8016c44:	7823      	ldrb	r3, [r4, #0]
 8016c46:	2b2e      	cmp	r3, #46	; 0x2e
 8016c48:	d10c      	bne.n	8016c64 <_svfiprintf_r+0x130>
 8016c4a:	7863      	ldrb	r3, [r4, #1]
 8016c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8016c4e:	d135      	bne.n	8016cbc <_svfiprintf_r+0x188>
 8016c50:	9b03      	ldr	r3, [sp, #12]
 8016c52:	1d1a      	adds	r2, r3, #4
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	9203      	str	r2, [sp, #12]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	bfb8      	it	lt
 8016c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c60:	3402      	adds	r4, #2
 8016c62:	9305      	str	r3, [sp, #20]
 8016c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016d30 <_svfiprintf_r+0x1fc>
 8016c68:	7821      	ldrb	r1, [r4, #0]
 8016c6a:	2203      	movs	r2, #3
 8016c6c:	4650      	mov	r0, sl
 8016c6e:	f7e9 fb67 	bl	8000340 <memchr>
 8016c72:	b140      	cbz	r0, 8016c86 <_svfiprintf_r+0x152>
 8016c74:	2340      	movs	r3, #64	; 0x40
 8016c76:	eba0 000a 	sub.w	r0, r0, sl
 8016c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8016c7e:	9b04      	ldr	r3, [sp, #16]
 8016c80:	4303      	orrs	r3, r0
 8016c82:	3401      	adds	r4, #1
 8016c84:	9304      	str	r3, [sp, #16]
 8016c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c8a:	4826      	ldr	r0, [pc, #152]	; (8016d24 <_svfiprintf_r+0x1f0>)
 8016c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c90:	2206      	movs	r2, #6
 8016c92:	f7e9 fb55 	bl	8000340 <memchr>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d038      	beq.n	8016d0c <_svfiprintf_r+0x1d8>
 8016c9a:	4b23      	ldr	r3, [pc, #140]	; (8016d28 <_svfiprintf_r+0x1f4>)
 8016c9c:	bb1b      	cbnz	r3, 8016ce6 <_svfiprintf_r+0x1b2>
 8016c9e:	9b03      	ldr	r3, [sp, #12]
 8016ca0:	3307      	adds	r3, #7
 8016ca2:	f023 0307 	bic.w	r3, r3, #7
 8016ca6:	3308      	adds	r3, #8
 8016ca8:	9303      	str	r3, [sp, #12]
 8016caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cac:	4433      	add	r3, r6
 8016cae:	9309      	str	r3, [sp, #36]	; 0x24
 8016cb0:	e767      	b.n	8016b82 <_svfiprintf_r+0x4e>
 8016cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016cb6:	460c      	mov	r4, r1
 8016cb8:	2001      	movs	r0, #1
 8016cba:	e7a5      	b.n	8016c08 <_svfiprintf_r+0xd4>
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	3401      	adds	r4, #1
 8016cc0:	9305      	str	r3, [sp, #20]
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	f04f 0c0a 	mov.w	ip, #10
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cce:	3a30      	subs	r2, #48	; 0x30
 8016cd0:	2a09      	cmp	r2, #9
 8016cd2:	d903      	bls.n	8016cdc <_svfiprintf_r+0x1a8>
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d0c5      	beq.n	8016c64 <_svfiprintf_r+0x130>
 8016cd8:	9105      	str	r1, [sp, #20]
 8016cda:	e7c3      	b.n	8016c64 <_svfiprintf_r+0x130>
 8016cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	e7f0      	b.n	8016cc8 <_svfiprintf_r+0x194>
 8016ce6:	ab03      	add	r3, sp, #12
 8016ce8:	9300      	str	r3, [sp, #0]
 8016cea:	462a      	mov	r2, r5
 8016cec:	4b0f      	ldr	r3, [pc, #60]	; (8016d2c <_svfiprintf_r+0x1f8>)
 8016cee:	a904      	add	r1, sp, #16
 8016cf0:	4638      	mov	r0, r7
 8016cf2:	f3af 8000 	nop.w
 8016cf6:	1c42      	adds	r2, r0, #1
 8016cf8:	4606      	mov	r6, r0
 8016cfa:	d1d6      	bne.n	8016caa <_svfiprintf_r+0x176>
 8016cfc:	89ab      	ldrh	r3, [r5, #12]
 8016cfe:	065b      	lsls	r3, r3, #25
 8016d00:	f53f af2c 	bmi.w	8016b5c <_svfiprintf_r+0x28>
 8016d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d06:	b01d      	add	sp, #116	; 0x74
 8016d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d0c:	ab03      	add	r3, sp, #12
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	462a      	mov	r2, r5
 8016d12:	4b06      	ldr	r3, [pc, #24]	; (8016d2c <_svfiprintf_r+0x1f8>)
 8016d14:	a904      	add	r1, sp, #16
 8016d16:	4638      	mov	r0, r7
 8016d18:	f000 f87a 	bl	8016e10 <_printf_i>
 8016d1c:	e7eb      	b.n	8016cf6 <_svfiprintf_r+0x1c2>
 8016d1e:	bf00      	nop
 8016d20:	080174e8 	.word	0x080174e8
 8016d24:	080174f2 	.word	0x080174f2
 8016d28:	00000000 	.word	0x00000000
 8016d2c:	08016a7d 	.word	0x08016a7d
 8016d30:	080174ee 	.word	0x080174ee

08016d34 <_printf_common>:
 8016d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d38:	4616      	mov	r6, r2
 8016d3a:	4699      	mov	r9, r3
 8016d3c:	688a      	ldr	r2, [r1, #8]
 8016d3e:	690b      	ldr	r3, [r1, #16]
 8016d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016d44:	4293      	cmp	r3, r2
 8016d46:	bfb8      	it	lt
 8016d48:	4613      	movlt	r3, r2
 8016d4a:	6033      	str	r3, [r6, #0]
 8016d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016d50:	4607      	mov	r7, r0
 8016d52:	460c      	mov	r4, r1
 8016d54:	b10a      	cbz	r2, 8016d5a <_printf_common+0x26>
 8016d56:	3301      	adds	r3, #1
 8016d58:	6033      	str	r3, [r6, #0]
 8016d5a:	6823      	ldr	r3, [r4, #0]
 8016d5c:	0699      	lsls	r1, r3, #26
 8016d5e:	bf42      	ittt	mi
 8016d60:	6833      	ldrmi	r3, [r6, #0]
 8016d62:	3302      	addmi	r3, #2
 8016d64:	6033      	strmi	r3, [r6, #0]
 8016d66:	6825      	ldr	r5, [r4, #0]
 8016d68:	f015 0506 	ands.w	r5, r5, #6
 8016d6c:	d106      	bne.n	8016d7c <_printf_common+0x48>
 8016d6e:	f104 0a19 	add.w	sl, r4, #25
 8016d72:	68e3      	ldr	r3, [r4, #12]
 8016d74:	6832      	ldr	r2, [r6, #0]
 8016d76:	1a9b      	subs	r3, r3, r2
 8016d78:	42ab      	cmp	r3, r5
 8016d7a:	dc26      	bgt.n	8016dca <_printf_common+0x96>
 8016d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016d80:	1e13      	subs	r3, r2, #0
 8016d82:	6822      	ldr	r2, [r4, #0]
 8016d84:	bf18      	it	ne
 8016d86:	2301      	movne	r3, #1
 8016d88:	0692      	lsls	r2, r2, #26
 8016d8a:	d42b      	bmi.n	8016de4 <_printf_common+0xb0>
 8016d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d90:	4649      	mov	r1, r9
 8016d92:	4638      	mov	r0, r7
 8016d94:	47c0      	blx	r8
 8016d96:	3001      	adds	r0, #1
 8016d98:	d01e      	beq.n	8016dd8 <_printf_common+0xa4>
 8016d9a:	6823      	ldr	r3, [r4, #0]
 8016d9c:	68e5      	ldr	r5, [r4, #12]
 8016d9e:	6832      	ldr	r2, [r6, #0]
 8016da0:	f003 0306 	and.w	r3, r3, #6
 8016da4:	2b04      	cmp	r3, #4
 8016da6:	bf08      	it	eq
 8016da8:	1aad      	subeq	r5, r5, r2
 8016daa:	68a3      	ldr	r3, [r4, #8]
 8016dac:	6922      	ldr	r2, [r4, #16]
 8016dae:	bf0c      	ite	eq
 8016db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016db4:	2500      	movne	r5, #0
 8016db6:	4293      	cmp	r3, r2
 8016db8:	bfc4      	itt	gt
 8016dba:	1a9b      	subgt	r3, r3, r2
 8016dbc:	18ed      	addgt	r5, r5, r3
 8016dbe:	2600      	movs	r6, #0
 8016dc0:	341a      	adds	r4, #26
 8016dc2:	42b5      	cmp	r5, r6
 8016dc4:	d11a      	bne.n	8016dfc <_printf_common+0xc8>
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	e008      	b.n	8016ddc <_printf_common+0xa8>
 8016dca:	2301      	movs	r3, #1
 8016dcc:	4652      	mov	r2, sl
 8016dce:	4649      	mov	r1, r9
 8016dd0:	4638      	mov	r0, r7
 8016dd2:	47c0      	blx	r8
 8016dd4:	3001      	adds	r0, #1
 8016dd6:	d103      	bne.n	8016de0 <_printf_common+0xac>
 8016dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de0:	3501      	adds	r5, #1
 8016de2:	e7c6      	b.n	8016d72 <_printf_common+0x3e>
 8016de4:	18e1      	adds	r1, r4, r3
 8016de6:	1c5a      	adds	r2, r3, #1
 8016de8:	2030      	movs	r0, #48	; 0x30
 8016dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016dee:	4422      	add	r2, r4
 8016df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016df8:	3302      	adds	r3, #2
 8016dfa:	e7c7      	b.n	8016d8c <_printf_common+0x58>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	4622      	mov	r2, r4
 8016e00:	4649      	mov	r1, r9
 8016e02:	4638      	mov	r0, r7
 8016e04:	47c0      	blx	r8
 8016e06:	3001      	adds	r0, #1
 8016e08:	d0e6      	beq.n	8016dd8 <_printf_common+0xa4>
 8016e0a:	3601      	adds	r6, #1
 8016e0c:	e7d9      	b.n	8016dc2 <_printf_common+0x8e>
	...

08016e10 <_printf_i>:
 8016e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e14:	7e0f      	ldrb	r7, [r1, #24]
 8016e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016e18:	2f78      	cmp	r7, #120	; 0x78
 8016e1a:	4691      	mov	r9, r2
 8016e1c:	4680      	mov	r8, r0
 8016e1e:	460c      	mov	r4, r1
 8016e20:	469a      	mov	sl, r3
 8016e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016e26:	d807      	bhi.n	8016e38 <_printf_i+0x28>
 8016e28:	2f62      	cmp	r7, #98	; 0x62
 8016e2a:	d80a      	bhi.n	8016e42 <_printf_i+0x32>
 8016e2c:	2f00      	cmp	r7, #0
 8016e2e:	f000 80d8 	beq.w	8016fe2 <_printf_i+0x1d2>
 8016e32:	2f58      	cmp	r7, #88	; 0x58
 8016e34:	f000 80a3 	beq.w	8016f7e <_printf_i+0x16e>
 8016e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016e40:	e03a      	b.n	8016eb8 <_printf_i+0xa8>
 8016e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016e46:	2b15      	cmp	r3, #21
 8016e48:	d8f6      	bhi.n	8016e38 <_printf_i+0x28>
 8016e4a:	a101      	add	r1, pc, #4	; (adr r1, 8016e50 <_printf_i+0x40>)
 8016e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016e50:	08016ea9 	.word	0x08016ea9
 8016e54:	08016ebd 	.word	0x08016ebd
 8016e58:	08016e39 	.word	0x08016e39
 8016e5c:	08016e39 	.word	0x08016e39
 8016e60:	08016e39 	.word	0x08016e39
 8016e64:	08016e39 	.word	0x08016e39
 8016e68:	08016ebd 	.word	0x08016ebd
 8016e6c:	08016e39 	.word	0x08016e39
 8016e70:	08016e39 	.word	0x08016e39
 8016e74:	08016e39 	.word	0x08016e39
 8016e78:	08016e39 	.word	0x08016e39
 8016e7c:	08016fc9 	.word	0x08016fc9
 8016e80:	08016eed 	.word	0x08016eed
 8016e84:	08016fab 	.word	0x08016fab
 8016e88:	08016e39 	.word	0x08016e39
 8016e8c:	08016e39 	.word	0x08016e39
 8016e90:	08016feb 	.word	0x08016feb
 8016e94:	08016e39 	.word	0x08016e39
 8016e98:	08016eed 	.word	0x08016eed
 8016e9c:	08016e39 	.word	0x08016e39
 8016ea0:	08016e39 	.word	0x08016e39
 8016ea4:	08016fb3 	.word	0x08016fb3
 8016ea8:	682b      	ldr	r3, [r5, #0]
 8016eaa:	1d1a      	adds	r2, r3, #4
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	602a      	str	r2, [r5, #0]
 8016eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016eb8:	2301      	movs	r3, #1
 8016eba:	e0a3      	b.n	8017004 <_printf_i+0x1f4>
 8016ebc:	6820      	ldr	r0, [r4, #0]
 8016ebe:	6829      	ldr	r1, [r5, #0]
 8016ec0:	0606      	lsls	r6, r0, #24
 8016ec2:	f101 0304 	add.w	r3, r1, #4
 8016ec6:	d50a      	bpl.n	8016ede <_printf_i+0xce>
 8016ec8:	680e      	ldr	r6, [r1, #0]
 8016eca:	602b      	str	r3, [r5, #0]
 8016ecc:	2e00      	cmp	r6, #0
 8016ece:	da03      	bge.n	8016ed8 <_printf_i+0xc8>
 8016ed0:	232d      	movs	r3, #45	; 0x2d
 8016ed2:	4276      	negs	r6, r6
 8016ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ed8:	485e      	ldr	r0, [pc, #376]	; (8017054 <_printf_i+0x244>)
 8016eda:	230a      	movs	r3, #10
 8016edc:	e019      	b.n	8016f12 <_printf_i+0x102>
 8016ede:	680e      	ldr	r6, [r1, #0]
 8016ee0:	602b      	str	r3, [r5, #0]
 8016ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016ee6:	bf18      	it	ne
 8016ee8:	b236      	sxthne	r6, r6
 8016eea:	e7ef      	b.n	8016ecc <_printf_i+0xbc>
 8016eec:	682b      	ldr	r3, [r5, #0]
 8016eee:	6820      	ldr	r0, [r4, #0]
 8016ef0:	1d19      	adds	r1, r3, #4
 8016ef2:	6029      	str	r1, [r5, #0]
 8016ef4:	0601      	lsls	r1, r0, #24
 8016ef6:	d501      	bpl.n	8016efc <_printf_i+0xec>
 8016ef8:	681e      	ldr	r6, [r3, #0]
 8016efa:	e002      	b.n	8016f02 <_printf_i+0xf2>
 8016efc:	0646      	lsls	r6, r0, #25
 8016efe:	d5fb      	bpl.n	8016ef8 <_printf_i+0xe8>
 8016f00:	881e      	ldrh	r6, [r3, #0]
 8016f02:	4854      	ldr	r0, [pc, #336]	; (8017054 <_printf_i+0x244>)
 8016f04:	2f6f      	cmp	r7, #111	; 0x6f
 8016f06:	bf0c      	ite	eq
 8016f08:	2308      	moveq	r3, #8
 8016f0a:	230a      	movne	r3, #10
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016f12:	6865      	ldr	r5, [r4, #4]
 8016f14:	60a5      	str	r5, [r4, #8]
 8016f16:	2d00      	cmp	r5, #0
 8016f18:	bfa2      	ittt	ge
 8016f1a:	6821      	ldrge	r1, [r4, #0]
 8016f1c:	f021 0104 	bicge.w	r1, r1, #4
 8016f20:	6021      	strge	r1, [r4, #0]
 8016f22:	b90e      	cbnz	r6, 8016f28 <_printf_i+0x118>
 8016f24:	2d00      	cmp	r5, #0
 8016f26:	d04d      	beq.n	8016fc4 <_printf_i+0x1b4>
 8016f28:	4615      	mov	r5, r2
 8016f2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8016f2e:	fb03 6711 	mls	r7, r3, r1, r6
 8016f32:	5dc7      	ldrb	r7, [r0, r7]
 8016f34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016f38:	4637      	mov	r7, r6
 8016f3a:	42bb      	cmp	r3, r7
 8016f3c:	460e      	mov	r6, r1
 8016f3e:	d9f4      	bls.n	8016f2a <_printf_i+0x11a>
 8016f40:	2b08      	cmp	r3, #8
 8016f42:	d10b      	bne.n	8016f5c <_printf_i+0x14c>
 8016f44:	6823      	ldr	r3, [r4, #0]
 8016f46:	07de      	lsls	r6, r3, #31
 8016f48:	d508      	bpl.n	8016f5c <_printf_i+0x14c>
 8016f4a:	6923      	ldr	r3, [r4, #16]
 8016f4c:	6861      	ldr	r1, [r4, #4]
 8016f4e:	4299      	cmp	r1, r3
 8016f50:	bfde      	ittt	le
 8016f52:	2330      	movle	r3, #48	; 0x30
 8016f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016f58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016f5c:	1b52      	subs	r2, r2, r5
 8016f5e:	6122      	str	r2, [r4, #16]
 8016f60:	f8cd a000 	str.w	sl, [sp]
 8016f64:	464b      	mov	r3, r9
 8016f66:	aa03      	add	r2, sp, #12
 8016f68:	4621      	mov	r1, r4
 8016f6a:	4640      	mov	r0, r8
 8016f6c:	f7ff fee2 	bl	8016d34 <_printf_common>
 8016f70:	3001      	adds	r0, #1
 8016f72:	d14c      	bne.n	801700e <_printf_i+0x1fe>
 8016f74:	f04f 30ff 	mov.w	r0, #4294967295
 8016f78:	b004      	add	sp, #16
 8016f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f7e:	4835      	ldr	r0, [pc, #212]	; (8017054 <_printf_i+0x244>)
 8016f80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016f84:	6829      	ldr	r1, [r5, #0]
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8016f8c:	6029      	str	r1, [r5, #0]
 8016f8e:	061d      	lsls	r5, r3, #24
 8016f90:	d514      	bpl.n	8016fbc <_printf_i+0x1ac>
 8016f92:	07df      	lsls	r7, r3, #31
 8016f94:	bf44      	itt	mi
 8016f96:	f043 0320 	orrmi.w	r3, r3, #32
 8016f9a:	6023      	strmi	r3, [r4, #0]
 8016f9c:	b91e      	cbnz	r6, 8016fa6 <_printf_i+0x196>
 8016f9e:	6823      	ldr	r3, [r4, #0]
 8016fa0:	f023 0320 	bic.w	r3, r3, #32
 8016fa4:	6023      	str	r3, [r4, #0]
 8016fa6:	2310      	movs	r3, #16
 8016fa8:	e7b0      	b.n	8016f0c <_printf_i+0xfc>
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	f043 0320 	orr.w	r3, r3, #32
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	2378      	movs	r3, #120	; 0x78
 8016fb4:	4828      	ldr	r0, [pc, #160]	; (8017058 <_printf_i+0x248>)
 8016fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016fba:	e7e3      	b.n	8016f84 <_printf_i+0x174>
 8016fbc:	0659      	lsls	r1, r3, #25
 8016fbe:	bf48      	it	mi
 8016fc0:	b2b6      	uxthmi	r6, r6
 8016fc2:	e7e6      	b.n	8016f92 <_printf_i+0x182>
 8016fc4:	4615      	mov	r5, r2
 8016fc6:	e7bb      	b.n	8016f40 <_printf_i+0x130>
 8016fc8:	682b      	ldr	r3, [r5, #0]
 8016fca:	6826      	ldr	r6, [r4, #0]
 8016fcc:	6961      	ldr	r1, [r4, #20]
 8016fce:	1d18      	adds	r0, r3, #4
 8016fd0:	6028      	str	r0, [r5, #0]
 8016fd2:	0635      	lsls	r5, r6, #24
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	d501      	bpl.n	8016fdc <_printf_i+0x1cc>
 8016fd8:	6019      	str	r1, [r3, #0]
 8016fda:	e002      	b.n	8016fe2 <_printf_i+0x1d2>
 8016fdc:	0670      	lsls	r0, r6, #25
 8016fde:	d5fb      	bpl.n	8016fd8 <_printf_i+0x1c8>
 8016fe0:	8019      	strh	r1, [r3, #0]
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	6123      	str	r3, [r4, #16]
 8016fe6:	4615      	mov	r5, r2
 8016fe8:	e7ba      	b.n	8016f60 <_printf_i+0x150>
 8016fea:	682b      	ldr	r3, [r5, #0]
 8016fec:	1d1a      	adds	r2, r3, #4
 8016fee:	602a      	str	r2, [r5, #0]
 8016ff0:	681d      	ldr	r5, [r3, #0]
 8016ff2:	6862      	ldr	r2, [r4, #4]
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f7e9 f9a2 	bl	8000340 <memchr>
 8016ffc:	b108      	cbz	r0, 8017002 <_printf_i+0x1f2>
 8016ffe:	1b40      	subs	r0, r0, r5
 8017000:	6060      	str	r0, [r4, #4]
 8017002:	6863      	ldr	r3, [r4, #4]
 8017004:	6123      	str	r3, [r4, #16]
 8017006:	2300      	movs	r3, #0
 8017008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801700c:	e7a8      	b.n	8016f60 <_printf_i+0x150>
 801700e:	6923      	ldr	r3, [r4, #16]
 8017010:	462a      	mov	r2, r5
 8017012:	4649      	mov	r1, r9
 8017014:	4640      	mov	r0, r8
 8017016:	47d0      	blx	sl
 8017018:	3001      	adds	r0, #1
 801701a:	d0ab      	beq.n	8016f74 <_printf_i+0x164>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	079b      	lsls	r3, r3, #30
 8017020:	d413      	bmi.n	801704a <_printf_i+0x23a>
 8017022:	68e0      	ldr	r0, [r4, #12]
 8017024:	9b03      	ldr	r3, [sp, #12]
 8017026:	4298      	cmp	r0, r3
 8017028:	bfb8      	it	lt
 801702a:	4618      	movlt	r0, r3
 801702c:	e7a4      	b.n	8016f78 <_printf_i+0x168>
 801702e:	2301      	movs	r3, #1
 8017030:	4632      	mov	r2, r6
 8017032:	4649      	mov	r1, r9
 8017034:	4640      	mov	r0, r8
 8017036:	47d0      	blx	sl
 8017038:	3001      	adds	r0, #1
 801703a:	d09b      	beq.n	8016f74 <_printf_i+0x164>
 801703c:	3501      	adds	r5, #1
 801703e:	68e3      	ldr	r3, [r4, #12]
 8017040:	9903      	ldr	r1, [sp, #12]
 8017042:	1a5b      	subs	r3, r3, r1
 8017044:	42ab      	cmp	r3, r5
 8017046:	dcf2      	bgt.n	801702e <_printf_i+0x21e>
 8017048:	e7eb      	b.n	8017022 <_printf_i+0x212>
 801704a:	2500      	movs	r5, #0
 801704c:	f104 0619 	add.w	r6, r4, #25
 8017050:	e7f5      	b.n	801703e <_printf_i+0x22e>
 8017052:	bf00      	nop
 8017054:	080174f9 	.word	0x080174f9
 8017058:	0801750a 	.word	0x0801750a

0801705c <memmove>:
 801705c:	4288      	cmp	r0, r1
 801705e:	b510      	push	{r4, lr}
 8017060:	eb01 0402 	add.w	r4, r1, r2
 8017064:	d902      	bls.n	801706c <memmove+0x10>
 8017066:	4284      	cmp	r4, r0
 8017068:	4623      	mov	r3, r4
 801706a:	d807      	bhi.n	801707c <memmove+0x20>
 801706c:	1e43      	subs	r3, r0, #1
 801706e:	42a1      	cmp	r1, r4
 8017070:	d008      	beq.n	8017084 <memmove+0x28>
 8017072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017076:	f803 2f01 	strb.w	r2, [r3, #1]!
 801707a:	e7f8      	b.n	801706e <memmove+0x12>
 801707c:	4402      	add	r2, r0
 801707e:	4601      	mov	r1, r0
 8017080:	428a      	cmp	r2, r1
 8017082:	d100      	bne.n	8017086 <memmove+0x2a>
 8017084:	bd10      	pop	{r4, pc}
 8017086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801708a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801708e:	e7f7      	b.n	8017080 <memmove+0x24>

08017090 <_free_r>:
 8017090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017092:	2900      	cmp	r1, #0
 8017094:	d044      	beq.n	8017120 <_free_r+0x90>
 8017096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801709a:	9001      	str	r0, [sp, #4]
 801709c:	2b00      	cmp	r3, #0
 801709e:	f1a1 0404 	sub.w	r4, r1, #4
 80170a2:	bfb8      	it	lt
 80170a4:	18e4      	addlt	r4, r4, r3
 80170a6:	f000 f913 	bl	80172d0 <__malloc_lock>
 80170aa:	4a1e      	ldr	r2, [pc, #120]	; (8017124 <_free_r+0x94>)
 80170ac:	9801      	ldr	r0, [sp, #4]
 80170ae:	6813      	ldr	r3, [r2, #0]
 80170b0:	b933      	cbnz	r3, 80170c0 <_free_r+0x30>
 80170b2:	6063      	str	r3, [r4, #4]
 80170b4:	6014      	str	r4, [r2, #0]
 80170b6:	b003      	add	sp, #12
 80170b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170bc:	f000 b90e 	b.w	80172dc <__malloc_unlock>
 80170c0:	42a3      	cmp	r3, r4
 80170c2:	d908      	bls.n	80170d6 <_free_r+0x46>
 80170c4:	6825      	ldr	r5, [r4, #0]
 80170c6:	1961      	adds	r1, r4, r5
 80170c8:	428b      	cmp	r3, r1
 80170ca:	bf01      	itttt	eq
 80170cc:	6819      	ldreq	r1, [r3, #0]
 80170ce:	685b      	ldreq	r3, [r3, #4]
 80170d0:	1949      	addeq	r1, r1, r5
 80170d2:	6021      	streq	r1, [r4, #0]
 80170d4:	e7ed      	b.n	80170b2 <_free_r+0x22>
 80170d6:	461a      	mov	r2, r3
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	b10b      	cbz	r3, 80170e0 <_free_r+0x50>
 80170dc:	42a3      	cmp	r3, r4
 80170de:	d9fa      	bls.n	80170d6 <_free_r+0x46>
 80170e0:	6811      	ldr	r1, [r2, #0]
 80170e2:	1855      	adds	r5, r2, r1
 80170e4:	42a5      	cmp	r5, r4
 80170e6:	d10b      	bne.n	8017100 <_free_r+0x70>
 80170e8:	6824      	ldr	r4, [r4, #0]
 80170ea:	4421      	add	r1, r4
 80170ec:	1854      	adds	r4, r2, r1
 80170ee:	42a3      	cmp	r3, r4
 80170f0:	6011      	str	r1, [r2, #0]
 80170f2:	d1e0      	bne.n	80170b6 <_free_r+0x26>
 80170f4:	681c      	ldr	r4, [r3, #0]
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	6053      	str	r3, [r2, #4]
 80170fa:	4421      	add	r1, r4
 80170fc:	6011      	str	r1, [r2, #0]
 80170fe:	e7da      	b.n	80170b6 <_free_r+0x26>
 8017100:	d902      	bls.n	8017108 <_free_r+0x78>
 8017102:	230c      	movs	r3, #12
 8017104:	6003      	str	r3, [r0, #0]
 8017106:	e7d6      	b.n	80170b6 <_free_r+0x26>
 8017108:	6825      	ldr	r5, [r4, #0]
 801710a:	1961      	adds	r1, r4, r5
 801710c:	428b      	cmp	r3, r1
 801710e:	bf04      	itt	eq
 8017110:	6819      	ldreq	r1, [r3, #0]
 8017112:	685b      	ldreq	r3, [r3, #4]
 8017114:	6063      	str	r3, [r4, #4]
 8017116:	bf04      	itt	eq
 8017118:	1949      	addeq	r1, r1, r5
 801711a:	6021      	streq	r1, [r4, #0]
 801711c:	6054      	str	r4, [r2, #4]
 801711e:	e7ca      	b.n	80170b6 <_free_r+0x26>
 8017120:	b003      	add	sp, #12
 8017122:	bd30      	pop	{r4, r5, pc}
 8017124:	240030c0 	.word	0x240030c0

08017128 <sbrk_aligned>:
 8017128:	b570      	push	{r4, r5, r6, lr}
 801712a:	4e0e      	ldr	r6, [pc, #56]	; (8017164 <sbrk_aligned+0x3c>)
 801712c:	460c      	mov	r4, r1
 801712e:	6831      	ldr	r1, [r6, #0]
 8017130:	4605      	mov	r5, r0
 8017132:	b911      	cbnz	r1, 801713a <sbrk_aligned+0x12>
 8017134:	f000 f8bc 	bl	80172b0 <_sbrk_r>
 8017138:	6030      	str	r0, [r6, #0]
 801713a:	4621      	mov	r1, r4
 801713c:	4628      	mov	r0, r5
 801713e:	f000 f8b7 	bl	80172b0 <_sbrk_r>
 8017142:	1c43      	adds	r3, r0, #1
 8017144:	d00a      	beq.n	801715c <sbrk_aligned+0x34>
 8017146:	1cc4      	adds	r4, r0, #3
 8017148:	f024 0403 	bic.w	r4, r4, #3
 801714c:	42a0      	cmp	r0, r4
 801714e:	d007      	beq.n	8017160 <sbrk_aligned+0x38>
 8017150:	1a21      	subs	r1, r4, r0
 8017152:	4628      	mov	r0, r5
 8017154:	f000 f8ac 	bl	80172b0 <_sbrk_r>
 8017158:	3001      	adds	r0, #1
 801715a:	d101      	bne.n	8017160 <sbrk_aligned+0x38>
 801715c:	f04f 34ff 	mov.w	r4, #4294967295
 8017160:	4620      	mov	r0, r4
 8017162:	bd70      	pop	{r4, r5, r6, pc}
 8017164:	240030c4 	.word	0x240030c4

08017168 <_malloc_r>:
 8017168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801716c:	1ccd      	adds	r5, r1, #3
 801716e:	f025 0503 	bic.w	r5, r5, #3
 8017172:	3508      	adds	r5, #8
 8017174:	2d0c      	cmp	r5, #12
 8017176:	bf38      	it	cc
 8017178:	250c      	movcc	r5, #12
 801717a:	2d00      	cmp	r5, #0
 801717c:	4607      	mov	r7, r0
 801717e:	db01      	blt.n	8017184 <_malloc_r+0x1c>
 8017180:	42a9      	cmp	r1, r5
 8017182:	d905      	bls.n	8017190 <_malloc_r+0x28>
 8017184:	230c      	movs	r3, #12
 8017186:	603b      	str	r3, [r7, #0]
 8017188:	2600      	movs	r6, #0
 801718a:	4630      	mov	r0, r6
 801718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017190:	4e2e      	ldr	r6, [pc, #184]	; (801724c <_malloc_r+0xe4>)
 8017192:	f000 f89d 	bl	80172d0 <__malloc_lock>
 8017196:	6833      	ldr	r3, [r6, #0]
 8017198:	461c      	mov	r4, r3
 801719a:	bb34      	cbnz	r4, 80171ea <_malloc_r+0x82>
 801719c:	4629      	mov	r1, r5
 801719e:	4638      	mov	r0, r7
 80171a0:	f7ff ffc2 	bl	8017128 <sbrk_aligned>
 80171a4:	1c43      	adds	r3, r0, #1
 80171a6:	4604      	mov	r4, r0
 80171a8:	d14d      	bne.n	8017246 <_malloc_r+0xde>
 80171aa:	6834      	ldr	r4, [r6, #0]
 80171ac:	4626      	mov	r6, r4
 80171ae:	2e00      	cmp	r6, #0
 80171b0:	d140      	bne.n	8017234 <_malloc_r+0xcc>
 80171b2:	6823      	ldr	r3, [r4, #0]
 80171b4:	4631      	mov	r1, r6
 80171b6:	4638      	mov	r0, r7
 80171b8:	eb04 0803 	add.w	r8, r4, r3
 80171bc:	f000 f878 	bl	80172b0 <_sbrk_r>
 80171c0:	4580      	cmp	r8, r0
 80171c2:	d13a      	bne.n	801723a <_malloc_r+0xd2>
 80171c4:	6821      	ldr	r1, [r4, #0]
 80171c6:	3503      	adds	r5, #3
 80171c8:	1a6d      	subs	r5, r5, r1
 80171ca:	f025 0503 	bic.w	r5, r5, #3
 80171ce:	3508      	adds	r5, #8
 80171d0:	2d0c      	cmp	r5, #12
 80171d2:	bf38      	it	cc
 80171d4:	250c      	movcc	r5, #12
 80171d6:	4629      	mov	r1, r5
 80171d8:	4638      	mov	r0, r7
 80171da:	f7ff ffa5 	bl	8017128 <sbrk_aligned>
 80171de:	3001      	adds	r0, #1
 80171e0:	d02b      	beq.n	801723a <_malloc_r+0xd2>
 80171e2:	6823      	ldr	r3, [r4, #0]
 80171e4:	442b      	add	r3, r5
 80171e6:	6023      	str	r3, [r4, #0]
 80171e8:	e00e      	b.n	8017208 <_malloc_r+0xa0>
 80171ea:	6822      	ldr	r2, [r4, #0]
 80171ec:	1b52      	subs	r2, r2, r5
 80171ee:	d41e      	bmi.n	801722e <_malloc_r+0xc6>
 80171f0:	2a0b      	cmp	r2, #11
 80171f2:	d916      	bls.n	8017222 <_malloc_r+0xba>
 80171f4:	1961      	adds	r1, r4, r5
 80171f6:	42a3      	cmp	r3, r4
 80171f8:	6025      	str	r5, [r4, #0]
 80171fa:	bf18      	it	ne
 80171fc:	6059      	strne	r1, [r3, #4]
 80171fe:	6863      	ldr	r3, [r4, #4]
 8017200:	bf08      	it	eq
 8017202:	6031      	streq	r1, [r6, #0]
 8017204:	5162      	str	r2, [r4, r5]
 8017206:	604b      	str	r3, [r1, #4]
 8017208:	4638      	mov	r0, r7
 801720a:	f104 060b 	add.w	r6, r4, #11
 801720e:	f000 f865 	bl	80172dc <__malloc_unlock>
 8017212:	f026 0607 	bic.w	r6, r6, #7
 8017216:	1d23      	adds	r3, r4, #4
 8017218:	1af2      	subs	r2, r6, r3
 801721a:	d0b6      	beq.n	801718a <_malloc_r+0x22>
 801721c:	1b9b      	subs	r3, r3, r6
 801721e:	50a3      	str	r3, [r4, r2]
 8017220:	e7b3      	b.n	801718a <_malloc_r+0x22>
 8017222:	6862      	ldr	r2, [r4, #4]
 8017224:	42a3      	cmp	r3, r4
 8017226:	bf0c      	ite	eq
 8017228:	6032      	streq	r2, [r6, #0]
 801722a:	605a      	strne	r2, [r3, #4]
 801722c:	e7ec      	b.n	8017208 <_malloc_r+0xa0>
 801722e:	4623      	mov	r3, r4
 8017230:	6864      	ldr	r4, [r4, #4]
 8017232:	e7b2      	b.n	801719a <_malloc_r+0x32>
 8017234:	4634      	mov	r4, r6
 8017236:	6876      	ldr	r6, [r6, #4]
 8017238:	e7b9      	b.n	80171ae <_malloc_r+0x46>
 801723a:	230c      	movs	r3, #12
 801723c:	603b      	str	r3, [r7, #0]
 801723e:	4638      	mov	r0, r7
 8017240:	f000 f84c 	bl	80172dc <__malloc_unlock>
 8017244:	e7a1      	b.n	801718a <_malloc_r+0x22>
 8017246:	6025      	str	r5, [r4, #0]
 8017248:	e7de      	b.n	8017208 <_malloc_r+0xa0>
 801724a:	bf00      	nop
 801724c:	240030c0 	.word	0x240030c0

08017250 <_realloc_r>:
 8017250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017254:	4680      	mov	r8, r0
 8017256:	4614      	mov	r4, r2
 8017258:	460e      	mov	r6, r1
 801725a:	b921      	cbnz	r1, 8017266 <_realloc_r+0x16>
 801725c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017260:	4611      	mov	r1, r2
 8017262:	f7ff bf81 	b.w	8017168 <_malloc_r>
 8017266:	b92a      	cbnz	r2, 8017274 <_realloc_r+0x24>
 8017268:	f7ff ff12 	bl	8017090 <_free_r>
 801726c:	4625      	mov	r5, r4
 801726e:	4628      	mov	r0, r5
 8017270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017274:	f000 f838 	bl	80172e8 <_malloc_usable_size_r>
 8017278:	4284      	cmp	r4, r0
 801727a:	4607      	mov	r7, r0
 801727c:	d802      	bhi.n	8017284 <_realloc_r+0x34>
 801727e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017282:	d812      	bhi.n	80172aa <_realloc_r+0x5a>
 8017284:	4621      	mov	r1, r4
 8017286:	4640      	mov	r0, r8
 8017288:	f7ff ff6e 	bl	8017168 <_malloc_r>
 801728c:	4605      	mov	r5, r0
 801728e:	2800      	cmp	r0, #0
 8017290:	d0ed      	beq.n	801726e <_realloc_r+0x1e>
 8017292:	42bc      	cmp	r4, r7
 8017294:	4622      	mov	r2, r4
 8017296:	4631      	mov	r1, r6
 8017298:	bf28      	it	cs
 801729a:	463a      	movcs	r2, r7
 801729c:	f7ff fbb8 	bl	8016a10 <memcpy>
 80172a0:	4631      	mov	r1, r6
 80172a2:	4640      	mov	r0, r8
 80172a4:	f7ff fef4 	bl	8017090 <_free_r>
 80172a8:	e7e1      	b.n	801726e <_realloc_r+0x1e>
 80172aa:	4635      	mov	r5, r6
 80172ac:	e7df      	b.n	801726e <_realloc_r+0x1e>
	...

080172b0 <_sbrk_r>:
 80172b0:	b538      	push	{r3, r4, r5, lr}
 80172b2:	4d06      	ldr	r5, [pc, #24]	; (80172cc <_sbrk_r+0x1c>)
 80172b4:	2300      	movs	r3, #0
 80172b6:	4604      	mov	r4, r0
 80172b8:	4608      	mov	r0, r1
 80172ba:	602b      	str	r3, [r5, #0]
 80172bc:	f7eb ffa0 	bl	8003200 <_sbrk>
 80172c0:	1c43      	adds	r3, r0, #1
 80172c2:	d102      	bne.n	80172ca <_sbrk_r+0x1a>
 80172c4:	682b      	ldr	r3, [r5, #0]
 80172c6:	b103      	cbz	r3, 80172ca <_sbrk_r+0x1a>
 80172c8:	6023      	str	r3, [r4, #0]
 80172ca:	bd38      	pop	{r3, r4, r5, pc}
 80172cc:	240030c8 	.word	0x240030c8

080172d0 <__malloc_lock>:
 80172d0:	4801      	ldr	r0, [pc, #4]	; (80172d8 <__malloc_lock+0x8>)
 80172d2:	f000 b811 	b.w	80172f8 <__retarget_lock_acquire_recursive>
 80172d6:	bf00      	nop
 80172d8:	240030cc 	.word	0x240030cc

080172dc <__malloc_unlock>:
 80172dc:	4801      	ldr	r0, [pc, #4]	; (80172e4 <__malloc_unlock+0x8>)
 80172de:	f000 b80c 	b.w	80172fa <__retarget_lock_release_recursive>
 80172e2:	bf00      	nop
 80172e4:	240030cc 	.word	0x240030cc

080172e8 <_malloc_usable_size_r>:
 80172e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172ec:	1f18      	subs	r0, r3, #4
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	bfbc      	itt	lt
 80172f2:	580b      	ldrlt	r3, [r1, r0]
 80172f4:	18c0      	addlt	r0, r0, r3
 80172f6:	4770      	bx	lr

080172f8 <__retarget_lock_acquire_recursive>:
 80172f8:	4770      	bx	lr

080172fa <__retarget_lock_release_recursive>:
 80172fa:	4770      	bx	lr

080172fc <_init>:
 80172fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172fe:	bf00      	nop
 8017300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017302:	bc08      	pop	{r3}
 8017304:	469e      	mov	lr, r3
 8017306:	4770      	bx	lr

08017308 <_fini>:
 8017308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801730a:	bf00      	nop
 801730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801730e:	bc08      	pop	{r3}
 8017310:	469e      	mov	lr, r3
 8017312:	4770      	bx	lr
